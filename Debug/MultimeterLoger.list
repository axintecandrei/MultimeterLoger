
MultimeterLoger.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007068  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  080071fc  080071fc  000171fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007254  08007254  000201e4  2**0
                  CONTENTS
  4 .ARM          00000008  08007254  08007254  00017254  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800725c  0800725c  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800725c  0800725c  0001725c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007260  08007260  00017260  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  08007264  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000c600  200001e4  08007448  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000804  2000c7e4  08007448  0002c7e4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014fb5  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003065  00000000  00000000  000351c9  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000c20  00000000  00000000  00038230  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000ab8  00000000  00000000  00038e50  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00019c88  00000000  00000000  00039908  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000df92  00000000  00000000  00053590  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00091c59  00000000  00000000  00061522  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000f317b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003100  00000000  00000000  000f31f8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	200001e4 	.word	0x200001e4
 80001b0:	00000000 	.word	0x00000000
 80001b4:	080071e4 	.word	0x080071e4

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	200001e8 	.word	0x200001e8
 80001d0:	080071e4 	.word	0x080071e4

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295
 80001e8:	f000 b972 	b.w	80004d0 <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	9e08      	ldr	r6, [sp, #32]
 800020a:	4604      	mov	r4, r0
 800020c:	4688      	mov	r8, r1
 800020e:	2b00      	cmp	r3, #0
 8000210:	d14b      	bne.n	80002aa <__udivmoddi4+0xa6>
 8000212:	428a      	cmp	r2, r1
 8000214:	4615      	mov	r5, r2
 8000216:	d967      	bls.n	80002e8 <__udivmoddi4+0xe4>
 8000218:	fab2 f282 	clz	r2, r2
 800021c:	b14a      	cbz	r2, 8000232 <__udivmoddi4+0x2e>
 800021e:	f1c2 0720 	rsb	r7, r2, #32
 8000222:	fa01 f302 	lsl.w	r3, r1, r2
 8000226:	fa20 f707 	lsr.w	r7, r0, r7
 800022a:	4095      	lsls	r5, r2
 800022c:	ea47 0803 	orr.w	r8, r7, r3
 8000230:	4094      	lsls	r4, r2
 8000232:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000236:	0c23      	lsrs	r3, r4, #16
 8000238:	fbb8 f7fe 	udiv	r7, r8, lr
 800023c:	fa1f fc85 	uxth.w	ip, r5
 8000240:	fb0e 8817 	mls	r8, lr, r7, r8
 8000244:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000248:	fb07 f10c 	mul.w	r1, r7, ip
 800024c:	4299      	cmp	r1, r3
 800024e:	d909      	bls.n	8000264 <__udivmoddi4+0x60>
 8000250:	18eb      	adds	r3, r5, r3
 8000252:	f107 30ff 	add.w	r0, r7, #4294967295
 8000256:	f080 811b 	bcs.w	8000490 <__udivmoddi4+0x28c>
 800025a:	4299      	cmp	r1, r3
 800025c:	f240 8118 	bls.w	8000490 <__udivmoddi4+0x28c>
 8000260:	3f02      	subs	r7, #2
 8000262:	442b      	add	r3, r5
 8000264:	1a5b      	subs	r3, r3, r1
 8000266:	b2a4      	uxth	r4, r4
 8000268:	fbb3 f0fe 	udiv	r0, r3, lr
 800026c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000270:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000274:	fb00 fc0c 	mul.w	ip, r0, ip
 8000278:	45a4      	cmp	ip, r4
 800027a:	d909      	bls.n	8000290 <__udivmoddi4+0x8c>
 800027c:	192c      	adds	r4, r5, r4
 800027e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000282:	f080 8107 	bcs.w	8000494 <__udivmoddi4+0x290>
 8000286:	45a4      	cmp	ip, r4
 8000288:	f240 8104 	bls.w	8000494 <__udivmoddi4+0x290>
 800028c:	3802      	subs	r0, #2
 800028e:	442c      	add	r4, r5
 8000290:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000294:	eba4 040c 	sub.w	r4, r4, ip
 8000298:	2700      	movs	r7, #0
 800029a:	b11e      	cbz	r6, 80002a4 <__udivmoddi4+0xa0>
 800029c:	40d4      	lsrs	r4, r2
 800029e:	2300      	movs	r3, #0
 80002a0:	e9c6 4300 	strd	r4, r3, [r6]
 80002a4:	4639      	mov	r1, r7
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d909      	bls.n	80002c2 <__udivmoddi4+0xbe>
 80002ae:	2e00      	cmp	r6, #0
 80002b0:	f000 80eb 	beq.w	800048a <__udivmoddi4+0x286>
 80002b4:	2700      	movs	r7, #0
 80002b6:	e9c6 0100 	strd	r0, r1, [r6]
 80002ba:	4638      	mov	r0, r7
 80002bc:	4639      	mov	r1, r7
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	fab3 f783 	clz	r7, r3
 80002c6:	2f00      	cmp	r7, #0
 80002c8:	d147      	bne.n	800035a <__udivmoddi4+0x156>
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xd0>
 80002ce:	4282      	cmp	r2, r0
 80002d0:	f200 80fa 	bhi.w	80004c8 <__udivmoddi4+0x2c4>
 80002d4:	1a84      	subs	r4, r0, r2
 80002d6:	eb61 0303 	sbc.w	r3, r1, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	4698      	mov	r8, r3
 80002de:	2e00      	cmp	r6, #0
 80002e0:	d0e0      	beq.n	80002a4 <__udivmoddi4+0xa0>
 80002e2:	e9c6 4800 	strd	r4, r8, [r6]
 80002e6:	e7dd      	b.n	80002a4 <__udivmoddi4+0xa0>
 80002e8:	b902      	cbnz	r2, 80002ec <__udivmoddi4+0xe8>
 80002ea:	deff      	udf	#255	; 0xff
 80002ec:	fab2 f282 	clz	r2, r2
 80002f0:	2a00      	cmp	r2, #0
 80002f2:	f040 808f 	bne.w	8000414 <__udivmoddi4+0x210>
 80002f6:	1b49      	subs	r1, r1, r5
 80002f8:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002fc:	fa1f f885 	uxth.w	r8, r5
 8000300:	2701      	movs	r7, #1
 8000302:	fbb1 fcfe 	udiv	ip, r1, lr
 8000306:	0c23      	lsrs	r3, r4, #16
 8000308:	fb0e 111c 	mls	r1, lr, ip, r1
 800030c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000310:	fb08 f10c 	mul.w	r1, r8, ip
 8000314:	4299      	cmp	r1, r3
 8000316:	d907      	bls.n	8000328 <__udivmoddi4+0x124>
 8000318:	18eb      	adds	r3, r5, r3
 800031a:	f10c 30ff 	add.w	r0, ip, #4294967295
 800031e:	d202      	bcs.n	8000326 <__udivmoddi4+0x122>
 8000320:	4299      	cmp	r1, r3
 8000322:	f200 80cd 	bhi.w	80004c0 <__udivmoddi4+0x2bc>
 8000326:	4684      	mov	ip, r0
 8000328:	1a59      	subs	r1, r3, r1
 800032a:	b2a3      	uxth	r3, r4
 800032c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000330:	fb0e 1410 	mls	r4, lr, r0, r1
 8000334:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000338:	fb08 f800 	mul.w	r8, r8, r0
 800033c:	45a0      	cmp	r8, r4
 800033e:	d907      	bls.n	8000350 <__udivmoddi4+0x14c>
 8000340:	192c      	adds	r4, r5, r4
 8000342:	f100 33ff 	add.w	r3, r0, #4294967295
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x14a>
 8000348:	45a0      	cmp	r8, r4
 800034a:	f200 80b6 	bhi.w	80004ba <__udivmoddi4+0x2b6>
 800034e:	4618      	mov	r0, r3
 8000350:	eba4 0408 	sub.w	r4, r4, r8
 8000354:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000358:	e79f      	b.n	800029a <__udivmoddi4+0x96>
 800035a:	f1c7 0c20 	rsb	ip, r7, #32
 800035e:	40bb      	lsls	r3, r7
 8000360:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000364:	ea4e 0e03 	orr.w	lr, lr, r3
 8000368:	fa01 f407 	lsl.w	r4, r1, r7
 800036c:	fa20 f50c 	lsr.w	r5, r0, ip
 8000370:	fa21 f30c 	lsr.w	r3, r1, ip
 8000374:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000378:	4325      	orrs	r5, r4
 800037a:	fbb3 f9f8 	udiv	r9, r3, r8
 800037e:	0c2c      	lsrs	r4, r5, #16
 8000380:	fb08 3319 	mls	r3, r8, r9, r3
 8000384:	fa1f fa8e 	uxth.w	sl, lr
 8000388:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 800038c:	fb09 f40a 	mul.w	r4, r9, sl
 8000390:	429c      	cmp	r4, r3
 8000392:	fa02 f207 	lsl.w	r2, r2, r7
 8000396:	fa00 f107 	lsl.w	r1, r0, r7
 800039a:	d90b      	bls.n	80003b4 <__udivmoddi4+0x1b0>
 800039c:	eb1e 0303 	adds.w	r3, lr, r3
 80003a0:	f109 30ff 	add.w	r0, r9, #4294967295
 80003a4:	f080 8087 	bcs.w	80004b6 <__udivmoddi4+0x2b2>
 80003a8:	429c      	cmp	r4, r3
 80003aa:	f240 8084 	bls.w	80004b6 <__udivmoddi4+0x2b2>
 80003ae:	f1a9 0902 	sub.w	r9, r9, #2
 80003b2:	4473      	add	r3, lr
 80003b4:	1b1b      	subs	r3, r3, r4
 80003b6:	b2ad      	uxth	r5, r5
 80003b8:	fbb3 f0f8 	udiv	r0, r3, r8
 80003bc:	fb08 3310 	mls	r3, r8, r0, r3
 80003c0:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003c4:	fb00 fa0a 	mul.w	sl, r0, sl
 80003c8:	45a2      	cmp	sl, r4
 80003ca:	d908      	bls.n	80003de <__udivmoddi4+0x1da>
 80003cc:	eb1e 0404 	adds.w	r4, lr, r4
 80003d0:	f100 33ff 	add.w	r3, r0, #4294967295
 80003d4:	d26b      	bcs.n	80004ae <__udivmoddi4+0x2aa>
 80003d6:	45a2      	cmp	sl, r4
 80003d8:	d969      	bls.n	80004ae <__udivmoddi4+0x2aa>
 80003da:	3802      	subs	r0, #2
 80003dc:	4474      	add	r4, lr
 80003de:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003e2:	fba0 8902 	umull	r8, r9, r0, r2
 80003e6:	eba4 040a 	sub.w	r4, r4, sl
 80003ea:	454c      	cmp	r4, r9
 80003ec:	46c2      	mov	sl, r8
 80003ee:	464b      	mov	r3, r9
 80003f0:	d354      	bcc.n	800049c <__udivmoddi4+0x298>
 80003f2:	d051      	beq.n	8000498 <__udivmoddi4+0x294>
 80003f4:	2e00      	cmp	r6, #0
 80003f6:	d069      	beq.n	80004cc <__udivmoddi4+0x2c8>
 80003f8:	ebb1 050a 	subs.w	r5, r1, sl
 80003fc:	eb64 0403 	sbc.w	r4, r4, r3
 8000400:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000404:	40fd      	lsrs	r5, r7
 8000406:	40fc      	lsrs	r4, r7
 8000408:	ea4c 0505 	orr.w	r5, ip, r5
 800040c:	e9c6 5400 	strd	r5, r4, [r6]
 8000410:	2700      	movs	r7, #0
 8000412:	e747      	b.n	80002a4 <__udivmoddi4+0xa0>
 8000414:	f1c2 0320 	rsb	r3, r2, #32
 8000418:	fa20 f703 	lsr.w	r7, r0, r3
 800041c:	4095      	lsls	r5, r2
 800041e:	fa01 f002 	lsl.w	r0, r1, r2
 8000422:	fa21 f303 	lsr.w	r3, r1, r3
 8000426:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800042a:	4338      	orrs	r0, r7
 800042c:	0c01      	lsrs	r1, r0, #16
 800042e:	fbb3 f7fe 	udiv	r7, r3, lr
 8000432:	fa1f f885 	uxth.w	r8, r5
 8000436:	fb0e 3317 	mls	r3, lr, r7, r3
 800043a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800043e:	fb07 f308 	mul.w	r3, r7, r8
 8000442:	428b      	cmp	r3, r1
 8000444:	fa04 f402 	lsl.w	r4, r4, r2
 8000448:	d907      	bls.n	800045a <__udivmoddi4+0x256>
 800044a:	1869      	adds	r1, r5, r1
 800044c:	f107 3cff 	add.w	ip, r7, #4294967295
 8000450:	d22f      	bcs.n	80004b2 <__udivmoddi4+0x2ae>
 8000452:	428b      	cmp	r3, r1
 8000454:	d92d      	bls.n	80004b2 <__udivmoddi4+0x2ae>
 8000456:	3f02      	subs	r7, #2
 8000458:	4429      	add	r1, r5
 800045a:	1acb      	subs	r3, r1, r3
 800045c:	b281      	uxth	r1, r0
 800045e:	fbb3 f0fe 	udiv	r0, r3, lr
 8000462:	fb0e 3310 	mls	r3, lr, r0, r3
 8000466:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046a:	fb00 f308 	mul.w	r3, r0, r8
 800046e:	428b      	cmp	r3, r1
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x27e>
 8000472:	1869      	adds	r1, r5, r1
 8000474:	f100 3cff 	add.w	ip, r0, #4294967295
 8000478:	d217      	bcs.n	80004aa <__udivmoddi4+0x2a6>
 800047a:	428b      	cmp	r3, r1
 800047c:	d915      	bls.n	80004aa <__udivmoddi4+0x2a6>
 800047e:	3802      	subs	r0, #2
 8000480:	4429      	add	r1, r5
 8000482:	1ac9      	subs	r1, r1, r3
 8000484:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000488:	e73b      	b.n	8000302 <__udivmoddi4+0xfe>
 800048a:	4637      	mov	r7, r6
 800048c:	4630      	mov	r0, r6
 800048e:	e709      	b.n	80002a4 <__udivmoddi4+0xa0>
 8000490:	4607      	mov	r7, r0
 8000492:	e6e7      	b.n	8000264 <__udivmoddi4+0x60>
 8000494:	4618      	mov	r0, r3
 8000496:	e6fb      	b.n	8000290 <__udivmoddi4+0x8c>
 8000498:	4541      	cmp	r1, r8
 800049a:	d2ab      	bcs.n	80003f4 <__udivmoddi4+0x1f0>
 800049c:	ebb8 0a02 	subs.w	sl, r8, r2
 80004a0:	eb69 020e 	sbc.w	r2, r9, lr
 80004a4:	3801      	subs	r0, #1
 80004a6:	4613      	mov	r3, r2
 80004a8:	e7a4      	b.n	80003f4 <__udivmoddi4+0x1f0>
 80004aa:	4660      	mov	r0, ip
 80004ac:	e7e9      	b.n	8000482 <__udivmoddi4+0x27e>
 80004ae:	4618      	mov	r0, r3
 80004b0:	e795      	b.n	80003de <__udivmoddi4+0x1da>
 80004b2:	4667      	mov	r7, ip
 80004b4:	e7d1      	b.n	800045a <__udivmoddi4+0x256>
 80004b6:	4681      	mov	r9, r0
 80004b8:	e77c      	b.n	80003b4 <__udivmoddi4+0x1b0>
 80004ba:	3802      	subs	r0, #2
 80004bc:	442c      	add	r4, r5
 80004be:	e747      	b.n	8000350 <__udivmoddi4+0x14c>
 80004c0:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c4:	442b      	add	r3, r5
 80004c6:	e72f      	b.n	8000328 <__udivmoddi4+0x124>
 80004c8:	4638      	mov	r0, r7
 80004ca:	e708      	b.n	80002de <__udivmoddi4+0xda>
 80004cc:	4637      	mov	r7, r6
 80004ce:	e6e9      	b.n	80002a4 <__udivmoddi4+0xa0>

080004d0 <__aeabi_idiv0>:
 80004d0:	4770      	bx	lr
 80004d2:	bf00      	nop

080004d4 <TESS_DAS_INIT>:

static void TESS_FILL_DASOUTPUT_BUFFER(r_buff_data_t* out_buffer);
static void TESS_DAS_ADD_SIGNAL(float signal, dtype_t dtype, float resolution);

void TESS_DAS_INIT()
{
 80004d4:	b580      	push	{r7, lr}
 80004d6:	af00      	add	r7, sp, #0

   TESS_RING_BUFFER_INIT(&TESS_RING_BUFFER);
 80004d8:	4812      	ldr	r0, [pc, #72]	; (8000524 <TESS_DAS_INIT+0x50>)
 80004da:	f000 fb35 	bl	8000b48 <TESS_RING_BUFFER_INIT>
   TESS_LOOP_CNT = 0;
 80004de:	4b12      	ldr	r3, [pc, #72]	; (8000528 <TESS_DAS_INIT+0x54>)
 80004e0:	2200      	movs	r2, #0
 80004e2:	601a      	str	r2, [r3, #0]

   /*init das buffer*/
   TESS_DASOUTPUT_BUFF.p_byte_data = &TESS_DASOUTPUT_BUFF.buff.byte0;
 80004e4:	4b11      	ldr	r3, [pc, #68]	; (800052c <TESS_DAS_INIT+0x58>)
 80004e6:	4a12      	ldr	r2, [pc, #72]	; (8000530 <TESS_DAS_INIT+0x5c>)
 80004e8:	605a      	str	r2, [r3, #4]
   for (TESS_DASOUTPUT_BUFF.filled = 0; TESS_DASOUTPUT_BUFF.filled < ACQ_BUFFER_SIZE; TESS_DASOUTPUT_BUFF.filled++)
 80004ea:	4b10      	ldr	r3, [pc, #64]	; (800052c <TESS_DAS_INIT+0x58>)
 80004ec:	2200      	movs	r2, #0
 80004ee:	701a      	strb	r2, [r3, #0]
 80004f0:	e00c      	b.n	800050c <TESS_DAS_INIT+0x38>
   {
      *(TESS_DASOUTPUT_BUFF.p_byte_data + TESS_DASOUTPUT_BUFF.filled) = 0;
 80004f2:	4b0e      	ldr	r3, [pc, #56]	; (800052c <TESS_DAS_INIT+0x58>)
 80004f4:	685b      	ldr	r3, [r3, #4]
 80004f6:	4a0d      	ldr	r2, [pc, #52]	; (800052c <TESS_DAS_INIT+0x58>)
 80004f8:	7812      	ldrb	r2, [r2, #0]
 80004fa:	4413      	add	r3, r2
 80004fc:	2200      	movs	r2, #0
 80004fe:	701a      	strb	r2, [r3, #0]
   for (TESS_DASOUTPUT_BUFF.filled = 0; TESS_DASOUTPUT_BUFF.filled < ACQ_BUFFER_SIZE; TESS_DASOUTPUT_BUFF.filled++)
 8000500:	4b0a      	ldr	r3, [pc, #40]	; (800052c <TESS_DAS_INIT+0x58>)
 8000502:	781b      	ldrb	r3, [r3, #0]
 8000504:	3301      	adds	r3, #1
 8000506:	b2da      	uxtb	r2, r3
 8000508:	4b08      	ldr	r3, [pc, #32]	; (800052c <TESS_DAS_INIT+0x58>)
 800050a:	701a      	strb	r2, [r3, #0]
 800050c:	4b07      	ldr	r3, [pc, #28]	; (800052c <TESS_DAS_INIT+0x58>)
 800050e:	781b      	ldrb	r3, [r3, #0]
 8000510:	2b1d      	cmp	r3, #29
 8000512:	d9ee      	bls.n	80004f2 <TESS_DAS_INIT+0x1e>
   }
   TESS_DASOUTPUT_BUFF.filled = 0;
 8000514:	4b05      	ldr	r3, [pc, #20]	; (800052c <TESS_DAS_INIT+0x58>)
 8000516:	2200      	movs	r2, #0
 8000518:	701a      	strb	r2, [r3, #0]
   Set_TessDasStates(DAS_StandBy);
 800051a:	4b06      	ldr	r3, [pc, #24]	; (8000534 <TESS_DAS_INIT+0x60>)
 800051c:	2200      	movs	r2, #0
 800051e:	701a      	strb	r2, [r3, #0]
}
 8000520:	bf00      	nop
 8000522:	bd80      	pop	{r7, pc}
 8000524:	20000234 	.word	0x20000234
 8000528:	2000b660 	.word	0x2000b660
 800052c:	2000b688 	.word	0x2000b688
 8000530:	2000b690 	.word	0x2000b690
 8000534:	2000b664 	.word	0x2000b664

08000538 <TESS_FILL_DASOUTPUT_BUFFER>:

static void TESS_FILL_DASOUTPUT_BUFFER(r_buff_data_t* out_buffer)
{
 8000538:	b580      	push	{r7, lr}
 800053a:	b082      	sub	sp, #8
 800053c:	af00      	add	r7, sp, #0
 800053e:	6078      	str	r0, [r7, #4]
   /* fill buffer with data*/
   TESS_DAS_ADD_SIGNAL(0x55,uint8,1);     /*0*/
 8000540:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8000544:	2001      	movs	r0, #1
 8000546:	ed9f 0a34 	vldr	s0, [pc, #208]	; 8000618 <TESS_FILL_DASOUTPUT_BUFFER+0xe0>
 800054a:	f000 f969 	bl	8000820 <TESS_DAS_ADD_SIGNAL>
   TESS_DAS_ADD_SIGNAL(-0x55,int8,1);     /*1*/
 800054e:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8000552:	2000      	movs	r0, #0
 8000554:	ed9f 0a31 	vldr	s0, [pc, #196]	; 800061c <TESS_FILL_DASOUTPUT_BUFFER+0xe4>
 8000558:	f000 f962 	bl	8000820 <TESS_DAS_ADD_SIGNAL>
   TESS_DAS_ADD_SIGNAL(TESS_RING_BUFFER.count,uint16,1);     /*2*/
 800055c:	4b30      	ldr	r3, [pc, #192]	; (8000620 <TESS_FILL_DASOUTPUT_BUFFER+0xe8>)
 800055e:	889b      	ldrh	r3, [r3, #4]
 8000560:	ee07 3a90 	vmov	s15, r3
 8000564:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000568:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 800056c:	2002      	movs	r0, #2
 800056e:	eeb0 0a67 	vmov.f32	s0, s15
 8000572:	f000 f955 	bl	8000820 <TESS_DAS_ADD_SIGNAL>
   TESS_DAS_ADD_SIGNAL(TESS_RING_BUFFER.head,uint16,1);     /*4*/
 8000576:	4b2a      	ldr	r3, [pc, #168]	; (8000620 <TESS_FILL_DASOUTPUT_BUFFER+0xe8>)
 8000578:	881b      	ldrh	r3, [r3, #0]
 800057a:	ee07 3a90 	vmov	s15, r3
 800057e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000582:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8000586:	2002      	movs	r0, #2
 8000588:	eeb0 0a67 	vmov.f32	s0, s15
 800058c:	f000 f948 	bl	8000820 <TESS_DAS_ADD_SIGNAL>
   TESS_DAS_ADD_SIGNAL(TESS_RING_BUFFER.tail,uint16,1);     /*6*/
 8000590:	4b23      	ldr	r3, [pc, #140]	; (8000620 <TESS_FILL_DASOUTPUT_BUFFER+0xe8>)
 8000592:	885b      	ldrh	r3, [r3, #2]
 8000594:	ee07 3a90 	vmov	s15, r3
 8000598:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800059c:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 80005a0:	2002      	movs	r0, #2
 80005a2:	eeb0 0a67 	vmov.f32	s0, s15
 80005a6:	f000 f93b 	bl	8000820 <TESS_DAS_ADD_SIGNAL>
   TESS_DAS_ADD_SIGNAL(Get_TessDasStates(),uint8,1);     /*8*/
 80005aa:	4b1e      	ldr	r3, [pc, #120]	; (8000624 <TESS_FILL_DASOUTPUT_BUFFER+0xec>)
 80005ac:	781b      	ldrb	r3, [r3, #0]
 80005ae:	ee07 3a90 	vmov	s15, r3
 80005b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80005b6:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 80005ba:	2001      	movs	r0, #1
 80005bc:	eeb0 0a67 	vmov.f32	s0, s15
 80005c0:	f000 f92e 	bl	8000820 <TESS_DAS_ADD_SIGNAL>
   TESS_DAS_ADD_SIGNAL(-1256,int16,1);     /*9*/
 80005c4:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 80005c8:	2003      	movs	r0, #3
 80005ca:	ed9f 0a17 	vldr	s0, [pc, #92]	; 8000628 <TESS_FILL_DASOUTPUT_BUFFER+0xf0>
 80005ce:	f000 f927 	bl	8000820 <TESS_DAS_ADD_SIGNAL>
   TESS_DAS_ADD_SIGNAL(-897856,int32,1);     /*11*/
 80005d2:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 80005d6:	2005      	movs	r0, #5
 80005d8:	ed9f 0a14 	vldr	s0, [pc, #80]	; 800062c <TESS_FILL_DASOUTPUT_BUFFER+0xf4>
 80005dc:	f000 f920 	bl	8000820 <TESS_DAS_ADD_SIGNAL>
   TESS_DAS_ADD_SIGNAL(TESS_LOOP_CNT,uint32,1); /*15*/
 80005e0:	4b13      	ldr	r3, [pc, #76]	; (8000630 <TESS_FILL_DASOUTPUT_BUFFER+0xf8>)
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	ee07 3a90 	vmov	s15, r3
 80005e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80005ec:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 80005f0:	2004      	movs	r0, #4
 80005f2:	eeb0 0a67 	vmov.f32	s0, s15
 80005f6:	f000 f913 	bl	8000820 <TESS_DAS_ADD_SIGNAL>
   TESS_DAS_ADD_SIGNAL(1.36F,int32,100); /*19*/
 80005fa:	eddf 0a0e 	vldr	s1, [pc, #56]	; 8000634 <TESS_FILL_DASOUTPUT_BUFFER+0xfc>
 80005fe:	2005      	movs	r0, #5
 8000600:	ed9f 0a0d 	vldr	s0, [pc, #52]	; 8000638 <TESS_FILL_DASOUTPUT_BUFFER+0x100>
 8000604:	f000 f90c 	bl	8000820 <TESS_DAS_ADD_SIGNAL>
   /*22*/
   /*Reset */
   TESS_DASOUTPUT_BUFF.filled = 0;
 8000608:	4b0c      	ldr	r3, [pc, #48]	; (800063c <TESS_FILL_DASOUTPUT_BUFFER+0x104>)
 800060a:	2200      	movs	r2, #0
 800060c:	701a      	strb	r2, [r3, #0]

}
 800060e:	bf00      	nop
 8000610:	3708      	adds	r7, #8
 8000612:	46bd      	mov	sp, r7
 8000614:	bd80      	pop	{r7, pc}
 8000616:	bf00      	nop
 8000618:	42aa0000 	.word	0x42aa0000
 800061c:	c2aa0000 	.word	0xc2aa0000
 8000620:	20000234 	.word	0x20000234
 8000624:	2000b664 	.word	0x2000b664
 8000628:	c49d0000 	.word	0xc49d0000
 800062c:	c95b3400 	.word	0xc95b3400
 8000630:	2000b660 	.word	0x2000b660
 8000634:	42c80000 	.word	0x42c80000
 8000638:	3fae147b 	.word	0x3fae147b
 800063c:	2000b688 	.word	0x2000b688

08000640 <TESS_DAS_MAIN>:

void TESS_DAS_MAIN()
{
 8000640:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000642:	b08f      	sub	sp, #60	; 0x3c
 8000644:	af06      	add	r7, sp, #24
   /*DAS State Machine*/
   switch(Get_TessDasStates())
 8000646:	4b30      	ldr	r3, [pc, #192]	; (8000708 <TESS_DAS_MAIN+0xc8>)
 8000648:	781b      	ldrb	r3, [r3, #0]
 800064a:	2b03      	cmp	r3, #3
 800064c:	d03a      	beq.n	80006c4 <TESS_DAS_MAIN+0x84>
 800064e:	2b04      	cmp	r3, #4
 8000650:	d04f      	beq.n	80006f2 <TESS_DAS_MAIN+0xb2>
 8000652:	2b02      	cmp	r3, #2
 8000654:	d000      	beq.n	8000658 <TESS_DAS_MAIN+0x18>
      Set_TessDasStates(DAS_StandBy);
      break;
   case DAS_StandBy:

   default:
      break;
 8000656:	e052      	b.n	80006fe <TESS_DAS_MAIN+0xbe>
      TESS_FILL_DASOUTPUT_BUFFER(&TESS_DATA_ACQ_BUFFER);
 8000658:	482c      	ldr	r0, [pc, #176]	; (800070c <TESS_DAS_MAIN+0xcc>)
 800065a:	f7ff ff6d 	bl	8000538 <TESS_FILL_DASOUTPUT_BUFFER>
      TESS_RING_BUFFER_PUT(&TESS_RING_BUFFER, TESS_DASOUTPUT_BUFF.buff);
 800065e:	4e2c      	ldr	r6, [pc, #176]	; (8000710 <TESS_DAS_MAIN+0xd0>)
 8000660:	466d      	mov	r5, sp
 8000662:	f106 0414 	add.w	r4, r6, #20
 8000666:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000668:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800066a:	6823      	ldr	r3, [r4, #0]
 800066c:	802b      	strh	r3, [r5, #0]
 800066e:	f106 0308 	add.w	r3, r6, #8
 8000672:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000674:	4827      	ldr	r0, [pc, #156]	; (8000714 <TESS_DAS_MAIN+0xd4>)
 8000676:	f000 fc35 	bl	8000ee4 <TESS_RING_BUFFER_PUT>
      TESS_DMA_BUFFER = TESS_RING_BUFFER_GET(&TESS_RING_BUFFER);
 800067a:	4c27      	ldr	r4, [pc, #156]	; (8000718 <TESS_DAS_MAIN+0xd8>)
 800067c:	463b      	mov	r3, r7
 800067e:	4925      	ldr	r1, [pc, #148]	; (8000714 <TESS_DAS_MAIN+0xd4>)
 8000680:	4618      	mov	r0, r3
 8000682:	f000 fbae 	bl	8000de2 <TESS_RING_BUFFER_GET>
 8000686:	4622      	mov	r2, r4
 8000688:	463b      	mov	r3, r7
 800068a:	681c      	ldr	r4, [r3, #0]
 800068c:	6858      	ldr	r0, [r3, #4]
 800068e:	6899      	ldr	r1, [r3, #8]
 8000690:	68dd      	ldr	r5, [r3, #12]
 8000692:	6014      	str	r4, [r2, #0]
 8000694:	6050      	str	r0, [r2, #4]
 8000696:	6091      	str	r1, [r2, #8]
 8000698:	60d5      	str	r5, [r2, #12]
 800069a:	691c      	ldr	r4, [r3, #16]
 800069c:	6958      	ldr	r0, [r3, #20]
 800069e:	6999      	ldr	r1, [r3, #24]
 80006a0:	6114      	str	r4, [r2, #16]
 80006a2:	6150      	str	r0, [r2, #20]
 80006a4:	6191      	str	r1, [r2, #24]
 80006a6:	8b9b      	ldrh	r3, [r3, #28]
 80006a8:	8393      	strh	r3, [r2, #28]
      CDC_Transmit_FS((uint8_t *)&TESS_DMA_BUFFER,ACQ_BUFFER_SIZE);
 80006aa:	211e      	movs	r1, #30
 80006ac:	481a      	ldr	r0, [pc, #104]	; (8000718 <TESS_DAS_MAIN+0xd8>)
 80006ae:	f006 f859 	bl	8006764 <CDC_Transmit_FS>
      TESS_LOOP_CNT++;
 80006b2:	4b1a      	ldr	r3, [pc, #104]	; (800071c <TESS_DAS_MAIN+0xdc>)
 80006b4:	681b      	ldr	r3, [r3, #0]
 80006b6:	3301      	adds	r3, #1
 80006b8:	4a18      	ldr	r2, [pc, #96]	; (800071c <TESS_DAS_MAIN+0xdc>)
 80006ba:	6013      	str	r3, [r2, #0]
      Set_TessDasStates(DAS_KeepPacking);
 80006bc:	4b12      	ldr	r3, [pc, #72]	; (8000708 <TESS_DAS_MAIN+0xc8>)
 80006be:	2203      	movs	r2, #3
 80006c0:	701a      	strb	r2, [r3, #0]
      break;
 80006c2:	e01c      	b.n	80006fe <TESS_DAS_MAIN+0xbe>
      TESS_FILL_DASOUTPUT_BUFFER(&TESS_DATA_ACQ_BUFFER);
 80006c4:	4811      	ldr	r0, [pc, #68]	; (800070c <TESS_DAS_MAIN+0xcc>)
 80006c6:	f7ff ff37 	bl	8000538 <TESS_FILL_DASOUTPUT_BUFFER>
      TESS_RING_BUFFER_PUT(&TESS_RING_BUFFER, TESS_DASOUTPUT_BUFF.buff);
 80006ca:	4e11      	ldr	r6, [pc, #68]	; (8000710 <TESS_DAS_MAIN+0xd0>)
 80006cc:	466d      	mov	r5, sp
 80006ce:	f106 0414 	add.w	r4, r6, #20
 80006d2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80006d4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80006d6:	6823      	ldr	r3, [r4, #0]
 80006d8:	802b      	strh	r3, [r5, #0]
 80006da:	f106 0308 	add.w	r3, r6, #8
 80006de:	cb0e      	ldmia	r3, {r1, r2, r3}
 80006e0:	480c      	ldr	r0, [pc, #48]	; (8000714 <TESS_DAS_MAIN+0xd4>)
 80006e2:	f000 fbff 	bl	8000ee4 <TESS_RING_BUFFER_PUT>
      TESS_LOOP_CNT++;
 80006e6:	4b0d      	ldr	r3, [pc, #52]	; (800071c <TESS_DAS_MAIN+0xdc>)
 80006e8:	681b      	ldr	r3, [r3, #0]
 80006ea:	3301      	adds	r3, #1
 80006ec:	4a0b      	ldr	r2, [pc, #44]	; (800071c <TESS_DAS_MAIN+0xdc>)
 80006ee:	6013      	str	r3, [r2, #0]
      break;
 80006f0:	e005      	b.n	80006fe <TESS_DAS_MAIN+0xbe>
      TESS_DAS_INIT();
 80006f2:	f7ff feef 	bl	80004d4 <TESS_DAS_INIT>
      Set_TessDasStates(DAS_StandBy);
 80006f6:	4b04      	ldr	r3, [pc, #16]	; (8000708 <TESS_DAS_MAIN+0xc8>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	701a      	strb	r2, [r3, #0]
      break;
 80006fc:	bf00      	nop
   }

}
 80006fe:	bf00      	nop
 8000700:	3724      	adds	r7, #36	; 0x24
 8000702:	46bd      	mov	sp, r7
 8000704:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000706:	bf00      	nop
 8000708:	2000b664 	.word	0x2000b664
 800070c:	2000b6b0 	.word	0x2000b6b0
 8000710:	2000b688 	.word	0x2000b688
 8000714:	20000234 	.word	0x20000234
 8000718:	2000b668 	.word	0x2000b668
 800071c:	2000b660 	.word	0x2000b660

08000720 <TESS_DAS_GET_COMMANDS>:

void TESS_DAS_GET_COMMANDS(uint8_t command)
{
 8000720:	b480      	push	{r7}
 8000722:	b083      	sub	sp, #12
 8000724:	af00      	add	r7, sp, #0
 8000726:	4603      	mov	r3, r0
 8000728:	71fb      	strb	r3, [r7, #7]
   if ((command == DAS_START_MEAS) )
 800072a:	79fb      	ldrb	r3, [r7, #7]
 800072c:	2b31      	cmp	r3, #49	; 0x31
 800072e:	d107      	bne.n	8000740 <TESS_DAS_GET_COMMANDS+0x20>
   {
      if (Get_TessDasStates() == DAS_StandBy)
 8000730:	4b0d      	ldr	r3, [pc, #52]	; (8000768 <TESS_DAS_GET_COMMANDS+0x48>)
 8000732:	781b      	ldrb	r3, [r3, #0]
 8000734:	2b00      	cmp	r3, #0
 8000736:	d111      	bne.n	800075c <TESS_DAS_GET_COMMANDS+0x3c>
      {
         Set_TessDasStates(DAS_StartMeas);
 8000738:	4b0b      	ldr	r3, [pc, #44]	; (8000768 <TESS_DAS_GET_COMMANDS+0x48>)
 800073a:	2202      	movs	r2, #2
 800073c:	701a      	strb	r2, [r3, #0]
      else
      {
         /*transition from other states forbidden*/
      }
   }
}
 800073e:	e00d      	b.n	800075c <TESS_DAS_GET_COMMANDS+0x3c>
   else if(command == DAS_STOP_MEAS)
 8000740:	79fb      	ldrb	r3, [r7, #7]
 8000742:	2b30      	cmp	r3, #48	; 0x30
 8000744:	d10a      	bne.n	800075c <TESS_DAS_GET_COMMANDS+0x3c>
      if ((Get_TessDasStates() == DAS_KeepPacking) || (Get_TessDasStates() == DAS_StartMeas))
 8000746:	4b08      	ldr	r3, [pc, #32]	; (8000768 <TESS_DAS_GET_COMMANDS+0x48>)
 8000748:	781b      	ldrb	r3, [r3, #0]
 800074a:	2b03      	cmp	r3, #3
 800074c:	d003      	beq.n	8000756 <TESS_DAS_GET_COMMANDS+0x36>
 800074e:	4b06      	ldr	r3, [pc, #24]	; (8000768 <TESS_DAS_GET_COMMANDS+0x48>)
 8000750:	781b      	ldrb	r3, [r3, #0]
 8000752:	2b02      	cmp	r3, #2
 8000754:	d102      	bne.n	800075c <TESS_DAS_GET_COMMANDS+0x3c>
         Set_TessDasStates(DAS_StopOfMeasurement);
 8000756:	4b04      	ldr	r3, [pc, #16]	; (8000768 <TESS_DAS_GET_COMMANDS+0x48>)
 8000758:	2204      	movs	r2, #4
 800075a:	701a      	strb	r2, [r3, #0]
}
 800075c:	bf00      	nop
 800075e:	370c      	adds	r7, #12
 8000760:	46bd      	mov	sp, r7
 8000762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000766:	4770      	bx	lr
 8000768:	2000b664 	.word	0x2000b664

0800076c <TESS_DAS_UPDATE_UPON_TC>:

uint8_t TESS_DAS_UPDATE_UPON_TC()
{
 800076c:	b5b0      	push	{r4, r5, r7, lr}
 800076e:	b08a      	sub	sp, #40	; 0x28
 8000770:	af00      	add	r7, sp, #0


   uint8_t  usb_tx_result = USBD_OK;
 8000772:	2300      	movs	r3, #0
 8000774:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27


   if (Get_TessDasStates() == DAS_KeepPacking)
 8000778:	4b19      	ldr	r3, [pc, #100]	; (80007e0 <TESS_DAS_UPDATE_UPON_TC+0x74>)
 800077a:	781b      	ldrb	r3, [r3, #0]
 800077c:	2b03      	cmp	r3, #3
 800077e:	d128      	bne.n	80007d2 <TESS_DAS_UPDATE_UPON_TC+0x66>
   {
      if (!TESS_RINGBUFF_IS_EMPTY(&TESS_RING_BUFFER) )
 8000780:	4818      	ldr	r0, [pc, #96]	; (80007e4 <TESS_DAS_UPDATE_UPON_TC+0x78>)
 8000782:	f000 fc13 	bl	8000fac <TESS_RINGBUFF_IS_EMPTY>
 8000786:	4603      	mov	r3, r0
 8000788:	2b00      	cmp	r3, #0
 800078a:	d11f      	bne.n	80007cc <TESS_DAS_UPDATE_UPON_TC+0x60>
      {
         TESS_DMA_BUFFER = TESS_RING_BUFFER_GET(&TESS_RING_BUFFER);
 800078c:	4c16      	ldr	r4, [pc, #88]	; (80007e8 <TESS_DAS_UPDATE_UPON_TC+0x7c>)
 800078e:	463b      	mov	r3, r7
 8000790:	4914      	ldr	r1, [pc, #80]	; (80007e4 <TESS_DAS_UPDATE_UPON_TC+0x78>)
 8000792:	4618      	mov	r0, r3
 8000794:	f000 fb25 	bl	8000de2 <TESS_RING_BUFFER_GET>
 8000798:	4622      	mov	r2, r4
 800079a:	463b      	mov	r3, r7
 800079c:	681c      	ldr	r4, [r3, #0]
 800079e:	6858      	ldr	r0, [r3, #4]
 80007a0:	6899      	ldr	r1, [r3, #8]
 80007a2:	68dd      	ldr	r5, [r3, #12]
 80007a4:	6014      	str	r4, [r2, #0]
 80007a6:	6050      	str	r0, [r2, #4]
 80007a8:	6091      	str	r1, [r2, #8]
 80007aa:	60d5      	str	r5, [r2, #12]
 80007ac:	691c      	ldr	r4, [r3, #16]
 80007ae:	6958      	ldr	r0, [r3, #20]
 80007b0:	6999      	ldr	r1, [r3, #24]
 80007b2:	6114      	str	r4, [r2, #16]
 80007b4:	6150      	str	r0, [r2, #20]
 80007b6:	6191      	str	r1, [r2, #24]
 80007b8:	8b9b      	ldrh	r3, [r3, #28]
 80007ba:	8393      	strh	r3, [r2, #28]

         usb_tx_result =  CDC_Transmit_FS((uint8_t *)&TESS_DMA_BUFFER,ACQ_BUFFER_SIZE);
 80007bc:	211e      	movs	r1, #30
 80007be:	480a      	ldr	r0, [pc, #40]	; (80007e8 <TESS_DAS_UPDATE_UPON_TC+0x7c>)
 80007c0:	f005 ffd0 	bl	8006764 <CDC_Transmit_FS>
 80007c4:	4603      	mov	r3, r0
 80007c6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80007ca:	e002      	b.n	80007d2 <TESS_DAS_UPDATE_UPON_TC+0x66>
      }
      else
      {

         /*trigger another transmittion*/
         Set_TessDasStates(DAS_StartMeas);
 80007cc:	4b04      	ldr	r3, [pc, #16]	; (80007e0 <TESS_DAS_UPDATE_UPON_TC+0x74>)
 80007ce:	2202      	movs	r2, #2
 80007d0:	701a      	strb	r2, [r3, #0]

      }
   }
   return usb_tx_result;
 80007d2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80007d6:	4618      	mov	r0, r3
 80007d8:	3728      	adds	r7, #40	; 0x28
 80007da:	46bd      	mov	sp, r7
 80007dc:	bdb0      	pop	{r4, r5, r7, pc}
 80007de:	bf00      	nop
 80007e0:	2000b664 	.word	0x2000b664
 80007e4:	20000234 	.word	0x20000234
 80007e8:	2000b668 	.word	0x2000b668

080007ec <DAS_Receive_Clbk_USB>:


void DAS_Receive_Clbk_USB (uint8_t* Buf, uint32_t Len)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b084      	sub	sp, #16
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	6078      	str	r0, [r7, #4]
 80007f4:	6039      	str	r1, [r7, #0]
   uint8_t  rx_char_usb = 0;
 80007f6:	2300      	movs	r3, #0
 80007f8:	73fb      	strb	r3, [r7, #15]


   rx_char_usb = Buf[0];
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	781b      	ldrb	r3, [r3, #0]
 80007fe:	73fb      	strb	r3, [r7, #15]
   TESS_DAS_GET_COMMANDS(rx_char_usb);
 8000800:	7bfb      	ldrb	r3, [r7, #15]
 8000802:	4618      	mov	r0, r3
 8000804:	f7ff ff8c 	bl	8000720 <TESS_DAS_GET_COMMANDS>
}
 8000808:	bf00      	nop
 800080a:	3710      	adds	r7, #16
 800080c:	46bd      	mov	sp, r7
 800080e:	bd80      	pop	{r7, pc}

08000810 <DAS_Transmit_Clbk_USB>:

int8_t  DAS_Transmit_Clbk_USB (void)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	af00      	add	r7, sp, #0

   return TESS_DAS_UPDATE_UPON_TC();
 8000814:	f7ff ffaa 	bl	800076c <TESS_DAS_UPDATE_UPON_TC>
 8000818:	4603      	mov	r3, r0
 800081a:	b25b      	sxtb	r3, r3
}
 800081c:	4618      	mov	r0, r3
 800081e:	bd80      	pop	{r7, pc}

08000820 <TESS_DAS_ADD_SIGNAL>:


static void TESS_DAS_ADD_SIGNAL(float signal, dtype_t dtype, float resolution)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	b086      	sub	sp, #24
 8000824:	af00      	add	r7, sp, #0
 8000826:	ed87 0a03 	vstr	s0, [r7, #12]
 800082a:	4603      	mov	r3, r0
 800082c:	edc7 0a01 	vstr	s1, [r7, #4]
 8000830:	72fb      	strb	r3, [r7, #11]
   uint32_t  temp32;


   switch (dtype)
 8000832:	7afb      	ldrb	r3, [r7, #11]
 8000834:	2b05      	cmp	r3, #5
 8000836:	f200 8180 	bhi.w	8000b3a <TESS_DAS_ADD_SIGNAL+0x31a>
 800083a:	a201      	add	r2, pc, #4	; (adr r2, 8000840 <TESS_DAS_ADD_SIGNAL+0x20>)
 800083c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000840:	0800088d 	.word	0x0800088d
 8000844:	08000859 	.word	0x08000859
 8000848:	080008c7 	.word	0x080008c7
 800084c:	08000931 	.word	0x08000931
 8000850:	080009ab 	.word	0x080009ab
 8000854:	08000a7d 	.word	0x08000a7d
   {
   case uint8:
      {
         *(TESS_DASOUTPUT_BUFF.p_byte_data + TESS_DASOUTPUT_BUFF.filled) = (uint8_t)signal;
 8000858:	4b86      	ldr	r3, [pc, #536]	; (8000a74 <TESS_DAS_ADD_SIGNAL+0x254>)
 800085a:	685b      	ldr	r3, [r3, #4]
 800085c:	4a85      	ldr	r2, [pc, #532]	; (8000a74 <TESS_DAS_ADD_SIGNAL+0x254>)
 800085e:	7812      	ldrb	r2, [r2, #0]
 8000860:	4413      	add	r3, r2
 8000862:	edd7 7a03 	vldr	s15, [r7, #12]
 8000866:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800086a:	edc7 7a00 	vstr	s15, [r7]
 800086e:	683a      	ldr	r2, [r7, #0]
 8000870:	b2d2      	uxtb	r2, r2
 8000872:	701a      	strb	r2, [r3, #0]
         TESS_DASOUTPUT_BUFF.filled = TESS_BUFF_IDX_INC(TESS_DASOUTPUT_BUFF.filled, ACQ_BUFFER_SIZE);
 8000874:	4b7f      	ldr	r3, [pc, #508]	; (8000a74 <TESS_DAS_ADD_SIGNAL+0x254>)
 8000876:	781b      	ldrb	r3, [r3, #0]
 8000878:	b29b      	uxth	r3, r3
 800087a:	211e      	movs	r1, #30
 800087c:	4618      	mov	r0, r3
 800087e:	f000 fba6 	bl	8000fce <TESS_BUFF_IDX_INC>
 8000882:	4603      	mov	r3, r0
 8000884:	b2da      	uxtb	r2, r3
 8000886:	4b7b      	ldr	r3, [pc, #492]	; (8000a74 <TESS_DAS_ADD_SIGNAL+0x254>)
 8000888:	701a      	strb	r2, [r3, #0]
      }
      break;
 800088a:	e156      	b.n	8000b3a <TESS_DAS_ADD_SIGNAL+0x31a>
   case int8:
      {
         *(TESS_DASOUTPUT_BUFF.p_byte_data + TESS_DASOUTPUT_BUFF.filled) = TESS_SINT8_TO_UINT8((int8_t)signal);
 800088c:	edd7 7a03 	vldr	s15, [r7, #12]
 8000890:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000894:	edc7 7a00 	vstr	s15, [r7]
 8000898:	683b      	ldr	r3, [r7, #0]
 800089a:	b25b      	sxtb	r3, r3
 800089c:	b2da      	uxtb	r2, r3
 800089e:	4b75      	ldr	r3, [pc, #468]	; (8000a74 <TESS_DAS_ADD_SIGNAL+0x254>)
 80008a0:	685b      	ldr	r3, [r3, #4]
 80008a2:	4974      	ldr	r1, [pc, #464]	; (8000a74 <TESS_DAS_ADD_SIGNAL+0x254>)
 80008a4:	7809      	ldrb	r1, [r1, #0]
 80008a6:	440b      	add	r3, r1
 80008a8:	3a80      	subs	r2, #128	; 0x80
 80008aa:	b2d2      	uxtb	r2, r2
 80008ac:	701a      	strb	r2, [r3, #0]
         TESS_DASOUTPUT_BUFF.filled = TESS_BUFF_IDX_INC(TESS_DASOUTPUT_BUFF.filled, ACQ_BUFFER_SIZE);
 80008ae:	4b71      	ldr	r3, [pc, #452]	; (8000a74 <TESS_DAS_ADD_SIGNAL+0x254>)
 80008b0:	781b      	ldrb	r3, [r3, #0]
 80008b2:	b29b      	uxth	r3, r3
 80008b4:	211e      	movs	r1, #30
 80008b6:	4618      	mov	r0, r3
 80008b8:	f000 fb89 	bl	8000fce <TESS_BUFF_IDX_INC>
 80008bc:	4603      	mov	r3, r0
 80008be:	b2da      	uxtb	r2, r3
 80008c0:	4b6c      	ldr	r3, [pc, #432]	; (8000a74 <TESS_DAS_ADD_SIGNAL+0x254>)
 80008c2:	701a      	strb	r2, [r3, #0]
      }
      break;
 80008c4:	e139      	b.n	8000b3a <TESS_DAS_ADD_SIGNAL+0x31a>
   case uint16:
      {
         *(TESS_DASOUTPUT_BUFF.p_byte_data + TESS_DASOUTPUT_BUFF.filled) = ((uint16_t)(signal)&0x00FF);
 80008c6:	edd7 7a03 	vldr	s15, [r7, #12]
 80008ca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80008ce:	ee17 3a90 	vmov	r3, s15
 80008d2:	b299      	uxth	r1, r3
 80008d4:	4b67      	ldr	r3, [pc, #412]	; (8000a74 <TESS_DAS_ADD_SIGNAL+0x254>)
 80008d6:	685b      	ldr	r3, [r3, #4]
 80008d8:	4a66      	ldr	r2, [pc, #408]	; (8000a74 <TESS_DAS_ADD_SIGNAL+0x254>)
 80008da:	7812      	ldrb	r2, [r2, #0]
 80008dc:	4413      	add	r3, r2
 80008de:	b2ca      	uxtb	r2, r1
 80008e0:	701a      	strb	r2, [r3, #0]
         TESS_DASOUTPUT_BUFF.filled = TESS_BUFF_IDX_INC(TESS_DASOUTPUT_BUFF.filled, ACQ_BUFFER_SIZE);
 80008e2:	4b64      	ldr	r3, [pc, #400]	; (8000a74 <TESS_DAS_ADD_SIGNAL+0x254>)
 80008e4:	781b      	ldrb	r3, [r3, #0]
 80008e6:	b29b      	uxth	r3, r3
 80008e8:	211e      	movs	r1, #30
 80008ea:	4618      	mov	r0, r3
 80008ec:	f000 fb6f 	bl	8000fce <TESS_BUFF_IDX_INC>
 80008f0:	4603      	mov	r3, r0
 80008f2:	b2da      	uxtb	r2, r3
 80008f4:	4b5f      	ldr	r3, [pc, #380]	; (8000a74 <TESS_DAS_ADD_SIGNAL+0x254>)
 80008f6:	701a      	strb	r2, [r3, #0]
         *(TESS_DASOUTPUT_BUFF.p_byte_data + TESS_DASOUTPUT_BUFF.filled) = ((uint16_t)(signal)&0xFF00)>>8;
 80008f8:	edd7 7a03 	vldr	s15, [r7, #12]
 80008fc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000900:	ee17 3a90 	vmov	r3, s15
 8000904:	b29b      	uxth	r3, r3
 8000906:	0a1b      	lsrs	r3, r3, #8
 8000908:	b299      	uxth	r1, r3
 800090a:	4b5a      	ldr	r3, [pc, #360]	; (8000a74 <TESS_DAS_ADD_SIGNAL+0x254>)
 800090c:	685b      	ldr	r3, [r3, #4]
 800090e:	4a59      	ldr	r2, [pc, #356]	; (8000a74 <TESS_DAS_ADD_SIGNAL+0x254>)
 8000910:	7812      	ldrb	r2, [r2, #0]
 8000912:	4413      	add	r3, r2
 8000914:	b2ca      	uxtb	r2, r1
 8000916:	701a      	strb	r2, [r3, #0]
         TESS_DASOUTPUT_BUFF.filled = TESS_BUFF_IDX_INC(TESS_DASOUTPUT_BUFF.filled, ACQ_BUFFER_SIZE);
 8000918:	4b56      	ldr	r3, [pc, #344]	; (8000a74 <TESS_DAS_ADD_SIGNAL+0x254>)
 800091a:	781b      	ldrb	r3, [r3, #0]
 800091c:	b29b      	uxth	r3, r3
 800091e:	211e      	movs	r1, #30
 8000920:	4618      	mov	r0, r3
 8000922:	f000 fb54 	bl	8000fce <TESS_BUFF_IDX_INC>
 8000926:	4603      	mov	r3, r0
 8000928:	b2da      	uxtb	r2, r3
 800092a:	4b52      	ldr	r3, [pc, #328]	; (8000a74 <TESS_DAS_ADD_SIGNAL+0x254>)
 800092c:	701a      	strb	r2, [r3, #0]
      }
      break;
 800092e:	e104      	b.n	8000b3a <TESS_DAS_ADD_SIGNAL+0x31a>
   case int16:
      {
         *(TESS_DASOUTPUT_BUFF.p_byte_data + TESS_DASOUTPUT_BUFF.filled) = ((TESS_SINT16_TO_UINT16(signal))&0x00FF);
 8000930:	edd7 7a03 	vldr	s15, [r7, #12]
 8000934:	ed9f 7a50 	vldr	s14, [pc, #320]	; 8000a78 <TESS_DAS_ADD_SIGNAL+0x258>
 8000938:	ee77 7a87 	vadd.f32	s15, s15, s14
 800093c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000940:	ee17 3a90 	vmov	r3, s15
 8000944:	b299      	uxth	r1, r3
 8000946:	4b4b      	ldr	r3, [pc, #300]	; (8000a74 <TESS_DAS_ADD_SIGNAL+0x254>)
 8000948:	685b      	ldr	r3, [r3, #4]
 800094a:	4a4a      	ldr	r2, [pc, #296]	; (8000a74 <TESS_DAS_ADD_SIGNAL+0x254>)
 800094c:	7812      	ldrb	r2, [r2, #0]
 800094e:	4413      	add	r3, r2
 8000950:	b2ca      	uxtb	r2, r1
 8000952:	701a      	strb	r2, [r3, #0]
         TESS_DASOUTPUT_BUFF.filled = TESS_BUFF_IDX_INC(TESS_DASOUTPUT_BUFF.filled, ACQ_BUFFER_SIZE);
 8000954:	4b47      	ldr	r3, [pc, #284]	; (8000a74 <TESS_DAS_ADD_SIGNAL+0x254>)
 8000956:	781b      	ldrb	r3, [r3, #0]
 8000958:	b29b      	uxth	r3, r3
 800095a:	211e      	movs	r1, #30
 800095c:	4618      	mov	r0, r3
 800095e:	f000 fb36 	bl	8000fce <TESS_BUFF_IDX_INC>
 8000962:	4603      	mov	r3, r0
 8000964:	b2da      	uxtb	r2, r3
 8000966:	4b43      	ldr	r3, [pc, #268]	; (8000a74 <TESS_DAS_ADD_SIGNAL+0x254>)
 8000968:	701a      	strb	r2, [r3, #0]
         *(TESS_DASOUTPUT_BUFF.p_byte_data + TESS_DASOUTPUT_BUFF.filled) = ((TESS_SINT16_TO_UINT16(signal))&0xFF00)>>8;
 800096a:	edd7 7a03 	vldr	s15, [r7, #12]
 800096e:	ed9f 7a42 	vldr	s14, [pc, #264]	; 8000a78 <TESS_DAS_ADD_SIGNAL+0x258>
 8000972:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000976:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800097a:	ee17 3a90 	vmov	r3, s15
 800097e:	b29b      	uxth	r3, r3
 8000980:	0a1b      	lsrs	r3, r3, #8
 8000982:	b299      	uxth	r1, r3
 8000984:	4b3b      	ldr	r3, [pc, #236]	; (8000a74 <TESS_DAS_ADD_SIGNAL+0x254>)
 8000986:	685b      	ldr	r3, [r3, #4]
 8000988:	4a3a      	ldr	r2, [pc, #232]	; (8000a74 <TESS_DAS_ADD_SIGNAL+0x254>)
 800098a:	7812      	ldrb	r2, [r2, #0]
 800098c:	4413      	add	r3, r2
 800098e:	b2ca      	uxtb	r2, r1
 8000990:	701a      	strb	r2, [r3, #0]
         TESS_DASOUTPUT_BUFF.filled = TESS_BUFF_IDX_INC(TESS_DASOUTPUT_BUFF.filled, ACQ_BUFFER_SIZE);
 8000992:	4b38      	ldr	r3, [pc, #224]	; (8000a74 <TESS_DAS_ADD_SIGNAL+0x254>)
 8000994:	781b      	ldrb	r3, [r3, #0]
 8000996:	b29b      	uxth	r3, r3
 8000998:	211e      	movs	r1, #30
 800099a:	4618      	mov	r0, r3
 800099c:	f000 fb17 	bl	8000fce <TESS_BUFF_IDX_INC>
 80009a0:	4603      	mov	r3, r0
 80009a2:	b2da      	uxtb	r2, r3
 80009a4:	4b33      	ldr	r3, [pc, #204]	; (8000a74 <TESS_DAS_ADD_SIGNAL+0x254>)
 80009a6:	701a      	strb	r2, [r3, #0]
      }
      break;
 80009a8:	e0c7      	b.n	8000b3a <TESS_DAS_ADD_SIGNAL+0x31a>
   case uint32:
      {
         *(TESS_DASOUTPUT_BUFF.p_byte_data + TESS_DASOUTPUT_BUFF.filled) = (((uint32_t)(signal))&0x000000FF);
 80009aa:	edd7 7a03 	vldr	s15, [r7, #12]
 80009ae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80009b2:	edc7 7a00 	vstr	s15, [r7]
 80009b6:	4b2f      	ldr	r3, [pc, #188]	; (8000a74 <TESS_DAS_ADD_SIGNAL+0x254>)
 80009b8:	685b      	ldr	r3, [r3, #4]
 80009ba:	4a2e      	ldr	r2, [pc, #184]	; (8000a74 <TESS_DAS_ADD_SIGNAL+0x254>)
 80009bc:	7812      	ldrb	r2, [r2, #0]
 80009be:	4413      	add	r3, r2
 80009c0:	683a      	ldr	r2, [r7, #0]
 80009c2:	b2d2      	uxtb	r2, r2
 80009c4:	701a      	strb	r2, [r3, #0]
         TESS_DASOUTPUT_BUFF.filled = TESS_BUFF_IDX_INC(TESS_DASOUTPUT_BUFF.filled, ACQ_BUFFER_SIZE);
 80009c6:	4b2b      	ldr	r3, [pc, #172]	; (8000a74 <TESS_DAS_ADD_SIGNAL+0x254>)
 80009c8:	781b      	ldrb	r3, [r3, #0]
 80009ca:	b29b      	uxth	r3, r3
 80009cc:	211e      	movs	r1, #30
 80009ce:	4618      	mov	r0, r3
 80009d0:	f000 fafd 	bl	8000fce <TESS_BUFF_IDX_INC>
 80009d4:	4603      	mov	r3, r0
 80009d6:	b2da      	uxtb	r2, r3
 80009d8:	4b26      	ldr	r3, [pc, #152]	; (8000a74 <TESS_DAS_ADD_SIGNAL+0x254>)
 80009da:	701a      	strb	r2, [r3, #0]
         *(TESS_DASOUTPUT_BUFF.p_byte_data + TESS_DASOUTPUT_BUFF.filled) = (((uint32_t)(signal))&0x0000FF00)>>8;
 80009dc:	edd7 7a03 	vldr	s15, [r7, #12]
 80009e0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80009e4:	ee17 3a90 	vmov	r3, s15
 80009e8:	0a19      	lsrs	r1, r3, #8
 80009ea:	4b22      	ldr	r3, [pc, #136]	; (8000a74 <TESS_DAS_ADD_SIGNAL+0x254>)
 80009ec:	685b      	ldr	r3, [r3, #4]
 80009ee:	4a21      	ldr	r2, [pc, #132]	; (8000a74 <TESS_DAS_ADD_SIGNAL+0x254>)
 80009f0:	7812      	ldrb	r2, [r2, #0]
 80009f2:	4413      	add	r3, r2
 80009f4:	b2ca      	uxtb	r2, r1
 80009f6:	701a      	strb	r2, [r3, #0]
         TESS_DASOUTPUT_BUFF.filled = TESS_BUFF_IDX_INC(TESS_DASOUTPUT_BUFF.filled, ACQ_BUFFER_SIZE);
 80009f8:	4b1e      	ldr	r3, [pc, #120]	; (8000a74 <TESS_DAS_ADD_SIGNAL+0x254>)
 80009fa:	781b      	ldrb	r3, [r3, #0]
 80009fc:	b29b      	uxth	r3, r3
 80009fe:	211e      	movs	r1, #30
 8000a00:	4618      	mov	r0, r3
 8000a02:	f000 fae4 	bl	8000fce <TESS_BUFF_IDX_INC>
 8000a06:	4603      	mov	r3, r0
 8000a08:	b2da      	uxtb	r2, r3
 8000a0a:	4b1a      	ldr	r3, [pc, #104]	; (8000a74 <TESS_DAS_ADD_SIGNAL+0x254>)
 8000a0c:	701a      	strb	r2, [r3, #0]
         *(TESS_DASOUTPUT_BUFF.p_byte_data + TESS_DASOUTPUT_BUFF.filled) = (((uint32_t)(signal))&0x00FF0000)>>16;
 8000a0e:	edd7 7a03 	vldr	s15, [r7, #12]
 8000a12:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000a16:	ee17 3a90 	vmov	r3, s15
 8000a1a:	0c19      	lsrs	r1, r3, #16
 8000a1c:	4b15      	ldr	r3, [pc, #84]	; (8000a74 <TESS_DAS_ADD_SIGNAL+0x254>)
 8000a1e:	685b      	ldr	r3, [r3, #4]
 8000a20:	4a14      	ldr	r2, [pc, #80]	; (8000a74 <TESS_DAS_ADD_SIGNAL+0x254>)
 8000a22:	7812      	ldrb	r2, [r2, #0]
 8000a24:	4413      	add	r3, r2
 8000a26:	b2ca      	uxtb	r2, r1
 8000a28:	701a      	strb	r2, [r3, #0]
         TESS_DASOUTPUT_BUFF.filled = TESS_BUFF_IDX_INC(TESS_DASOUTPUT_BUFF.filled, ACQ_BUFFER_SIZE);
 8000a2a:	4b12      	ldr	r3, [pc, #72]	; (8000a74 <TESS_DAS_ADD_SIGNAL+0x254>)
 8000a2c:	781b      	ldrb	r3, [r3, #0]
 8000a2e:	b29b      	uxth	r3, r3
 8000a30:	211e      	movs	r1, #30
 8000a32:	4618      	mov	r0, r3
 8000a34:	f000 facb 	bl	8000fce <TESS_BUFF_IDX_INC>
 8000a38:	4603      	mov	r3, r0
 8000a3a:	b2da      	uxtb	r2, r3
 8000a3c:	4b0d      	ldr	r3, [pc, #52]	; (8000a74 <TESS_DAS_ADD_SIGNAL+0x254>)
 8000a3e:	701a      	strb	r2, [r3, #0]
         *(TESS_DASOUTPUT_BUFF.p_byte_data + TESS_DASOUTPUT_BUFF.filled) = (((uint32_t)(signal))&0xFF000000)>>24;
 8000a40:	edd7 7a03 	vldr	s15, [r7, #12]
 8000a44:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000a48:	ee17 3a90 	vmov	r3, s15
 8000a4c:	0e19      	lsrs	r1, r3, #24
 8000a4e:	4b09      	ldr	r3, [pc, #36]	; (8000a74 <TESS_DAS_ADD_SIGNAL+0x254>)
 8000a50:	685b      	ldr	r3, [r3, #4]
 8000a52:	4a08      	ldr	r2, [pc, #32]	; (8000a74 <TESS_DAS_ADD_SIGNAL+0x254>)
 8000a54:	7812      	ldrb	r2, [r2, #0]
 8000a56:	4413      	add	r3, r2
 8000a58:	b2ca      	uxtb	r2, r1
 8000a5a:	701a      	strb	r2, [r3, #0]
         TESS_DASOUTPUT_BUFF.filled = TESS_BUFF_IDX_INC(TESS_DASOUTPUT_BUFF.filled, ACQ_BUFFER_SIZE);
 8000a5c:	4b05      	ldr	r3, [pc, #20]	; (8000a74 <TESS_DAS_ADD_SIGNAL+0x254>)
 8000a5e:	781b      	ldrb	r3, [r3, #0]
 8000a60:	b29b      	uxth	r3, r3
 8000a62:	211e      	movs	r1, #30
 8000a64:	4618      	mov	r0, r3
 8000a66:	f000 fab2 	bl	8000fce <TESS_BUFF_IDX_INC>
 8000a6a:	4603      	mov	r3, r0
 8000a6c:	b2da      	uxtb	r2, r3
 8000a6e:	4b01      	ldr	r3, [pc, #4]	; (8000a74 <TESS_DAS_ADD_SIGNAL+0x254>)
 8000a70:	701a      	strb	r2, [r3, #0]
      }
      break;
 8000a72:	e062      	b.n	8000b3a <TESS_DAS_ADD_SIGNAL+0x31a>
 8000a74:	2000b688 	.word	0x2000b688
 8000a78:	47000000 	.word	0x47000000
   case int32:      /*or float 32*/
      {
         temp32 = (int32_t)(signal*resolution);
 8000a7c:	ed97 7a03 	vldr	s14, [r7, #12]
 8000a80:	edd7 7a01 	vldr	s15, [r7, #4]
 8000a84:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000a88:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000a8c:	ee17 3a90 	vmov	r3, s15
 8000a90:	617b      	str	r3, [r7, #20]
         temp32 = TESS_SINT32_TO_UINT32(temp32);
 8000a92:	697b      	ldr	r3, [r7, #20]
 8000a94:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8000a98:	617b      	str	r3, [r7, #20]
         *(TESS_DASOUTPUT_BUFF.p_byte_data + TESS_DASOUTPUT_BUFF.filled) = (temp32&0x000000FF);
 8000a9a:	4b2a      	ldr	r3, [pc, #168]	; (8000b44 <TESS_DAS_ADD_SIGNAL+0x324>)
 8000a9c:	685b      	ldr	r3, [r3, #4]
 8000a9e:	4a29      	ldr	r2, [pc, #164]	; (8000b44 <TESS_DAS_ADD_SIGNAL+0x324>)
 8000aa0:	7812      	ldrb	r2, [r2, #0]
 8000aa2:	4413      	add	r3, r2
 8000aa4:	697a      	ldr	r2, [r7, #20]
 8000aa6:	b2d2      	uxtb	r2, r2
 8000aa8:	701a      	strb	r2, [r3, #0]
         TESS_DASOUTPUT_BUFF.filled = TESS_BUFF_IDX_INC(TESS_DASOUTPUT_BUFF.filled, ACQ_BUFFER_SIZE);
 8000aaa:	4b26      	ldr	r3, [pc, #152]	; (8000b44 <TESS_DAS_ADD_SIGNAL+0x324>)
 8000aac:	781b      	ldrb	r3, [r3, #0]
 8000aae:	b29b      	uxth	r3, r3
 8000ab0:	211e      	movs	r1, #30
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	f000 fa8b 	bl	8000fce <TESS_BUFF_IDX_INC>
 8000ab8:	4603      	mov	r3, r0
 8000aba:	b2da      	uxtb	r2, r3
 8000abc:	4b21      	ldr	r3, [pc, #132]	; (8000b44 <TESS_DAS_ADD_SIGNAL+0x324>)
 8000abe:	701a      	strb	r2, [r3, #0]
         *(TESS_DASOUTPUT_BUFF.p_byte_data + TESS_DASOUTPUT_BUFF.filled) = (temp32&0x0000FF00)>>8;
 8000ac0:	697b      	ldr	r3, [r7, #20]
 8000ac2:	0a19      	lsrs	r1, r3, #8
 8000ac4:	4b1f      	ldr	r3, [pc, #124]	; (8000b44 <TESS_DAS_ADD_SIGNAL+0x324>)
 8000ac6:	685b      	ldr	r3, [r3, #4]
 8000ac8:	4a1e      	ldr	r2, [pc, #120]	; (8000b44 <TESS_DAS_ADD_SIGNAL+0x324>)
 8000aca:	7812      	ldrb	r2, [r2, #0]
 8000acc:	4413      	add	r3, r2
 8000ace:	b2ca      	uxtb	r2, r1
 8000ad0:	701a      	strb	r2, [r3, #0]
         TESS_DASOUTPUT_BUFF.filled = TESS_BUFF_IDX_INC(TESS_DASOUTPUT_BUFF.filled, ACQ_BUFFER_SIZE);
 8000ad2:	4b1c      	ldr	r3, [pc, #112]	; (8000b44 <TESS_DAS_ADD_SIGNAL+0x324>)
 8000ad4:	781b      	ldrb	r3, [r3, #0]
 8000ad6:	b29b      	uxth	r3, r3
 8000ad8:	211e      	movs	r1, #30
 8000ada:	4618      	mov	r0, r3
 8000adc:	f000 fa77 	bl	8000fce <TESS_BUFF_IDX_INC>
 8000ae0:	4603      	mov	r3, r0
 8000ae2:	b2da      	uxtb	r2, r3
 8000ae4:	4b17      	ldr	r3, [pc, #92]	; (8000b44 <TESS_DAS_ADD_SIGNAL+0x324>)
 8000ae6:	701a      	strb	r2, [r3, #0]
         *(TESS_DASOUTPUT_BUFF.p_byte_data + TESS_DASOUTPUT_BUFF.filled) = (temp32&0x00FF0000)>>16;
 8000ae8:	697b      	ldr	r3, [r7, #20]
 8000aea:	0c19      	lsrs	r1, r3, #16
 8000aec:	4b15      	ldr	r3, [pc, #84]	; (8000b44 <TESS_DAS_ADD_SIGNAL+0x324>)
 8000aee:	685b      	ldr	r3, [r3, #4]
 8000af0:	4a14      	ldr	r2, [pc, #80]	; (8000b44 <TESS_DAS_ADD_SIGNAL+0x324>)
 8000af2:	7812      	ldrb	r2, [r2, #0]
 8000af4:	4413      	add	r3, r2
 8000af6:	b2ca      	uxtb	r2, r1
 8000af8:	701a      	strb	r2, [r3, #0]
         TESS_DASOUTPUT_BUFF.filled = TESS_BUFF_IDX_INC(TESS_DASOUTPUT_BUFF.filled, ACQ_BUFFER_SIZE);
 8000afa:	4b12      	ldr	r3, [pc, #72]	; (8000b44 <TESS_DAS_ADD_SIGNAL+0x324>)
 8000afc:	781b      	ldrb	r3, [r3, #0]
 8000afe:	b29b      	uxth	r3, r3
 8000b00:	211e      	movs	r1, #30
 8000b02:	4618      	mov	r0, r3
 8000b04:	f000 fa63 	bl	8000fce <TESS_BUFF_IDX_INC>
 8000b08:	4603      	mov	r3, r0
 8000b0a:	b2da      	uxtb	r2, r3
 8000b0c:	4b0d      	ldr	r3, [pc, #52]	; (8000b44 <TESS_DAS_ADD_SIGNAL+0x324>)
 8000b0e:	701a      	strb	r2, [r3, #0]
         *(TESS_DASOUTPUT_BUFF.p_byte_data + TESS_DASOUTPUT_BUFF.filled) = (temp32&0xFF000000)>>24;
 8000b10:	697b      	ldr	r3, [r7, #20]
 8000b12:	0e19      	lsrs	r1, r3, #24
 8000b14:	4b0b      	ldr	r3, [pc, #44]	; (8000b44 <TESS_DAS_ADD_SIGNAL+0x324>)
 8000b16:	685b      	ldr	r3, [r3, #4]
 8000b18:	4a0a      	ldr	r2, [pc, #40]	; (8000b44 <TESS_DAS_ADD_SIGNAL+0x324>)
 8000b1a:	7812      	ldrb	r2, [r2, #0]
 8000b1c:	4413      	add	r3, r2
 8000b1e:	b2ca      	uxtb	r2, r1
 8000b20:	701a      	strb	r2, [r3, #0]
         TESS_DASOUTPUT_BUFF.filled = TESS_BUFF_IDX_INC(TESS_DASOUTPUT_BUFF.filled, ACQ_BUFFER_SIZE);
 8000b22:	4b08      	ldr	r3, [pc, #32]	; (8000b44 <TESS_DAS_ADD_SIGNAL+0x324>)
 8000b24:	781b      	ldrb	r3, [r3, #0]
 8000b26:	b29b      	uxth	r3, r3
 8000b28:	211e      	movs	r1, #30
 8000b2a:	4618      	mov	r0, r3
 8000b2c:	f000 fa4f 	bl	8000fce <TESS_BUFF_IDX_INC>
 8000b30:	4603      	mov	r3, r0
 8000b32:	b2da      	uxtb	r2, r3
 8000b34:	4b03      	ldr	r3, [pc, #12]	; (8000b44 <TESS_DAS_ADD_SIGNAL+0x324>)
 8000b36:	701a      	strb	r2, [r3, #0]
      }
      break;
 8000b38:	bf00      	nop
   }


}
 8000b3a:	bf00      	nop
 8000b3c:	3718      	adds	r7, #24
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	bd80      	pop	{r7, pc}
 8000b42:	bf00      	nop
 8000b44:	2000b688 	.word	0x2000b688

08000b48 <TESS_RING_BUFFER_INIT>:
#if CFG_ACQ_ON

static void DATA_COPY ( const r_buff_data_t *source, r_buff_data_t *dest);
static void FULL_BUFF_DATA(r_buff_data_t *dest);
void TESS_RING_BUFFER_INIT(ring_buffer_t * buff)
{
 8000b48:	b480      	push	{r7}
 8000b4a:	b085      	sub	sp, #20
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	6078      	str	r0, [r7, #4]
   uint16_t  idx;


   buff->count         = 0;
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	2200      	movs	r2, #0
 8000b54:	809a      	strh	r2, [r3, #4]
   buff->inner_count   = 0;
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	2200      	movs	r2, #0
 8000b5a:	80da      	strh	r2, [r3, #6]
   buff->head          = 0;
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	2200      	movs	r2, #0
 8000b60:	801a      	strh	r2, [r3, #0]
   buff->tail          = 0;
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	2200      	movs	r2, #0
 8000b66:	805a      	strh	r2, [r3, #2]

   for (idx = 0; idx < RBUF_SIZE; idx++)
 8000b68:	2300      	movs	r3, #0
 8000b6a:	81fb      	strh	r3, [r7, #14]
 8000b6c:	e12e      	b.n	8000dcc <TESS_RING_BUFFER_INIT+0x284>
   {
      buff->buff_data[idx].byte0 = 0;
 8000b6e:	89fa      	ldrh	r2, [r7, #14]
 8000b70:	6879      	ldr	r1, [r7, #4]
 8000b72:	4613      	mov	r3, r2
 8000b74:	011b      	lsls	r3, r3, #4
 8000b76:	1a9b      	subs	r3, r3, r2
 8000b78:	005b      	lsls	r3, r3, #1
 8000b7a:	440b      	add	r3, r1
 8000b7c:	330a      	adds	r3, #10
 8000b7e:	2200      	movs	r2, #0
 8000b80:	701a      	strb	r2, [r3, #0]
      buff->buff_data[idx].byte1 = 0;
 8000b82:	89fa      	ldrh	r2, [r7, #14]
 8000b84:	6879      	ldr	r1, [r7, #4]
 8000b86:	4613      	mov	r3, r2
 8000b88:	011b      	lsls	r3, r3, #4
 8000b8a:	1a9b      	subs	r3, r3, r2
 8000b8c:	005b      	lsls	r3, r3, #1
 8000b8e:	440b      	add	r3, r1
 8000b90:	330b      	adds	r3, #11
 8000b92:	2200      	movs	r2, #0
 8000b94:	701a      	strb	r2, [r3, #0]
      buff->buff_data[idx].byte2 = 0;
 8000b96:	89fa      	ldrh	r2, [r7, #14]
 8000b98:	6879      	ldr	r1, [r7, #4]
 8000b9a:	4613      	mov	r3, r2
 8000b9c:	011b      	lsls	r3, r3, #4
 8000b9e:	1a9b      	subs	r3, r3, r2
 8000ba0:	005b      	lsls	r3, r3, #1
 8000ba2:	440b      	add	r3, r1
 8000ba4:	330c      	adds	r3, #12
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	701a      	strb	r2, [r3, #0]
      buff->buff_data[idx].byte3 = 0;
 8000baa:	89fa      	ldrh	r2, [r7, #14]
 8000bac:	6879      	ldr	r1, [r7, #4]
 8000bae:	4613      	mov	r3, r2
 8000bb0:	011b      	lsls	r3, r3, #4
 8000bb2:	1a9b      	subs	r3, r3, r2
 8000bb4:	005b      	lsls	r3, r3, #1
 8000bb6:	440b      	add	r3, r1
 8000bb8:	330d      	adds	r3, #13
 8000bba:	2200      	movs	r2, #0
 8000bbc:	701a      	strb	r2, [r3, #0]
      buff->buff_data[idx].byte4 = 0;
 8000bbe:	89fa      	ldrh	r2, [r7, #14]
 8000bc0:	6879      	ldr	r1, [r7, #4]
 8000bc2:	4613      	mov	r3, r2
 8000bc4:	011b      	lsls	r3, r3, #4
 8000bc6:	1a9b      	subs	r3, r3, r2
 8000bc8:	005b      	lsls	r3, r3, #1
 8000bca:	440b      	add	r3, r1
 8000bcc:	330e      	adds	r3, #14
 8000bce:	2200      	movs	r2, #0
 8000bd0:	701a      	strb	r2, [r3, #0]
      buff->buff_data[idx].byte5 = 0;
 8000bd2:	89fa      	ldrh	r2, [r7, #14]
 8000bd4:	6879      	ldr	r1, [r7, #4]
 8000bd6:	4613      	mov	r3, r2
 8000bd8:	011b      	lsls	r3, r3, #4
 8000bda:	1a9b      	subs	r3, r3, r2
 8000bdc:	005b      	lsls	r3, r3, #1
 8000bde:	440b      	add	r3, r1
 8000be0:	330f      	adds	r3, #15
 8000be2:	2200      	movs	r2, #0
 8000be4:	701a      	strb	r2, [r3, #0]
      buff->buff_data[idx].byte6 = 0;
 8000be6:	89fa      	ldrh	r2, [r7, #14]
 8000be8:	6879      	ldr	r1, [r7, #4]
 8000bea:	4613      	mov	r3, r2
 8000bec:	011b      	lsls	r3, r3, #4
 8000bee:	1a9b      	subs	r3, r3, r2
 8000bf0:	005b      	lsls	r3, r3, #1
 8000bf2:	440b      	add	r3, r1
 8000bf4:	3310      	adds	r3, #16
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	701a      	strb	r2, [r3, #0]
      buff->buff_data[idx].byte7 = 0;
 8000bfa:	89fa      	ldrh	r2, [r7, #14]
 8000bfc:	6879      	ldr	r1, [r7, #4]
 8000bfe:	4613      	mov	r3, r2
 8000c00:	011b      	lsls	r3, r3, #4
 8000c02:	1a9b      	subs	r3, r3, r2
 8000c04:	005b      	lsls	r3, r3, #1
 8000c06:	440b      	add	r3, r1
 8000c08:	3311      	adds	r3, #17
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	701a      	strb	r2, [r3, #0]
      buff->buff_data[idx].byte8 = 0;
 8000c0e:	89fa      	ldrh	r2, [r7, #14]
 8000c10:	6879      	ldr	r1, [r7, #4]
 8000c12:	4613      	mov	r3, r2
 8000c14:	011b      	lsls	r3, r3, #4
 8000c16:	1a9b      	subs	r3, r3, r2
 8000c18:	005b      	lsls	r3, r3, #1
 8000c1a:	440b      	add	r3, r1
 8000c1c:	3312      	adds	r3, #18
 8000c1e:	2200      	movs	r2, #0
 8000c20:	701a      	strb	r2, [r3, #0]
      buff->buff_data[idx].byte9 = 0;
 8000c22:	89fa      	ldrh	r2, [r7, #14]
 8000c24:	6879      	ldr	r1, [r7, #4]
 8000c26:	4613      	mov	r3, r2
 8000c28:	011b      	lsls	r3, r3, #4
 8000c2a:	1a9b      	subs	r3, r3, r2
 8000c2c:	005b      	lsls	r3, r3, #1
 8000c2e:	440b      	add	r3, r1
 8000c30:	3313      	adds	r3, #19
 8000c32:	2200      	movs	r2, #0
 8000c34:	701a      	strb	r2, [r3, #0]
      buff->buff_data[idx].byte10 = 0;
 8000c36:	89fa      	ldrh	r2, [r7, #14]
 8000c38:	6879      	ldr	r1, [r7, #4]
 8000c3a:	4613      	mov	r3, r2
 8000c3c:	011b      	lsls	r3, r3, #4
 8000c3e:	1a9b      	subs	r3, r3, r2
 8000c40:	005b      	lsls	r3, r3, #1
 8000c42:	440b      	add	r3, r1
 8000c44:	3314      	adds	r3, #20
 8000c46:	2200      	movs	r2, #0
 8000c48:	701a      	strb	r2, [r3, #0]
      buff->buff_data[idx].byte11 = 0;
 8000c4a:	89fa      	ldrh	r2, [r7, #14]
 8000c4c:	6879      	ldr	r1, [r7, #4]
 8000c4e:	4613      	mov	r3, r2
 8000c50:	011b      	lsls	r3, r3, #4
 8000c52:	1a9b      	subs	r3, r3, r2
 8000c54:	005b      	lsls	r3, r3, #1
 8000c56:	440b      	add	r3, r1
 8000c58:	3315      	adds	r3, #21
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	701a      	strb	r2, [r3, #0]
      buff->buff_data[idx].byte12 = 0;
 8000c5e:	89fa      	ldrh	r2, [r7, #14]
 8000c60:	6879      	ldr	r1, [r7, #4]
 8000c62:	4613      	mov	r3, r2
 8000c64:	011b      	lsls	r3, r3, #4
 8000c66:	1a9b      	subs	r3, r3, r2
 8000c68:	005b      	lsls	r3, r3, #1
 8000c6a:	440b      	add	r3, r1
 8000c6c:	3316      	adds	r3, #22
 8000c6e:	2200      	movs	r2, #0
 8000c70:	701a      	strb	r2, [r3, #0]
      buff->buff_data[idx].byte13 = 0;
 8000c72:	89fa      	ldrh	r2, [r7, #14]
 8000c74:	6879      	ldr	r1, [r7, #4]
 8000c76:	4613      	mov	r3, r2
 8000c78:	011b      	lsls	r3, r3, #4
 8000c7a:	1a9b      	subs	r3, r3, r2
 8000c7c:	005b      	lsls	r3, r3, #1
 8000c7e:	440b      	add	r3, r1
 8000c80:	3317      	adds	r3, #23
 8000c82:	2200      	movs	r2, #0
 8000c84:	701a      	strb	r2, [r3, #0]
      buff->buff_data[idx].byte14 = 0;
 8000c86:	89fa      	ldrh	r2, [r7, #14]
 8000c88:	6879      	ldr	r1, [r7, #4]
 8000c8a:	4613      	mov	r3, r2
 8000c8c:	011b      	lsls	r3, r3, #4
 8000c8e:	1a9b      	subs	r3, r3, r2
 8000c90:	005b      	lsls	r3, r3, #1
 8000c92:	440b      	add	r3, r1
 8000c94:	3318      	adds	r3, #24
 8000c96:	2200      	movs	r2, #0
 8000c98:	701a      	strb	r2, [r3, #0]
      buff->buff_data[idx].byte15 = 0;
 8000c9a:	89fa      	ldrh	r2, [r7, #14]
 8000c9c:	6879      	ldr	r1, [r7, #4]
 8000c9e:	4613      	mov	r3, r2
 8000ca0:	011b      	lsls	r3, r3, #4
 8000ca2:	1a9b      	subs	r3, r3, r2
 8000ca4:	005b      	lsls	r3, r3, #1
 8000ca6:	440b      	add	r3, r1
 8000ca8:	3319      	adds	r3, #25
 8000caa:	2200      	movs	r2, #0
 8000cac:	701a      	strb	r2, [r3, #0]
      buff->buff_data[idx].byte16 = 0;
 8000cae:	89fa      	ldrh	r2, [r7, #14]
 8000cb0:	6879      	ldr	r1, [r7, #4]
 8000cb2:	4613      	mov	r3, r2
 8000cb4:	011b      	lsls	r3, r3, #4
 8000cb6:	1a9b      	subs	r3, r3, r2
 8000cb8:	005b      	lsls	r3, r3, #1
 8000cba:	440b      	add	r3, r1
 8000cbc:	331a      	adds	r3, #26
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	701a      	strb	r2, [r3, #0]
      buff->buff_data[idx].byte17 = 0;
 8000cc2:	89fa      	ldrh	r2, [r7, #14]
 8000cc4:	6879      	ldr	r1, [r7, #4]
 8000cc6:	4613      	mov	r3, r2
 8000cc8:	011b      	lsls	r3, r3, #4
 8000cca:	1a9b      	subs	r3, r3, r2
 8000ccc:	005b      	lsls	r3, r3, #1
 8000cce:	440b      	add	r3, r1
 8000cd0:	331b      	adds	r3, #27
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	701a      	strb	r2, [r3, #0]
      buff->buff_data[idx].byte18 = 0;
 8000cd6:	89fa      	ldrh	r2, [r7, #14]
 8000cd8:	6879      	ldr	r1, [r7, #4]
 8000cda:	4613      	mov	r3, r2
 8000cdc:	011b      	lsls	r3, r3, #4
 8000cde:	1a9b      	subs	r3, r3, r2
 8000ce0:	005b      	lsls	r3, r3, #1
 8000ce2:	440b      	add	r3, r1
 8000ce4:	331c      	adds	r3, #28
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	701a      	strb	r2, [r3, #0]
      buff->buff_data[idx].byte19 = 0;
 8000cea:	89fa      	ldrh	r2, [r7, #14]
 8000cec:	6879      	ldr	r1, [r7, #4]
 8000cee:	4613      	mov	r3, r2
 8000cf0:	011b      	lsls	r3, r3, #4
 8000cf2:	1a9b      	subs	r3, r3, r2
 8000cf4:	005b      	lsls	r3, r3, #1
 8000cf6:	440b      	add	r3, r1
 8000cf8:	331d      	adds	r3, #29
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	701a      	strb	r2, [r3, #0]
      buff->buff_data[idx].byte20 = 0;
 8000cfe:	89fa      	ldrh	r2, [r7, #14]
 8000d00:	6879      	ldr	r1, [r7, #4]
 8000d02:	4613      	mov	r3, r2
 8000d04:	011b      	lsls	r3, r3, #4
 8000d06:	1a9b      	subs	r3, r3, r2
 8000d08:	005b      	lsls	r3, r3, #1
 8000d0a:	440b      	add	r3, r1
 8000d0c:	331e      	adds	r3, #30
 8000d0e:	2200      	movs	r2, #0
 8000d10:	701a      	strb	r2, [r3, #0]
      buff->buff_data[idx].byte21 = 0;
 8000d12:	89fa      	ldrh	r2, [r7, #14]
 8000d14:	6879      	ldr	r1, [r7, #4]
 8000d16:	4613      	mov	r3, r2
 8000d18:	011b      	lsls	r3, r3, #4
 8000d1a:	1a9b      	subs	r3, r3, r2
 8000d1c:	005b      	lsls	r3, r3, #1
 8000d1e:	440b      	add	r3, r1
 8000d20:	331f      	adds	r3, #31
 8000d22:	2200      	movs	r2, #0
 8000d24:	701a      	strb	r2, [r3, #0]
      buff->buff_data[idx].byte22 = 0;
 8000d26:	89fa      	ldrh	r2, [r7, #14]
 8000d28:	6879      	ldr	r1, [r7, #4]
 8000d2a:	4613      	mov	r3, r2
 8000d2c:	011b      	lsls	r3, r3, #4
 8000d2e:	1a9b      	subs	r3, r3, r2
 8000d30:	005b      	lsls	r3, r3, #1
 8000d32:	440b      	add	r3, r1
 8000d34:	3320      	adds	r3, #32
 8000d36:	2200      	movs	r2, #0
 8000d38:	701a      	strb	r2, [r3, #0]
      buff->buff_data[idx].byte23 = 0;
 8000d3a:	89fa      	ldrh	r2, [r7, #14]
 8000d3c:	6879      	ldr	r1, [r7, #4]
 8000d3e:	4613      	mov	r3, r2
 8000d40:	011b      	lsls	r3, r3, #4
 8000d42:	1a9b      	subs	r3, r3, r2
 8000d44:	005b      	lsls	r3, r3, #1
 8000d46:	440b      	add	r3, r1
 8000d48:	3321      	adds	r3, #33	; 0x21
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	701a      	strb	r2, [r3, #0]
      buff->buff_data[idx].byte24 = 0;
 8000d4e:	89fa      	ldrh	r2, [r7, #14]
 8000d50:	6879      	ldr	r1, [r7, #4]
 8000d52:	4613      	mov	r3, r2
 8000d54:	011b      	lsls	r3, r3, #4
 8000d56:	1a9b      	subs	r3, r3, r2
 8000d58:	005b      	lsls	r3, r3, #1
 8000d5a:	440b      	add	r3, r1
 8000d5c:	3322      	adds	r3, #34	; 0x22
 8000d5e:	2200      	movs	r2, #0
 8000d60:	701a      	strb	r2, [r3, #0]
      buff->buff_data[idx].byte25 = 0;
 8000d62:	89fa      	ldrh	r2, [r7, #14]
 8000d64:	6879      	ldr	r1, [r7, #4]
 8000d66:	4613      	mov	r3, r2
 8000d68:	011b      	lsls	r3, r3, #4
 8000d6a:	1a9b      	subs	r3, r3, r2
 8000d6c:	005b      	lsls	r3, r3, #1
 8000d6e:	440b      	add	r3, r1
 8000d70:	3323      	adds	r3, #35	; 0x23
 8000d72:	2200      	movs	r2, #0
 8000d74:	701a      	strb	r2, [r3, #0]
      buff->buff_data[idx].byte26 = 0;
 8000d76:	89fa      	ldrh	r2, [r7, #14]
 8000d78:	6879      	ldr	r1, [r7, #4]
 8000d7a:	4613      	mov	r3, r2
 8000d7c:	011b      	lsls	r3, r3, #4
 8000d7e:	1a9b      	subs	r3, r3, r2
 8000d80:	005b      	lsls	r3, r3, #1
 8000d82:	440b      	add	r3, r1
 8000d84:	3324      	adds	r3, #36	; 0x24
 8000d86:	2200      	movs	r2, #0
 8000d88:	701a      	strb	r2, [r3, #0]
      buff->buff_data[idx].byte27 = 0;
 8000d8a:	89fa      	ldrh	r2, [r7, #14]
 8000d8c:	6879      	ldr	r1, [r7, #4]
 8000d8e:	4613      	mov	r3, r2
 8000d90:	011b      	lsls	r3, r3, #4
 8000d92:	1a9b      	subs	r3, r3, r2
 8000d94:	005b      	lsls	r3, r3, #1
 8000d96:	440b      	add	r3, r1
 8000d98:	3325      	adds	r3, #37	; 0x25
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	701a      	strb	r2, [r3, #0]
      buff->buff_data[idx].byte28 = 0;
 8000d9e:	89fa      	ldrh	r2, [r7, #14]
 8000da0:	6879      	ldr	r1, [r7, #4]
 8000da2:	4613      	mov	r3, r2
 8000da4:	011b      	lsls	r3, r3, #4
 8000da6:	1a9b      	subs	r3, r3, r2
 8000da8:	005b      	lsls	r3, r3, #1
 8000daa:	440b      	add	r3, r1
 8000dac:	3326      	adds	r3, #38	; 0x26
 8000dae:	2200      	movs	r2, #0
 8000db0:	701a      	strb	r2, [r3, #0]
      buff->buff_data[idx].byte29 = 0;
 8000db2:	89fa      	ldrh	r2, [r7, #14]
 8000db4:	6879      	ldr	r1, [r7, #4]
 8000db6:	4613      	mov	r3, r2
 8000db8:	011b      	lsls	r3, r3, #4
 8000dba:	1a9b      	subs	r3, r3, r2
 8000dbc:	005b      	lsls	r3, r3, #1
 8000dbe:	440b      	add	r3, r1
 8000dc0:	3327      	adds	r3, #39	; 0x27
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	701a      	strb	r2, [r3, #0]
   for (idx = 0; idx < RBUF_SIZE; idx++)
 8000dc6:	89fb      	ldrh	r3, [r7, #14]
 8000dc8:	3301      	adds	r3, #1
 8000dca:	81fb      	strh	r3, [r7, #14]
 8000dcc:	89fb      	ldrh	r3, [r7, #14]
 8000dce:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8000dd2:	f4ff aecc 	bcc.w	8000b6e <TESS_RING_BUFFER_INIT+0x26>
   }
}
 8000dd6:	bf00      	nop
 8000dd8:	3714      	adds	r7, #20
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de0:	4770      	bx	lr

08000de2 <TESS_RING_BUFFER_GET>:

r_buff_data_t TESS_RING_BUFFER_GET(ring_buffer_t * buff)
{
 8000de2:	b5b0      	push	{r4, r5, r7, lr}
 8000de4:	b08a      	sub	sp, #40	; 0x28
 8000de6:	af00      	add	r7, sp, #0
 8000de8:	6078      	str	r0, [r7, #4]
 8000dea:	6039      	str	r1, [r7, #0]
   r_buff_data_t  loc_buff_data;


   if (buff->count > 0u)
 8000dec:	683b      	ldr	r3, [r7, #0]
 8000dee:	889b      	ldrh	r3, [r3, #4]
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d022      	beq.n	8000e3a <TESS_RING_BUFFER_GET+0x58>
   {
      /*copy data from the buffer to local structure*/
      DATA_COPY(&(buff->buff_data[buff->tail]), &loc_buff_data);
 8000df4:	683b      	ldr	r3, [r7, #0]
 8000df6:	885b      	ldrh	r3, [r3, #2]
 8000df8:	461a      	mov	r2, r3
 8000dfa:	4613      	mov	r3, r2
 8000dfc:	011b      	lsls	r3, r3, #4
 8000dfe:	1a9b      	subs	r3, r3, r2
 8000e00:	005b      	lsls	r3, r3, #1
 8000e02:	3308      	adds	r3, #8
 8000e04:	683a      	ldr	r2, [r7, #0]
 8000e06:	4413      	add	r3, r2
 8000e08:	3302      	adds	r3, #2
 8000e0a:	f107 0208 	add.w	r2, r7, #8
 8000e0e:	4611      	mov	r1, r2
 8000e10:	4618      	mov	r0, r3
 8000e12:	f000 f8f6 	bl	8001002 <DATA_COPY>

      buff->tail  = TESS_BUFF_IDX_INC (buff->tail, RBUF_SIZE);
 8000e16:	683b      	ldr	r3, [r7, #0]
 8000e18:	885b      	ldrh	r3, [r3, #2]
 8000e1a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8000e1e:	4618      	mov	r0, r3
 8000e20:	f000 f8d5 	bl	8000fce <TESS_BUFF_IDX_INC>
 8000e24:	4603      	mov	r3, r0
 8000e26:	461a      	mov	r2, r3
 8000e28:	683b      	ldr	r3, [r7, #0]
 8000e2a:	805a      	strh	r2, [r3, #2]
      buff->count--;
 8000e2c:	683b      	ldr	r3, [r7, #0]
 8000e2e:	889b      	ldrh	r3, [r3, #4]
 8000e30:	3b01      	subs	r3, #1
 8000e32:	b29a      	uxth	r2, r3
 8000e34:	683b      	ldr	r3, [r7, #0]
 8000e36:	809a      	strh	r2, [r3, #4]
 8000e38:	e041      	b.n	8000ebe <TESS_RING_BUFFER_GET+0xdc>

   }
   else
   {
      /* fill buffer with dummy data*/
      loc_buff_data.byte0 = 1;
 8000e3a:	2301      	movs	r3, #1
 8000e3c:	723b      	strb	r3, [r7, #8]
      loc_buff_data.byte1 = 1;
 8000e3e:	2301      	movs	r3, #1
 8000e40:	727b      	strb	r3, [r7, #9]
      loc_buff_data.byte2 = 1;
 8000e42:	2301      	movs	r3, #1
 8000e44:	72bb      	strb	r3, [r7, #10]
      loc_buff_data.byte3 = 1;
 8000e46:	2301      	movs	r3, #1
 8000e48:	72fb      	strb	r3, [r7, #11]
      loc_buff_data.byte4 = 1;
 8000e4a:	2301      	movs	r3, #1
 8000e4c:	733b      	strb	r3, [r7, #12]
      loc_buff_data.byte5 = 1;
 8000e4e:	2301      	movs	r3, #1
 8000e50:	737b      	strb	r3, [r7, #13]
      loc_buff_data.byte6 = 1;
 8000e52:	2301      	movs	r3, #1
 8000e54:	73bb      	strb	r3, [r7, #14]
      loc_buff_data.byte7 = 1;
 8000e56:	2301      	movs	r3, #1
 8000e58:	73fb      	strb	r3, [r7, #15]
      loc_buff_data.byte8 = 1;
 8000e5a:	2301      	movs	r3, #1
 8000e5c:	743b      	strb	r3, [r7, #16]
      loc_buff_data.byte9 = 1;
 8000e5e:	2301      	movs	r3, #1
 8000e60:	747b      	strb	r3, [r7, #17]
      loc_buff_data.byte10 = 1;
 8000e62:	2301      	movs	r3, #1
 8000e64:	74bb      	strb	r3, [r7, #18]
      loc_buff_data.byte11 = 1;
 8000e66:	2301      	movs	r3, #1
 8000e68:	74fb      	strb	r3, [r7, #19]
      loc_buff_data.byte12 = 1;
 8000e6a:	2301      	movs	r3, #1
 8000e6c:	753b      	strb	r3, [r7, #20]
      loc_buff_data.byte13 = 1;
 8000e6e:	2301      	movs	r3, #1
 8000e70:	757b      	strb	r3, [r7, #21]
      loc_buff_data.byte14 = 1;
 8000e72:	2301      	movs	r3, #1
 8000e74:	75bb      	strb	r3, [r7, #22]
      loc_buff_data.byte15 = 1;
 8000e76:	2301      	movs	r3, #1
 8000e78:	75fb      	strb	r3, [r7, #23]
      loc_buff_data.byte16 = 1;
 8000e7a:	2301      	movs	r3, #1
 8000e7c:	763b      	strb	r3, [r7, #24]
      loc_buff_data.byte17 = 1;
 8000e7e:	2301      	movs	r3, #1
 8000e80:	767b      	strb	r3, [r7, #25]
      loc_buff_data.byte18 = 1;
 8000e82:	2301      	movs	r3, #1
 8000e84:	76bb      	strb	r3, [r7, #26]
      loc_buff_data.byte19 = 1;
 8000e86:	2301      	movs	r3, #1
 8000e88:	76fb      	strb	r3, [r7, #27]
      loc_buff_data.byte20 = 1;
 8000e8a:	2301      	movs	r3, #1
 8000e8c:	773b      	strb	r3, [r7, #28]
      loc_buff_data.byte21 = 1;
 8000e8e:	2301      	movs	r3, #1
 8000e90:	777b      	strb	r3, [r7, #29]
      loc_buff_data.byte22 = 1;
 8000e92:	2301      	movs	r3, #1
 8000e94:	77bb      	strb	r3, [r7, #30]
      loc_buff_data.byte23 = 1;
 8000e96:	2301      	movs	r3, #1
 8000e98:	77fb      	strb	r3, [r7, #31]
      loc_buff_data.byte24 = 1;
 8000e9a:	2301      	movs	r3, #1
 8000e9c:	f887 3020 	strb.w	r3, [r7, #32]
      loc_buff_data.byte25 = 1;
 8000ea0:	2301      	movs	r3, #1
 8000ea2:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
      loc_buff_data.byte26 = 1;
 8000ea6:	2301      	movs	r3, #1
 8000ea8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
      loc_buff_data.byte27 = 1;
 8000eac:	2301      	movs	r3, #1
 8000eae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
      loc_buff_data.byte28 = 1;
 8000eb2:	2301      	movs	r3, #1
 8000eb4:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
      loc_buff_data.byte29 = 1;
 8000eb8:	2301      	movs	r3, #1
 8000eba:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
   }

   /*return the entire structure at once*/
   return (loc_buff_data);
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	461d      	mov	r5, r3
 8000ec2:	f107 0408 	add.w	r4, r7, #8
 8000ec6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000ec8:	6028      	str	r0, [r5, #0]
 8000eca:	6069      	str	r1, [r5, #4]
 8000ecc:	60aa      	str	r2, [r5, #8]
 8000ece:	60eb      	str	r3, [r5, #12]
 8000ed0:	cc07      	ldmia	r4!, {r0, r1, r2}
 8000ed2:	6128      	str	r0, [r5, #16]
 8000ed4:	6169      	str	r1, [r5, #20]
 8000ed6:	61aa      	str	r2, [r5, #24]
 8000ed8:	8823      	ldrh	r3, [r4, #0]
 8000eda:	83ab      	strh	r3, [r5, #28]
}
 8000edc:	6878      	ldr	r0, [r7, #4]
 8000ede:	3728      	adds	r7, #40	; 0x28
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	bdb0      	pop	{r4, r5, r7, pc}

08000ee4 <TESS_RING_BUFFER_PUT>:

void TESS_RING_BUFFER_PUT(ring_buffer_t * buff, r_buff_data_t data)
{
 8000ee4:	b084      	sub	sp, #16
 8000ee6:	b580      	push	{r7, lr}
 8000ee8:	b082      	sub	sp, #8
 8000eea:	af00      	add	r7, sp, #0
 8000eec:	6078      	str	r0, [r7, #4]
 8000eee:	f107 0014 	add.w	r0, r7, #20
 8000ef2:	e880 000e 	stmia.w	r0, {r1, r2, r3}

   if (buff->count < RBUF_SIZE)
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	889b      	ldrh	r3, [r3, #4]
 8000efa:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8000efe:	d222      	bcs.n	8000f46 <TESS_RING_BUFFER_PUT+0x62>
   {
      DATA_COPY(&data, &(buff->buff_data[buff->head]));    /* copy received data to the buffer */
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	881b      	ldrh	r3, [r3, #0]
 8000f04:	461a      	mov	r2, r3
 8000f06:	4613      	mov	r3, r2
 8000f08:	011b      	lsls	r3, r3, #4
 8000f0a:	1a9b      	subs	r3, r3, r2
 8000f0c:	005b      	lsls	r3, r3, #1
 8000f0e:	3308      	adds	r3, #8
 8000f10:	687a      	ldr	r2, [r7, #4]
 8000f12:	4413      	add	r3, r2
 8000f14:	1c9a      	adds	r2, r3, #2
 8000f16:	f107 0314 	add.w	r3, r7, #20
 8000f1a:	4611      	mov	r1, r2
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	f000 f870 	bl	8001002 <DATA_COPY>

      buff->head = TESS_BUFF_IDX_INC (buff->head, RBUF_SIZE);
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	881b      	ldrh	r3, [r3, #0]
 8000f26:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	f000 f84f 	bl	8000fce <TESS_BUFF_IDX_INC>
 8000f30:	4603      	mov	r3, r0
 8000f32:	461a      	mov	r2, r3
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	801a      	strh	r2, [r3, #0]
      buff->count++;
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	889b      	ldrh	r3, [r3, #4]
 8000f3c:	3301      	adds	r3, #1
 8000f3e:	b29a      	uxth	r2, r3
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	809a      	strh	r2, [r3, #4]
      DATA_COPY(&data, &(buff->buff_data[buff->head]));    /* copy received data to the buffer */
      buff->head = TESS_BUFF_IDX_INC (buff->head, RBUF_SIZE);

      /*count will remain constant*/
   }
}
 8000f44:	e02b      	b.n	8000f9e <TESS_RING_BUFFER_PUT+0xba>
      buff->tail = TESS_BUFF_IDX_INC (buff->tail, RBUF_SIZE);
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	885b      	ldrh	r3, [r3, #2]
 8000f4a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8000f4e:	4618      	mov	r0, r3
 8000f50:	f000 f83d 	bl	8000fce <TESS_BUFF_IDX_INC>
 8000f54:	4603      	mov	r3, r0
 8000f56:	461a      	mov	r2, r3
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	805a      	strh	r2, [r3, #2]
      FULL_BUFF_DATA(&data);
 8000f5c:	f107 0314 	add.w	r3, r7, #20
 8000f60:	4618      	mov	r0, r3
 8000f62:	f000 f8d1 	bl	8001108 <FULL_BUFF_DATA>
      DATA_COPY(&data, &(buff->buff_data[buff->head]));    /* copy received data to the buffer */
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	881b      	ldrh	r3, [r3, #0]
 8000f6a:	461a      	mov	r2, r3
 8000f6c:	4613      	mov	r3, r2
 8000f6e:	011b      	lsls	r3, r3, #4
 8000f70:	1a9b      	subs	r3, r3, r2
 8000f72:	005b      	lsls	r3, r3, #1
 8000f74:	3308      	adds	r3, #8
 8000f76:	687a      	ldr	r2, [r7, #4]
 8000f78:	4413      	add	r3, r2
 8000f7a:	1c9a      	adds	r2, r3, #2
 8000f7c:	f107 0314 	add.w	r3, r7, #20
 8000f80:	4611      	mov	r1, r2
 8000f82:	4618      	mov	r0, r3
 8000f84:	f000 f83d 	bl	8001002 <DATA_COPY>
      buff->head = TESS_BUFF_IDX_INC (buff->head, RBUF_SIZE);
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	881b      	ldrh	r3, [r3, #0]
 8000f8c:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8000f90:	4618      	mov	r0, r3
 8000f92:	f000 f81c 	bl	8000fce <TESS_BUFF_IDX_INC>
 8000f96:	4603      	mov	r3, r0
 8000f98:	461a      	mov	r2, r3
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	801a      	strh	r2, [r3, #0]
}
 8000f9e:	bf00      	nop
 8000fa0:	3708      	adds	r7, #8
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000fa8:	b004      	add	sp, #16
 8000faa:	4770      	bx	lr

08000fac <TESS_RINGBUFF_IS_EMPTY>:

uint8_t TESS_RINGBUFF_IS_EMPTY( const ring_buffer_t * buff)
{
 8000fac:	b480      	push	{r7}
 8000fae:	b083      	sub	sp, #12
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
   return (buff->count == 0);
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	889b      	ldrh	r3, [r3, #4]
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	bf0c      	ite	eq
 8000fbc:	2301      	moveq	r3, #1
 8000fbe:	2300      	movne	r3, #0
 8000fc0:	b2db      	uxtb	r3, r3
}
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	370c      	adds	r7, #12
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fcc:	4770      	bx	lr

08000fce <TESS_BUFF_IDX_INC>:
{
   return (RBUF_SIZE == buff->count);
}

uint16_t TESS_BUFF_IDX_INC (const uint16_t currentVal,const uint16_t buff_size)
{
 8000fce:	b480      	push	{r7}
 8000fd0:	b085      	sub	sp, #20
 8000fd2:	af00      	add	r7, sp, #0
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	460a      	mov	r2, r1
 8000fd8:	80fb      	strh	r3, [r7, #6]
 8000fda:	4613      	mov	r3, r2
 8000fdc:	80bb      	strh	r3, [r7, #4]
   uint16_t  newVal;


   newVal = currentVal + 1;
 8000fde:	88fb      	ldrh	r3, [r7, #6]
 8000fe0:	3301      	adds	r3, #1
 8000fe2:	81fb      	strh	r3, [r7, #14]
   newVal %= buff_size;
 8000fe4:	89fb      	ldrh	r3, [r7, #14]
 8000fe6:	88ba      	ldrh	r2, [r7, #4]
 8000fe8:	fbb3 f1f2 	udiv	r1, r3, r2
 8000fec:	fb02 f201 	mul.w	r2, r2, r1
 8000ff0:	1a9b      	subs	r3, r3, r2
 8000ff2:	81fb      	strh	r3, [r7, #14]

   return newVal;
 8000ff4:	89fb      	ldrh	r3, [r7, #14]
}
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	3714      	adds	r7, #20
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001000:	4770      	bx	lr

08001002 <DATA_COPY>:

static void DATA_COPY ( const r_buff_data_t *source, r_buff_data_t *dest)
{
 8001002:	b480      	push	{r7}
 8001004:	b083      	sub	sp, #12
 8001006:	af00      	add	r7, sp, #0
 8001008:	6078      	str	r0, [r7, #4]
 800100a:	6039      	str	r1, [r7, #0]
   /* copy byte by byte*/
   dest->byte0 = source->byte0;
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	781a      	ldrb	r2, [r3, #0]
 8001010:	683b      	ldr	r3, [r7, #0]
 8001012:	701a      	strb	r2, [r3, #0]
   dest->byte1 = source->byte1;
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	785a      	ldrb	r2, [r3, #1]
 8001018:	683b      	ldr	r3, [r7, #0]
 800101a:	705a      	strb	r2, [r3, #1]
   dest->byte2 = source->byte2;
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	789a      	ldrb	r2, [r3, #2]
 8001020:	683b      	ldr	r3, [r7, #0]
 8001022:	709a      	strb	r2, [r3, #2]
   dest->byte3 = source->byte3;
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	78da      	ldrb	r2, [r3, #3]
 8001028:	683b      	ldr	r3, [r7, #0]
 800102a:	70da      	strb	r2, [r3, #3]
   dest->byte4 = source->byte4;
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	791a      	ldrb	r2, [r3, #4]
 8001030:	683b      	ldr	r3, [r7, #0]
 8001032:	711a      	strb	r2, [r3, #4]
   dest->byte5 = source->byte5;
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	795a      	ldrb	r2, [r3, #5]
 8001038:	683b      	ldr	r3, [r7, #0]
 800103a:	715a      	strb	r2, [r3, #5]
   dest->byte6 = source->byte6;
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	799a      	ldrb	r2, [r3, #6]
 8001040:	683b      	ldr	r3, [r7, #0]
 8001042:	719a      	strb	r2, [r3, #6]
   dest->byte7 = source->byte7;
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	79da      	ldrb	r2, [r3, #7]
 8001048:	683b      	ldr	r3, [r7, #0]
 800104a:	71da      	strb	r2, [r3, #7]
   dest->byte8 = source->byte8;
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	7a1a      	ldrb	r2, [r3, #8]
 8001050:	683b      	ldr	r3, [r7, #0]
 8001052:	721a      	strb	r2, [r3, #8]
   dest->byte9 = source->byte9;
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	7a5a      	ldrb	r2, [r3, #9]
 8001058:	683b      	ldr	r3, [r7, #0]
 800105a:	725a      	strb	r2, [r3, #9]
   dest->byte10 = source->byte10;
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	7a9a      	ldrb	r2, [r3, #10]
 8001060:	683b      	ldr	r3, [r7, #0]
 8001062:	729a      	strb	r2, [r3, #10]
   dest->byte11 = source->byte11;
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	7ada      	ldrb	r2, [r3, #11]
 8001068:	683b      	ldr	r3, [r7, #0]
 800106a:	72da      	strb	r2, [r3, #11]
   dest->byte12 = source->byte12;
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	7b1a      	ldrb	r2, [r3, #12]
 8001070:	683b      	ldr	r3, [r7, #0]
 8001072:	731a      	strb	r2, [r3, #12]
   dest->byte13 = source->byte13;
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	7b5a      	ldrb	r2, [r3, #13]
 8001078:	683b      	ldr	r3, [r7, #0]
 800107a:	735a      	strb	r2, [r3, #13]
   dest->byte14 = source->byte14;
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	7b9a      	ldrb	r2, [r3, #14]
 8001080:	683b      	ldr	r3, [r7, #0]
 8001082:	739a      	strb	r2, [r3, #14]
   dest->byte15 = source->byte15;
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	7bda      	ldrb	r2, [r3, #15]
 8001088:	683b      	ldr	r3, [r7, #0]
 800108a:	73da      	strb	r2, [r3, #15]
   dest->byte16 = source->byte16;
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	7c1a      	ldrb	r2, [r3, #16]
 8001090:	683b      	ldr	r3, [r7, #0]
 8001092:	741a      	strb	r2, [r3, #16]
   dest->byte17 = source->byte17;
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	7c5a      	ldrb	r2, [r3, #17]
 8001098:	683b      	ldr	r3, [r7, #0]
 800109a:	745a      	strb	r2, [r3, #17]
   dest->byte18 = source->byte18;
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	7c9a      	ldrb	r2, [r3, #18]
 80010a0:	683b      	ldr	r3, [r7, #0]
 80010a2:	749a      	strb	r2, [r3, #18]
   dest->byte19 = source->byte19;
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	7cda      	ldrb	r2, [r3, #19]
 80010a8:	683b      	ldr	r3, [r7, #0]
 80010aa:	74da      	strb	r2, [r3, #19]
   dest->byte20 = source->byte20;
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	7d1a      	ldrb	r2, [r3, #20]
 80010b0:	683b      	ldr	r3, [r7, #0]
 80010b2:	751a      	strb	r2, [r3, #20]
   dest->byte21 = source->byte21;
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	7d5a      	ldrb	r2, [r3, #21]
 80010b8:	683b      	ldr	r3, [r7, #0]
 80010ba:	755a      	strb	r2, [r3, #21]
   dest->byte22 = source->byte22;
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	7d9a      	ldrb	r2, [r3, #22]
 80010c0:	683b      	ldr	r3, [r7, #0]
 80010c2:	759a      	strb	r2, [r3, #22]
   dest->byte23 = source->byte23;
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	7dda      	ldrb	r2, [r3, #23]
 80010c8:	683b      	ldr	r3, [r7, #0]
 80010ca:	75da      	strb	r2, [r3, #23]
   dest->byte24 = source->byte24;
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	7e1a      	ldrb	r2, [r3, #24]
 80010d0:	683b      	ldr	r3, [r7, #0]
 80010d2:	761a      	strb	r2, [r3, #24]
   dest->byte25 = source->byte25;
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	7e5a      	ldrb	r2, [r3, #25]
 80010d8:	683b      	ldr	r3, [r7, #0]
 80010da:	765a      	strb	r2, [r3, #25]
   dest->byte26 = source->byte26;
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	7e9a      	ldrb	r2, [r3, #26]
 80010e0:	683b      	ldr	r3, [r7, #0]
 80010e2:	769a      	strb	r2, [r3, #26]
   dest->byte27 = source->byte27;
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	7eda      	ldrb	r2, [r3, #27]
 80010e8:	683b      	ldr	r3, [r7, #0]
 80010ea:	76da      	strb	r2, [r3, #27]
   dest->byte28 = source->byte28;
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	7f1a      	ldrb	r2, [r3, #28]
 80010f0:	683b      	ldr	r3, [r7, #0]
 80010f2:	771a      	strb	r2, [r3, #28]
   dest->byte29 = source->byte29;
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	7f5a      	ldrb	r2, [r3, #29]
 80010f8:	683b      	ldr	r3, [r7, #0]
 80010fa:	775a      	strb	r2, [r3, #29]

}
 80010fc:	bf00      	nop
 80010fe:	370c      	adds	r7, #12
 8001100:	46bd      	mov	sp, r7
 8001102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001106:	4770      	bx	lr

08001108 <FULL_BUFF_DATA>:

static void FULL_BUFF_DATA(r_buff_data_t *dest)
{
 8001108:	b480      	push	{r7}
 800110a:	b083      	sub	sp, #12
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
   dest->byte0 = 0;
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	2200      	movs	r2, #0
 8001114:	701a      	strb	r2, [r3, #0]
   dest->byte1 = 0;
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	2200      	movs	r2, #0
 800111a:	705a      	strb	r2, [r3, #1]
   dest->byte2 = 0;
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	2200      	movs	r2, #0
 8001120:	709a      	strb	r2, [r3, #2]
   dest->byte3 = 0;
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	2200      	movs	r2, #0
 8001126:	70da      	strb	r2, [r3, #3]
   dest->byte4 = 0;
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	2200      	movs	r2, #0
 800112c:	711a      	strb	r2, [r3, #4]
   dest->byte5 = 0;
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	2200      	movs	r2, #0
 8001132:	715a      	strb	r2, [r3, #5]
   dest->byte6 = 0;
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	2200      	movs	r2, #0
 8001138:	719a      	strb	r2, [r3, #6]
   dest->byte7 = 0;
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	2200      	movs	r2, #0
 800113e:	71da      	strb	r2, [r3, #7]
   dest->byte8 = 0;
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	2200      	movs	r2, #0
 8001144:	721a      	strb	r2, [r3, #8]
   dest->byte9 = 0;
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	2200      	movs	r2, #0
 800114a:	725a      	strb	r2, [r3, #9]
   dest->byte10 = 0;
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	2200      	movs	r2, #0
 8001150:	729a      	strb	r2, [r3, #10]
   dest->byte11 = 0;
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	2200      	movs	r2, #0
 8001156:	72da      	strb	r2, [r3, #11]
   dest->byte12 = 0;
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	2200      	movs	r2, #0
 800115c:	731a      	strb	r2, [r3, #12]
   dest->byte13 = 0;
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	2200      	movs	r2, #0
 8001162:	735a      	strb	r2, [r3, #13]
   dest->byte14 = 0;
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	2200      	movs	r2, #0
 8001168:	739a      	strb	r2, [r3, #14]
   dest->byte15 = 0;
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	2200      	movs	r2, #0
 800116e:	73da      	strb	r2, [r3, #15]
   dest->byte16 = 0;
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	2200      	movs	r2, #0
 8001174:	741a      	strb	r2, [r3, #16]
   dest->byte17 = 0;
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	2200      	movs	r2, #0
 800117a:	745a      	strb	r2, [r3, #17]
   dest->byte18 = 0;
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	2200      	movs	r2, #0
 8001180:	749a      	strb	r2, [r3, #18]
   dest->byte19 = 0;
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	2200      	movs	r2, #0
 8001186:	74da      	strb	r2, [r3, #19]
   dest->byte20 = 0;
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	2200      	movs	r2, #0
 800118c:	751a      	strb	r2, [r3, #20]
   dest->byte21 = 0;
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	2200      	movs	r2, #0
 8001192:	755a      	strb	r2, [r3, #21]
   dest->byte22 = 0;
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	2200      	movs	r2, #0
 8001198:	759a      	strb	r2, [r3, #22]
   dest->byte23 = 0;
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	2200      	movs	r2, #0
 800119e:	75da      	strb	r2, [r3, #23]
   dest->byte24 = 0;
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	2200      	movs	r2, #0
 80011a4:	761a      	strb	r2, [r3, #24]
   dest->byte25 = 0;
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	2200      	movs	r2, #0
 80011aa:	765a      	strb	r2, [r3, #25]
   dest->byte26 = 0;
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	2200      	movs	r2, #0
 80011b0:	769a      	strb	r2, [r3, #26]
   dest->byte27 = 0;
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	2200      	movs	r2, #0
 80011b6:	76da      	strb	r2, [r3, #27]
   dest->byte28 = 0;
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	2200      	movs	r2, #0
 80011bc:	771a      	strb	r2, [r3, #28]
   dest->byte29 = 0;
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	2200      	movs	r2, #0
 80011c2:	775a      	strb	r2, [r3, #29]
}
 80011c4:	bf00      	nop
 80011c6:	370c      	adds	r7, #12
 80011c8:	46bd      	mov	sp, r7
 80011ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ce:	4770      	bx	lr

080011d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80011d4:	f000 f9d2 	bl	800157c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80011d8:	f000 f808 	bl	80011ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80011dc:	f000 f870 	bl	80012c0 <MX_GPIO_Init>
  //MX_ADC1_Init();
  //MX_TIM1_Init();
  //MX_TIM3_Init();
  MX_USB_DEVICE_Init();
 80011e0:	f005 f9fc 	bl	80065dc <MX_USB_DEVICE_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	TESS_DAS_MAIN();
 80011e4:	f7ff fa2c 	bl	8000640 <TESS_DAS_MAIN>
 80011e8:	e7fc      	b.n	80011e4 <main+0x14>
	...

080011ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b094      	sub	sp, #80	; 0x50
 80011f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011f2:	f107 0320 	add.w	r3, r7, #32
 80011f6:	2230      	movs	r2, #48	; 0x30
 80011f8:	2100      	movs	r1, #0
 80011fa:	4618      	mov	r0, r3
 80011fc:	f005 ff30 	bl	8007060 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001200:	f107 030c 	add.w	r3, r7, #12
 8001204:	2200      	movs	r2, #0
 8001206:	601a      	str	r2, [r3, #0]
 8001208:	605a      	str	r2, [r3, #4]
 800120a:	609a      	str	r2, [r3, #8]
 800120c:	60da      	str	r2, [r3, #12]
 800120e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001210:	2300      	movs	r3, #0
 8001212:	60bb      	str	r3, [r7, #8]
 8001214:	4b28      	ldr	r3, [pc, #160]	; (80012b8 <SystemClock_Config+0xcc>)
 8001216:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001218:	4a27      	ldr	r2, [pc, #156]	; (80012b8 <SystemClock_Config+0xcc>)
 800121a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800121e:	6413      	str	r3, [r2, #64]	; 0x40
 8001220:	4b25      	ldr	r3, [pc, #148]	; (80012b8 <SystemClock_Config+0xcc>)
 8001222:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001224:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001228:	60bb      	str	r3, [r7, #8]
 800122a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800122c:	2300      	movs	r3, #0
 800122e:	607b      	str	r3, [r7, #4]
 8001230:	4b22      	ldr	r3, [pc, #136]	; (80012bc <SystemClock_Config+0xd0>)
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001238:	4a20      	ldr	r2, [pc, #128]	; (80012bc <SystemClock_Config+0xd0>)
 800123a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800123e:	6013      	str	r3, [r2, #0]
 8001240:	4b1e      	ldr	r3, [pc, #120]	; (80012bc <SystemClock_Config+0xd0>)
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001248:	607b      	str	r3, [r7, #4]
 800124a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800124c:	2301      	movs	r3, #1
 800124e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001250:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001254:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001256:	2302      	movs	r3, #2
 8001258:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800125a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800125e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001260:	2304      	movs	r3, #4
 8001262:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001264:	23a8      	movs	r3, #168	; 0xa8
 8001266:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001268:	2304      	movs	r3, #4
 800126a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800126c:	2307      	movs	r3, #7
 800126e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001270:	f107 0320 	add.w	r3, r7, #32
 8001274:	4618      	mov	r0, r3
 8001276:	f001 fe45 	bl	8002f04 <HAL_RCC_OscConfig>
 800127a:	4603      	mov	r3, r0
 800127c:	2b00      	cmp	r3, #0
 800127e:	d001      	beq.n	8001284 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001280:	f000 f89e 	bl	80013c0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001284:	230f      	movs	r3, #15
 8001286:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001288:	2302      	movs	r3, #2
 800128a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800128c:	2300      	movs	r3, #0
 800128e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001290:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001294:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001296:	2300      	movs	r3, #0
 8001298:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800129a:	f107 030c 	add.w	r3, r7, #12
 800129e:	2102      	movs	r1, #2
 80012a0:	4618      	mov	r0, r3
 80012a2:	f002 f89f 	bl	80033e4 <HAL_RCC_ClockConfig>
 80012a6:	4603      	mov	r3, r0
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d001      	beq.n	80012b0 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80012ac:	f000 f888 	bl	80013c0 <Error_Handler>
  }
}
 80012b0:	bf00      	nop
 80012b2:	3750      	adds	r7, #80	; 0x50
 80012b4:	46bd      	mov	sp, r7
 80012b6:	bd80      	pop	{r7, pc}
 80012b8:	40023800 	.word	0x40023800
 80012bc:	40007000 	.word	0x40007000

080012c0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b08a      	sub	sp, #40	; 0x28
 80012c4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012c6:	f107 0314 	add.w	r3, r7, #20
 80012ca:	2200      	movs	r2, #0
 80012cc:	601a      	str	r2, [r3, #0]
 80012ce:	605a      	str	r2, [r3, #4]
 80012d0:	609a      	str	r2, [r3, #8]
 80012d2:	60da      	str	r2, [r3, #12]
 80012d4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012d6:	2300      	movs	r3, #0
 80012d8:	613b      	str	r3, [r7, #16]
 80012da:	4b35      	ldr	r3, [pc, #212]	; (80013b0 <MX_GPIO_Init+0xf0>)
 80012dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012de:	4a34      	ldr	r2, [pc, #208]	; (80013b0 <MX_GPIO_Init+0xf0>)
 80012e0:	f043 0304 	orr.w	r3, r3, #4
 80012e4:	6313      	str	r3, [r2, #48]	; 0x30
 80012e6:	4b32      	ldr	r3, [pc, #200]	; (80013b0 <MX_GPIO_Init+0xf0>)
 80012e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ea:	f003 0304 	and.w	r3, r3, #4
 80012ee:	613b      	str	r3, [r7, #16]
 80012f0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80012f2:	2300      	movs	r3, #0
 80012f4:	60fb      	str	r3, [r7, #12]
 80012f6:	4b2e      	ldr	r3, [pc, #184]	; (80013b0 <MX_GPIO_Init+0xf0>)
 80012f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012fa:	4a2d      	ldr	r2, [pc, #180]	; (80013b0 <MX_GPIO_Init+0xf0>)
 80012fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001300:	6313      	str	r3, [r2, #48]	; 0x30
 8001302:	4b2b      	ldr	r3, [pc, #172]	; (80013b0 <MX_GPIO_Init+0xf0>)
 8001304:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001306:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800130a:	60fb      	str	r3, [r7, #12]
 800130c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800130e:	2300      	movs	r3, #0
 8001310:	60bb      	str	r3, [r7, #8]
 8001312:	4b27      	ldr	r3, [pc, #156]	; (80013b0 <MX_GPIO_Init+0xf0>)
 8001314:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001316:	4a26      	ldr	r2, [pc, #152]	; (80013b0 <MX_GPIO_Init+0xf0>)
 8001318:	f043 0301 	orr.w	r3, r3, #1
 800131c:	6313      	str	r3, [r2, #48]	; 0x30
 800131e:	4b24      	ldr	r3, [pc, #144]	; (80013b0 <MX_GPIO_Init+0xf0>)
 8001320:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001322:	f003 0301 	and.w	r3, r3, #1
 8001326:	60bb      	str	r3, [r7, #8]
 8001328:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800132a:	2300      	movs	r3, #0
 800132c:	607b      	str	r3, [r7, #4]
 800132e:	4b20      	ldr	r3, [pc, #128]	; (80013b0 <MX_GPIO_Init+0xf0>)
 8001330:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001332:	4a1f      	ldr	r2, [pc, #124]	; (80013b0 <MX_GPIO_Init+0xf0>)
 8001334:	f043 0302 	orr.w	r3, r3, #2
 8001338:	6313      	str	r3, [r2, #48]	; 0x30
 800133a:	4b1d      	ldr	r3, [pc, #116]	; (80013b0 <MX_GPIO_Init+0xf0>)
 800133c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800133e:	f003 0302 	and.w	r3, r3, #2
 8001342:	607b      	str	r3, [r7, #4]
 8001344:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001346:	2200      	movs	r2, #0
 8001348:	2120      	movs	r1, #32
 800134a:	481a      	ldr	r0, [pc, #104]	; (80013b4 <MX_GPIO_Init+0xf4>)
 800134c:	f000 fc3e 	bl	8001bcc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001350:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001354:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001356:	4b18      	ldr	r3, [pc, #96]	; (80013b8 <MX_GPIO_Init+0xf8>)
 8001358:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800135a:	2300      	movs	r3, #0
 800135c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800135e:	f107 0314 	add.w	r3, r7, #20
 8001362:	4619      	mov	r1, r3
 8001364:	4815      	ldr	r0, [pc, #84]	; (80013bc <MX_GPIO_Init+0xfc>)
 8001366:	f000 faaf 	bl	80018c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : USART_TX_Pin USART_RX_Pin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800136a:	230c      	movs	r3, #12
 800136c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800136e:	2302      	movs	r3, #2
 8001370:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001372:	2300      	movs	r3, #0
 8001374:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001376:	2300      	movs	r3, #0
 8001378:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800137a:	2307      	movs	r3, #7
 800137c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800137e:	f107 0314 	add.w	r3, r7, #20
 8001382:	4619      	mov	r1, r3
 8001384:	480b      	ldr	r0, [pc, #44]	; (80013b4 <MX_GPIO_Init+0xf4>)
 8001386:	f000 fa9f 	bl	80018c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800138a:	2320      	movs	r3, #32
 800138c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800138e:	2301      	movs	r3, #1
 8001390:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001392:	2300      	movs	r3, #0
 8001394:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001396:	2300      	movs	r3, #0
 8001398:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800139a:	f107 0314 	add.w	r3, r7, #20
 800139e:	4619      	mov	r1, r3
 80013a0:	4804      	ldr	r0, [pc, #16]	; (80013b4 <MX_GPIO_Init+0xf4>)
 80013a2:	f000 fa91 	bl	80018c8 <HAL_GPIO_Init>

}
 80013a6:	bf00      	nop
 80013a8:	3728      	adds	r7, #40	; 0x28
 80013aa:	46bd      	mov	sp, r7
 80013ac:	bd80      	pop	{r7, pc}
 80013ae:	bf00      	nop
 80013b0:	40023800 	.word	0x40023800
 80013b4:	40020000 	.word	0x40020000
 80013b8:	10210000 	.word	0x10210000
 80013bc:	40020800 	.word	0x40020800

080013c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013c0:	b480      	push	{r7}
 80013c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80013c4:	bf00      	nop
 80013c6:	46bd      	mov	sp, r7
 80013c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013cc:	4770      	bx	lr
	...

080013d0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b082      	sub	sp, #8
 80013d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013d6:	2300      	movs	r3, #0
 80013d8:	607b      	str	r3, [r7, #4]
 80013da:	4b10      	ldr	r3, [pc, #64]	; (800141c <HAL_MspInit+0x4c>)
 80013dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013de:	4a0f      	ldr	r2, [pc, #60]	; (800141c <HAL_MspInit+0x4c>)
 80013e0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013e4:	6453      	str	r3, [r2, #68]	; 0x44
 80013e6:	4b0d      	ldr	r3, [pc, #52]	; (800141c <HAL_MspInit+0x4c>)
 80013e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013ee:	607b      	str	r3, [r7, #4]
 80013f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80013f2:	2300      	movs	r3, #0
 80013f4:	603b      	str	r3, [r7, #0]
 80013f6:	4b09      	ldr	r3, [pc, #36]	; (800141c <HAL_MspInit+0x4c>)
 80013f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013fa:	4a08      	ldr	r2, [pc, #32]	; (800141c <HAL_MspInit+0x4c>)
 80013fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001400:	6413      	str	r3, [r2, #64]	; 0x40
 8001402:	4b06      	ldr	r3, [pc, #24]	; (800141c <HAL_MspInit+0x4c>)
 8001404:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001406:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800140a:	603b      	str	r3, [r7, #0]
 800140c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800140e:	2007      	movs	r0, #7
 8001410:	f000 fa18 	bl	8001844 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001414:	bf00      	nop
 8001416:	3708      	adds	r7, #8
 8001418:	46bd      	mov	sp, r7
 800141a:	bd80      	pop	{r7, pc}
 800141c:	40023800 	.word	0x40023800

08001420 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001420:	b480      	push	{r7}
 8001422:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001424:	bf00      	nop
 8001426:	46bd      	mov	sp, r7
 8001428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142c:	4770      	bx	lr

0800142e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800142e:	b480      	push	{r7}
 8001430:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001432:	e7fe      	b.n	8001432 <HardFault_Handler+0x4>

08001434 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001434:	b480      	push	{r7}
 8001436:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001438:	e7fe      	b.n	8001438 <MemManage_Handler+0x4>

0800143a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800143a:	b480      	push	{r7}
 800143c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800143e:	e7fe      	b.n	800143e <BusFault_Handler+0x4>

08001440 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001440:	b480      	push	{r7}
 8001442:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001444:	e7fe      	b.n	8001444 <UsageFault_Handler+0x4>

08001446 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001446:	b480      	push	{r7}
 8001448:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800144a:	bf00      	nop
 800144c:	46bd      	mov	sp, r7
 800144e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001452:	4770      	bx	lr

08001454 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001454:	b480      	push	{r7}
 8001456:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001458:	bf00      	nop
 800145a:	46bd      	mov	sp, r7
 800145c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001460:	4770      	bx	lr

08001462 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001462:	b480      	push	{r7}
 8001464:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001466:	bf00      	nop
 8001468:	46bd      	mov	sp, r7
 800146a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146e:	4770      	bx	lr

08001470 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001474:	f000 f8d4 	bl	8001620 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001478:	bf00      	nop
 800147a:	bd80      	pop	{r7, pc}

0800147c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001480:	4802      	ldr	r0, [pc, #8]	; (800148c <OTG_FS_IRQHandler+0x10>)
 8001482:	f000 fd0c 	bl	8001e9e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001486:	bf00      	nop
 8001488:	bd80      	pop	{r7, pc}
 800148a:	bf00      	nop
 800148c:	2000c3d8 	.word	0x2000c3d8

08001490 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b086      	sub	sp, #24
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001498:	4a14      	ldr	r2, [pc, #80]	; (80014ec <_sbrk+0x5c>)
 800149a:	4b15      	ldr	r3, [pc, #84]	; (80014f0 <_sbrk+0x60>)
 800149c:	1ad3      	subs	r3, r2, r3
 800149e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80014a0:	697b      	ldr	r3, [r7, #20]
 80014a2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80014a4:	4b13      	ldr	r3, [pc, #76]	; (80014f4 <_sbrk+0x64>)
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d102      	bne.n	80014b2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80014ac:	4b11      	ldr	r3, [pc, #68]	; (80014f4 <_sbrk+0x64>)
 80014ae:	4a12      	ldr	r2, [pc, #72]	; (80014f8 <_sbrk+0x68>)
 80014b0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80014b2:	4b10      	ldr	r3, [pc, #64]	; (80014f4 <_sbrk+0x64>)
 80014b4:	681a      	ldr	r2, [r3, #0]
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	4413      	add	r3, r2
 80014ba:	693a      	ldr	r2, [r7, #16]
 80014bc:	429a      	cmp	r2, r3
 80014be:	d207      	bcs.n	80014d0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80014c0:	f005 fd94 	bl	8006fec <__errno>
 80014c4:	4602      	mov	r2, r0
 80014c6:	230c      	movs	r3, #12
 80014c8:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80014ca:	f04f 33ff 	mov.w	r3, #4294967295
 80014ce:	e009      	b.n	80014e4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80014d0:	4b08      	ldr	r3, [pc, #32]	; (80014f4 <_sbrk+0x64>)
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80014d6:	4b07      	ldr	r3, [pc, #28]	; (80014f4 <_sbrk+0x64>)
 80014d8:	681a      	ldr	r2, [r3, #0]
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	4413      	add	r3, r2
 80014de:	4a05      	ldr	r2, [pc, #20]	; (80014f4 <_sbrk+0x64>)
 80014e0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80014e2:	68fb      	ldr	r3, [r7, #12]
}
 80014e4:	4618      	mov	r0, r3
 80014e6:	3718      	adds	r7, #24
 80014e8:	46bd      	mov	sp, r7
 80014ea:	bd80      	pop	{r7, pc}
 80014ec:	20018000 	.word	0x20018000
 80014f0:	00000600 	.word	0x00000600
 80014f4:	20000200 	.word	0x20000200
 80014f8:	2000c7e8 	.word	0x2000c7e8

080014fc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80014fc:	b480      	push	{r7}
 80014fe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001500:	4b08      	ldr	r3, [pc, #32]	; (8001524 <SystemInit+0x28>)
 8001502:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001506:	4a07      	ldr	r2, [pc, #28]	; (8001524 <SystemInit+0x28>)
 8001508:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800150c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001510:	4b04      	ldr	r3, [pc, #16]	; (8001524 <SystemInit+0x28>)
 8001512:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001516:	609a      	str	r2, [r3, #8]
#endif
}
 8001518:	bf00      	nop
 800151a:	46bd      	mov	sp, r7
 800151c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001520:	4770      	bx	lr
 8001522:	bf00      	nop
 8001524:	e000ed00 	.word	0xe000ed00

08001528 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001528:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001560 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800152c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800152e:	e003      	b.n	8001538 <LoopCopyDataInit>

08001530 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001530:	4b0c      	ldr	r3, [pc, #48]	; (8001564 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001532:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001534:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001536:	3104      	adds	r1, #4

08001538 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001538:	480b      	ldr	r0, [pc, #44]	; (8001568 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800153a:	4b0c      	ldr	r3, [pc, #48]	; (800156c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800153c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800153e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001540:	d3f6      	bcc.n	8001530 <CopyDataInit>
  ldr  r2, =_sbss
 8001542:	4a0b      	ldr	r2, [pc, #44]	; (8001570 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001544:	e002      	b.n	800154c <LoopFillZerobss>

08001546 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001546:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001548:	f842 3b04 	str.w	r3, [r2], #4

0800154c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800154c:	4b09      	ldr	r3, [pc, #36]	; (8001574 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800154e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001550:	d3f9      	bcc.n	8001546 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001552:	f7ff ffd3 	bl	80014fc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001556:	f005 fd4f 	bl	8006ff8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800155a:	f7ff fe39 	bl	80011d0 <main>
  bx  lr    
 800155e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001560:	20018000 	.word	0x20018000
  ldr  r3, =_sidata
 8001564:	08007264 	.word	0x08007264
  ldr  r0, =_sdata
 8001568:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800156c:	200001e4 	.word	0x200001e4
  ldr  r2, =_sbss
 8001570:	200001e4 	.word	0x200001e4
  ldr  r3, = _ebss
 8001574:	2000c7e4 	.word	0x2000c7e4

08001578 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001578:	e7fe      	b.n	8001578 <ADC_IRQHandler>
	...

0800157c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001580:	4b0e      	ldr	r3, [pc, #56]	; (80015bc <HAL_Init+0x40>)
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	4a0d      	ldr	r2, [pc, #52]	; (80015bc <HAL_Init+0x40>)
 8001586:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800158a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800158c:	4b0b      	ldr	r3, [pc, #44]	; (80015bc <HAL_Init+0x40>)
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	4a0a      	ldr	r2, [pc, #40]	; (80015bc <HAL_Init+0x40>)
 8001592:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001596:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001598:	4b08      	ldr	r3, [pc, #32]	; (80015bc <HAL_Init+0x40>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	4a07      	ldr	r2, [pc, #28]	; (80015bc <HAL_Init+0x40>)
 800159e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015a2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015a4:	2003      	movs	r0, #3
 80015a6:	f000 f94d 	bl	8001844 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80015aa:	2000      	movs	r0, #0
 80015ac:	f000 f808 	bl	80015c0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80015b0:	f7ff ff0e 	bl	80013d0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80015b4:	2300      	movs	r3, #0
}
 80015b6:	4618      	mov	r0, r3
 80015b8:	bd80      	pop	{r7, pc}
 80015ba:	bf00      	nop
 80015bc:	40023c00 	.word	0x40023c00

080015c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b082      	sub	sp, #8
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80015c8:	4b12      	ldr	r3, [pc, #72]	; (8001614 <HAL_InitTick+0x54>)
 80015ca:	681a      	ldr	r2, [r3, #0]
 80015cc:	4b12      	ldr	r3, [pc, #72]	; (8001618 <HAL_InitTick+0x58>)
 80015ce:	781b      	ldrb	r3, [r3, #0]
 80015d0:	4619      	mov	r1, r3
 80015d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015d6:	fbb3 f3f1 	udiv	r3, r3, r1
 80015da:	fbb2 f3f3 	udiv	r3, r2, r3
 80015de:	4618      	mov	r0, r3
 80015e0:	f000 f965 	bl	80018ae <HAL_SYSTICK_Config>
 80015e4:	4603      	mov	r3, r0
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d001      	beq.n	80015ee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80015ea:	2301      	movs	r3, #1
 80015ec:	e00e      	b.n	800160c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	2b0f      	cmp	r3, #15
 80015f2:	d80a      	bhi.n	800160a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80015f4:	2200      	movs	r2, #0
 80015f6:	6879      	ldr	r1, [r7, #4]
 80015f8:	f04f 30ff 	mov.w	r0, #4294967295
 80015fc:	f000 f92d 	bl	800185a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001600:	4a06      	ldr	r2, [pc, #24]	; (800161c <HAL_InitTick+0x5c>)
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001606:	2300      	movs	r3, #0
 8001608:	e000      	b.n	800160c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800160a:	2301      	movs	r3, #1
}
 800160c:	4618      	mov	r0, r3
 800160e:	3708      	adds	r7, #8
 8001610:	46bd      	mov	sp, r7
 8001612:	bd80      	pop	{r7, pc}
 8001614:	20000000 	.word	0x20000000
 8001618:	20000008 	.word	0x20000008
 800161c:	20000004 	.word	0x20000004

08001620 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001620:	b480      	push	{r7}
 8001622:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001624:	4b06      	ldr	r3, [pc, #24]	; (8001640 <HAL_IncTick+0x20>)
 8001626:	781b      	ldrb	r3, [r3, #0]
 8001628:	461a      	mov	r2, r3
 800162a:	4b06      	ldr	r3, [pc, #24]	; (8001644 <HAL_IncTick+0x24>)
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	4413      	add	r3, r2
 8001630:	4a04      	ldr	r2, [pc, #16]	; (8001644 <HAL_IncTick+0x24>)
 8001632:	6013      	str	r3, [r2, #0]
}
 8001634:	bf00      	nop
 8001636:	46bd      	mov	sp, r7
 8001638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163c:	4770      	bx	lr
 800163e:	bf00      	nop
 8001640:	20000008 	.word	0x20000008
 8001644:	2000b6d0 	.word	0x2000b6d0

08001648 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001648:	b480      	push	{r7}
 800164a:	af00      	add	r7, sp, #0
  return uwTick;
 800164c:	4b03      	ldr	r3, [pc, #12]	; (800165c <HAL_GetTick+0x14>)
 800164e:	681b      	ldr	r3, [r3, #0]
}
 8001650:	4618      	mov	r0, r3
 8001652:	46bd      	mov	sp, r7
 8001654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001658:	4770      	bx	lr
 800165a:	bf00      	nop
 800165c:	2000b6d0 	.word	0x2000b6d0

08001660 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b084      	sub	sp, #16
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001668:	f7ff ffee 	bl	8001648 <HAL_GetTick>
 800166c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001678:	d005      	beq.n	8001686 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800167a:	4b09      	ldr	r3, [pc, #36]	; (80016a0 <HAL_Delay+0x40>)
 800167c:	781b      	ldrb	r3, [r3, #0]
 800167e:	461a      	mov	r2, r3
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	4413      	add	r3, r2
 8001684:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001686:	bf00      	nop
 8001688:	f7ff ffde 	bl	8001648 <HAL_GetTick>
 800168c:	4602      	mov	r2, r0
 800168e:	68bb      	ldr	r3, [r7, #8]
 8001690:	1ad3      	subs	r3, r2, r3
 8001692:	68fa      	ldr	r2, [r7, #12]
 8001694:	429a      	cmp	r2, r3
 8001696:	d8f7      	bhi.n	8001688 <HAL_Delay+0x28>
  {
  }
}
 8001698:	bf00      	nop
 800169a:	3710      	adds	r7, #16
 800169c:	46bd      	mov	sp, r7
 800169e:	bd80      	pop	{r7, pc}
 80016a0:	20000008 	.word	0x20000008

080016a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016a4:	b480      	push	{r7}
 80016a6:	b085      	sub	sp, #20
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	f003 0307 	and.w	r3, r3, #7
 80016b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016b4:	4b0c      	ldr	r3, [pc, #48]	; (80016e8 <__NVIC_SetPriorityGrouping+0x44>)
 80016b6:	68db      	ldr	r3, [r3, #12]
 80016b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016ba:	68ba      	ldr	r2, [r7, #8]
 80016bc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80016c0:	4013      	ands	r3, r2
 80016c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80016c8:	68bb      	ldr	r3, [r7, #8]
 80016ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80016cc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80016d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80016d6:	4a04      	ldr	r2, [pc, #16]	; (80016e8 <__NVIC_SetPriorityGrouping+0x44>)
 80016d8:	68bb      	ldr	r3, [r7, #8]
 80016da:	60d3      	str	r3, [r2, #12]
}
 80016dc:	bf00      	nop
 80016de:	3714      	adds	r7, #20
 80016e0:	46bd      	mov	sp, r7
 80016e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e6:	4770      	bx	lr
 80016e8:	e000ed00 	.word	0xe000ed00

080016ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80016ec:	b480      	push	{r7}
 80016ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80016f0:	4b04      	ldr	r3, [pc, #16]	; (8001704 <__NVIC_GetPriorityGrouping+0x18>)
 80016f2:	68db      	ldr	r3, [r3, #12]
 80016f4:	0a1b      	lsrs	r3, r3, #8
 80016f6:	f003 0307 	and.w	r3, r3, #7
}
 80016fa:	4618      	mov	r0, r3
 80016fc:	46bd      	mov	sp, r7
 80016fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001702:	4770      	bx	lr
 8001704:	e000ed00 	.word	0xe000ed00

08001708 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001708:	b480      	push	{r7}
 800170a:	b083      	sub	sp, #12
 800170c:	af00      	add	r7, sp, #0
 800170e:	4603      	mov	r3, r0
 8001710:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001712:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001716:	2b00      	cmp	r3, #0
 8001718:	db0b      	blt.n	8001732 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800171a:	79fb      	ldrb	r3, [r7, #7]
 800171c:	f003 021f 	and.w	r2, r3, #31
 8001720:	4907      	ldr	r1, [pc, #28]	; (8001740 <__NVIC_EnableIRQ+0x38>)
 8001722:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001726:	095b      	lsrs	r3, r3, #5
 8001728:	2001      	movs	r0, #1
 800172a:	fa00 f202 	lsl.w	r2, r0, r2
 800172e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001732:	bf00      	nop
 8001734:	370c      	adds	r7, #12
 8001736:	46bd      	mov	sp, r7
 8001738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173c:	4770      	bx	lr
 800173e:	bf00      	nop
 8001740:	e000e100 	.word	0xe000e100

08001744 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001744:	b480      	push	{r7}
 8001746:	b083      	sub	sp, #12
 8001748:	af00      	add	r7, sp, #0
 800174a:	4603      	mov	r3, r0
 800174c:	6039      	str	r1, [r7, #0]
 800174e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001750:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001754:	2b00      	cmp	r3, #0
 8001756:	db0a      	blt.n	800176e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001758:	683b      	ldr	r3, [r7, #0]
 800175a:	b2da      	uxtb	r2, r3
 800175c:	490c      	ldr	r1, [pc, #48]	; (8001790 <__NVIC_SetPriority+0x4c>)
 800175e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001762:	0112      	lsls	r2, r2, #4
 8001764:	b2d2      	uxtb	r2, r2
 8001766:	440b      	add	r3, r1
 8001768:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800176c:	e00a      	b.n	8001784 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800176e:	683b      	ldr	r3, [r7, #0]
 8001770:	b2da      	uxtb	r2, r3
 8001772:	4908      	ldr	r1, [pc, #32]	; (8001794 <__NVIC_SetPriority+0x50>)
 8001774:	79fb      	ldrb	r3, [r7, #7]
 8001776:	f003 030f 	and.w	r3, r3, #15
 800177a:	3b04      	subs	r3, #4
 800177c:	0112      	lsls	r2, r2, #4
 800177e:	b2d2      	uxtb	r2, r2
 8001780:	440b      	add	r3, r1
 8001782:	761a      	strb	r2, [r3, #24]
}
 8001784:	bf00      	nop
 8001786:	370c      	adds	r7, #12
 8001788:	46bd      	mov	sp, r7
 800178a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178e:	4770      	bx	lr
 8001790:	e000e100 	.word	0xe000e100
 8001794:	e000ed00 	.word	0xe000ed00

08001798 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001798:	b480      	push	{r7}
 800179a:	b089      	sub	sp, #36	; 0x24
 800179c:	af00      	add	r7, sp, #0
 800179e:	60f8      	str	r0, [r7, #12]
 80017a0:	60b9      	str	r1, [r7, #8]
 80017a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	f003 0307 	and.w	r3, r3, #7
 80017aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017ac:	69fb      	ldr	r3, [r7, #28]
 80017ae:	f1c3 0307 	rsb	r3, r3, #7
 80017b2:	2b04      	cmp	r3, #4
 80017b4:	bf28      	it	cs
 80017b6:	2304      	movcs	r3, #4
 80017b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017ba:	69fb      	ldr	r3, [r7, #28]
 80017bc:	3304      	adds	r3, #4
 80017be:	2b06      	cmp	r3, #6
 80017c0:	d902      	bls.n	80017c8 <NVIC_EncodePriority+0x30>
 80017c2:	69fb      	ldr	r3, [r7, #28]
 80017c4:	3b03      	subs	r3, #3
 80017c6:	e000      	b.n	80017ca <NVIC_EncodePriority+0x32>
 80017c8:	2300      	movs	r3, #0
 80017ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017cc:	f04f 32ff 	mov.w	r2, #4294967295
 80017d0:	69bb      	ldr	r3, [r7, #24]
 80017d2:	fa02 f303 	lsl.w	r3, r2, r3
 80017d6:	43da      	mvns	r2, r3
 80017d8:	68bb      	ldr	r3, [r7, #8]
 80017da:	401a      	ands	r2, r3
 80017dc:	697b      	ldr	r3, [r7, #20]
 80017de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017e0:	f04f 31ff 	mov.w	r1, #4294967295
 80017e4:	697b      	ldr	r3, [r7, #20]
 80017e6:	fa01 f303 	lsl.w	r3, r1, r3
 80017ea:	43d9      	mvns	r1, r3
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017f0:	4313      	orrs	r3, r2
         );
}
 80017f2:	4618      	mov	r0, r3
 80017f4:	3724      	adds	r7, #36	; 0x24
 80017f6:	46bd      	mov	sp, r7
 80017f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fc:	4770      	bx	lr
	...

08001800 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	b082      	sub	sp, #8
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	3b01      	subs	r3, #1
 800180c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001810:	d301      	bcc.n	8001816 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001812:	2301      	movs	r3, #1
 8001814:	e00f      	b.n	8001836 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001816:	4a0a      	ldr	r2, [pc, #40]	; (8001840 <SysTick_Config+0x40>)
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	3b01      	subs	r3, #1
 800181c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800181e:	210f      	movs	r1, #15
 8001820:	f04f 30ff 	mov.w	r0, #4294967295
 8001824:	f7ff ff8e 	bl	8001744 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001828:	4b05      	ldr	r3, [pc, #20]	; (8001840 <SysTick_Config+0x40>)
 800182a:	2200      	movs	r2, #0
 800182c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800182e:	4b04      	ldr	r3, [pc, #16]	; (8001840 <SysTick_Config+0x40>)
 8001830:	2207      	movs	r2, #7
 8001832:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001834:	2300      	movs	r3, #0
}
 8001836:	4618      	mov	r0, r3
 8001838:	3708      	adds	r7, #8
 800183a:	46bd      	mov	sp, r7
 800183c:	bd80      	pop	{r7, pc}
 800183e:	bf00      	nop
 8001840:	e000e010 	.word	0xe000e010

08001844 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	b082      	sub	sp, #8
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800184c:	6878      	ldr	r0, [r7, #4]
 800184e:	f7ff ff29 	bl	80016a4 <__NVIC_SetPriorityGrouping>
}
 8001852:	bf00      	nop
 8001854:	3708      	adds	r7, #8
 8001856:	46bd      	mov	sp, r7
 8001858:	bd80      	pop	{r7, pc}

0800185a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800185a:	b580      	push	{r7, lr}
 800185c:	b086      	sub	sp, #24
 800185e:	af00      	add	r7, sp, #0
 8001860:	4603      	mov	r3, r0
 8001862:	60b9      	str	r1, [r7, #8]
 8001864:	607a      	str	r2, [r7, #4]
 8001866:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001868:	2300      	movs	r3, #0
 800186a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800186c:	f7ff ff3e 	bl	80016ec <__NVIC_GetPriorityGrouping>
 8001870:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001872:	687a      	ldr	r2, [r7, #4]
 8001874:	68b9      	ldr	r1, [r7, #8]
 8001876:	6978      	ldr	r0, [r7, #20]
 8001878:	f7ff ff8e 	bl	8001798 <NVIC_EncodePriority>
 800187c:	4602      	mov	r2, r0
 800187e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001882:	4611      	mov	r1, r2
 8001884:	4618      	mov	r0, r3
 8001886:	f7ff ff5d 	bl	8001744 <__NVIC_SetPriority>
}
 800188a:	bf00      	nop
 800188c:	3718      	adds	r7, #24
 800188e:	46bd      	mov	sp, r7
 8001890:	bd80      	pop	{r7, pc}

08001892 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001892:	b580      	push	{r7, lr}
 8001894:	b082      	sub	sp, #8
 8001896:	af00      	add	r7, sp, #0
 8001898:	4603      	mov	r3, r0
 800189a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800189c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018a0:	4618      	mov	r0, r3
 80018a2:	f7ff ff31 	bl	8001708 <__NVIC_EnableIRQ>
}
 80018a6:	bf00      	nop
 80018a8:	3708      	adds	r7, #8
 80018aa:	46bd      	mov	sp, r7
 80018ac:	bd80      	pop	{r7, pc}

080018ae <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80018ae:	b580      	push	{r7, lr}
 80018b0:	b082      	sub	sp, #8
 80018b2:	af00      	add	r7, sp, #0
 80018b4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80018b6:	6878      	ldr	r0, [r7, #4]
 80018b8:	f7ff ffa2 	bl	8001800 <SysTick_Config>
 80018bc:	4603      	mov	r3, r0
}
 80018be:	4618      	mov	r0, r3
 80018c0:	3708      	adds	r7, #8
 80018c2:	46bd      	mov	sp, r7
 80018c4:	bd80      	pop	{r7, pc}
	...

080018c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80018c8:	b480      	push	{r7}
 80018ca:	b089      	sub	sp, #36	; 0x24
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
 80018d0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80018d2:	2300      	movs	r3, #0
 80018d4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80018d6:	2300      	movs	r3, #0
 80018d8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80018da:	2300      	movs	r3, #0
 80018dc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80018de:	2300      	movs	r3, #0
 80018e0:	61fb      	str	r3, [r7, #28]
 80018e2:	e159      	b.n	8001b98 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80018e4:	2201      	movs	r2, #1
 80018e6:	69fb      	ldr	r3, [r7, #28]
 80018e8:	fa02 f303 	lsl.w	r3, r2, r3
 80018ec:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80018ee:	683b      	ldr	r3, [r7, #0]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	697a      	ldr	r2, [r7, #20]
 80018f4:	4013      	ands	r3, r2
 80018f6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80018f8:	693a      	ldr	r2, [r7, #16]
 80018fa:	697b      	ldr	r3, [r7, #20]
 80018fc:	429a      	cmp	r2, r3
 80018fe:	f040 8148 	bne.w	8001b92 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001902:	683b      	ldr	r3, [r7, #0]
 8001904:	685b      	ldr	r3, [r3, #4]
 8001906:	2b01      	cmp	r3, #1
 8001908:	d00b      	beq.n	8001922 <HAL_GPIO_Init+0x5a>
 800190a:	683b      	ldr	r3, [r7, #0]
 800190c:	685b      	ldr	r3, [r3, #4]
 800190e:	2b02      	cmp	r3, #2
 8001910:	d007      	beq.n	8001922 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001912:	683b      	ldr	r3, [r7, #0]
 8001914:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001916:	2b11      	cmp	r3, #17
 8001918:	d003      	beq.n	8001922 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800191a:	683b      	ldr	r3, [r7, #0]
 800191c:	685b      	ldr	r3, [r3, #4]
 800191e:	2b12      	cmp	r3, #18
 8001920:	d130      	bne.n	8001984 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	689b      	ldr	r3, [r3, #8]
 8001926:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001928:	69fb      	ldr	r3, [r7, #28]
 800192a:	005b      	lsls	r3, r3, #1
 800192c:	2203      	movs	r2, #3
 800192e:	fa02 f303 	lsl.w	r3, r2, r3
 8001932:	43db      	mvns	r3, r3
 8001934:	69ba      	ldr	r2, [r7, #24]
 8001936:	4013      	ands	r3, r2
 8001938:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800193a:	683b      	ldr	r3, [r7, #0]
 800193c:	68da      	ldr	r2, [r3, #12]
 800193e:	69fb      	ldr	r3, [r7, #28]
 8001940:	005b      	lsls	r3, r3, #1
 8001942:	fa02 f303 	lsl.w	r3, r2, r3
 8001946:	69ba      	ldr	r2, [r7, #24]
 8001948:	4313      	orrs	r3, r2
 800194a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	69ba      	ldr	r2, [r7, #24]
 8001950:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	685b      	ldr	r3, [r3, #4]
 8001956:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001958:	2201      	movs	r2, #1
 800195a:	69fb      	ldr	r3, [r7, #28]
 800195c:	fa02 f303 	lsl.w	r3, r2, r3
 8001960:	43db      	mvns	r3, r3
 8001962:	69ba      	ldr	r2, [r7, #24]
 8001964:	4013      	ands	r3, r2
 8001966:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001968:	683b      	ldr	r3, [r7, #0]
 800196a:	685b      	ldr	r3, [r3, #4]
 800196c:	091b      	lsrs	r3, r3, #4
 800196e:	f003 0201 	and.w	r2, r3, #1
 8001972:	69fb      	ldr	r3, [r7, #28]
 8001974:	fa02 f303 	lsl.w	r3, r2, r3
 8001978:	69ba      	ldr	r2, [r7, #24]
 800197a:	4313      	orrs	r3, r2
 800197c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	69ba      	ldr	r2, [r7, #24]
 8001982:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	68db      	ldr	r3, [r3, #12]
 8001988:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800198a:	69fb      	ldr	r3, [r7, #28]
 800198c:	005b      	lsls	r3, r3, #1
 800198e:	2203      	movs	r2, #3
 8001990:	fa02 f303 	lsl.w	r3, r2, r3
 8001994:	43db      	mvns	r3, r3
 8001996:	69ba      	ldr	r2, [r7, #24]
 8001998:	4013      	ands	r3, r2
 800199a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800199c:	683b      	ldr	r3, [r7, #0]
 800199e:	689a      	ldr	r2, [r3, #8]
 80019a0:	69fb      	ldr	r3, [r7, #28]
 80019a2:	005b      	lsls	r3, r3, #1
 80019a4:	fa02 f303 	lsl.w	r3, r2, r3
 80019a8:	69ba      	ldr	r2, [r7, #24]
 80019aa:	4313      	orrs	r3, r2
 80019ac:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	69ba      	ldr	r2, [r7, #24]
 80019b2:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80019b4:	683b      	ldr	r3, [r7, #0]
 80019b6:	685b      	ldr	r3, [r3, #4]
 80019b8:	2b02      	cmp	r3, #2
 80019ba:	d003      	beq.n	80019c4 <HAL_GPIO_Init+0xfc>
 80019bc:	683b      	ldr	r3, [r7, #0]
 80019be:	685b      	ldr	r3, [r3, #4]
 80019c0:	2b12      	cmp	r3, #18
 80019c2:	d123      	bne.n	8001a0c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80019c4:	69fb      	ldr	r3, [r7, #28]
 80019c6:	08da      	lsrs	r2, r3, #3
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	3208      	adds	r2, #8
 80019cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80019d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80019d2:	69fb      	ldr	r3, [r7, #28]
 80019d4:	f003 0307 	and.w	r3, r3, #7
 80019d8:	009b      	lsls	r3, r3, #2
 80019da:	220f      	movs	r2, #15
 80019dc:	fa02 f303 	lsl.w	r3, r2, r3
 80019e0:	43db      	mvns	r3, r3
 80019e2:	69ba      	ldr	r2, [r7, #24]
 80019e4:	4013      	ands	r3, r2
 80019e6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80019e8:	683b      	ldr	r3, [r7, #0]
 80019ea:	691a      	ldr	r2, [r3, #16]
 80019ec:	69fb      	ldr	r3, [r7, #28]
 80019ee:	f003 0307 	and.w	r3, r3, #7
 80019f2:	009b      	lsls	r3, r3, #2
 80019f4:	fa02 f303 	lsl.w	r3, r2, r3
 80019f8:	69ba      	ldr	r2, [r7, #24]
 80019fa:	4313      	orrs	r3, r2
 80019fc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80019fe:	69fb      	ldr	r3, [r7, #28]
 8001a00:	08da      	lsrs	r2, r3, #3
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	3208      	adds	r2, #8
 8001a06:	69b9      	ldr	r1, [r7, #24]
 8001a08:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001a12:	69fb      	ldr	r3, [r7, #28]
 8001a14:	005b      	lsls	r3, r3, #1
 8001a16:	2203      	movs	r2, #3
 8001a18:	fa02 f303 	lsl.w	r3, r2, r3
 8001a1c:	43db      	mvns	r3, r3
 8001a1e:	69ba      	ldr	r2, [r7, #24]
 8001a20:	4013      	ands	r3, r2
 8001a22:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001a24:	683b      	ldr	r3, [r7, #0]
 8001a26:	685b      	ldr	r3, [r3, #4]
 8001a28:	f003 0203 	and.w	r2, r3, #3
 8001a2c:	69fb      	ldr	r3, [r7, #28]
 8001a2e:	005b      	lsls	r3, r3, #1
 8001a30:	fa02 f303 	lsl.w	r3, r2, r3
 8001a34:	69ba      	ldr	r2, [r7, #24]
 8001a36:	4313      	orrs	r3, r2
 8001a38:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	69ba      	ldr	r2, [r7, #24]
 8001a3e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001a40:	683b      	ldr	r3, [r7, #0]
 8001a42:	685b      	ldr	r3, [r3, #4]
 8001a44:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	f000 80a2 	beq.w	8001b92 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a4e:	2300      	movs	r3, #0
 8001a50:	60fb      	str	r3, [r7, #12]
 8001a52:	4b56      	ldr	r3, [pc, #344]	; (8001bac <HAL_GPIO_Init+0x2e4>)
 8001a54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a56:	4a55      	ldr	r2, [pc, #340]	; (8001bac <HAL_GPIO_Init+0x2e4>)
 8001a58:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a5c:	6453      	str	r3, [r2, #68]	; 0x44
 8001a5e:	4b53      	ldr	r3, [pc, #332]	; (8001bac <HAL_GPIO_Init+0x2e4>)
 8001a60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a62:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a66:	60fb      	str	r3, [r7, #12]
 8001a68:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001a6a:	4a51      	ldr	r2, [pc, #324]	; (8001bb0 <HAL_GPIO_Init+0x2e8>)
 8001a6c:	69fb      	ldr	r3, [r7, #28]
 8001a6e:	089b      	lsrs	r3, r3, #2
 8001a70:	3302      	adds	r3, #2
 8001a72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a76:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001a78:	69fb      	ldr	r3, [r7, #28]
 8001a7a:	f003 0303 	and.w	r3, r3, #3
 8001a7e:	009b      	lsls	r3, r3, #2
 8001a80:	220f      	movs	r2, #15
 8001a82:	fa02 f303 	lsl.w	r3, r2, r3
 8001a86:	43db      	mvns	r3, r3
 8001a88:	69ba      	ldr	r2, [r7, #24]
 8001a8a:	4013      	ands	r3, r2
 8001a8c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	4a48      	ldr	r2, [pc, #288]	; (8001bb4 <HAL_GPIO_Init+0x2ec>)
 8001a92:	4293      	cmp	r3, r2
 8001a94:	d019      	beq.n	8001aca <HAL_GPIO_Init+0x202>
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	4a47      	ldr	r2, [pc, #284]	; (8001bb8 <HAL_GPIO_Init+0x2f0>)
 8001a9a:	4293      	cmp	r3, r2
 8001a9c:	d013      	beq.n	8001ac6 <HAL_GPIO_Init+0x1fe>
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	4a46      	ldr	r2, [pc, #280]	; (8001bbc <HAL_GPIO_Init+0x2f4>)
 8001aa2:	4293      	cmp	r3, r2
 8001aa4:	d00d      	beq.n	8001ac2 <HAL_GPIO_Init+0x1fa>
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	4a45      	ldr	r2, [pc, #276]	; (8001bc0 <HAL_GPIO_Init+0x2f8>)
 8001aaa:	4293      	cmp	r3, r2
 8001aac:	d007      	beq.n	8001abe <HAL_GPIO_Init+0x1f6>
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	4a44      	ldr	r2, [pc, #272]	; (8001bc4 <HAL_GPIO_Init+0x2fc>)
 8001ab2:	4293      	cmp	r3, r2
 8001ab4:	d101      	bne.n	8001aba <HAL_GPIO_Init+0x1f2>
 8001ab6:	2304      	movs	r3, #4
 8001ab8:	e008      	b.n	8001acc <HAL_GPIO_Init+0x204>
 8001aba:	2307      	movs	r3, #7
 8001abc:	e006      	b.n	8001acc <HAL_GPIO_Init+0x204>
 8001abe:	2303      	movs	r3, #3
 8001ac0:	e004      	b.n	8001acc <HAL_GPIO_Init+0x204>
 8001ac2:	2302      	movs	r3, #2
 8001ac4:	e002      	b.n	8001acc <HAL_GPIO_Init+0x204>
 8001ac6:	2301      	movs	r3, #1
 8001ac8:	e000      	b.n	8001acc <HAL_GPIO_Init+0x204>
 8001aca:	2300      	movs	r3, #0
 8001acc:	69fa      	ldr	r2, [r7, #28]
 8001ace:	f002 0203 	and.w	r2, r2, #3
 8001ad2:	0092      	lsls	r2, r2, #2
 8001ad4:	4093      	lsls	r3, r2
 8001ad6:	69ba      	ldr	r2, [r7, #24]
 8001ad8:	4313      	orrs	r3, r2
 8001ada:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001adc:	4934      	ldr	r1, [pc, #208]	; (8001bb0 <HAL_GPIO_Init+0x2e8>)
 8001ade:	69fb      	ldr	r3, [r7, #28]
 8001ae0:	089b      	lsrs	r3, r3, #2
 8001ae2:	3302      	adds	r3, #2
 8001ae4:	69ba      	ldr	r2, [r7, #24]
 8001ae6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001aea:	4b37      	ldr	r3, [pc, #220]	; (8001bc8 <HAL_GPIO_Init+0x300>)
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001af0:	693b      	ldr	r3, [r7, #16]
 8001af2:	43db      	mvns	r3, r3
 8001af4:	69ba      	ldr	r2, [r7, #24]
 8001af6:	4013      	ands	r3, r2
 8001af8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001afa:	683b      	ldr	r3, [r7, #0]
 8001afc:	685b      	ldr	r3, [r3, #4]
 8001afe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d003      	beq.n	8001b0e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001b06:	69ba      	ldr	r2, [r7, #24]
 8001b08:	693b      	ldr	r3, [r7, #16]
 8001b0a:	4313      	orrs	r3, r2
 8001b0c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001b0e:	4a2e      	ldr	r2, [pc, #184]	; (8001bc8 <HAL_GPIO_Init+0x300>)
 8001b10:	69bb      	ldr	r3, [r7, #24]
 8001b12:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001b14:	4b2c      	ldr	r3, [pc, #176]	; (8001bc8 <HAL_GPIO_Init+0x300>)
 8001b16:	685b      	ldr	r3, [r3, #4]
 8001b18:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b1a:	693b      	ldr	r3, [r7, #16]
 8001b1c:	43db      	mvns	r3, r3
 8001b1e:	69ba      	ldr	r2, [r7, #24]
 8001b20:	4013      	ands	r3, r2
 8001b22:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001b24:	683b      	ldr	r3, [r7, #0]
 8001b26:	685b      	ldr	r3, [r3, #4]
 8001b28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d003      	beq.n	8001b38 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001b30:	69ba      	ldr	r2, [r7, #24]
 8001b32:	693b      	ldr	r3, [r7, #16]
 8001b34:	4313      	orrs	r3, r2
 8001b36:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001b38:	4a23      	ldr	r2, [pc, #140]	; (8001bc8 <HAL_GPIO_Init+0x300>)
 8001b3a:	69bb      	ldr	r3, [r7, #24]
 8001b3c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001b3e:	4b22      	ldr	r3, [pc, #136]	; (8001bc8 <HAL_GPIO_Init+0x300>)
 8001b40:	689b      	ldr	r3, [r3, #8]
 8001b42:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b44:	693b      	ldr	r3, [r7, #16]
 8001b46:	43db      	mvns	r3, r3
 8001b48:	69ba      	ldr	r2, [r7, #24]
 8001b4a:	4013      	ands	r3, r2
 8001b4c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001b4e:	683b      	ldr	r3, [r7, #0]
 8001b50:	685b      	ldr	r3, [r3, #4]
 8001b52:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d003      	beq.n	8001b62 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001b5a:	69ba      	ldr	r2, [r7, #24]
 8001b5c:	693b      	ldr	r3, [r7, #16]
 8001b5e:	4313      	orrs	r3, r2
 8001b60:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001b62:	4a19      	ldr	r2, [pc, #100]	; (8001bc8 <HAL_GPIO_Init+0x300>)
 8001b64:	69bb      	ldr	r3, [r7, #24]
 8001b66:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001b68:	4b17      	ldr	r3, [pc, #92]	; (8001bc8 <HAL_GPIO_Init+0x300>)
 8001b6a:	68db      	ldr	r3, [r3, #12]
 8001b6c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b6e:	693b      	ldr	r3, [r7, #16]
 8001b70:	43db      	mvns	r3, r3
 8001b72:	69ba      	ldr	r2, [r7, #24]
 8001b74:	4013      	ands	r3, r2
 8001b76:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001b78:	683b      	ldr	r3, [r7, #0]
 8001b7a:	685b      	ldr	r3, [r3, #4]
 8001b7c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d003      	beq.n	8001b8c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001b84:	69ba      	ldr	r2, [r7, #24]
 8001b86:	693b      	ldr	r3, [r7, #16]
 8001b88:	4313      	orrs	r3, r2
 8001b8a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001b8c:	4a0e      	ldr	r2, [pc, #56]	; (8001bc8 <HAL_GPIO_Init+0x300>)
 8001b8e:	69bb      	ldr	r3, [r7, #24]
 8001b90:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b92:	69fb      	ldr	r3, [r7, #28]
 8001b94:	3301      	adds	r3, #1
 8001b96:	61fb      	str	r3, [r7, #28]
 8001b98:	69fb      	ldr	r3, [r7, #28]
 8001b9a:	2b0f      	cmp	r3, #15
 8001b9c:	f67f aea2 	bls.w	80018e4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001ba0:	bf00      	nop
 8001ba2:	3724      	adds	r7, #36	; 0x24
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001baa:	4770      	bx	lr
 8001bac:	40023800 	.word	0x40023800
 8001bb0:	40013800 	.word	0x40013800
 8001bb4:	40020000 	.word	0x40020000
 8001bb8:	40020400 	.word	0x40020400
 8001bbc:	40020800 	.word	0x40020800
 8001bc0:	40020c00 	.word	0x40020c00
 8001bc4:	40021000 	.word	0x40021000
 8001bc8:	40013c00 	.word	0x40013c00

08001bcc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001bcc:	b480      	push	{r7}
 8001bce:	b083      	sub	sp, #12
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
 8001bd4:	460b      	mov	r3, r1
 8001bd6:	807b      	strh	r3, [r7, #2]
 8001bd8:	4613      	mov	r3, r2
 8001bda:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001bdc:	787b      	ldrb	r3, [r7, #1]
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d003      	beq.n	8001bea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001be2:	887a      	ldrh	r2, [r7, #2]
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001be8:	e003      	b.n	8001bf2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001bea:	887b      	ldrh	r3, [r7, #2]
 8001bec:	041a      	lsls	r2, r3, #16
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	619a      	str	r2, [r3, #24]
}
 8001bf2:	bf00      	nop
 8001bf4:	370c      	adds	r7, #12
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfc:	4770      	bx	lr

08001bfe <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001bfe:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c00:	b08f      	sub	sp, #60	; 0x3c
 8001c02:	af0a      	add	r7, sp, #40	; 0x28
 8001c04:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d101      	bne.n	8001c10 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001c0c:	2301      	movs	r3, #1
 8001c0e:	e10f      	b.n	8001e30 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8001c1c:	b2db      	uxtb	r3, r3
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d106      	bne.n	8001c30 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	2200      	movs	r2, #0
 8001c26:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001c2a:	6878      	ldr	r0, [r7, #4]
 8001c2c:	f004 fee2 	bl	80069f4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	2203      	movs	r2, #3
 8001c34:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001c38:	68bb      	ldr	r3, [r7, #8]
 8001c3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d102      	bne.n	8001c4a <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	2200      	movs	r2, #0
 8001c48:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	4618      	mov	r0, r3
 8001c50:	f001 fea7 	bl	80039a2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	603b      	str	r3, [r7, #0]
 8001c5a:	687e      	ldr	r6, [r7, #4]
 8001c5c:	466d      	mov	r5, sp
 8001c5e:	f106 0410 	add.w	r4, r6, #16
 8001c62:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001c64:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001c66:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001c68:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001c6a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001c6e:	e885 0003 	stmia.w	r5, {r0, r1}
 8001c72:	1d33      	adds	r3, r6, #4
 8001c74:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001c76:	6838      	ldr	r0, [r7, #0]
 8001c78:	f001 fd7e 	bl	8003778 <USB_CoreInit>
 8001c7c:	4603      	mov	r3, r0
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d005      	beq.n	8001c8e <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	2202      	movs	r2, #2
 8001c86:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001c8a:	2301      	movs	r3, #1
 8001c8c:	e0d0      	b.n	8001e30 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	2100      	movs	r1, #0
 8001c94:	4618      	mov	r0, r3
 8001c96:	f001 fe95 	bl	80039c4 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	73fb      	strb	r3, [r7, #15]
 8001c9e:	e04a      	b.n	8001d36 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001ca0:	7bfa      	ldrb	r2, [r7, #15]
 8001ca2:	6879      	ldr	r1, [r7, #4]
 8001ca4:	4613      	mov	r3, r2
 8001ca6:	00db      	lsls	r3, r3, #3
 8001ca8:	1a9b      	subs	r3, r3, r2
 8001caa:	009b      	lsls	r3, r3, #2
 8001cac:	440b      	add	r3, r1
 8001cae:	333d      	adds	r3, #61	; 0x3d
 8001cb0:	2201      	movs	r2, #1
 8001cb2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001cb4:	7bfa      	ldrb	r2, [r7, #15]
 8001cb6:	6879      	ldr	r1, [r7, #4]
 8001cb8:	4613      	mov	r3, r2
 8001cba:	00db      	lsls	r3, r3, #3
 8001cbc:	1a9b      	subs	r3, r3, r2
 8001cbe:	009b      	lsls	r3, r3, #2
 8001cc0:	440b      	add	r3, r1
 8001cc2:	333c      	adds	r3, #60	; 0x3c
 8001cc4:	7bfa      	ldrb	r2, [r7, #15]
 8001cc6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001cc8:	7bfa      	ldrb	r2, [r7, #15]
 8001cca:	7bfb      	ldrb	r3, [r7, #15]
 8001ccc:	b298      	uxth	r0, r3
 8001cce:	6879      	ldr	r1, [r7, #4]
 8001cd0:	4613      	mov	r3, r2
 8001cd2:	00db      	lsls	r3, r3, #3
 8001cd4:	1a9b      	subs	r3, r3, r2
 8001cd6:	009b      	lsls	r3, r3, #2
 8001cd8:	440b      	add	r3, r1
 8001cda:	3342      	adds	r3, #66	; 0x42
 8001cdc:	4602      	mov	r2, r0
 8001cde:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001ce0:	7bfa      	ldrb	r2, [r7, #15]
 8001ce2:	6879      	ldr	r1, [r7, #4]
 8001ce4:	4613      	mov	r3, r2
 8001ce6:	00db      	lsls	r3, r3, #3
 8001ce8:	1a9b      	subs	r3, r3, r2
 8001cea:	009b      	lsls	r3, r3, #2
 8001cec:	440b      	add	r3, r1
 8001cee:	333f      	adds	r3, #63	; 0x3f
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001cf4:	7bfa      	ldrb	r2, [r7, #15]
 8001cf6:	6879      	ldr	r1, [r7, #4]
 8001cf8:	4613      	mov	r3, r2
 8001cfa:	00db      	lsls	r3, r3, #3
 8001cfc:	1a9b      	subs	r3, r3, r2
 8001cfe:	009b      	lsls	r3, r3, #2
 8001d00:	440b      	add	r3, r1
 8001d02:	3344      	adds	r3, #68	; 0x44
 8001d04:	2200      	movs	r2, #0
 8001d06:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001d08:	7bfa      	ldrb	r2, [r7, #15]
 8001d0a:	6879      	ldr	r1, [r7, #4]
 8001d0c:	4613      	mov	r3, r2
 8001d0e:	00db      	lsls	r3, r3, #3
 8001d10:	1a9b      	subs	r3, r3, r2
 8001d12:	009b      	lsls	r3, r3, #2
 8001d14:	440b      	add	r3, r1
 8001d16:	3348      	adds	r3, #72	; 0x48
 8001d18:	2200      	movs	r2, #0
 8001d1a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001d1c:	7bfa      	ldrb	r2, [r7, #15]
 8001d1e:	6879      	ldr	r1, [r7, #4]
 8001d20:	4613      	mov	r3, r2
 8001d22:	00db      	lsls	r3, r3, #3
 8001d24:	1a9b      	subs	r3, r3, r2
 8001d26:	009b      	lsls	r3, r3, #2
 8001d28:	440b      	add	r3, r1
 8001d2a:	3350      	adds	r3, #80	; 0x50
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001d30:	7bfb      	ldrb	r3, [r7, #15]
 8001d32:	3301      	adds	r3, #1
 8001d34:	73fb      	strb	r3, [r7, #15]
 8001d36:	7bfa      	ldrb	r2, [r7, #15]
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	685b      	ldr	r3, [r3, #4]
 8001d3c:	429a      	cmp	r2, r3
 8001d3e:	d3af      	bcc.n	8001ca0 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001d40:	2300      	movs	r3, #0
 8001d42:	73fb      	strb	r3, [r7, #15]
 8001d44:	e044      	b.n	8001dd0 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001d46:	7bfa      	ldrb	r2, [r7, #15]
 8001d48:	6879      	ldr	r1, [r7, #4]
 8001d4a:	4613      	mov	r3, r2
 8001d4c:	00db      	lsls	r3, r3, #3
 8001d4e:	1a9b      	subs	r3, r3, r2
 8001d50:	009b      	lsls	r3, r3, #2
 8001d52:	440b      	add	r3, r1
 8001d54:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8001d58:	2200      	movs	r2, #0
 8001d5a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001d5c:	7bfa      	ldrb	r2, [r7, #15]
 8001d5e:	6879      	ldr	r1, [r7, #4]
 8001d60:	4613      	mov	r3, r2
 8001d62:	00db      	lsls	r3, r3, #3
 8001d64:	1a9b      	subs	r3, r3, r2
 8001d66:	009b      	lsls	r3, r3, #2
 8001d68:	440b      	add	r3, r1
 8001d6a:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8001d6e:	7bfa      	ldrb	r2, [r7, #15]
 8001d70:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001d72:	7bfa      	ldrb	r2, [r7, #15]
 8001d74:	6879      	ldr	r1, [r7, #4]
 8001d76:	4613      	mov	r3, r2
 8001d78:	00db      	lsls	r3, r3, #3
 8001d7a:	1a9b      	subs	r3, r3, r2
 8001d7c:	009b      	lsls	r3, r3, #2
 8001d7e:	440b      	add	r3, r1
 8001d80:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8001d84:	2200      	movs	r2, #0
 8001d86:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001d88:	7bfa      	ldrb	r2, [r7, #15]
 8001d8a:	6879      	ldr	r1, [r7, #4]
 8001d8c:	4613      	mov	r3, r2
 8001d8e:	00db      	lsls	r3, r3, #3
 8001d90:	1a9b      	subs	r3, r3, r2
 8001d92:	009b      	lsls	r3, r3, #2
 8001d94:	440b      	add	r3, r1
 8001d96:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001d9e:	7bfa      	ldrb	r2, [r7, #15]
 8001da0:	6879      	ldr	r1, [r7, #4]
 8001da2:	4613      	mov	r3, r2
 8001da4:	00db      	lsls	r3, r3, #3
 8001da6:	1a9b      	subs	r3, r3, r2
 8001da8:	009b      	lsls	r3, r3, #2
 8001daa:	440b      	add	r3, r1
 8001dac:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001db0:	2200      	movs	r2, #0
 8001db2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001db4:	7bfa      	ldrb	r2, [r7, #15]
 8001db6:	6879      	ldr	r1, [r7, #4]
 8001db8:	4613      	mov	r3, r2
 8001dba:	00db      	lsls	r3, r3, #3
 8001dbc:	1a9b      	subs	r3, r3, r2
 8001dbe:	009b      	lsls	r3, r3, #2
 8001dc0:	440b      	add	r3, r1
 8001dc2:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001dca:	7bfb      	ldrb	r3, [r7, #15]
 8001dcc:	3301      	adds	r3, #1
 8001dce:	73fb      	strb	r3, [r7, #15]
 8001dd0:	7bfa      	ldrb	r2, [r7, #15]
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	685b      	ldr	r3, [r3, #4]
 8001dd6:	429a      	cmp	r2, r3
 8001dd8:	d3b5      	bcc.n	8001d46 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	603b      	str	r3, [r7, #0]
 8001de0:	687e      	ldr	r6, [r7, #4]
 8001de2:	466d      	mov	r5, sp
 8001de4:	f106 0410 	add.w	r4, r6, #16
 8001de8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001dea:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001dec:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001dee:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001df0:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001df4:	e885 0003 	stmia.w	r5, {r0, r1}
 8001df8:	1d33      	adds	r3, r6, #4
 8001dfa:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001dfc:	6838      	ldr	r0, [r7, #0]
 8001dfe:	f001 fe0b 	bl	8003a18 <USB_DevInit>
 8001e02:	4603      	mov	r3, r0
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d005      	beq.n	8001e14 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	2202      	movs	r2, #2
 8001e0c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001e10:	2301      	movs	r3, #1
 8001e12:	e00d      	b.n	8001e30 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	2200      	movs	r2, #0
 8001e18:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	2201      	movs	r2, #1
 8001e20:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	4618      	mov	r0, r3
 8001e2a:	f002 fe53 	bl	8004ad4 <USB_DevDisconnect>

  return HAL_OK;
 8001e2e:	2300      	movs	r3, #0
}
 8001e30:	4618      	mov	r0, r3
 8001e32:	3714      	adds	r7, #20
 8001e34:	46bd      	mov	sp, r7
 8001e36:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001e38 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b084      	sub	sp, #16
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001e4c:	2b01      	cmp	r3, #1
 8001e4e:	d101      	bne.n	8001e54 <HAL_PCD_Start+0x1c>
 8001e50:	2302      	movs	r3, #2
 8001e52:	e020      	b.n	8001e96 <HAL_PCD_Start+0x5e>
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	2201      	movs	r2, #1
 8001e58:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e60:	2b01      	cmp	r3, #1
 8001e62:	d109      	bne.n	8001e78 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001e68:	2b01      	cmp	r3, #1
 8001e6a:	d005      	beq.n	8001e78 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e70:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	f001 fd7f 	bl	8003980 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	4618      	mov	r0, r3
 8001e88:	f002 fe03 	bl	8004a92 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	2200      	movs	r2, #0
 8001e90:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001e94:	2300      	movs	r3, #0
}
 8001e96:	4618      	mov	r0, r3
 8001e98:	3710      	adds	r7, #16
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	bd80      	pop	{r7, pc}

08001e9e <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001e9e:	b590      	push	{r4, r7, lr}
 8001ea0:	b08d      	sub	sp, #52	; 0x34
 8001ea2:	af00      	add	r7, sp, #0
 8001ea4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001eac:	6a3b      	ldr	r3, [r7, #32]
 8001eae:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	f002 fec1 	bl	8004c3c <USB_GetMode>
 8001eba:	4603      	mov	r3, r0
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	f040 839d 	bne.w	80025fc <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	f002 fe25 	bl	8004b16 <USB_ReadInterrupts>
 8001ecc:	4603      	mov	r3, r0
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	f000 8393 	beq.w	80025fa <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	4618      	mov	r0, r3
 8001eda:	f002 fe1c 	bl	8004b16 <USB_ReadInterrupts>
 8001ede:	4603      	mov	r3, r0
 8001ee0:	f003 0302 	and.w	r3, r3, #2
 8001ee4:	2b02      	cmp	r3, #2
 8001ee6:	d107      	bne.n	8001ef8 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	695a      	ldr	r2, [r3, #20]
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f002 0202 	and.w	r2, r2, #2
 8001ef6:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	4618      	mov	r0, r3
 8001efe:	f002 fe0a 	bl	8004b16 <USB_ReadInterrupts>
 8001f02:	4603      	mov	r3, r0
 8001f04:	f003 0310 	and.w	r3, r3, #16
 8001f08:	2b10      	cmp	r3, #16
 8001f0a:	d161      	bne.n	8001fd0 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	699a      	ldr	r2, [r3, #24]
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f022 0210 	bic.w	r2, r2, #16
 8001f1a:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8001f1c:	6a3b      	ldr	r3, [r7, #32]
 8001f1e:	6a1b      	ldr	r3, [r3, #32]
 8001f20:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8001f22:	69bb      	ldr	r3, [r7, #24]
 8001f24:	f003 020f 	and.w	r2, r3, #15
 8001f28:	4613      	mov	r3, r2
 8001f2a:	00db      	lsls	r3, r3, #3
 8001f2c:	1a9b      	subs	r3, r3, r2
 8001f2e:	009b      	lsls	r3, r3, #2
 8001f30:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001f34:	687a      	ldr	r2, [r7, #4]
 8001f36:	4413      	add	r3, r2
 8001f38:	3304      	adds	r3, #4
 8001f3a:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8001f3c:	69bb      	ldr	r3, [r7, #24]
 8001f3e:	0c5b      	lsrs	r3, r3, #17
 8001f40:	f003 030f 	and.w	r3, r3, #15
 8001f44:	2b02      	cmp	r3, #2
 8001f46:	d124      	bne.n	8001f92 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001f48:	69ba      	ldr	r2, [r7, #24]
 8001f4a:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8001f4e:	4013      	ands	r3, r2
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d035      	beq.n	8001fc0 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001f54:	697b      	ldr	r3, [r7, #20]
 8001f56:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8001f58:	69bb      	ldr	r3, [r7, #24]
 8001f5a:	091b      	lsrs	r3, r3, #4
 8001f5c:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001f5e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001f62:	b29b      	uxth	r3, r3
 8001f64:	461a      	mov	r2, r3
 8001f66:	6a38      	ldr	r0, [r7, #32]
 8001f68:	f002 fc70 	bl	800484c <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001f6c:	697b      	ldr	r3, [r7, #20]
 8001f6e:	68da      	ldr	r2, [r3, #12]
 8001f70:	69bb      	ldr	r3, [r7, #24]
 8001f72:	091b      	lsrs	r3, r3, #4
 8001f74:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001f78:	441a      	add	r2, r3
 8001f7a:	697b      	ldr	r3, [r7, #20]
 8001f7c:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001f7e:	697b      	ldr	r3, [r7, #20]
 8001f80:	699a      	ldr	r2, [r3, #24]
 8001f82:	69bb      	ldr	r3, [r7, #24]
 8001f84:	091b      	lsrs	r3, r3, #4
 8001f86:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001f8a:	441a      	add	r2, r3
 8001f8c:	697b      	ldr	r3, [r7, #20]
 8001f8e:	619a      	str	r2, [r3, #24]
 8001f90:	e016      	b.n	8001fc0 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8001f92:	69bb      	ldr	r3, [r7, #24]
 8001f94:	0c5b      	lsrs	r3, r3, #17
 8001f96:	f003 030f 	and.w	r3, r3, #15
 8001f9a:	2b06      	cmp	r3, #6
 8001f9c:	d110      	bne.n	8001fc0 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001fa4:	2208      	movs	r2, #8
 8001fa6:	4619      	mov	r1, r3
 8001fa8:	6a38      	ldr	r0, [r7, #32]
 8001faa:	f002 fc4f 	bl	800484c <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001fae:	697b      	ldr	r3, [r7, #20]
 8001fb0:	699a      	ldr	r2, [r3, #24]
 8001fb2:	69bb      	ldr	r3, [r7, #24]
 8001fb4:	091b      	lsrs	r3, r3, #4
 8001fb6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001fba:	441a      	add	r2, r3
 8001fbc:	697b      	ldr	r3, [r7, #20]
 8001fbe:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	699a      	ldr	r2, [r3, #24]
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f042 0210 	orr.w	r2, r2, #16
 8001fce:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	f002 fd9e 	bl	8004b16 <USB_ReadInterrupts>
 8001fda:	4603      	mov	r3, r0
 8001fdc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001fe0:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8001fe4:	d16e      	bne.n	80020c4 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	4618      	mov	r0, r3
 8001ff0:	f002 fda4 	bl	8004b3c <USB_ReadDevAllOutEpInterrupt>
 8001ff4:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8001ff6:	e062      	b.n	80020be <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8001ff8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ffa:	f003 0301 	and.w	r3, r3, #1
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d057      	beq.n	80020b2 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002008:	b2d2      	uxtb	r2, r2
 800200a:	4611      	mov	r1, r2
 800200c:	4618      	mov	r0, r3
 800200e:	f002 fdc9 	bl	8004ba4 <USB_ReadDevOutEPInterrupt>
 8002012:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002014:	693b      	ldr	r3, [r7, #16]
 8002016:	f003 0301 	and.w	r3, r3, #1
 800201a:	2b00      	cmp	r3, #0
 800201c:	d00c      	beq.n	8002038 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800201e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002020:	015a      	lsls	r2, r3, #5
 8002022:	69fb      	ldr	r3, [r7, #28]
 8002024:	4413      	add	r3, r2
 8002026:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800202a:	461a      	mov	r2, r3
 800202c:	2301      	movs	r3, #1
 800202e:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002030:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002032:	6878      	ldr	r0, [r7, #4]
 8002034:	f000 fdb0 	bl	8002b98 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002038:	693b      	ldr	r3, [r7, #16]
 800203a:	f003 0308 	and.w	r3, r3, #8
 800203e:	2b00      	cmp	r3, #0
 8002040:	d00c      	beq.n	800205c <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002042:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002044:	015a      	lsls	r2, r3, #5
 8002046:	69fb      	ldr	r3, [r7, #28]
 8002048:	4413      	add	r3, r2
 800204a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800204e:	461a      	mov	r2, r3
 8002050:	2308      	movs	r3, #8
 8002052:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002054:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002056:	6878      	ldr	r0, [r7, #4]
 8002058:	f000 feaa 	bl	8002db0 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800205c:	693b      	ldr	r3, [r7, #16]
 800205e:	f003 0310 	and.w	r3, r3, #16
 8002062:	2b00      	cmp	r3, #0
 8002064:	d008      	beq.n	8002078 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002066:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002068:	015a      	lsls	r2, r3, #5
 800206a:	69fb      	ldr	r3, [r7, #28]
 800206c:	4413      	add	r3, r2
 800206e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002072:	461a      	mov	r2, r3
 8002074:	2310      	movs	r3, #16
 8002076:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002078:	693b      	ldr	r3, [r7, #16]
 800207a:	f003 0320 	and.w	r3, r3, #32
 800207e:	2b00      	cmp	r3, #0
 8002080:	d008      	beq.n	8002094 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002082:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002084:	015a      	lsls	r2, r3, #5
 8002086:	69fb      	ldr	r3, [r7, #28]
 8002088:	4413      	add	r3, r2
 800208a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800208e:	461a      	mov	r2, r3
 8002090:	2320      	movs	r3, #32
 8002092:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002094:	693b      	ldr	r3, [r7, #16]
 8002096:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800209a:	2b00      	cmp	r3, #0
 800209c:	d009      	beq.n	80020b2 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800209e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020a0:	015a      	lsls	r2, r3, #5
 80020a2:	69fb      	ldr	r3, [r7, #28]
 80020a4:	4413      	add	r3, r2
 80020a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80020aa:	461a      	mov	r2, r3
 80020ac:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80020b0:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80020b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020b4:	3301      	adds	r3, #1
 80020b6:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80020b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020ba:	085b      	lsrs	r3, r3, #1
 80020bc:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80020be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d199      	bne.n	8001ff8 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	4618      	mov	r0, r3
 80020ca:	f002 fd24 	bl	8004b16 <USB_ReadInterrupts>
 80020ce:	4603      	mov	r3, r0
 80020d0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80020d4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80020d8:	f040 80c0 	bne.w	800225c <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	4618      	mov	r0, r3
 80020e2:	f002 fd45 	bl	8004b70 <USB_ReadDevAllInEpInterrupt>
 80020e6:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80020e8:	2300      	movs	r3, #0
 80020ea:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80020ec:	e0b2      	b.n	8002254 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80020ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020f0:	f003 0301 	and.w	r3, r3, #1
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	f000 80a7 	beq.w	8002248 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002100:	b2d2      	uxtb	r2, r2
 8002102:	4611      	mov	r1, r2
 8002104:	4618      	mov	r0, r3
 8002106:	f002 fd6b 	bl	8004be0 <USB_ReadDevInEPInterrupt>
 800210a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800210c:	693b      	ldr	r3, [r7, #16]
 800210e:	f003 0301 	and.w	r3, r3, #1
 8002112:	2b00      	cmp	r3, #0
 8002114:	d057      	beq.n	80021c6 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002116:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002118:	f003 030f 	and.w	r3, r3, #15
 800211c:	2201      	movs	r2, #1
 800211e:	fa02 f303 	lsl.w	r3, r2, r3
 8002122:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002124:	69fb      	ldr	r3, [r7, #28]
 8002126:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800212a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	43db      	mvns	r3, r3
 8002130:	69f9      	ldr	r1, [r7, #28]
 8002132:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002136:	4013      	ands	r3, r2
 8002138:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800213a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800213c:	015a      	lsls	r2, r3, #5
 800213e:	69fb      	ldr	r3, [r7, #28]
 8002140:	4413      	add	r3, r2
 8002142:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002146:	461a      	mov	r2, r3
 8002148:	2301      	movs	r3, #1
 800214a:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	691b      	ldr	r3, [r3, #16]
 8002150:	2b01      	cmp	r3, #1
 8002152:	d132      	bne.n	80021ba <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002154:	6879      	ldr	r1, [r7, #4]
 8002156:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002158:	4613      	mov	r3, r2
 800215a:	00db      	lsls	r3, r3, #3
 800215c:	1a9b      	subs	r3, r3, r2
 800215e:	009b      	lsls	r3, r3, #2
 8002160:	440b      	add	r3, r1
 8002162:	3348      	adds	r3, #72	; 0x48
 8002164:	6819      	ldr	r1, [r3, #0]
 8002166:	6878      	ldr	r0, [r7, #4]
 8002168:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800216a:	4613      	mov	r3, r2
 800216c:	00db      	lsls	r3, r3, #3
 800216e:	1a9b      	subs	r3, r3, r2
 8002170:	009b      	lsls	r3, r3, #2
 8002172:	4403      	add	r3, r0
 8002174:	3344      	adds	r3, #68	; 0x44
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	4419      	add	r1, r3
 800217a:	6878      	ldr	r0, [r7, #4]
 800217c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800217e:	4613      	mov	r3, r2
 8002180:	00db      	lsls	r3, r3, #3
 8002182:	1a9b      	subs	r3, r3, r2
 8002184:	009b      	lsls	r3, r3, #2
 8002186:	4403      	add	r3, r0
 8002188:	3348      	adds	r3, #72	; 0x48
 800218a:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800218c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800218e:	2b00      	cmp	r3, #0
 8002190:	d113      	bne.n	80021ba <HAL_PCD_IRQHandler+0x31c>
 8002192:	6879      	ldr	r1, [r7, #4]
 8002194:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002196:	4613      	mov	r3, r2
 8002198:	00db      	lsls	r3, r3, #3
 800219a:	1a9b      	subs	r3, r3, r2
 800219c:	009b      	lsls	r3, r3, #2
 800219e:	440b      	add	r3, r1
 80021a0:	3350      	adds	r3, #80	; 0x50
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d108      	bne.n	80021ba <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	6818      	ldr	r0, [r3, #0]
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80021b2:	461a      	mov	r2, r3
 80021b4:	2101      	movs	r1, #1
 80021b6:	f002 fd73 	bl	8004ca0 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80021ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021bc:	b2db      	uxtb	r3, r3
 80021be:	4619      	mov	r1, r3
 80021c0:	6878      	ldr	r0, [r7, #4]
 80021c2:	f004 fc98 	bl	8006af6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80021c6:	693b      	ldr	r3, [r7, #16]
 80021c8:	f003 0308 	and.w	r3, r3, #8
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d008      	beq.n	80021e2 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80021d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021d2:	015a      	lsls	r2, r3, #5
 80021d4:	69fb      	ldr	r3, [r7, #28]
 80021d6:	4413      	add	r3, r2
 80021d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80021dc:	461a      	mov	r2, r3
 80021de:	2308      	movs	r3, #8
 80021e0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80021e2:	693b      	ldr	r3, [r7, #16]
 80021e4:	f003 0310 	and.w	r3, r3, #16
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d008      	beq.n	80021fe <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80021ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021ee:	015a      	lsls	r2, r3, #5
 80021f0:	69fb      	ldr	r3, [r7, #28]
 80021f2:	4413      	add	r3, r2
 80021f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80021f8:	461a      	mov	r2, r3
 80021fa:	2310      	movs	r3, #16
 80021fc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80021fe:	693b      	ldr	r3, [r7, #16]
 8002200:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002204:	2b00      	cmp	r3, #0
 8002206:	d008      	beq.n	800221a <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002208:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800220a:	015a      	lsls	r2, r3, #5
 800220c:	69fb      	ldr	r3, [r7, #28]
 800220e:	4413      	add	r3, r2
 8002210:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002214:	461a      	mov	r2, r3
 8002216:	2340      	movs	r3, #64	; 0x40
 8002218:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800221a:	693b      	ldr	r3, [r7, #16]
 800221c:	f003 0302 	and.w	r3, r3, #2
 8002220:	2b00      	cmp	r3, #0
 8002222:	d008      	beq.n	8002236 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002224:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002226:	015a      	lsls	r2, r3, #5
 8002228:	69fb      	ldr	r3, [r7, #28]
 800222a:	4413      	add	r3, r2
 800222c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002230:	461a      	mov	r2, r3
 8002232:	2302      	movs	r3, #2
 8002234:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002236:	693b      	ldr	r3, [r7, #16]
 8002238:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800223c:	2b00      	cmp	r3, #0
 800223e:	d003      	beq.n	8002248 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002240:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002242:	6878      	ldr	r0, [r7, #4]
 8002244:	f000 fc1b 	bl	8002a7e <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800224a:	3301      	adds	r3, #1
 800224c:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800224e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002250:	085b      	lsrs	r3, r3, #1
 8002252:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002254:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002256:	2b00      	cmp	r3, #0
 8002258:	f47f af49 	bne.w	80020ee <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	4618      	mov	r0, r3
 8002262:	f002 fc58 	bl	8004b16 <USB_ReadInterrupts>
 8002266:	4603      	mov	r3, r0
 8002268:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800226c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002270:	d122      	bne.n	80022b8 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002272:	69fb      	ldr	r3, [r7, #28]
 8002274:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002278:	685b      	ldr	r3, [r3, #4]
 800227a:	69fa      	ldr	r2, [r7, #28]
 800227c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002280:	f023 0301 	bic.w	r3, r3, #1
 8002284:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 800228c:	2b01      	cmp	r3, #1
 800228e:	d108      	bne.n	80022a2 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	2200      	movs	r2, #0
 8002294:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002298:	2100      	movs	r1, #0
 800229a:	6878      	ldr	r0, [r7, #4]
 800229c:	f000 fe26 	bl	8002eec <HAL_PCDEx_LPM_Callback>
 80022a0:	e002      	b.n	80022a8 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80022a2:	6878      	ldr	r0, [r7, #4]
 80022a4:	f004 fc9e 	bl	8006be4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	695a      	ldr	r2, [r3, #20]
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80022b6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	4618      	mov	r0, r3
 80022be:	f002 fc2a 	bl	8004b16 <USB_ReadInterrupts>
 80022c2:	4603      	mov	r3, r0
 80022c4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80022c8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80022cc:	d112      	bne.n	80022f4 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80022ce:	69fb      	ldr	r3, [r7, #28]
 80022d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80022d4:	689b      	ldr	r3, [r3, #8]
 80022d6:	f003 0301 	and.w	r3, r3, #1
 80022da:	2b01      	cmp	r3, #1
 80022dc:	d102      	bne.n	80022e4 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80022de:	6878      	ldr	r0, [r7, #4]
 80022e0:	f004 fc5a 	bl	8006b98 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	695a      	ldr	r2, [r3, #20]
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80022f2:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	4618      	mov	r0, r3
 80022fa:	f002 fc0c 	bl	8004b16 <USB_ReadInterrupts>
 80022fe:	4603      	mov	r3, r0
 8002300:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002304:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002308:	f040 80c7 	bne.w	800249a <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800230c:	69fb      	ldr	r3, [r7, #28]
 800230e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002312:	685b      	ldr	r3, [r3, #4]
 8002314:	69fa      	ldr	r2, [r7, #28]
 8002316:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800231a:	f023 0301 	bic.w	r3, r3, #1
 800231e:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	2110      	movs	r1, #16
 8002326:	4618      	mov	r0, r3
 8002328:	f001 fcda 	bl	8003ce0 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800232c:	2300      	movs	r3, #0
 800232e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002330:	e056      	b.n	80023e0 <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002332:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002334:	015a      	lsls	r2, r3, #5
 8002336:	69fb      	ldr	r3, [r7, #28]
 8002338:	4413      	add	r3, r2
 800233a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800233e:	461a      	mov	r2, r3
 8002340:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002344:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002346:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002348:	015a      	lsls	r2, r3, #5
 800234a:	69fb      	ldr	r3, [r7, #28]
 800234c:	4413      	add	r3, r2
 800234e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002356:	0151      	lsls	r1, r2, #5
 8002358:	69fa      	ldr	r2, [r7, #28]
 800235a:	440a      	add	r2, r1
 800235c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002360:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002364:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8002366:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002368:	015a      	lsls	r2, r3, #5
 800236a:	69fb      	ldr	r3, [r7, #28]
 800236c:	4413      	add	r3, r2
 800236e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002376:	0151      	lsls	r1, r2, #5
 8002378:	69fa      	ldr	r2, [r7, #28]
 800237a:	440a      	add	r2, r1
 800237c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002380:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002384:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002386:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002388:	015a      	lsls	r2, r3, #5
 800238a:	69fb      	ldr	r3, [r7, #28]
 800238c:	4413      	add	r3, r2
 800238e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002392:	461a      	mov	r2, r3
 8002394:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002398:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800239a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800239c:	015a      	lsls	r2, r3, #5
 800239e:	69fb      	ldr	r3, [r7, #28]
 80023a0:	4413      	add	r3, r2
 80023a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80023aa:	0151      	lsls	r1, r2, #5
 80023ac:	69fa      	ldr	r2, [r7, #28]
 80023ae:	440a      	add	r2, r1
 80023b0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80023b4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80023b8:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80023ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023bc:	015a      	lsls	r2, r3, #5
 80023be:	69fb      	ldr	r3, [r7, #28]
 80023c0:	4413      	add	r3, r2
 80023c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80023ca:	0151      	lsls	r1, r2, #5
 80023cc:	69fa      	ldr	r2, [r7, #28]
 80023ce:	440a      	add	r2, r1
 80023d0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80023d4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80023d8:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80023da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023dc:	3301      	adds	r3, #1
 80023de:	62fb      	str	r3, [r7, #44]	; 0x2c
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	685b      	ldr	r3, [r3, #4]
 80023e4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80023e6:	429a      	cmp	r2, r3
 80023e8:	d3a3      	bcc.n	8002332 <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80023ea:	69fb      	ldr	r3, [r7, #28]
 80023ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80023f0:	69db      	ldr	r3, [r3, #28]
 80023f2:	69fa      	ldr	r2, [r7, #28]
 80023f4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80023f8:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80023fc:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002402:	2b00      	cmp	r3, #0
 8002404:	d016      	beq.n	8002434 <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002406:	69fb      	ldr	r3, [r7, #28]
 8002408:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800240c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002410:	69fa      	ldr	r2, [r7, #28]
 8002412:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002416:	f043 030b 	orr.w	r3, r3, #11
 800241a:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800241e:	69fb      	ldr	r3, [r7, #28]
 8002420:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002424:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002426:	69fa      	ldr	r2, [r7, #28]
 8002428:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800242c:	f043 030b 	orr.w	r3, r3, #11
 8002430:	6453      	str	r3, [r2, #68]	; 0x44
 8002432:	e015      	b.n	8002460 <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002434:	69fb      	ldr	r3, [r7, #28]
 8002436:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800243a:	695b      	ldr	r3, [r3, #20]
 800243c:	69fa      	ldr	r2, [r7, #28]
 800243e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002442:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002446:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800244a:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800244c:	69fb      	ldr	r3, [r7, #28]
 800244e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002452:	691b      	ldr	r3, [r3, #16]
 8002454:	69fa      	ldr	r2, [r7, #28]
 8002456:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800245a:	f043 030b 	orr.w	r3, r3, #11
 800245e:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002460:	69fb      	ldr	r3, [r7, #28]
 8002462:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	69fa      	ldr	r2, [r7, #28]
 800246a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800246e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8002472:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	6818      	ldr	r0, [r3, #0]
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	691b      	ldr	r3, [r3, #16]
 800247c:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002484:	461a      	mov	r2, r3
 8002486:	f002 fc0b 	bl	8004ca0 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	695a      	ldr	r2, [r3, #20]
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8002498:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	4618      	mov	r0, r3
 80024a0:	f002 fb39 	bl	8004b16 <USB_ReadInterrupts>
 80024a4:	4603      	mov	r3, r0
 80024a6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80024aa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80024ae:	d124      	bne.n	80024fa <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	4618      	mov	r0, r3
 80024b6:	f002 fbcf 	bl	8004c58 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	4618      	mov	r0, r3
 80024c0:	f001 fc6f 	bl	8003da2 <USB_GetDevSpeed>
 80024c4:	4603      	mov	r3, r0
 80024c6:	461a      	mov	r2, r3
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681c      	ldr	r4, [r3, #0]
 80024d0:	f001 f946 	bl	8003760 <HAL_RCC_GetHCLKFreq>
 80024d4:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80024da:	b2db      	uxtb	r3, r3
 80024dc:	461a      	mov	r2, r3
 80024de:	4620      	mov	r0, r4
 80024e0:	f001 f9ac 	bl	800383c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80024e4:	6878      	ldr	r0, [r7, #4]
 80024e6:	f004 fb2e 	bl	8006b46 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	695a      	ldr	r2, [r3, #20]
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80024f8:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	4618      	mov	r0, r3
 8002500:	f002 fb09 	bl	8004b16 <USB_ReadInterrupts>
 8002504:	4603      	mov	r3, r0
 8002506:	f003 0308 	and.w	r3, r3, #8
 800250a:	2b08      	cmp	r3, #8
 800250c:	d10a      	bne.n	8002524 <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800250e:	6878      	ldr	r0, [r7, #4]
 8002510:	f004 fb0b 	bl	8006b2a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	695a      	ldr	r2, [r3, #20]
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f002 0208 	and.w	r2, r2, #8
 8002522:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	4618      	mov	r0, r3
 800252a:	f002 faf4 	bl	8004b16 <USB_ReadInterrupts>
 800252e:	4603      	mov	r3, r0
 8002530:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002534:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002538:	d10f      	bne.n	800255a <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800253a:	2300      	movs	r3, #0
 800253c:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800253e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002540:	b2db      	uxtb	r3, r3
 8002542:	4619      	mov	r1, r3
 8002544:	6878      	ldr	r0, [r7, #4]
 8002546:	f004 fb6d 	bl	8006c24 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	695a      	ldr	r2, [r3, #20]
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8002558:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	4618      	mov	r0, r3
 8002560:	f002 fad9 	bl	8004b16 <USB_ReadInterrupts>
 8002564:	4603      	mov	r3, r0
 8002566:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800256a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800256e:	d10f      	bne.n	8002590 <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8002570:	2300      	movs	r3, #0
 8002572:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002576:	b2db      	uxtb	r3, r3
 8002578:	4619      	mov	r1, r3
 800257a:	6878      	ldr	r0, [r7, #4]
 800257c:	f004 fb40 	bl	8006c00 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	695a      	ldr	r2, [r3, #20]
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800258e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	4618      	mov	r0, r3
 8002596:	f002 fabe 	bl	8004b16 <USB_ReadInterrupts>
 800259a:	4603      	mov	r3, r0
 800259c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80025a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80025a4:	d10a      	bne.n	80025bc <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80025a6:	6878      	ldr	r0, [r7, #4]
 80025a8:	f004 fb4e 	bl	8006c48 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	695a      	ldr	r2, [r3, #20]
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80025ba:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	4618      	mov	r0, r3
 80025c2:	f002 faa8 	bl	8004b16 <USB_ReadInterrupts>
 80025c6:	4603      	mov	r3, r0
 80025c8:	f003 0304 	and.w	r3, r3, #4
 80025cc:	2b04      	cmp	r3, #4
 80025ce:	d115      	bne.n	80025fc <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	685b      	ldr	r3, [r3, #4]
 80025d6:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80025d8:	69bb      	ldr	r3, [r7, #24]
 80025da:	f003 0304 	and.w	r3, r3, #4
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d002      	beq.n	80025e8 <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80025e2:	6878      	ldr	r0, [r7, #4]
 80025e4:	f004 fb3e 	bl	8006c64 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	6859      	ldr	r1, [r3, #4]
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	69ba      	ldr	r2, [r7, #24]
 80025f4:	430a      	orrs	r2, r1
 80025f6:	605a      	str	r2, [r3, #4]
 80025f8:	e000      	b.n	80025fc <HAL_PCD_IRQHandler+0x75e>
      return;
 80025fa:	bf00      	nop
    }
  }
}
 80025fc:	3734      	adds	r7, #52	; 0x34
 80025fe:	46bd      	mov	sp, r7
 8002600:	bd90      	pop	{r4, r7, pc}

08002602 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002602:	b580      	push	{r7, lr}
 8002604:	b082      	sub	sp, #8
 8002606:	af00      	add	r7, sp, #0
 8002608:	6078      	str	r0, [r7, #4]
 800260a:	460b      	mov	r3, r1
 800260c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002614:	2b01      	cmp	r3, #1
 8002616:	d101      	bne.n	800261c <HAL_PCD_SetAddress+0x1a>
 8002618:	2302      	movs	r3, #2
 800261a:	e013      	b.n	8002644 <HAL_PCD_SetAddress+0x42>
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	2201      	movs	r2, #1
 8002620:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	78fa      	ldrb	r2, [r7, #3]
 8002628:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	78fa      	ldrb	r2, [r7, #3]
 8002632:	4611      	mov	r1, r2
 8002634:	4618      	mov	r0, r3
 8002636:	f002 fa06 	bl	8004a46 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	2200      	movs	r2, #0
 800263e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002642:	2300      	movs	r3, #0
}
 8002644:	4618      	mov	r0, r3
 8002646:	3708      	adds	r7, #8
 8002648:	46bd      	mov	sp, r7
 800264a:	bd80      	pop	{r7, pc}

0800264c <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	b084      	sub	sp, #16
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
 8002654:	4608      	mov	r0, r1
 8002656:	4611      	mov	r1, r2
 8002658:	461a      	mov	r2, r3
 800265a:	4603      	mov	r3, r0
 800265c:	70fb      	strb	r3, [r7, #3]
 800265e:	460b      	mov	r3, r1
 8002660:	803b      	strh	r3, [r7, #0]
 8002662:	4613      	mov	r3, r2
 8002664:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002666:	2300      	movs	r3, #0
 8002668:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800266a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800266e:	2b00      	cmp	r3, #0
 8002670:	da0f      	bge.n	8002692 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002672:	78fb      	ldrb	r3, [r7, #3]
 8002674:	f003 020f 	and.w	r2, r3, #15
 8002678:	4613      	mov	r3, r2
 800267a:	00db      	lsls	r3, r3, #3
 800267c:	1a9b      	subs	r3, r3, r2
 800267e:	009b      	lsls	r3, r3, #2
 8002680:	3338      	adds	r3, #56	; 0x38
 8002682:	687a      	ldr	r2, [r7, #4]
 8002684:	4413      	add	r3, r2
 8002686:	3304      	adds	r3, #4
 8002688:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	2201      	movs	r2, #1
 800268e:	705a      	strb	r2, [r3, #1]
 8002690:	e00f      	b.n	80026b2 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002692:	78fb      	ldrb	r3, [r7, #3]
 8002694:	f003 020f 	and.w	r2, r3, #15
 8002698:	4613      	mov	r3, r2
 800269a:	00db      	lsls	r3, r3, #3
 800269c:	1a9b      	subs	r3, r3, r2
 800269e:	009b      	lsls	r3, r3, #2
 80026a0:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80026a4:	687a      	ldr	r2, [r7, #4]
 80026a6:	4413      	add	r3, r2
 80026a8:	3304      	adds	r3, #4
 80026aa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	2200      	movs	r2, #0
 80026b0:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80026b2:	78fb      	ldrb	r3, [r7, #3]
 80026b4:	f003 030f 	and.w	r3, r3, #15
 80026b8:	b2da      	uxtb	r2, r3
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80026be:	883a      	ldrh	r2, [r7, #0]
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	78ba      	ldrb	r2, [r7, #2]
 80026c8:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	785b      	ldrb	r3, [r3, #1]
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d004      	beq.n	80026dc <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	781b      	ldrb	r3, [r3, #0]
 80026d6:	b29a      	uxth	r2, r3
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80026dc:	78bb      	ldrb	r3, [r7, #2]
 80026de:	2b02      	cmp	r3, #2
 80026e0:	d102      	bne.n	80026e8 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	2200      	movs	r2, #0
 80026e6:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80026ee:	2b01      	cmp	r3, #1
 80026f0:	d101      	bne.n	80026f6 <HAL_PCD_EP_Open+0xaa>
 80026f2:	2302      	movs	r3, #2
 80026f4:	e00e      	b.n	8002714 <HAL_PCD_EP_Open+0xc8>
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	2201      	movs	r2, #1
 80026fa:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	68f9      	ldr	r1, [r7, #12]
 8002704:	4618      	mov	r0, r3
 8002706:	f001 fb71 	bl	8003dec <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	2200      	movs	r2, #0
 800270e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8002712:	7afb      	ldrb	r3, [r7, #11]
}
 8002714:	4618      	mov	r0, r3
 8002716:	3710      	adds	r7, #16
 8002718:	46bd      	mov	sp, r7
 800271a:	bd80      	pop	{r7, pc}

0800271c <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800271c:	b580      	push	{r7, lr}
 800271e:	b084      	sub	sp, #16
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]
 8002724:	460b      	mov	r3, r1
 8002726:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002728:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800272c:	2b00      	cmp	r3, #0
 800272e:	da0f      	bge.n	8002750 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002730:	78fb      	ldrb	r3, [r7, #3]
 8002732:	f003 020f 	and.w	r2, r3, #15
 8002736:	4613      	mov	r3, r2
 8002738:	00db      	lsls	r3, r3, #3
 800273a:	1a9b      	subs	r3, r3, r2
 800273c:	009b      	lsls	r3, r3, #2
 800273e:	3338      	adds	r3, #56	; 0x38
 8002740:	687a      	ldr	r2, [r7, #4]
 8002742:	4413      	add	r3, r2
 8002744:	3304      	adds	r3, #4
 8002746:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	2201      	movs	r2, #1
 800274c:	705a      	strb	r2, [r3, #1]
 800274e:	e00f      	b.n	8002770 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002750:	78fb      	ldrb	r3, [r7, #3]
 8002752:	f003 020f 	and.w	r2, r3, #15
 8002756:	4613      	mov	r3, r2
 8002758:	00db      	lsls	r3, r3, #3
 800275a:	1a9b      	subs	r3, r3, r2
 800275c:	009b      	lsls	r3, r3, #2
 800275e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002762:	687a      	ldr	r2, [r7, #4]
 8002764:	4413      	add	r3, r2
 8002766:	3304      	adds	r3, #4
 8002768:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	2200      	movs	r2, #0
 800276e:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002770:	78fb      	ldrb	r3, [r7, #3]
 8002772:	f003 030f 	and.w	r3, r3, #15
 8002776:	b2da      	uxtb	r2, r3
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002782:	2b01      	cmp	r3, #1
 8002784:	d101      	bne.n	800278a <HAL_PCD_EP_Close+0x6e>
 8002786:	2302      	movs	r3, #2
 8002788:	e00e      	b.n	80027a8 <HAL_PCD_EP_Close+0x8c>
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	2201      	movs	r2, #1
 800278e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	68f9      	ldr	r1, [r7, #12]
 8002798:	4618      	mov	r0, r3
 800279a:	f001 fbaf 	bl	8003efc <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	2200      	movs	r2, #0
 80027a2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 80027a6:	2300      	movs	r3, #0
}
 80027a8:	4618      	mov	r0, r3
 80027aa:	3710      	adds	r7, #16
 80027ac:	46bd      	mov	sp, r7
 80027ae:	bd80      	pop	{r7, pc}

080027b0 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b086      	sub	sp, #24
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	60f8      	str	r0, [r7, #12]
 80027b8:	607a      	str	r2, [r7, #4]
 80027ba:	603b      	str	r3, [r7, #0]
 80027bc:	460b      	mov	r3, r1
 80027be:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80027c0:	7afb      	ldrb	r3, [r7, #11]
 80027c2:	f003 020f 	and.w	r2, r3, #15
 80027c6:	4613      	mov	r3, r2
 80027c8:	00db      	lsls	r3, r3, #3
 80027ca:	1a9b      	subs	r3, r3, r2
 80027cc:	009b      	lsls	r3, r3, #2
 80027ce:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80027d2:	68fa      	ldr	r2, [r7, #12]
 80027d4:	4413      	add	r3, r2
 80027d6:	3304      	adds	r3, #4
 80027d8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80027da:	697b      	ldr	r3, [r7, #20]
 80027dc:	687a      	ldr	r2, [r7, #4]
 80027de:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80027e0:	697b      	ldr	r3, [r7, #20]
 80027e2:	683a      	ldr	r2, [r7, #0]
 80027e4:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80027e6:	697b      	ldr	r3, [r7, #20]
 80027e8:	2200      	movs	r2, #0
 80027ea:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 80027ec:	697b      	ldr	r3, [r7, #20]
 80027ee:	2200      	movs	r2, #0
 80027f0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80027f2:	7afb      	ldrb	r3, [r7, #11]
 80027f4:	f003 030f 	and.w	r3, r3, #15
 80027f8:	b2da      	uxtb	r2, r3
 80027fa:	697b      	ldr	r3, [r7, #20]
 80027fc:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	691b      	ldr	r3, [r3, #16]
 8002802:	2b01      	cmp	r3, #1
 8002804:	d102      	bne.n	800280c <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002806:	687a      	ldr	r2, [r7, #4]
 8002808:	697b      	ldr	r3, [r7, #20]
 800280a:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800280c:	7afb      	ldrb	r3, [r7, #11]
 800280e:	f003 030f 	and.w	r3, r3, #15
 8002812:	2b00      	cmp	r3, #0
 8002814:	d109      	bne.n	800282a <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	6818      	ldr	r0, [r3, #0]
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	691b      	ldr	r3, [r3, #16]
 800281e:	b2db      	uxtb	r3, r3
 8002820:	461a      	mov	r2, r3
 8002822:	6979      	ldr	r1, [r7, #20]
 8002824:	f001 fe8a 	bl	800453c <USB_EP0StartXfer>
 8002828:	e008      	b.n	800283c <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	6818      	ldr	r0, [r3, #0]
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	691b      	ldr	r3, [r3, #16]
 8002832:	b2db      	uxtb	r3, r3
 8002834:	461a      	mov	r2, r3
 8002836:	6979      	ldr	r1, [r7, #20]
 8002838:	f001 fc3c 	bl	80040b4 <USB_EPStartXfer>
  }

  return HAL_OK;
 800283c:	2300      	movs	r3, #0
}
 800283e:	4618      	mov	r0, r3
 8002840:	3718      	adds	r7, #24
 8002842:	46bd      	mov	sp, r7
 8002844:	bd80      	pop	{r7, pc}

08002846 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002846:	b480      	push	{r7}
 8002848:	b083      	sub	sp, #12
 800284a:	af00      	add	r7, sp, #0
 800284c:	6078      	str	r0, [r7, #4]
 800284e:	460b      	mov	r3, r1
 8002850:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002852:	78fb      	ldrb	r3, [r7, #3]
 8002854:	f003 020f 	and.w	r2, r3, #15
 8002858:	6879      	ldr	r1, [r7, #4]
 800285a:	4613      	mov	r3, r2
 800285c:	00db      	lsls	r3, r3, #3
 800285e:	1a9b      	subs	r3, r3, r2
 8002860:	009b      	lsls	r3, r3, #2
 8002862:	440b      	add	r3, r1
 8002864:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8002868:	681b      	ldr	r3, [r3, #0]
}
 800286a:	4618      	mov	r0, r3
 800286c:	370c      	adds	r7, #12
 800286e:	46bd      	mov	sp, r7
 8002870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002874:	4770      	bx	lr

08002876 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002876:	b580      	push	{r7, lr}
 8002878:	b086      	sub	sp, #24
 800287a:	af00      	add	r7, sp, #0
 800287c:	60f8      	str	r0, [r7, #12]
 800287e:	607a      	str	r2, [r7, #4]
 8002880:	603b      	str	r3, [r7, #0]
 8002882:	460b      	mov	r3, r1
 8002884:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002886:	7afb      	ldrb	r3, [r7, #11]
 8002888:	f003 020f 	and.w	r2, r3, #15
 800288c:	4613      	mov	r3, r2
 800288e:	00db      	lsls	r3, r3, #3
 8002890:	1a9b      	subs	r3, r3, r2
 8002892:	009b      	lsls	r3, r3, #2
 8002894:	3338      	adds	r3, #56	; 0x38
 8002896:	68fa      	ldr	r2, [r7, #12]
 8002898:	4413      	add	r3, r2
 800289a:	3304      	adds	r3, #4
 800289c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800289e:	697b      	ldr	r3, [r7, #20]
 80028a0:	687a      	ldr	r2, [r7, #4]
 80028a2:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80028a4:	697b      	ldr	r3, [r7, #20]
 80028a6:	683a      	ldr	r2, [r7, #0]
 80028a8:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80028aa:	697b      	ldr	r3, [r7, #20]
 80028ac:	2200      	movs	r2, #0
 80028ae:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 80028b0:	697b      	ldr	r3, [r7, #20]
 80028b2:	2201      	movs	r2, #1
 80028b4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80028b6:	7afb      	ldrb	r3, [r7, #11]
 80028b8:	f003 030f 	and.w	r3, r3, #15
 80028bc:	b2da      	uxtb	r2, r3
 80028be:	697b      	ldr	r3, [r7, #20]
 80028c0:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	691b      	ldr	r3, [r3, #16]
 80028c6:	2b01      	cmp	r3, #1
 80028c8:	d102      	bne.n	80028d0 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80028ca:	687a      	ldr	r2, [r7, #4]
 80028cc:	697b      	ldr	r3, [r7, #20]
 80028ce:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80028d0:	7afb      	ldrb	r3, [r7, #11]
 80028d2:	f003 030f 	and.w	r3, r3, #15
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d109      	bne.n	80028ee <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	6818      	ldr	r0, [r3, #0]
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	691b      	ldr	r3, [r3, #16]
 80028e2:	b2db      	uxtb	r3, r3
 80028e4:	461a      	mov	r2, r3
 80028e6:	6979      	ldr	r1, [r7, #20]
 80028e8:	f001 fe28 	bl	800453c <USB_EP0StartXfer>
 80028ec:	e008      	b.n	8002900 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	6818      	ldr	r0, [r3, #0]
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	691b      	ldr	r3, [r3, #16]
 80028f6:	b2db      	uxtb	r3, r3
 80028f8:	461a      	mov	r2, r3
 80028fa:	6979      	ldr	r1, [r7, #20]
 80028fc:	f001 fbda 	bl	80040b4 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002900:	2300      	movs	r3, #0
}
 8002902:	4618      	mov	r0, r3
 8002904:	3718      	adds	r7, #24
 8002906:	46bd      	mov	sp, r7
 8002908:	bd80      	pop	{r7, pc}

0800290a <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800290a:	b580      	push	{r7, lr}
 800290c:	b084      	sub	sp, #16
 800290e:	af00      	add	r7, sp, #0
 8002910:	6078      	str	r0, [r7, #4]
 8002912:	460b      	mov	r3, r1
 8002914:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002916:	78fb      	ldrb	r3, [r7, #3]
 8002918:	f003 020f 	and.w	r2, r3, #15
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	685b      	ldr	r3, [r3, #4]
 8002920:	429a      	cmp	r2, r3
 8002922:	d901      	bls.n	8002928 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002924:	2301      	movs	r3, #1
 8002926:	e050      	b.n	80029ca <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002928:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800292c:	2b00      	cmp	r3, #0
 800292e:	da0f      	bge.n	8002950 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002930:	78fb      	ldrb	r3, [r7, #3]
 8002932:	f003 020f 	and.w	r2, r3, #15
 8002936:	4613      	mov	r3, r2
 8002938:	00db      	lsls	r3, r3, #3
 800293a:	1a9b      	subs	r3, r3, r2
 800293c:	009b      	lsls	r3, r3, #2
 800293e:	3338      	adds	r3, #56	; 0x38
 8002940:	687a      	ldr	r2, [r7, #4]
 8002942:	4413      	add	r3, r2
 8002944:	3304      	adds	r3, #4
 8002946:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	2201      	movs	r2, #1
 800294c:	705a      	strb	r2, [r3, #1]
 800294e:	e00d      	b.n	800296c <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002950:	78fa      	ldrb	r2, [r7, #3]
 8002952:	4613      	mov	r3, r2
 8002954:	00db      	lsls	r3, r3, #3
 8002956:	1a9b      	subs	r3, r3, r2
 8002958:	009b      	lsls	r3, r3, #2
 800295a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800295e:	687a      	ldr	r2, [r7, #4]
 8002960:	4413      	add	r3, r2
 8002962:	3304      	adds	r3, #4
 8002964:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	2200      	movs	r2, #0
 800296a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	2201      	movs	r2, #1
 8002970:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002972:	78fb      	ldrb	r3, [r7, #3]
 8002974:	f003 030f 	and.w	r3, r3, #15
 8002978:	b2da      	uxtb	r2, r3
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002984:	2b01      	cmp	r3, #1
 8002986:	d101      	bne.n	800298c <HAL_PCD_EP_SetStall+0x82>
 8002988:	2302      	movs	r3, #2
 800298a:	e01e      	b.n	80029ca <HAL_PCD_EP_SetStall+0xc0>
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	2201      	movs	r2, #1
 8002990:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	68f9      	ldr	r1, [r7, #12]
 800299a:	4618      	mov	r0, r3
 800299c:	f001 ff7f 	bl	800489e <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80029a0:	78fb      	ldrb	r3, [r7, #3]
 80029a2:	f003 030f 	and.w	r3, r3, #15
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d10a      	bne.n	80029c0 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	6818      	ldr	r0, [r3, #0]
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	691b      	ldr	r3, [r3, #16]
 80029b2:	b2d9      	uxtb	r1, r3
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80029ba:	461a      	mov	r2, r3
 80029bc:	f002 f970 	bl	8004ca0 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	2200      	movs	r2, #0
 80029c4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80029c8:	2300      	movs	r3, #0
}
 80029ca:	4618      	mov	r0, r3
 80029cc:	3710      	adds	r7, #16
 80029ce:	46bd      	mov	sp, r7
 80029d0:	bd80      	pop	{r7, pc}

080029d2 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80029d2:	b580      	push	{r7, lr}
 80029d4:	b084      	sub	sp, #16
 80029d6:	af00      	add	r7, sp, #0
 80029d8:	6078      	str	r0, [r7, #4]
 80029da:	460b      	mov	r3, r1
 80029dc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80029de:	78fb      	ldrb	r3, [r7, #3]
 80029e0:	f003 020f 	and.w	r2, r3, #15
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	685b      	ldr	r3, [r3, #4]
 80029e8:	429a      	cmp	r2, r3
 80029ea:	d901      	bls.n	80029f0 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80029ec:	2301      	movs	r3, #1
 80029ee:	e042      	b.n	8002a76 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80029f0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	da0f      	bge.n	8002a18 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80029f8:	78fb      	ldrb	r3, [r7, #3]
 80029fa:	f003 020f 	and.w	r2, r3, #15
 80029fe:	4613      	mov	r3, r2
 8002a00:	00db      	lsls	r3, r3, #3
 8002a02:	1a9b      	subs	r3, r3, r2
 8002a04:	009b      	lsls	r3, r3, #2
 8002a06:	3338      	adds	r3, #56	; 0x38
 8002a08:	687a      	ldr	r2, [r7, #4]
 8002a0a:	4413      	add	r3, r2
 8002a0c:	3304      	adds	r3, #4
 8002a0e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	2201      	movs	r2, #1
 8002a14:	705a      	strb	r2, [r3, #1]
 8002a16:	e00f      	b.n	8002a38 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002a18:	78fb      	ldrb	r3, [r7, #3]
 8002a1a:	f003 020f 	and.w	r2, r3, #15
 8002a1e:	4613      	mov	r3, r2
 8002a20:	00db      	lsls	r3, r3, #3
 8002a22:	1a9b      	subs	r3, r3, r2
 8002a24:	009b      	lsls	r3, r3, #2
 8002a26:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002a2a:	687a      	ldr	r2, [r7, #4]
 8002a2c:	4413      	add	r3, r2
 8002a2e:	3304      	adds	r3, #4
 8002a30:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	2200      	movs	r2, #0
 8002a36:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002a3e:	78fb      	ldrb	r3, [r7, #3]
 8002a40:	f003 030f 	and.w	r3, r3, #15
 8002a44:	b2da      	uxtb	r2, r3
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002a50:	2b01      	cmp	r3, #1
 8002a52:	d101      	bne.n	8002a58 <HAL_PCD_EP_ClrStall+0x86>
 8002a54:	2302      	movs	r3, #2
 8002a56:	e00e      	b.n	8002a76 <HAL_PCD_EP_ClrStall+0xa4>
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	2201      	movs	r2, #1
 8002a5c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	68f9      	ldr	r1, [r7, #12]
 8002a66:	4618      	mov	r0, r3
 8002a68:	f001 ff87 	bl	800497a <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	2200      	movs	r2, #0
 8002a70:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002a74:	2300      	movs	r3, #0
}
 8002a76:	4618      	mov	r0, r3
 8002a78:	3710      	adds	r7, #16
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	bd80      	pop	{r7, pc}

08002a7e <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002a7e:	b580      	push	{r7, lr}
 8002a80:	b08a      	sub	sp, #40	; 0x28
 8002a82:	af02      	add	r7, sp, #8
 8002a84:	6078      	str	r0, [r7, #4]
 8002a86:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002a8e:	697b      	ldr	r3, [r7, #20]
 8002a90:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8002a92:	683a      	ldr	r2, [r7, #0]
 8002a94:	4613      	mov	r3, r2
 8002a96:	00db      	lsls	r3, r3, #3
 8002a98:	1a9b      	subs	r3, r3, r2
 8002a9a:	009b      	lsls	r3, r3, #2
 8002a9c:	3338      	adds	r3, #56	; 0x38
 8002a9e:	687a      	ldr	r2, [r7, #4]
 8002aa0:	4413      	add	r3, r2
 8002aa2:	3304      	adds	r3, #4
 8002aa4:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	699a      	ldr	r2, [r3, #24]
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	695b      	ldr	r3, [r3, #20]
 8002aae:	429a      	cmp	r2, r3
 8002ab0:	d901      	bls.n	8002ab6 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002ab2:	2301      	movs	r3, #1
 8002ab4:	e06c      	b.n	8002b90 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	695a      	ldr	r2, [r3, #20]
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	699b      	ldr	r3, [r3, #24]
 8002abe:	1ad3      	subs	r3, r2, r3
 8002ac0:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	689b      	ldr	r3, [r3, #8]
 8002ac6:	69fa      	ldr	r2, [r7, #28]
 8002ac8:	429a      	cmp	r2, r3
 8002aca:	d902      	bls.n	8002ad2 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	689b      	ldr	r3, [r3, #8]
 8002ad0:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002ad2:	69fb      	ldr	r3, [r7, #28]
 8002ad4:	3303      	adds	r3, #3
 8002ad6:	089b      	lsrs	r3, r3, #2
 8002ad8:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002ada:	e02b      	b.n	8002b34 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	695a      	ldr	r2, [r3, #20]
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	699b      	ldr	r3, [r3, #24]
 8002ae4:	1ad3      	subs	r3, r2, r3
 8002ae6:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	689b      	ldr	r3, [r3, #8]
 8002aec:	69fa      	ldr	r2, [r7, #28]
 8002aee:	429a      	cmp	r2, r3
 8002af0:	d902      	bls.n	8002af8 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	689b      	ldr	r3, [r3, #8]
 8002af6:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002af8:	69fb      	ldr	r3, [r7, #28]
 8002afa:	3303      	adds	r3, #3
 8002afc:	089b      	lsrs	r3, r3, #2
 8002afe:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	68d9      	ldr	r1, [r3, #12]
 8002b04:	683b      	ldr	r3, [r7, #0]
 8002b06:	b2da      	uxtb	r2, r3
 8002b08:	69fb      	ldr	r3, [r7, #28]
 8002b0a:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002b10:	b2db      	uxtb	r3, r3
 8002b12:	9300      	str	r3, [sp, #0]
 8002b14:	4603      	mov	r3, r0
 8002b16:	6978      	ldr	r0, [r7, #20]
 8002b18:	f001 fe63 	bl	80047e2 <USB_WritePacket>

    ep->xfer_buff  += len;
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	68da      	ldr	r2, [r3, #12]
 8002b20:	69fb      	ldr	r3, [r7, #28]
 8002b22:	441a      	add	r2, r3
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	699a      	ldr	r2, [r3, #24]
 8002b2c:	69fb      	ldr	r3, [r7, #28]
 8002b2e:	441a      	add	r2, r3
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002b34:	683b      	ldr	r3, [r7, #0]
 8002b36:	015a      	lsls	r2, r3, #5
 8002b38:	693b      	ldr	r3, [r7, #16]
 8002b3a:	4413      	add	r3, r2
 8002b3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002b40:	699b      	ldr	r3, [r3, #24]
 8002b42:	b29b      	uxth	r3, r3
 8002b44:	69ba      	ldr	r2, [r7, #24]
 8002b46:	429a      	cmp	r2, r3
 8002b48:	d809      	bhi.n	8002b5e <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	699a      	ldr	r2, [r3, #24]
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002b52:	429a      	cmp	r2, r3
 8002b54:	d203      	bcs.n	8002b5e <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	695b      	ldr	r3, [r3, #20]
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d1be      	bne.n	8002adc <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	695a      	ldr	r2, [r3, #20]
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	699b      	ldr	r3, [r3, #24]
 8002b66:	429a      	cmp	r2, r3
 8002b68:	d811      	bhi.n	8002b8e <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002b6a:	683b      	ldr	r3, [r7, #0]
 8002b6c:	f003 030f 	and.w	r3, r3, #15
 8002b70:	2201      	movs	r2, #1
 8002b72:	fa02 f303 	lsl.w	r3, r2, r3
 8002b76:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002b78:	693b      	ldr	r3, [r7, #16]
 8002b7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002b7e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002b80:	68bb      	ldr	r3, [r7, #8]
 8002b82:	43db      	mvns	r3, r3
 8002b84:	6939      	ldr	r1, [r7, #16]
 8002b86:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002b8a:	4013      	ands	r3, r2
 8002b8c:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8002b8e:	2300      	movs	r3, #0
}
 8002b90:	4618      	mov	r0, r3
 8002b92:	3720      	adds	r7, #32
 8002b94:	46bd      	mov	sp, r7
 8002b96:	bd80      	pop	{r7, pc}

08002b98 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	b086      	sub	sp, #24
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]
 8002ba0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002ba8:	697b      	ldr	r3, [r7, #20]
 8002baa:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002bac:	697b      	ldr	r3, [r7, #20]
 8002bae:	333c      	adds	r3, #60	; 0x3c
 8002bb0:	3304      	adds	r3, #4
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002bb6:	683b      	ldr	r3, [r7, #0]
 8002bb8:	015a      	lsls	r2, r3, #5
 8002bba:	693b      	ldr	r3, [r7, #16]
 8002bbc:	4413      	add	r3, r2
 8002bbe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002bc2:	689b      	ldr	r3, [r3, #8]
 8002bc4:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	691b      	ldr	r3, [r3, #16]
 8002bca:	2b01      	cmp	r3, #1
 8002bcc:	f040 80a0 	bne.w	8002d10 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8002bd0:	68bb      	ldr	r3, [r7, #8]
 8002bd2:	f003 0308 	and.w	r3, r3, #8
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d015      	beq.n	8002c06 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	4a72      	ldr	r2, [pc, #456]	; (8002da8 <PCD_EP_OutXfrComplete_int+0x210>)
 8002bde:	4293      	cmp	r3, r2
 8002be0:	f240 80dd 	bls.w	8002d9e <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002be4:	68bb      	ldr	r3, [r7, #8]
 8002be6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	f000 80d7 	beq.w	8002d9e <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002bf0:	683b      	ldr	r3, [r7, #0]
 8002bf2:	015a      	lsls	r2, r3, #5
 8002bf4:	693b      	ldr	r3, [r7, #16]
 8002bf6:	4413      	add	r3, r2
 8002bf8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002bfc:	461a      	mov	r2, r3
 8002bfe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002c02:	6093      	str	r3, [r2, #8]
 8002c04:	e0cb      	b.n	8002d9e <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8002c06:	68bb      	ldr	r3, [r7, #8]
 8002c08:	f003 0320 	and.w	r3, r3, #32
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d009      	beq.n	8002c24 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002c10:	683b      	ldr	r3, [r7, #0]
 8002c12:	015a      	lsls	r2, r3, #5
 8002c14:	693b      	ldr	r3, [r7, #16]
 8002c16:	4413      	add	r3, r2
 8002c18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002c1c:	461a      	mov	r2, r3
 8002c1e:	2320      	movs	r3, #32
 8002c20:	6093      	str	r3, [r2, #8]
 8002c22:	e0bc      	b.n	8002d9e <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8002c24:	68bb      	ldr	r3, [r7, #8]
 8002c26:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	f040 80b7 	bne.w	8002d9e <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	4a5d      	ldr	r2, [pc, #372]	; (8002da8 <PCD_EP_OutXfrComplete_int+0x210>)
 8002c34:	4293      	cmp	r3, r2
 8002c36:	d90f      	bls.n	8002c58 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002c38:	68bb      	ldr	r3, [r7, #8]
 8002c3a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d00a      	beq.n	8002c58 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002c42:	683b      	ldr	r3, [r7, #0]
 8002c44:	015a      	lsls	r2, r3, #5
 8002c46:	693b      	ldr	r3, [r7, #16]
 8002c48:	4413      	add	r3, r2
 8002c4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002c4e:	461a      	mov	r2, r3
 8002c50:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002c54:	6093      	str	r3, [r2, #8]
 8002c56:	e0a2      	b.n	8002d9e <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8002c58:	6879      	ldr	r1, [r7, #4]
 8002c5a:	683a      	ldr	r2, [r7, #0]
 8002c5c:	4613      	mov	r3, r2
 8002c5e:	00db      	lsls	r3, r3, #3
 8002c60:	1a9b      	subs	r3, r3, r2
 8002c62:	009b      	lsls	r3, r3, #2
 8002c64:	440b      	add	r3, r1
 8002c66:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002c6a:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8002c6c:	683b      	ldr	r3, [r7, #0]
 8002c6e:	0159      	lsls	r1, r3, #5
 8002c70:	693b      	ldr	r3, [r7, #16]
 8002c72:	440b      	add	r3, r1
 8002c74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002c78:	691b      	ldr	r3, [r3, #16]
 8002c7a:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8002c7e:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8002c80:	6878      	ldr	r0, [r7, #4]
 8002c82:	683a      	ldr	r2, [r7, #0]
 8002c84:	4613      	mov	r3, r2
 8002c86:	00db      	lsls	r3, r3, #3
 8002c88:	1a9b      	subs	r3, r3, r2
 8002c8a:	009b      	lsls	r3, r3, #2
 8002c8c:	4403      	add	r3, r0
 8002c8e:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8002c92:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8002c94:	6879      	ldr	r1, [r7, #4]
 8002c96:	683a      	ldr	r2, [r7, #0]
 8002c98:	4613      	mov	r3, r2
 8002c9a:	00db      	lsls	r3, r3, #3
 8002c9c:	1a9b      	subs	r3, r3, r2
 8002c9e:	009b      	lsls	r3, r3, #2
 8002ca0:	440b      	add	r3, r1
 8002ca2:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002ca6:	6819      	ldr	r1, [r3, #0]
 8002ca8:	6878      	ldr	r0, [r7, #4]
 8002caa:	683a      	ldr	r2, [r7, #0]
 8002cac:	4613      	mov	r3, r2
 8002cae:	00db      	lsls	r3, r3, #3
 8002cb0:	1a9b      	subs	r3, r3, r2
 8002cb2:	009b      	lsls	r3, r3, #2
 8002cb4:	4403      	add	r3, r0
 8002cb6:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	4419      	add	r1, r3
 8002cbe:	6878      	ldr	r0, [r7, #4]
 8002cc0:	683a      	ldr	r2, [r7, #0]
 8002cc2:	4613      	mov	r3, r2
 8002cc4:	00db      	lsls	r3, r3, #3
 8002cc6:	1a9b      	subs	r3, r3, r2
 8002cc8:	009b      	lsls	r3, r3, #2
 8002cca:	4403      	add	r3, r0
 8002ccc:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002cd0:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002cd2:	683b      	ldr	r3, [r7, #0]
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d114      	bne.n	8002d02 <PCD_EP_OutXfrComplete_int+0x16a>
 8002cd8:	6879      	ldr	r1, [r7, #4]
 8002cda:	683a      	ldr	r2, [r7, #0]
 8002cdc:	4613      	mov	r3, r2
 8002cde:	00db      	lsls	r3, r3, #3
 8002ce0:	1a9b      	subs	r3, r3, r2
 8002ce2:	009b      	lsls	r3, r3, #2
 8002ce4:	440b      	add	r3, r1
 8002ce6:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d108      	bne.n	8002d02 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	6818      	ldr	r0, [r3, #0]
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002cfa:	461a      	mov	r2, r3
 8002cfc:	2101      	movs	r1, #1
 8002cfe:	f001 ffcf 	bl	8004ca0 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002d02:	683b      	ldr	r3, [r7, #0]
 8002d04:	b2db      	uxtb	r3, r3
 8002d06:	4619      	mov	r1, r3
 8002d08:	6878      	ldr	r0, [r7, #4]
 8002d0a:	f003 fed9 	bl	8006ac0 <HAL_PCD_DataOutStageCallback>
 8002d0e:	e046      	b.n	8002d9e <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	4a26      	ldr	r2, [pc, #152]	; (8002dac <PCD_EP_OutXfrComplete_int+0x214>)
 8002d14:	4293      	cmp	r3, r2
 8002d16:	d124      	bne.n	8002d62 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8002d18:	68bb      	ldr	r3, [r7, #8]
 8002d1a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d00a      	beq.n	8002d38 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002d22:	683b      	ldr	r3, [r7, #0]
 8002d24:	015a      	lsls	r2, r3, #5
 8002d26:	693b      	ldr	r3, [r7, #16]
 8002d28:	4413      	add	r3, r2
 8002d2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002d2e:	461a      	mov	r2, r3
 8002d30:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002d34:	6093      	str	r3, [r2, #8]
 8002d36:	e032      	b.n	8002d9e <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002d38:	68bb      	ldr	r3, [r7, #8]
 8002d3a:	f003 0320 	and.w	r3, r3, #32
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d008      	beq.n	8002d54 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002d42:	683b      	ldr	r3, [r7, #0]
 8002d44:	015a      	lsls	r2, r3, #5
 8002d46:	693b      	ldr	r3, [r7, #16]
 8002d48:	4413      	add	r3, r2
 8002d4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002d4e:	461a      	mov	r2, r3
 8002d50:	2320      	movs	r3, #32
 8002d52:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002d54:	683b      	ldr	r3, [r7, #0]
 8002d56:	b2db      	uxtb	r3, r3
 8002d58:	4619      	mov	r1, r3
 8002d5a:	6878      	ldr	r0, [r7, #4]
 8002d5c:	f003 feb0 	bl	8006ac0 <HAL_PCD_DataOutStageCallback>
 8002d60:	e01d      	b.n	8002d9e <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002d62:	683b      	ldr	r3, [r7, #0]
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d114      	bne.n	8002d92 <PCD_EP_OutXfrComplete_int+0x1fa>
 8002d68:	6879      	ldr	r1, [r7, #4]
 8002d6a:	683a      	ldr	r2, [r7, #0]
 8002d6c:	4613      	mov	r3, r2
 8002d6e:	00db      	lsls	r3, r3, #3
 8002d70:	1a9b      	subs	r3, r3, r2
 8002d72:	009b      	lsls	r3, r3, #2
 8002d74:	440b      	add	r3, r1
 8002d76:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d108      	bne.n	8002d92 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	6818      	ldr	r0, [r3, #0]
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002d8a:	461a      	mov	r2, r3
 8002d8c:	2100      	movs	r1, #0
 8002d8e:	f001 ff87 	bl	8004ca0 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002d92:	683b      	ldr	r3, [r7, #0]
 8002d94:	b2db      	uxtb	r3, r3
 8002d96:	4619      	mov	r1, r3
 8002d98:	6878      	ldr	r0, [r7, #4]
 8002d9a:	f003 fe91 	bl	8006ac0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8002d9e:	2300      	movs	r3, #0
}
 8002da0:	4618      	mov	r0, r3
 8002da2:	3718      	adds	r7, #24
 8002da4:	46bd      	mov	sp, r7
 8002da6:	bd80      	pop	{r7, pc}
 8002da8:	4f54300a 	.word	0x4f54300a
 8002dac:	4f54310a 	.word	0x4f54310a

08002db0 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002db0:	b580      	push	{r7, lr}
 8002db2:	b086      	sub	sp, #24
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	6078      	str	r0, [r7, #4]
 8002db8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002dc0:	697b      	ldr	r3, [r7, #20]
 8002dc2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002dc4:	697b      	ldr	r3, [r7, #20]
 8002dc6:	333c      	adds	r3, #60	; 0x3c
 8002dc8:	3304      	adds	r3, #4
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002dce:	683b      	ldr	r3, [r7, #0]
 8002dd0:	015a      	lsls	r2, r3, #5
 8002dd2:	693b      	ldr	r3, [r7, #16]
 8002dd4:	4413      	add	r3, r2
 8002dd6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002dda:	689b      	ldr	r3, [r3, #8]
 8002ddc:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	4a15      	ldr	r2, [pc, #84]	; (8002e38 <PCD_EP_OutSetupPacket_int+0x88>)
 8002de2:	4293      	cmp	r3, r2
 8002de4:	d90e      	bls.n	8002e04 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002de6:	68bb      	ldr	r3, [r7, #8]
 8002de8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d009      	beq.n	8002e04 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002df0:	683b      	ldr	r3, [r7, #0]
 8002df2:	015a      	lsls	r2, r3, #5
 8002df4:	693b      	ldr	r3, [r7, #16]
 8002df6:	4413      	add	r3, r2
 8002df8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002dfc:	461a      	mov	r2, r3
 8002dfe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002e02:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002e04:	6878      	ldr	r0, [r7, #4]
 8002e06:	f003 fe49 	bl	8006a9c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	4a0a      	ldr	r2, [pc, #40]	; (8002e38 <PCD_EP_OutSetupPacket_int+0x88>)
 8002e0e:	4293      	cmp	r3, r2
 8002e10:	d90c      	bls.n	8002e2c <PCD_EP_OutSetupPacket_int+0x7c>
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	691b      	ldr	r3, [r3, #16]
 8002e16:	2b01      	cmp	r3, #1
 8002e18:	d108      	bne.n	8002e2c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	6818      	ldr	r0, [r3, #0]
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002e24:	461a      	mov	r2, r3
 8002e26:	2101      	movs	r1, #1
 8002e28:	f001 ff3a 	bl	8004ca0 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8002e2c:	2300      	movs	r3, #0
}
 8002e2e:	4618      	mov	r0, r3
 8002e30:	3718      	adds	r7, #24
 8002e32:	46bd      	mov	sp, r7
 8002e34:	bd80      	pop	{r7, pc}
 8002e36:	bf00      	nop
 8002e38:	4f54300a 	.word	0x4f54300a

08002e3c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002e3c:	b480      	push	{r7}
 8002e3e:	b085      	sub	sp, #20
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	6078      	str	r0, [r7, #4]
 8002e44:	460b      	mov	r3, r1
 8002e46:	70fb      	strb	r3, [r7, #3]
 8002e48:	4613      	mov	r3, r2
 8002e4a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e52:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8002e54:	78fb      	ldrb	r3, [r7, #3]
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d107      	bne.n	8002e6a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8002e5a:	883b      	ldrh	r3, [r7, #0]
 8002e5c:	0419      	lsls	r1, r3, #16
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	68ba      	ldr	r2, [r7, #8]
 8002e64:	430a      	orrs	r2, r1
 8002e66:	629a      	str	r2, [r3, #40]	; 0x28
 8002e68:	e028      	b.n	8002ebc <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e70:	0c1b      	lsrs	r3, r3, #16
 8002e72:	68ba      	ldr	r2, [r7, #8]
 8002e74:	4413      	add	r3, r2
 8002e76:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002e78:	2300      	movs	r3, #0
 8002e7a:	73fb      	strb	r3, [r7, #15]
 8002e7c:	e00d      	b.n	8002e9a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681a      	ldr	r2, [r3, #0]
 8002e82:	7bfb      	ldrb	r3, [r7, #15]
 8002e84:	3340      	adds	r3, #64	; 0x40
 8002e86:	009b      	lsls	r3, r3, #2
 8002e88:	4413      	add	r3, r2
 8002e8a:	685b      	ldr	r3, [r3, #4]
 8002e8c:	0c1b      	lsrs	r3, r3, #16
 8002e8e:	68ba      	ldr	r2, [r7, #8]
 8002e90:	4413      	add	r3, r2
 8002e92:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002e94:	7bfb      	ldrb	r3, [r7, #15]
 8002e96:	3301      	adds	r3, #1
 8002e98:	73fb      	strb	r3, [r7, #15]
 8002e9a:	7bfa      	ldrb	r2, [r7, #15]
 8002e9c:	78fb      	ldrb	r3, [r7, #3]
 8002e9e:	3b01      	subs	r3, #1
 8002ea0:	429a      	cmp	r2, r3
 8002ea2:	d3ec      	bcc.n	8002e7e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002ea4:	883b      	ldrh	r3, [r7, #0]
 8002ea6:	0418      	lsls	r0, r3, #16
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	6819      	ldr	r1, [r3, #0]
 8002eac:	78fb      	ldrb	r3, [r7, #3]
 8002eae:	3b01      	subs	r3, #1
 8002eb0:	68ba      	ldr	r2, [r7, #8]
 8002eb2:	4302      	orrs	r2, r0
 8002eb4:	3340      	adds	r3, #64	; 0x40
 8002eb6:	009b      	lsls	r3, r3, #2
 8002eb8:	440b      	add	r3, r1
 8002eba:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8002ebc:	2300      	movs	r3, #0
}
 8002ebe:	4618      	mov	r0, r3
 8002ec0:	3714      	adds	r7, #20
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec8:	4770      	bx	lr

08002eca <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8002eca:	b480      	push	{r7}
 8002ecc:	b083      	sub	sp, #12
 8002ece:	af00      	add	r7, sp, #0
 8002ed0:	6078      	str	r0, [r7, #4]
 8002ed2:	460b      	mov	r3, r1
 8002ed4:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	887a      	ldrh	r2, [r7, #2]
 8002edc:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002ede:	2300      	movs	r3, #0
}
 8002ee0:	4618      	mov	r0, r3
 8002ee2:	370c      	adds	r7, #12
 8002ee4:	46bd      	mov	sp, r7
 8002ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eea:	4770      	bx	lr

08002eec <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8002eec:	b480      	push	{r7}
 8002eee:	b083      	sub	sp, #12
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	6078      	str	r0, [r7, #4]
 8002ef4:	460b      	mov	r3, r1
 8002ef6:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8002ef8:	bf00      	nop
 8002efa:	370c      	adds	r7, #12
 8002efc:	46bd      	mov	sp, r7
 8002efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f02:	4770      	bx	lr

08002f04 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002f04:	b580      	push	{r7, lr}
 8002f06:	b086      	sub	sp, #24
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d101      	bne.n	8002f16 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002f12:	2301      	movs	r3, #1
 8002f14:	e25b      	b.n	80033ce <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f003 0301 	and.w	r3, r3, #1
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d075      	beq.n	800300e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002f22:	4ba3      	ldr	r3, [pc, #652]	; (80031b0 <HAL_RCC_OscConfig+0x2ac>)
 8002f24:	689b      	ldr	r3, [r3, #8]
 8002f26:	f003 030c 	and.w	r3, r3, #12
 8002f2a:	2b04      	cmp	r3, #4
 8002f2c:	d00c      	beq.n	8002f48 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002f2e:	4ba0      	ldr	r3, [pc, #640]	; (80031b0 <HAL_RCC_OscConfig+0x2ac>)
 8002f30:	689b      	ldr	r3, [r3, #8]
 8002f32:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002f36:	2b08      	cmp	r3, #8
 8002f38:	d112      	bne.n	8002f60 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002f3a:	4b9d      	ldr	r3, [pc, #628]	; (80031b0 <HAL_RCC_OscConfig+0x2ac>)
 8002f3c:	685b      	ldr	r3, [r3, #4]
 8002f3e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f42:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002f46:	d10b      	bne.n	8002f60 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f48:	4b99      	ldr	r3, [pc, #612]	; (80031b0 <HAL_RCC_OscConfig+0x2ac>)
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d05b      	beq.n	800300c <HAL_RCC_OscConfig+0x108>
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	685b      	ldr	r3, [r3, #4]
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d157      	bne.n	800300c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002f5c:	2301      	movs	r3, #1
 8002f5e:	e236      	b.n	80033ce <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	685b      	ldr	r3, [r3, #4]
 8002f64:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f68:	d106      	bne.n	8002f78 <HAL_RCC_OscConfig+0x74>
 8002f6a:	4b91      	ldr	r3, [pc, #580]	; (80031b0 <HAL_RCC_OscConfig+0x2ac>)
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	4a90      	ldr	r2, [pc, #576]	; (80031b0 <HAL_RCC_OscConfig+0x2ac>)
 8002f70:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f74:	6013      	str	r3, [r2, #0]
 8002f76:	e01d      	b.n	8002fb4 <HAL_RCC_OscConfig+0xb0>
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	685b      	ldr	r3, [r3, #4]
 8002f7c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002f80:	d10c      	bne.n	8002f9c <HAL_RCC_OscConfig+0x98>
 8002f82:	4b8b      	ldr	r3, [pc, #556]	; (80031b0 <HAL_RCC_OscConfig+0x2ac>)
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	4a8a      	ldr	r2, [pc, #552]	; (80031b0 <HAL_RCC_OscConfig+0x2ac>)
 8002f88:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002f8c:	6013      	str	r3, [r2, #0]
 8002f8e:	4b88      	ldr	r3, [pc, #544]	; (80031b0 <HAL_RCC_OscConfig+0x2ac>)
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	4a87      	ldr	r2, [pc, #540]	; (80031b0 <HAL_RCC_OscConfig+0x2ac>)
 8002f94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f98:	6013      	str	r3, [r2, #0]
 8002f9a:	e00b      	b.n	8002fb4 <HAL_RCC_OscConfig+0xb0>
 8002f9c:	4b84      	ldr	r3, [pc, #528]	; (80031b0 <HAL_RCC_OscConfig+0x2ac>)
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	4a83      	ldr	r2, [pc, #524]	; (80031b0 <HAL_RCC_OscConfig+0x2ac>)
 8002fa2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002fa6:	6013      	str	r3, [r2, #0]
 8002fa8:	4b81      	ldr	r3, [pc, #516]	; (80031b0 <HAL_RCC_OscConfig+0x2ac>)
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	4a80      	ldr	r2, [pc, #512]	; (80031b0 <HAL_RCC_OscConfig+0x2ac>)
 8002fae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002fb2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	685b      	ldr	r3, [r3, #4]
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d013      	beq.n	8002fe4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fbc:	f7fe fb44 	bl	8001648 <HAL_GetTick>
 8002fc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fc2:	e008      	b.n	8002fd6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002fc4:	f7fe fb40 	bl	8001648 <HAL_GetTick>
 8002fc8:	4602      	mov	r2, r0
 8002fca:	693b      	ldr	r3, [r7, #16]
 8002fcc:	1ad3      	subs	r3, r2, r3
 8002fce:	2b64      	cmp	r3, #100	; 0x64
 8002fd0:	d901      	bls.n	8002fd6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002fd2:	2303      	movs	r3, #3
 8002fd4:	e1fb      	b.n	80033ce <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fd6:	4b76      	ldr	r3, [pc, #472]	; (80031b0 <HAL_RCC_OscConfig+0x2ac>)
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d0f0      	beq.n	8002fc4 <HAL_RCC_OscConfig+0xc0>
 8002fe2:	e014      	b.n	800300e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fe4:	f7fe fb30 	bl	8001648 <HAL_GetTick>
 8002fe8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002fea:	e008      	b.n	8002ffe <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002fec:	f7fe fb2c 	bl	8001648 <HAL_GetTick>
 8002ff0:	4602      	mov	r2, r0
 8002ff2:	693b      	ldr	r3, [r7, #16]
 8002ff4:	1ad3      	subs	r3, r2, r3
 8002ff6:	2b64      	cmp	r3, #100	; 0x64
 8002ff8:	d901      	bls.n	8002ffe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002ffa:	2303      	movs	r3, #3
 8002ffc:	e1e7      	b.n	80033ce <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ffe:	4b6c      	ldr	r3, [pc, #432]	; (80031b0 <HAL_RCC_OscConfig+0x2ac>)
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003006:	2b00      	cmp	r3, #0
 8003008:	d1f0      	bne.n	8002fec <HAL_RCC_OscConfig+0xe8>
 800300a:	e000      	b.n	800300e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800300c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f003 0302 	and.w	r3, r3, #2
 8003016:	2b00      	cmp	r3, #0
 8003018:	d063      	beq.n	80030e2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800301a:	4b65      	ldr	r3, [pc, #404]	; (80031b0 <HAL_RCC_OscConfig+0x2ac>)
 800301c:	689b      	ldr	r3, [r3, #8]
 800301e:	f003 030c 	and.w	r3, r3, #12
 8003022:	2b00      	cmp	r3, #0
 8003024:	d00b      	beq.n	800303e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003026:	4b62      	ldr	r3, [pc, #392]	; (80031b0 <HAL_RCC_OscConfig+0x2ac>)
 8003028:	689b      	ldr	r3, [r3, #8]
 800302a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800302e:	2b08      	cmp	r3, #8
 8003030:	d11c      	bne.n	800306c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003032:	4b5f      	ldr	r3, [pc, #380]	; (80031b0 <HAL_RCC_OscConfig+0x2ac>)
 8003034:	685b      	ldr	r3, [r3, #4]
 8003036:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800303a:	2b00      	cmp	r3, #0
 800303c:	d116      	bne.n	800306c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800303e:	4b5c      	ldr	r3, [pc, #368]	; (80031b0 <HAL_RCC_OscConfig+0x2ac>)
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f003 0302 	and.w	r3, r3, #2
 8003046:	2b00      	cmp	r3, #0
 8003048:	d005      	beq.n	8003056 <HAL_RCC_OscConfig+0x152>
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	68db      	ldr	r3, [r3, #12]
 800304e:	2b01      	cmp	r3, #1
 8003050:	d001      	beq.n	8003056 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003052:	2301      	movs	r3, #1
 8003054:	e1bb      	b.n	80033ce <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003056:	4b56      	ldr	r3, [pc, #344]	; (80031b0 <HAL_RCC_OscConfig+0x2ac>)
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	691b      	ldr	r3, [r3, #16]
 8003062:	00db      	lsls	r3, r3, #3
 8003064:	4952      	ldr	r1, [pc, #328]	; (80031b0 <HAL_RCC_OscConfig+0x2ac>)
 8003066:	4313      	orrs	r3, r2
 8003068:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800306a:	e03a      	b.n	80030e2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	68db      	ldr	r3, [r3, #12]
 8003070:	2b00      	cmp	r3, #0
 8003072:	d020      	beq.n	80030b6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003074:	4b4f      	ldr	r3, [pc, #316]	; (80031b4 <HAL_RCC_OscConfig+0x2b0>)
 8003076:	2201      	movs	r2, #1
 8003078:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800307a:	f7fe fae5 	bl	8001648 <HAL_GetTick>
 800307e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003080:	e008      	b.n	8003094 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003082:	f7fe fae1 	bl	8001648 <HAL_GetTick>
 8003086:	4602      	mov	r2, r0
 8003088:	693b      	ldr	r3, [r7, #16]
 800308a:	1ad3      	subs	r3, r2, r3
 800308c:	2b02      	cmp	r3, #2
 800308e:	d901      	bls.n	8003094 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003090:	2303      	movs	r3, #3
 8003092:	e19c      	b.n	80033ce <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003094:	4b46      	ldr	r3, [pc, #280]	; (80031b0 <HAL_RCC_OscConfig+0x2ac>)
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f003 0302 	and.w	r3, r3, #2
 800309c:	2b00      	cmp	r3, #0
 800309e:	d0f0      	beq.n	8003082 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030a0:	4b43      	ldr	r3, [pc, #268]	; (80031b0 <HAL_RCC_OscConfig+0x2ac>)
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	691b      	ldr	r3, [r3, #16]
 80030ac:	00db      	lsls	r3, r3, #3
 80030ae:	4940      	ldr	r1, [pc, #256]	; (80031b0 <HAL_RCC_OscConfig+0x2ac>)
 80030b0:	4313      	orrs	r3, r2
 80030b2:	600b      	str	r3, [r1, #0]
 80030b4:	e015      	b.n	80030e2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80030b6:	4b3f      	ldr	r3, [pc, #252]	; (80031b4 <HAL_RCC_OscConfig+0x2b0>)
 80030b8:	2200      	movs	r2, #0
 80030ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030bc:	f7fe fac4 	bl	8001648 <HAL_GetTick>
 80030c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80030c2:	e008      	b.n	80030d6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80030c4:	f7fe fac0 	bl	8001648 <HAL_GetTick>
 80030c8:	4602      	mov	r2, r0
 80030ca:	693b      	ldr	r3, [r7, #16]
 80030cc:	1ad3      	subs	r3, r2, r3
 80030ce:	2b02      	cmp	r3, #2
 80030d0:	d901      	bls.n	80030d6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80030d2:	2303      	movs	r3, #3
 80030d4:	e17b      	b.n	80033ce <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80030d6:	4b36      	ldr	r3, [pc, #216]	; (80031b0 <HAL_RCC_OscConfig+0x2ac>)
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f003 0302 	and.w	r3, r3, #2
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d1f0      	bne.n	80030c4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f003 0308 	and.w	r3, r3, #8
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d030      	beq.n	8003150 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	695b      	ldr	r3, [r3, #20]
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d016      	beq.n	8003124 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80030f6:	4b30      	ldr	r3, [pc, #192]	; (80031b8 <HAL_RCC_OscConfig+0x2b4>)
 80030f8:	2201      	movs	r2, #1
 80030fa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030fc:	f7fe faa4 	bl	8001648 <HAL_GetTick>
 8003100:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003102:	e008      	b.n	8003116 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003104:	f7fe faa0 	bl	8001648 <HAL_GetTick>
 8003108:	4602      	mov	r2, r0
 800310a:	693b      	ldr	r3, [r7, #16]
 800310c:	1ad3      	subs	r3, r2, r3
 800310e:	2b02      	cmp	r3, #2
 8003110:	d901      	bls.n	8003116 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003112:	2303      	movs	r3, #3
 8003114:	e15b      	b.n	80033ce <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003116:	4b26      	ldr	r3, [pc, #152]	; (80031b0 <HAL_RCC_OscConfig+0x2ac>)
 8003118:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800311a:	f003 0302 	and.w	r3, r3, #2
 800311e:	2b00      	cmp	r3, #0
 8003120:	d0f0      	beq.n	8003104 <HAL_RCC_OscConfig+0x200>
 8003122:	e015      	b.n	8003150 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003124:	4b24      	ldr	r3, [pc, #144]	; (80031b8 <HAL_RCC_OscConfig+0x2b4>)
 8003126:	2200      	movs	r2, #0
 8003128:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800312a:	f7fe fa8d 	bl	8001648 <HAL_GetTick>
 800312e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003130:	e008      	b.n	8003144 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003132:	f7fe fa89 	bl	8001648 <HAL_GetTick>
 8003136:	4602      	mov	r2, r0
 8003138:	693b      	ldr	r3, [r7, #16]
 800313a:	1ad3      	subs	r3, r2, r3
 800313c:	2b02      	cmp	r3, #2
 800313e:	d901      	bls.n	8003144 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003140:	2303      	movs	r3, #3
 8003142:	e144      	b.n	80033ce <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003144:	4b1a      	ldr	r3, [pc, #104]	; (80031b0 <HAL_RCC_OscConfig+0x2ac>)
 8003146:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003148:	f003 0302 	and.w	r3, r3, #2
 800314c:	2b00      	cmp	r3, #0
 800314e:	d1f0      	bne.n	8003132 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f003 0304 	and.w	r3, r3, #4
 8003158:	2b00      	cmp	r3, #0
 800315a:	f000 80a0 	beq.w	800329e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800315e:	2300      	movs	r3, #0
 8003160:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003162:	4b13      	ldr	r3, [pc, #76]	; (80031b0 <HAL_RCC_OscConfig+0x2ac>)
 8003164:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003166:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800316a:	2b00      	cmp	r3, #0
 800316c:	d10f      	bne.n	800318e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800316e:	2300      	movs	r3, #0
 8003170:	60bb      	str	r3, [r7, #8]
 8003172:	4b0f      	ldr	r3, [pc, #60]	; (80031b0 <HAL_RCC_OscConfig+0x2ac>)
 8003174:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003176:	4a0e      	ldr	r2, [pc, #56]	; (80031b0 <HAL_RCC_OscConfig+0x2ac>)
 8003178:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800317c:	6413      	str	r3, [r2, #64]	; 0x40
 800317e:	4b0c      	ldr	r3, [pc, #48]	; (80031b0 <HAL_RCC_OscConfig+0x2ac>)
 8003180:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003182:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003186:	60bb      	str	r3, [r7, #8]
 8003188:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800318a:	2301      	movs	r3, #1
 800318c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800318e:	4b0b      	ldr	r3, [pc, #44]	; (80031bc <HAL_RCC_OscConfig+0x2b8>)
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003196:	2b00      	cmp	r3, #0
 8003198:	d121      	bne.n	80031de <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800319a:	4b08      	ldr	r3, [pc, #32]	; (80031bc <HAL_RCC_OscConfig+0x2b8>)
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	4a07      	ldr	r2, [pc, #28]	; (80031bc <HAL_RCC_OscConfig+0x2b8>)
 80031a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031a4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80031a6:	f7fe fa4f 	bl	8001648 <HAL_GetTick>
 80031aa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031ac:	e011      	b.n	80031d2 <HAL_RCC_OscConfig+0x2ce>
 80031ae:	bf00      	nop
 80031b0:	40023800 	.word	0x40023800
 80031b4:	42470000 	.word	0x42470000
 80031b8:	42470e80 	.word	0x42470e80
 80031bc:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80031c0:	f7fe fa42 	bl	8001648 <HAL_GetTick>
 80031c4:	4602      	mov	r2, r0
 80031c6:	693b      	ldr	r3, [r7, #16]
 80031c8:	1ad3      	subs	r3, r2, r3
 80031ca:	2b02      	cmp	r3, #2
 80031cc:	d901      	bls.n	80031d2 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80031ce:	2303      	movs	r3, #3
 80031d0:	e0fd      	b.n	80033ce <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031d2:	4b81      	ldr	r3, [pc, #516]	; (80033d8 <HAL_RCC_OscConfig+0x4d4>)
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d0f0      	beq.n	80031c0 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	689b      	ldr	r3, [r3, #8]
 80031e2:	2b01      	cmp	r3, #1
 80031e4:	d106      	bne.n	80031f4 <HAL_RCC_OscConfig+0x2f0>
 80031e6:	4b7d      	ldr	r3, [pc, #500]	; (80033dc <HAL_RCC_OscConfig+0x4d8>)
 80031e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031ea:	4a7c      	ldr	r2, [pc, #496]	; (80033dc <HAL_RCC_OscConfig+0x4d8>)
 80031ec:	f043 0301 	orr.w	r3, r3, #1
 80031f0:	6713      	str	r3, [r2, #112]	; 0x70
 80031f2:	e01c      	b.n	800322e <HAL_RCC_OscConfig+0x32a>
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	689b      	ldr	r3, [r3, #8]
 80031f8:	2b05      	cmp	r3, #5
 80031fa:	d10c      	bne.n	8003216 <HAL_RCC_OscConfig+0x312>
 80031fc:	4b77      	ldr	r3, [pc, #476]	; (80033dc <HAL_RCC_OscConfig+0x4d8>)
 80031fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003200:	4a76      	ldr	r2, [pc, #472]	; (80033dc <HAL_RCC_OscConfig+0x4d8>)
 8003202:	f043 0304 	orr.w	r3, r3, #4
 8003206:	6713      	str	r3, [r2, #112]	; 0x70
 8003208:	4b74      	ldr	r3, [pc, #464]	; (80033dc <HAL_RCC_OscConfig+0x4d8>)
 800320a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800320c:	4a73      	ldr	r2, [pc, #460]	; (80033dc <HAL_RCC_OscConfig+0x4d8>)
 800320e:	f043 0301 	orr.w	r3, r3, #1
 8003212:	6713      	str	r3, [r2, #112]	; 0x70
 8003214:	e00b      	b.n	800322e <HAL_RCC_OscConfig+0x32a>
 8003216:	4b71      	ldr	r3, [pc, #452]	; (80033dc <HAL_RCC_OscConfig+0x4d8>)
 8003218:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800321a:	4a70      	ldr	r2, [pc, #448]	; (80033dc <HAL_RCC_OscConfig+0x4d8>)
 800321c:	f023 0301 	bic.w	r3, r3, #1
 8003220:	6713      	str	r3, [r2, #112]	; 0x70
 8003222:	4b6e      	ldr	r3, [pc, #440]	; (80033dc <HAL_RCC_OscConfig+0x4d8>)
 8003224:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003226:	4a6d      	ldr	r2, [pc, #436]	; (80033dc <HAL_RCC_OscConfig+0x4d8>)
 8003228:	f023 0304 	bic.w	r3, r3, #4
 800322c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	689b      	ldr	r3, [r3, #8]
 8003232:	2b00      	cmp	r3, #0
 8003234:	d015      	beq.n	8003262 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003236:	f7fe fa07 	bl	8001648 <HAL_GetTick>
 800323a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800323c:	e00a      	b.n	8003254 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800323e:	f7fe fa03 	bl	8001648 <HAL_GetTick>
 8003242:	4602      	mov	r2, r0
 8003244:	693b      	ldr	r3, [r7, #16]
 8003246:	1ad3      	subs	r3, r2, r3
 8003248:	f241 3288 	movw	r2, #5000	; 0x1388
 800324c:	4293      	cmp	r3, r2
 800324e:	d901      	bls.n	8003254 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003250:	2303      	movs	r3, #3
 8003252:	e0bc      	b.n	80033ce <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003254:	4b61      	ldr	r3, [pc, #388]	; (80033dc <HAL_RCC_OscConfig+0x4d8>)
 8003256:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003258:	f003 0302 	and.w	r3, r3, #2
 800325c:	2b00      	cmp	r3, #0
 800325e:	d0ee      	beq.n	800323e <HAL_RCC_OscConfig+0x33a>
 8003260:	e014      	b.n	800328c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003262:	f7fe f9f1 	bl	8001648 <HAL_GetTick>
 8003266:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003268:	e00a      	b.n	8003280 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800326a:	f7fe f9ed 	bl	8001648 <HAL_GetTick>
 800326e:	4602      	mov	r2, r0
 8003270:	693b      	ldr	r3, [r7, #16]
 8003272:	1ad3      	subs	r3, r2, r3
 8003274:	f241 3288 	movw	r2, #5000	; 0x1388
 8003278:	4293      	cmp	r3, r2
 800327a:	d901      	bls.n	8003280 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800327c:	2303      	movs	r3, #3
 800327e:	e0a6      	b.n	80033ce <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003280:	4b56      	ldr	r3, [pc, #344]	; (80033dc <HAL_RCC_OscConfig+0x4d8>)
 8003282:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003284:	f003 0302 	and.w	r3, r3, #2
 8003288:	2b00      	cmp	r3, #0
 800328a:	d1ee      	bne.n	800326a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800328c:	7dfb      	ldrb	r3, [r7, #23]
 800328e:	2b01      	cmp	r3, #1
 8003290:	d105      	bne.n	800329e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003292:	4b52      	ldr	r3, [pc, #328]	; (80033dc <HAL_RCC_OscConfig+0x4d8>)
 8003294:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003296:	4a51      	ldr	r2, [pc, #324]	; (80033dc <HAL_RCC_OscConfig+0x4d8>)
 8003298:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800329c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	699b      	ldr	r3, [r3, #24]
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	f000 8092 	beq.w	80033cc <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80032a8:	4b4c      	ldr	r3, [pc, #304]	; (80033dc <HAL_RCC_OscConfig+0x4d8>)
 80032aa:	689b      	ldr	r3, [r3, #8]
 80032ac:	f003 030c 	and.w	r3, r3, #12
 80032b0:	2b08      	cmp	r3, #8
 80032b2:	d05c      	beq.n	800336e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	699b      	ldr	r3, [r3, #24]
 80032b8:	2b02      	cmp	r3, #2
 80032ba:	d141      	bne.n	8003340 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032bc:	4b48      	ldr	r3, [pc, #288]	; (80033e0 <HAL_RCC_OscConfig+0x4dc>)
 80032be:	2200      	movs	r2, #0
 80032c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032c2:	f7fe f9c1 	bl	8001648 <HAL_GetTick>
 80032c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032c8:	e008      	b.n	80032dc <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80032ca:	f7fe f9bd 	bl	8001648 <HAL_GetTick>
 80032ce:	4602      	mov	r2, r0
 80032d0:	693b      	ldr	r3, [r7, #16]
 80032d2:	1ad3      	subs	r3, r2, r3
 80032d4:	2b02      	cmp	r3, #2
 80032d6:	d901      	bls.n	80032dc <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80032d8:	2303      	movs	r3, #3
 80032da:	e078      	b.n	80033ce <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032dc:	4b3f      	ldr	r3, [pc, #252]	; (80033dc <HAL_RCC_OscConfig+0x4d8>)
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d1f0      	bne.n	80032ca <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	69da      	ldr	r2, [r3, #28]
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	6a1b      	ldr	r3, [r3, #32]
 80032f0:	431a      	orrs	r2, r3
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032f6:	019b      	lsls	r3, r3, #6
 80032f8:	431a      	orrs	r2, r3
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032fe:	085b      	lsrs	r3, r3, #1
 8003300:	3b01      	subs	r3, #1
 8003302:	041b      	lsls	r3, r3, #16
 8003304:	431a      	orrs	r2, r3
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800330a:	061b      	lsls	r3, r3, #24
 800330c:	4933      	ldr	r1, [pc, #204]	; (80033dc <HAL_RCC_OscConfig+0x4d8>)
 800330e:	4313      	orrs	r3, r2
 8003310:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003312:	4b33      	ldr	r3, [pc, #204]	; (80033e0 <HAL_RCC_OscConfig+0x4dc>)
 8003314:	2201      	movs	r2, #1
 8003316:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003318:	f7fe f996 	bl	8001648 <HAL_GetTick>
 800331c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800331e:	e008      	b.n	8003332 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003320:	f7fe f992 	bl	8001648 <HAL_GetTick>
 8003324:	4602      	mov	r2, r0
 8003326:	693b      	ldr	r3, [r7, #16]
 8003328:	1ad3      	subs	r3, r2, r3
 800332a:	2b02      	cmp	r3, #2
 800332c:	d901      	bls.n	8003332 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800332e:	2303      	movs	r3, #3
 8003330:	e04d      	b.n	80033ce <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003332:	4b2a      	ldr	r3, [pc, #168]	; (80033dc <HAL_RCC_OscConfig+0x4d8>)
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800333a:	2b00      	cmp	r3, #0
 800333c:	d0f0      	beq.n	8003320 <HAL_RCC_OscConfig+0x41c>
 800333e:	e045      	b.n	80033cc <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003340:	4b27      	ldr	r3, [pc, #156]	; (80033e0 <HAL_RCC_OscConfig+0x4dc>)
 8003342:	2200      	movs	r2, #0
 8003344:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003346:	f7fe f97f 	bl	8001648 <HAL_GetTick>
 800334a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800334c:	e008      	b.n	8003360 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800334e:	f7fe f97b 	bl	8001648 <HAL_GetTick>
 8003352:	4602      	mov	r2, r0
 8003354:	693b      	ldr	r3, [r7, #16]
 8003356:	1ad3      	subs	r3, r2, r3
 8003358:	2b02      	cmp	r3, #2
 800335a:	d901      	bls.n	8003360 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800335c:	2303      	movs	r3, #3
 800335e:	e036      	b.n	80033ce <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003360:	4b1e      	ldr	r3, [pc, #120]	; (80033dc <HAL_RCC_OscConfig+0x4d8>)
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003368:	2b00      	cmp	r3, #0
 800336a:	d1f0      	bne.n	800334e <HAL_RCC_OscConfig+0x44a>
 800336c:	e02e      	b.n	80033cc <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	699b      	ldr	r3, [r3, #24]
 8003372:	2b01      	cmp	r3, #1
 8003374:	d101      	bne.n	800337a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8003376:	2301      	movs	r3, #1
 8003378:	e029      	b.n	80033ce <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800337a:	4b18      	ldr	r3, [pc, #96]	; (80033dc <HAL_RCC_OscConfig+0x4d8>)
 800337c:	685b      	ldr	r3, [r3, #4]
 800337e:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	69db      	ldr	r3, [r3, #28]
 800338a:	429a      	cmp	r2, r3
 800338c:	d11c      	bne.n	80033c8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003398:	429a      	cmp	r2, r3
 800339a:	d115      	bne.n	80033c8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800339c:	68fa      	ldr	r2, [r7, #12]
 800339e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80033a2:	4013      	ands	r3, r2
 80033a4:	687a      	ldr	r2, [r7, #4]
 80033a6:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80033a8:	4293      	cmp	r3, r2
 80033aa:	d10d      	bne.n	80033c8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80033b6:	429a      	cmp	r2, r3
 80033b8:	d106      	bne.n	80033c8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80033c4:	429a      	cmp	r2, r3
 80033c6:	d001      	beq.n	80033cc <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80033c8:	2301      	movs	r3, #1
 80033ca:	e000      	b.n	80033ce <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80033cc:	2300      	movs	r3, #0
}
 80033ce:	4618      	mov	r0, r3
 80033d0:	3718      	adds	r7, #24
 80033d2:	46bd      	mov	sp, r7
 80033d4:	bd80      	pop	{r7, pc}
 80033d6:	bf00      	nop
 80033d8:	40007000 	.word	0x40007000
 80033dc:	40023800 	.word	0x40023800
 80033e0:	42470060 	.word	0x42470060

080033e4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80033e4:	b580      	push	{r7, lr}
 80033e6:	b084      	sub	sp, #16
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	6078      	str	r0, [r7, #4]
 80033ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d101      	bne.n	80033f8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80033f4:	2301      	movs	r3, #1
 80033f6:	e0cc      	b.n	8003592 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80033f8:	4b68      	ldr	r3, [pc, #416]	; (800359c <HAL_RCC_ClockConfig+0x1b8>)
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f003 030f 	and.w	r3, r3, #15
 8003400:	683a      	ldr	r2, [r7, #0]
 8003402:	429a      	cmp	r2, r3
 8003404:	d90c      	bls.n	8003420 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003406:	4b65      	ldr	r3, [pc, #404]	; (800359c <HAL_RCC_ClockConfig+0x1b8>)
 8003408:	683a      	ldr	r2, [r7, #0]
 800340a:	b2d2      	uxtb	r2, r2
 800340c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800340e:	4b63      	ldr	r3, [pc, #396]	; (800359c <HAL_RCC_ClockConfig+0x1b8>)
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f003 030f 	and.w	r3, r3, #15
 8003416:	683a      	ldr	r2, [r7, #0]
 8003418:	429a      	cmp	r2, r3
 800341a:	d001      	beq.n	8003420 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800341c:	2301      	movs	r3, #1
 800341e:	e0b8      	b.n	8003592 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f003 0302 	and.w	r3, r3, #2
 8003428:	2b00      	cmp	r3, #0
 800342a:	d020      	beq.n	800346e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f003 0304 	and.w	r3, r3, #4
 8003434:	2b00      	cmp	r3, #0
 8003436:	d005      	beq.n	8003444 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003438:	4b59      	ldr	r3, [pc, #356]	; (80035a0 <HAL_RCC_ClockConfig+0x1bc>)
 800343a:	689b      	ldr	r3, [r3, #8]
 800343c:	4a58      	ldr	r2, [pc, #352]	; (80035a0 <HAL_RCC_ClockConfig+0x1bc>)
 800343e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003442:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f003 0308 	and.w	r3, r3, #8
 800344c:	2b00      	cmp	r3, #0
 800344e:	d005      	beq.n	800345c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003450:	4b53      	ldr	r3, [pc, #332]	; (80035a0 <HAL_RCC_ClockConfig+0x1bc>)
 8003452:	689b      	ldr	r3, [r3, #8]
 8003454:	4a52      	ldr	r2, [pc, #328]	; (80035a0 <HAL_RCC_ClockConfig+0x1bc>)
 8003456:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800345a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800345c:	4b50      	ldr	r3, [pc, #320]	; (80035a0 <HAL_RCC_ClockConfig+0x1bc>)
 800345e:	689b      	ldr	r3, [r3, #8]
 8003460:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	689b      	ldr	r3, [r3, #8]
 8003468:	494d      	ldr	r1, [pc, #308]	; (80035a0 <HAL_RCC_ClockConfig+0x1bc>)
 800346a:	4313      	orrs	r3, r2
 800346c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f003 0301 	and.w	r3, r3, #1
 8003476:	2b00      	cmp	r3, #0
 8003478:	d044      	beq.n	8003504 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	685b      	ldr	r3, [r3, #4]
 800347e:	2b01      	cmp	r3, #1
 8003480:	d107      	bne.n	8003492 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003482:	4b47      	ldr	r3, [pc, #284]	; (80035a0 <HAL_RCC_ClockConfig+0x1bc>)
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800348a:	2b00      	cmp	r3, #0
 800348c:	d119      	bne.n	80034c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800348e:	2301      	movs	r3, #1
 8003490:	e07f      	b.n	8003592 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	685b      	ldr	r3, [r3, #4]
 8003496:	2b02      	cmp	r3, #2
 8003498:	d003      	beq.n	80034a2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800349e:	2b03      	cmp	r3, #3
 80034a0:	d107      	bne.n	80034b2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80034a2:	4b3f      	ldr	r3, [pc, #252]	; (80035a0 <HAL_RCC_ClockConfig+0x1bc>)
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d109      	bne.n	80034c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80034ae:	2301      	movs	r3, #1
 80034b0:	e06f      	b.n	8003592 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034b2:	4b3b      	ldr	r3, [pc, #236]	; (80035a0 <HAL_RCC_ClockConfig+0x1bc>)
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f003 0302 	and.w	r3, r3, #2
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d101      	bne.n	80034c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80034be:	2301      	movs	r3, #1
 80034c0:	e067      	b.n	8003592 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80034c2:	4b37      	ldr	r3, [pc, #220]	; (80035a0 <HAL_RCC_ClockConfig+0x1bc>)
 80034c4:	689b      	ldr	r3, [r3, #8]
 80034c6:	f023 0203 	bic.w	r2, r3, #3
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	685b      	ldr	r3, [r3, #4]
 80034ce:	4934      	ldr	r1, [pc, #208]	; (80035a0 <HAL_RCC_ClockConfig+0x1bc>)
 80034d0:	4313      	orrs	r3, r2
 80034d2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80034d4:	f7fe f8b8 	bl	8001648 <HAL_GetTick>
 80034d8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034da:	e00a      	b.n	80034f2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80034dc:	f7fe f8b4 	bl	8001648 <HAL_GetTick>
 80034e0:	4602      	mov	r2, r0
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	1ad3      	subs	r3, r2, r3
 80034e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80034ea:	4293      	cmp	r3, r2
 80034ec:	d901      	bls.n	80034f2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80034ee:	2303      	movs	r3, #3
 80034f0:	e04f      	b.n	8003592 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034f2:	4b2b      	ldr	r3, [pc, #172]	; (80035a0 <HAL_RCC_ClockConfig+0x1bc>)
 80034f4:	689b      	ldr	r3, [r3, #8]
 80034f6:	f003 020c 	and.w	r2, r3, #12
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	685b      	ldr	r3, [r3, #4]
 80034fe:	009b      	lsls	r3, r3, #2
 8003500:	429a      	cmp	r2, r3
 8003502:	d1eb      	bne.n	80034dc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003504:	4b25      	ldr	r3, [pc, #148]	; (800359c <HAL_RCC_ClockConfig+0x1b8>)
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f003 030f 	and.w	r3, r3, #15
 800350c:	683a      	ldr	r2, [r7, #0]
 800350e:	429a      	cmp	r2, r3
 8003510:	d20c      	bcs.n	800352c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003512:	4b22      	ldr	r3, [pc, #136]	; (800359c <HAL_RCC_ClockConfig+0x1b8>)
 8003514:	683a      	ldr	r2, [r7, #0]
 8003516:	b2d2      	uxtb	r2, r2
 8003518:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800351a:	4b20      	ldr	r3, [pc, #128]	; (800359c <HAL_RCC_ClockConfig+0x1b8>)
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f003 030f 	and.w	r3, r3, #15
 8003522:	683a      	ldr	r2, [r7, #0]
 8003524:	429a      	cmp	r2, r3
 8003526:	d001      	beq.n	800352c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003528:	2301      	movs	r3, #1
 800352a:	e032      	b.n	8003592 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f003 0304 	and.w	r3, r3, #4
 8003534:	2b00      	cmp	r3, #0
 8003536:	d008      	beq.n	800354a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003538:	4b19      	ldr	r3, [pc, #100]	; (80035a0 <HAL_RCC_ClockConfig+0x1bc>)
 800353a:	689b      	ldr	r3, [r3, #8]
 800353c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	68db      	ldr	r3, [r3, #12]
 8003544:	4916      	ldr	r1, [pc, #88]	; (80035a0 <HAL_RCC_ClockConfig+0x1bc>)
 8003546:	4313      	orrs	r3, r2
 8003548:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f003 0308 	and.w	r3, r3, #8
 8003552:	2b00      	cmp	r3, #0
 8003554:	d009      	beq.n	800356a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003556:	4b12      	ldr	r3, [pc, #72]	; (80035a0 <HAL_RCC_ClockConfig+0x1bc>)
 8003558:	689b      	ldr	r3, [r3, #8]
 800355a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	691b      	ldr	r3, [r3, #16]
 8003562:	00db      	lsls	r3, r3, #3
 8003564:	490e      	ldr	r1, [pc, #56]	; (80035a0 <HAL_RCC_ClockConfig+0x1bc>)
 8003566:	4313      	orrs	r3, r2
 8003568:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800356a:	f000 f821 	bl	80035b0 <HAL_RCC_GetSysClockFreq>
 800356e:	4601      	mov	r1, r0
 8003570:	4b0b      	ldr	r3, [pc, #44]	; (80035a0 <HAL_RCC_ClockConfig+0x1bc>)
 8003572:	689b      	ldr	r3, [r3, #8]
 8003574:	091b      	lsrs	r3, r3, #4
 8003576:	f003 030f 	and.w	r3, r3, #15
 800357a:	4a0a      	ldr	r2, [pc, #40]	; (80035a4 <HAL_RCC_ClockConfig+0x1c0>)
 800357c:	5cd3      	ldrb	r3, [r2, r3]
 800357e:	fa21 f303 	lsr.w	r3, r1, r3
 8003582:	4a09      	ldr	r2, [pc, #36]	; (80035a8 <HAL_RCC_ClockConfig+0x1c4>)
 8003584:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003586:	4b09      	ldr	r3, [pc, #36]	; (80035ac <HAL_RCC_ClockConfig+0x1c8>)
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	4618      	mov	r0, r3
 800358c:	f7fe f818 	bl	80015c0 <HAL_InitTick>

  return HAL_OK;
 8003590:	2300      	movs	r3, #0
}
 8003592:	4618      	mov	r0, r3
 8003594:	3710      	adds	r7, #16
 8003596:	46bd      	mov	sp, r7
 8003598:	bd80      	pop	{r7, pc}
 800359a:	bf00      	nop
 800359c:	40023c00 	.word	0x40023c00
 80035a0:	40023800 	.word	0x40023800
 80035a4:	08007244 	.word	0x08007244
 80035a8:	20000000 	.word	0x20000000
 80035ac:	20000004 	.word	0x20000004

080035b0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80035b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80035b2:	b085      	sub	sp, #20
 80035b4:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80035b6:	2300      	movs	r3, #0
 80035b8:	607b      	str	r3, [r7, #4]
 80035ba:	2300      	movs	r3, #0
 80035bc:	60fb      	str	r3, [r7, #12]
 80035be:	2300      	movs	r3, #0
 80035c0:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80035c2:	2300      	movs	r3, #0
 80035c4:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80035c6:	4b63      	ldr	r3, [pc, #396]	; (8003754 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80035c8:	689b      	ldr	r3, [r3, #8]
 80035ca:	f003 030c 	and.w	r3, r3, #12
 80035ce:	2b04      	cmp	r3, #4
 80035d0:	d007      	beq.n	80035e2 <HAL_RCC_GetSysClockFreq+0x32>
 80035d2:	2b08      	cmp	r3, #8
 80035d4:	d008      	beq.n	80035e8 <HAL_RCC_GetSysClockFreq+0x38>
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	f040 80b4 	bne.w	8003744 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80035dc:	4b5e      	ldr	r3, [pc, #376]	; (8003758 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80035de:	60bb      	str	r3, [r7, #8]
       break;
 80035e0:	e0b3      	b.n	800374a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80035e2:	4b5e      	ldr	r3, [pc, #376]	; (800375c <HAL_RCC_GetSysClockFreq+0x1ac>)
 80035e4:	60bb      	str	r3, [r7, #8]
      break;
 80035e6:	e0b0      	b.n	800374a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80035e8:	4b5a      	ldr	r3, [pc, #360]	; (8003754 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80035ea:	685b      	ldr	r3, [r3, #4]
 80035ec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80035f0:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80035f2:	4b58      	ldr	r3, [pc, #352]	; (8003754 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80035f4:	685b      	ldr	r3, [r3, #4]
 80035f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d04a      	beq.n	8003694 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80035fe:	4b55      	ldr	r3, [pc, #340]	; (8003754 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003600:	685b      	ldr	r3, [r3, #4]
 8003602:	099b      	lsrs	r3, r3, #6
 8003604:	f04f 0400 	mov.w	r4, #0
 8003608:	f240 11ff 	movw	r1, #511	; 0x1ff
 800360c:	f04f 0200 	mov.w	r2, #0
 8003610:	ea03 0501 	and.w	r5, r3, r1
 8003614:	ea04 0602 	and.w	r6, r4, r2
 8003618:	4629      	mov	r1, r5
 800361a:	4632      	mov	r2, r6
 800361c:	f04f 0300 	mov.w	r3, #0
 8003620:	f04f 0400 	mov.w	r4, #0
 8003624:	0154      	lsls	r4, r2, #5
 8003626:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800362a:	014b      	lsls	r3, r1, #5
 800362c:	4619      	mov	r1, r3
 800362e:	4622      	mov	r2, r4
 8003630:	1b49      	subs	r1, r1, r5
 8003632:	eb62 0206 	sbc.w	r2, r2, r6
 8003636:	f04f 0300 	mov.w	r3, #0
 800363a:	f04f 0400 	mov.w	r4, #0
 800363e:	0194      	lsls	r4, r2, #6
 8003640:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003644:	018b      	lsls	r3, r1, #6
 8003646:	1a5b      	subs	r3, r3, r1
 8003648:	eb64 0402 	sbc.w	r4, r4, r2
 800364c:	f04f 0100 	mov.w	r1, #0
 8003650:	f04f 0200 	mov.w	r2, #0
 8003654:	00e2      	lsls	r2, r4, #3
 8003656:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800365a:	00d9      	lsls	r1, r3, #3
 800365c:	460b      	mov	r3, r1
 800365e:	4614      	mov	r4, r2
 8003660:	195b      	adds	r3, r3, r5
 8003662:	eb44 0406 	adc.w	r4, r4, r6
 8003666:	f04f 0100 	mov.w	r1, #0
 800366a:	f04f 0200 	mov.w	r2, #0
 800366e:	0262      	lsls	r2, r4, #9
 8003670:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8003674:	0259      	lsls	r1, r3, #9
 8003676:	460b      	mov	r3, r1
 8003678:	4614      	mov	r4, r2
 800367a:	4618      	mov	r0, r3
 800367c:	4621      	mov	r1, r4
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	f04f 0400 	mov.w	r4, #0
 8003684:	461a      	mov	r2, r3
 8003686:	4623      	mov	r3, r4
 8003688:	f7fc fda4 	bl	80001d4 <__aeabi_uldivmod>
 800368c:	4603      	mov	r3, r0
 800368e:	460c      	mov	r4, r1
 8003690:	60fb      	str	r3, [r7, #12]
 8003692:	e049      	b.n	8003728 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003694:	4b2f      	ldr	r3, [pc, #188]	; (8003754 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003696:	685b      	ldr	r3, [r3, #4]
 8003698:	099b      	lsrs	r3, r3, #6
 800369a:	f04f 0400 	mov.w	r4, #0
 800369e:	f240 11ff 	movw	r1, #511	; 0x1ff
 80036a2:	f04f 0200 	mov.w	r2, #0
 80036a6:	ea03 0501 	and.w	r5, r3, r1
 80036aa:	ea04 0602 	and.w	r6, r4, r2
 80036ae:	4629      	mov	r1, r5
 80036b0:	4632      	mov	r2, r6
 80036b2:	f04f 0300 	mov.w	r3, #0
 80036b6:	f04f 0400 	mov.w	r4, #0
 80036ba:	0154      	lsls	r4, r2, #5
 80036bc:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80036c0:	014b      	lsls	r3, r1, #5
 80036c2:	4619      	mov	r1, r3
 80036c4:	4622      	mov	r2, r4
 80036c6:	1b49      	subs	r1, r1, r5
 80036c8:	eb62 0206 	sbc.w	r2, r2, r6
 80036cc:	f04f 0300 	mov.w	r3, #0
 80036d0:	f04f 0400 	mov.w	r4, #0
 80036d4:	0194      	lsls	r4, r2, #6
 80036d6:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80036da:	018b      	lsls	r3, r1, #6
 80036dc:	1a5b      	subs	r3, r3, r1
 80036de:	eb64 0402 	sbc.w	r4, r4, r2
 80036e2:	f04f 0100 	mov.w	r1, #0
 80036e6:	f04f 0200 	mov.w	r2, #0
 80036ea:	00e2      	lsls	r2, r4, #3
 80036ec:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80036f0:	00d9      	lsls	r1, r3, #3
 80036f2:	460b      	mov	r3, r1
 80036f4:	4614      	mov	r4, r2
 80036f6:	195b      	adds	r3, r3, r5
 80036f8:	eb44 0406 	adc.w	r4, r4, r6
 80036fc:	f04f 0100 	mov.w	r1, #0
 8003700:	f04f 0200 	mov.w	r2, #0
 8003704:	02a2      	lsls	r2, r4, #10
 8003706:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800370a:	0299      	lsls	r1, r3, #10
 800370c:	460b      	mov	r3, r1
 800370e:	4614      	mov	r4, r2
 8003710:	4618      	mov	r0, r3
 8003712:	4621      	mov	r1, r4
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	f04f 0400 	mov.w	r4, #0
 800371a:	461a      	mov	r2, r3
 800371c:	4623      	mov	r3, r4
 800371e:	f7fc fd59 	bl	80001d4 <__aeabi_uldivmod>
 8003722:	4603      	mov	r3, r0
 8003724:	460c      	mov	r4, r1
 8003726:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003728:	4b0a      	ldr	r3, [pc, #40]	; (8003754 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800372a:	685b      	ldr	r3, [r3, #4]
 800372c:	0c1b      	lsrs	r3, r3, #16
 800372e:	f003 0303 	and.w	r3, r3, #3
 8003732:	3301      	adds	r3, #1
 8003734:	005b      	lsls	r3, r3, #1
 8003736:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003738:	68fa      	ldr	r2, [r7, #12]
 800373a:	683b      	ldr	r3, [r7, #0]
 800373c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003740:	60bb      	str	r3, [r7, #8]
      break;
 8003742:	e002      	b.n	800374a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003744:	4b04      	ldr	r3, [pc, #16]	; (8003758 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8003746:	60bb      	str	r3, [r7, #8]
      break;
 8003748:	bf00      	nop
    }
  }
  return sysclockfreq;
 800374a:	68bb      	ldr	r3, [r7, #8]
}
 800374c:	4618      	mov	r0, r3
 800374e:	3714      	adds	r7, #20
 8003750:	46bd      	mov	sp, r7
 8003752:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003754:	40023800 	.word	0x40023800
 8003758:	00f42400 	.word	0x00f42400
 800375c:	007a1200 	.word	0x007a1200

08003760 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003760:	b480      	push	{r7}
 8003762:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003764:	4b03      	ldr	r3, [pc, #12]	; (8003774 <HAL_RCC_GetHCLKFreq+0x14>)
 8003766:	681b      	ldr	r3, [r3, #0]
}
 8003768:	4618      	mov	r0, r3
 800376a:	46bd      	mov	sp, r7
 800376c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003770:	4770      	bx	lr
 8003772:	bf00      	nop
 8003774:	20000000 	.word	0x20000000

08003778 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003778:	b084      	sub	sp, #16
 800377a:	b580      	push	{r7, lr}
 800377c:	b084      	sub	sp, #16
 800377e:	af00      	add	r7, sp, #0
 8003780:	6078      	str	r0, [r7, #4]
 8003782:	f107 001c 	add.w	r0, r7, #28
 8003786:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800378a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800378c:	2b01      	cmp	r3, #1
 800378e:	d122      	bne.n	80037d6 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003794:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	68db      	ldr	r3, [r3, #12]
 80037a0:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80037a4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80037a8:	687a      	ldr	r2, [r7, #4]
 80037aa:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	68db      	ldr	r3, [r3, #12]
 80037b0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80037b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80037ba:	2b01      	cmp	r3, #1
 80037bc:	d105      	bne.n	80037ca <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	68db      	ldr	r3, [r3, #12]
 80037c2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 80037ca:	6878      	ldr	r0, [r7, #4]
 80037cc:	f001 fac6 	bl	8004d5c <USB_CoreReset>
 80037d0:	4603      	mov	r3, r0
 80037d2:	73fb      	strb	r3, [r7, #15]
 80037d4:	e01a      	b.n	800380c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	68db      	ldr	r3, [r3, #12]
 80037da:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80037e2:	6878      	ldr	r0, [r7, #4]
 80037e4:	f001 faba 	bl	8004d5c <USB_CoreReset>
 80037e8:	4603      	mov	r3, r0
 80037ea:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80037ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d106      	bne.n	8003800 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037f6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	639a      	str	r2, [r3, #56]	; 0x38
 80037fe:	e005      	b.n	800380c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003804:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800380c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800380e:	2b01      	cmp	r3, #1
 8003810:	d10b      	bne.n	800382a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	689b      	ldr	r3, [r3, #8]
 8003816:	f043 0206 	orr.w	r2, r3, #6
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	689b      	ldr	r3, [r3, #8]
 8003822:	f043 0220 	orr.w	r2, r3, #32
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800382a:	7bfb      	ldrb	r3, [r7, #15]
}
 800382c:	4618      	mov	r0, r3
 800382e:	3710      	adds	r7, #16
 8003830:	46bd      	mov	sp, r7
 8003832:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003836:	b004      	add	sp, #16
 8003838:	4770      	bx	lr
	...

0800383c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800383c:	b480      	push	{r7}
 800383e:	b087      	sub	sp, #28
 8003840:	af00      	add	r7, sp, #0
 8003842:	60f8      	str	r0, [r7, #12]
 8003844:	60b9      	str	r1, [r7, #8]
 8003846:	4613      	mov	r3, r2
 8003848:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800384a:	79fb      	ldrb	r3, [r7, #7]
 800384c:	2b02      	cmp	r3, #2
 800384e:	d165      	bne.n	800391c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8003850:	68bb      	ldr	r3, [r7, #8]
 8003852:	4a41      	ldr	r2, [pc, #260]	; (8003958 <USB_SetTurnaroundTime+0x11c>)
 8003854:	4293      	cmp	r3, r2
 8003856:	d906      	bls.n	8003866 <USB_SetTurnaroundTime+0x2a>
 8003858:	68bb      	ldr	r3, [r7, #8]
 800385a:	4a40      	ldr	r2, [pc, #256]	; (800395c <USB_SetTurnaroundTime+0x120>)
 800385c:	4293      	cmp	r3, r2
 800385e:	d802      	bhi.n	8003866 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8003860:	230f      	movs	r3, #15
 8003862:	617b      	str	r3, [r7, #20]
 8003864:	e062      	b.n	800392c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8003866:	68bb      	ldr	r3, [r7, #8]
 8003868:	4a3c      	ldr	r2, [pc, #240]	; (800395c <USB_SetTurnaroundTime+0x120>)
 800386a:	4293      	cmp	r3, r2
 800386c:	d906      	bls.n	800387c <USB_SetTurnaroundTime+0x40>
 800386e:	68bb      	ldr	r3, [r7, #8]
 8003870:	4a3b      	ldr	r2, [pc, #236]	; (8003960 <USB_SetTurnaroundTime+0x124>)
 8003872:	4293      	cmp	r3, r2
 8003874:	d802      	bhi.n	800387c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8003876:	230e      	movs	r3, #14
 8003878:	617b      	str	r3, [r7, #20]
 800387a:	e057      	b.n	800392c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800387c:	68bb      	ldr	r3, [r7, #8]
 800387e:	4a38      	ldr	r2, [pc, #224]	; (8003960 <USB_SetTurnaroundTime+0x124>)
 8003880:	4293      	cmp	r3, r2
 8003882:	d906      	bls.n	8003892 <USB_SetTurnaroundTime+0x56>
 8003884:	68bb      	ldr	r3, [r7, #8]
 8003886:	4a37      	ldr	r2, [pc, #220]	; (8003964 <USB_SetTurnaroundTime+0x128>)
 8003888:	4293      	cmp	r3, r2
 800388a:	d802      	bhi.n	8003892 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800388c:	230d      	movs	r3, #13
 800388e:	617b      	str	r3, [r7, #20]
 8003890:	e04c      	b.n	800392c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8003892:	68bb      	ldr	r3, [r7, #8]
 8003894:	4a33      	ldr	r2, [pc, #204]	; (8003964 <USB_SetTurnaroundTime+0x128>)
 8003896:	4293      	cmp	r3, r2
 8003898:	d906      	bls.n	80038a8 <USB_SetTurnaroundTime+0x6c>
 800389a:	68bb      	ldr	r3, [r7, #8]
 800389c:	4a32      	ldr	r2, [pc, #200]	; (8003968 <USB_SetTurnaroundTime+0x12c>)
 800389e:	4293      	cmp	r3, r2
 80038a0:	d802      	bhi.n	80038a8 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80038a2:	230c      	movs	r3, #12
 80038a4:	617b      	str	r3, [r7, #20]
 80038a6:	e041      	b.n	800392c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80038a8:	68bb      	ldr	r3, [r7, #8]
 80038aa:	4a2f      	ldr	r2, [pc, #188]	; (8003968 <USB_SetTurnaroundTime+0x12c>)
 80038ac:	4293      	cmp	r3, r2
 80038ae:	d906      	bls.n	80038be <USB_SetTurnaroundTime+0x82>
 80038b0:	68bb      	ldr	r3, [r7, #8]
 80038b2:	4a2e      	ldr	r2, [pc, #184]	; (800396c <USB_SetTurnaroundTime+0x130>)
 80038b4:	4293      	cmp	r3, r2
 80038b6:	d802      	bhi.n	80038be <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80038b8:	230b      	movs	r3, #11
 80038ba:	617b      	str	r3, [r7, #20]
 80038bc:	e036      	b.n	800392c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80038be:	68bb      	ldr	r3, [r7, #8]
 80038c0:	4a2a      	ldr	r2, [pc, #168]	; (800396c <USB_SetTurnaroundTime+0x130>)
 80038c2:	4293      	cmp	r3, r2
 80038c4:	d906      	bls.n	80038d4 <USB_SetTurnaroundTime+0x98>
 80038c6:	68bb      	ldr	r3, [r7, #8]
 80038c8:	4a29      	ldr	r2, [pc, #164]	; (8003970 <USB_SetTurnaroundTime+0x134>)
 80038ca:	4293      	cmp	r3, r2
 80038cc:	d802      	bhi.n	80038d4 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80038ce:	230a      	movs	r3, #10
 80038d0:	617b      	str	r3, [r7, #20]
 80038d2:	e02b      	b.n	800392c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80038d4:	68bb      	ldr	r3, [r7, #8]
 80038d6:	4a26      	ldr	r2, [pc, #152]	; (8003970 <USB_SetTurnaroundTime+0x134>)
 80038d8:	4293      	cmp	r3, r2
 80038da:	d906      	bls.n	80038ea <USB_SetTurnaroundTime+0xae>
 80038dc:	68bb      	ldr	r3, [r7, #8]
 80038de:	4a25      	ldr	r2, [pc, #148]	; (8003974 <USB_SetTurnaroundTime+0x138>)
 80038e0:	4293      	cmp	r3, r2
 80038e2:	d802      	bhi.n	80038ea <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80038e4:	2309      	movs	r3, #9
 80038e6:	617b      	str	r3, [r7, #20]
 80038e8:	e020      	b.n	800392c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80038ea:	68bb      	ldr	r3, [r7, #8]
 80038ec:	4a21      	ldr	r2, [pc, #132]	; (8003974 <USB_SetTurnaroundTime+0x138>)
 80038ee:	4293      	cmp	r3, r2
 80038f0:	d906      	bls.n	8003900 <USB_SetTurnaroundTime+0xc4>
 80038f2:	68bb      	ldr	r3, [r7, #8]
 80038f4:	4a20      	ldr	r2, [pc, #128]	; (8003978 <USB_SetTurnaroundTime+0x13c>)
 80038f6:	4293      	cmp	r3, r2
 80038f8:	d802      	bhi.n	8003900 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80038fa:	2308      	movs	r3, #8
 80038fc:	617b      	str	r3, [r7, #20]
 80038fe:	e015      	b.n	800392c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8003900:	68bb      	ldr	r3, [r7, #8]
 8003902:	4a1d      	ldr	r2, [pc, #116]	; (8003978 <USB_SetTurnaroundTime+0x13c>)
 8003904:	4293      	cmp	r3, r2
 8003906:	d906      	bls.n	8003916 <USB_SetTurnaroundTime+0xda>
 8003908:	68bb      	ldr	r3, [r7, #8]
 800390a:	4a1c      	ldr	r2, [pc, #112]	; (800397c <USB_SetTurnaroundTime+0x140>)
 800390c:	4293      	cmp	r3, r2
 800390e:	d802      	bhi.n	8003916 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8003910:	2307      	movs	r3, #7
 8003912:	617b      	str	r3, [r7, #20]
 8003914:	e00a      	b.n	800392c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8003916:	2306      	movs	r3, #6
 8003918:	617b      	str	r3, [r7, #20]
 800391a:	e007      	b.n	800392c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800391c:	79fb      	ldrb	r3, [r7, #7]
 800391e:	2b00      	cmp	r3, #0
 8003920:	d102      	bne.n	8003928 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8003922:	2309      	movs	r3, #9
 8003924:	617b      	str	r3, [r7, #20]
 8003926:	e001      	b.n	800392c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8003928:	2309      	movs	r3, #9
 800392a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	68db      	ldr	r3, [r3, #12]
 8003930:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	68da      	ldr	r2, [r3, #12]
 800393c:	697b      	ldr	r3, [r7, #20]
 800393e:	029b      	lsls	r3, r3, #10
 8003940:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8003944:	431a      	orrs	r2, r3
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800394a:	2300      	movs	r3, #0
}
 800394c:	4618      	mov	r0, r3
 800394e:	371c      	adds	r7, #28
 8003950:	46bd      	mov	sp, r7
 8003952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003956:	4770      	bx	lr
 8003958:	00d8acbf 	.word	0x00d8acbf
 800395c:	00e4e1bf 	.word	0x00e4e1bf
 8003960:	00f423ff 	.word	0x00f423ff
 8003964:	0106737f 	.word	0x0106737f
 8003968:	011a499f 	.word	0x011a499f
 800396c:	01312cff 	.word	0x01312cff
 8003970:	014ca43f 	.word	0x014ca43f
 8003974:	016e35ff 	.word	0x016e35ff
 8003978:	01a6ab1f 	.word	0x01a6ab1f
 800397c:	01e847ff 	.word	0x01e847ff

08003980 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003980:	b480      	push	{r7}
 8003982:	b083      	sub	sp, #12
 8003984:	af00      	add	r7, sp, #0
 8003986:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	689b      	ldr	r3, [r3, #8]
 800398c:	f043 0201 	orr.w	r2, r3, #1
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003994:	2300      	movs	r3, #0
}
 8003996:	4618      	mov	r0, r3
 8003998:	370c      	adds	r7, #12
 800399a:	46bd      	mov	sp, r7
 800399c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a0:	4770      	bx	lr

080039a2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80039a2:	b480      	push	{r7}
 80039a4:	b083      	sub	sp, #12
 80039a6:	af00      	add	r7, sp, #0
 80039a8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	689b      	ldr	r3, [r3, #8]
 80039ae:	f023 0201 	bic.w	r2, r3, #1
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80039b6:	2300      	movs	r3, #0
}
 80039b8:	4618      	mov	r0, r3
 80039ba:	370c      	adds	r7, #12
 80039bc:	46bd      	mov	sp, r7
 80039be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c2:	4770      	bx	lr

080039c4 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80039c4:	b580      	push	{r7, lr}
 80039c6:	b082      	sub	sp, #8
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	6078      	str	r0, [r7, #4]
 80039cc:	460b      	mov	r3, r1
 80039ce:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	68db      	ldr	r3, [r3, #12]
 80039d4:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80039dc:	78fb      	ldrb	r3, [r7, #3]
 80039de:	2b01      	cmp	r3, #1
 80039e0:	d106      	bne.n	80039f0 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	68db      	ldr	r3, [r3, #12]
 80039e6:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	60da      	str	r2, [r3, #12]
 80039ee:	e00b      	b.n	8003a08 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 80039f0:	78fb      	ldrb	r3, [r7, #3]
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d106      	bne.n	8003a04 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	68db      	ldr	r3, [r3, #12]
 80039fa:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	60da      	str	r2, [r3, #12]
 8003a02:	e001      	b.n	8003a08 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8003a04:	2301      	movs	r3, #1
 8003a06:	e003      	b.n	8003a10 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8003a08:	2032      	movs	r0, #50	; 0x32
 8003a0a:	f7fd fe29 	bl	8001660 <HAL_Delay>

  return HAL_OK;
 8003a0e:	2300      	movs	r3, #0
}
 8003a10:	4618      	mov	r0, r3
 8003a12:	3708      	adds	r7, #8
 8003a14:	46bd      	mov	sp, r7
 8003a16:	bd80      	pop	{r7, pc}

08003a18 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003a18:	b084      	sub	sp, #16
 8003a1a:	b580      	push	{r7, lr}
 8003a1c:	b086      	sub	sp, #24
 8003a1e:	af00      	add	r7, sp, #0
 8003a20:	6078      	str	r0, [r7, #4]
 8003a22:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8003a26:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8003a2a:	2300      	movs	r3, #0
 8003a2c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8003a32:	2300      	movs	r3, #0
 8003a34:	613b      	str	r3, [r7, #16]
 8003a36:	e009      	b.n	8003a4c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8003a38:	687a      	ldr	r2, [r7, #4]
 8003a3a:	693b      	ldr	r3, [r7, #16]
 8003a3c:	3340      	adds	r3, #64	; 0x40
 8003a3e:	009b      	lsls	r3, r3, #2
 8003a40:	4413      	add	r3, r2
 8003a42:	2200      	movs	r2, #0
 8003a44:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8003a46:	693b      	ldr	r3, [r7, #16]
 8003a48:	3301      	adds	r3, #1
 8003a4a:	613b      	str	r3, [r7, #16]
 8003a4c:	693b      	ldr	r3, [r7, #16]
 8003a4e:	2b0e      	cmp	r3, #14
 8003a50:	d9f2      	bls.n	8003a38 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8003a52:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d11c      	bne.n	8003a92 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a5e:	685b      	ldr	r3, [r3, #4]
 8003a60:	68fa      	ldr	r2, [r7, #12]
 8003a62:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003a66:	f043 0302 	orr.w	r3, r3, #2
 8003a6a:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a70:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a7c:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a88:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	639a      	str	r2, [r3, #56]	; 0x38
 8003a90:	e00b      	b.n	8003aaa <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a96:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003aa2:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003ab0:	461a      	mov	r2, r3
 8003ab2:	2300      	movs	r3, #0
 8003ab4:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003abc:	4619      	mov	r1, r3
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ac4:	461a      	mov	r2, r3
 8003ac6:	680b      	ldr	r3, [r1, #0]
 8003ac8:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003aca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003acc:	2b01      	cmp	r3, #1
 8003ace:	d10c      	bne.n	8003aea <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8003ad0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d104      	bne.n	8003ae0 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8003ad6:	2100      	movs	r1, #0
 8003ad8:	6878      	ldr	r0, [r7, #4]
 8003ada:	f000 f949 	bl	8003d70 <USB_SetDevSpeed>
 8003ade:	e008      	b.n	8003af2 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8003ae0:	2101      	movs	r1, #1
 8003ae2:	6878      	ldr	r0, [r7, #4]
 8003ae4:	f000 f944 	bl	8003d70 <USB_SetDevSpeed>
 8003ae8:	e003      	b.n	8003af2 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8003aea:	2103      	movs	r1, #3
 8003aec:	6878      	ldr	r0, [r7, #4]
 8003aee:	f000 f93f 	bl	8003d70 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8003af2:	2110      	movs	r1, #16
 8003af4:	6878      	ldr	r0, [r7, #4]
 8003af6:	f000 f8f3 	bl	8003ce0 <USB_FlushTxFifo>
 8003afa:	4603      	mov	r3, r0
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d001      	beq.n	8003b04 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8003b00:	2301      	movs	r3, #1
 8003b02:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003b04:	6878      	ldr	r0, [r7, #4]
 8003b06:	f000 f911 	bl	8003d2c <USB_FlushRxFifo>
 8003b0a:	4603      	mov	r3, r0
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d001      	beq.n	8003b14 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8003b10:	2301      	movs	r3, #1
 8003b12:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b1a:	461a      	mov	r2, r3
 8003b1c:	2300      	movs	r3, #0
 8003b1e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b26:	461a      	mov	r2, r3
 8003b28:	2300      	movs	r3, #0
 8003b2a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b32:	461a      	mov	r2, r3
 8003b34:	2300      	movs	r3, #0
 8003b36:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003b38:	2300      	movs	r3, #0
 8003b3a:	613b      	str	r3, [r7, #16]
 8003b3c:	e043      	b.n	8003bc6 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003b3e:	693b      	ldr	r3, [r7, #16]
 8003b40:	015a      	lsls	r2, r3, #5
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	4413      	add	r3, r2
 8003b46:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003b50:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003b54:	d118      	bne.n	8003b88 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8003b56:	693b      	ldr	r3, [r7, #16]
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d10a      	bne.n	8003b72 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003b5c:	693b      	ldr	r3, [r7, #16]
 8003b5e:	015a      	lsls	r2, r3, #5
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	4413      	add	r3, r2
 8003b64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b68:	461a      	mov	r2, r3
 8003b6a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003b6e:	6013      	str	r3, [r2, #0]
 8003b70:	e013      	b.n	8003b9a <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8003b72:	693b      	ldr	r3, [r7, #16]
 8003b74:	015a      	lsls	r2, r3, #5
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	4413      	add	r3, r2
 8003b7a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b7e:	461a      	mov	r2, r3
 8003b80:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003b84:	6013      	str	r3, [r2, #0]
 8003b86:	e008      	b.n	8003b9a <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8003b88:	693b      	ldr	r3, [r7, #16]
 8003b8a:	015a      	lsls	r2, r3, #5
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	4413      	add	r3, r2
 8003b90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b94:	461a      	mov	r2, r3
 8003b96:	2300      	movs	r3, #0
 8003b98:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8003b9a:	693b      	ldr	r3, [r7, #16]
 8003b9c:	015a      	lsls	r2, r3, #5
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	4413      	add	r3, r2
 8003ba2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ba6:	461a      	mov	r2, r3
 8003ba8:	2300      	movs	r3, #0
 8003baa:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003bac:	693b      	ldr	r3, [r7, #16]
 8003bae:	015a      	lsls	r2, r3, #5
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	4413      	add	r3, r2
 8003bb4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003bb8:	461a      	mov	r2, r3
 8003bba:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003bbe:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003bc0:	693b      	ldr	r3, [r7, #16]
 8003bc2:	3301      	adds	r3, #1
 8003bc4:	613b      	str	r3, [r7, #16]
 8003bc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bc8:	693a      	ldr	r2, [r7, #16]
 8003bca:	429a      	cmp	r2, r3
 8003bcc:	d3b7      	bcc.n	8003b3e <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003bce:	2300      	movs	r3, #0
 8003bd0:	613b      	str	r3, [r7, #16]
 8003bd2:	e043      	b.n	8003c5c <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003bd4:	693b      	ldr	r3, [r7, #16]
 8003bd6:	015a      	lsls	r2, r3, #5
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	4413      	add	r3, r2
 8003bdc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003be6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003bea:	d118      	bne.n	8003c1e <USB_DevInit+0x206>
    {
      if (i == 0U)
 8003bec:	693b      	ldr	r3, [r7, #16]
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d10a      	bne.n	8003c08 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8003bf2:	693b      	ldr	r3, [r7, #16]
 8003bf4:	015a      	lsls	r2, r3, #5
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	4413      	add	r3, r2
 8003bfa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003bfe:	461a      	mov	r2, r3
 8003c00:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003c04:	6013      	str	r3, [r2, #0]
 8003c06:	e013      	b.n	8003c30 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003c08:	693b      	ldr	r3, [r7, #16]
 8003c0a:	015a      	lsls	r2, r3, #5
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	4413      	add	r3, r2
 8003c10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c14:	461a      	mov	r2, r3
 8003c16:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003c1a:	6013      	str	r3, [r2, #0]
 8003c1c:	e008      	b.n	8003c30 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8003c1e:	693b      	ldr	r3, [r7, #16]
 8003c20:	015a      	lsls	r2, r3, #5
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	4413      	add	r3, r2
 8003c26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c2a:	461a      	mov	r2, r3
 8003c2c:	2300      	movs	r3, #0
 8003c2e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8003c30:	693b      	ldr	r3, [r7, #16]
 8003c32:	015a      	lsls	r2, r3, #5
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	4413      	add	r3, r2
 8003c38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c3c:	461a      	mov	r2, r3
 8003c3e:	2300      	movs	r3, #0
 8003c40:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8003c42:	693b      	ldr	r3, [r7, #16]
 8003c44:	015a      	lsls	r2, r3, #5
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	4413      	add	r3, r2
 8003c4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c4e:	461a      	mov	r2, r3
 8003c50:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003c54:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003c56:	693b      	ldr	r3, [r7, #16]
 8003c58:	3301      	adds	r3, #1
 8003c5a:	613b      	str	r3, [r7, #16]
 8003c5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c5e:	693a      	ldr	r2, [r7, #16]
 8003c60:	429a      	cmp	r2, r3
 8003c62:	d3b7      	bcc.n	8003bd4 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c6a:	691b      	ldr	r3, [r3, #16]
 8003c6c:	68fa      	ldr	r2, [r7, #12]
 8003c6e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003c72:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003c76:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	2200      	movs	r2, #0
 8003c7c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8003c84:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8003c86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d105      	bne.n	8003c98 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	699b      	ldr	r3, [r3, #24]
 8003c90:	f043 0210 	orr.w	r2, r3, #16
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	699a      	ldr	r2, [r3, #24]
 8003c9c:	4b0f      	ldr	r3, [pc, #60]	; (8003cdc <USB_DevInit+0x2c4>)
 8003c9e:	4313      	orrs	r3, r2
 8003ca0:	687a      	ldr	r2, [r7, #4]
 8003ca2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8003ca4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d005      	beq.n	8003cb6 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	699b      	ldr	r3, [r3, #24]
 8003cae:	f043 0208 	orr.w	r2, r3, #8
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8003cb6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003cb8:	2b01      	cmp	r3, #1
 8003cba:	d107      	bne.n	8003ccc <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	699b      	ldr	r3, [r3, #24]
 8003cc0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003cc4:	f043 0304 	orr.w	r3, r3, #4
 8003cc8:	687a      	ldr	r2, [r7, #4]
 8003cca:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8003ccc:	7dfb      	ldrb	r3, [r7, #23]
}
 8003cce:	4618      	mov	r0, r3
 8003cd0:	3718      	adds	r7, #24
 8003cd2:	46bd      	mov	sp, r7
 8003cd4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003cd8:	b004      	add	sp, #16
 8003cda:	4770      	bx	lr
 8003cdc:	803c3800 	.word	0x803c3800

08003ce0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003ce0:	b480      	push	{r7}
 8003ce2:	b085      	sub	sp, #20
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	6078      	str	r0, [r7, #4]
 8003ce8:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8003cea:	2300      	movs	r3, #0
 8003cec:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003cee:	683b      	ldr	r3, [r7, #0]
 8003cf0:	019b      	lsls	r3, r3, #6
 8003cf2:	f043 0220 	orr.w	r2, r3, #32
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	3301      	adds	r3, #1
 8003cfe:	60fb      	str	r3, [r7, #12]
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	4a09      	ldr	r2, [pc, #36]	; (8003d28 <USB_FlushTxFifo+0x48>)
 8003d04:	4293      	cmp	r3, r2
 8003d06:	d901      	bls.n	8003d0c <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8003d08:	2303      	movs	r3, #3
 8003d0a:	e006      	b.n	8003d1a <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	691b      	ldr	r3, [r3, #16]
 8003d10:	f003 0320 	and.w	r3, r3, #32
 8003d14:	2b20      	cmp	r3, #32
 8003d16:	d0f0      	beq.n	8003cfa <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8003d18:	2300      	movs	r3, #0
}
 8003d1a:	4618      	mov	r0, r3
 8003d1c:	3714      	adds	r7, #20
 8003d1e:	46bd      	mov	sp, r7
 8003d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d24:	4770      	bx	lr
 8003d26:	bf00      	nop
 8003d28:	00030d40 	.word	0x00030d40

08003d2c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003d2c:	b480      	push	{r7}
 8003d2e:	b085      	sub	sp, #20
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8003d34:	2300      	movs	r3, #0
 8003d36:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	2210      	movs	r2, #16
 8003d3c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	3301      	adds	r3, #1
 8003d42:	60fb      	str	r3, [r7, #12]
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	4a09      	ldr	r2, [pc, #36]	; (8003d6c <USB_FlushRxFifo+0x40>)
 8003d48:	4293      	cmp	r3, r2
 8003d4a:	d901      	bls.n	8003d50 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8003d4c:	2303      	movs	r3, #3
 8003d4e:	e006      	b.n	8003d5e <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	691b      	ldr	r3, [r3, #16]
 8003d54:	f003 0310 	and.w	r3, r3, #16
 8003d58:	2b10      	cmp	r3, #16
 8003d5a:	d0f0      	beq.n	8003d3e <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8003d5c:	2300      	movs	r3, #0
}
 8003d5e:	4618      	mov	r0, r3
 8003d60:	3714      	adds	r7, #20
 8003d62:	46bd      	mov	sp, r7
 8003d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d68:	4770      	bx	lr
 8003d6a:	bf00      	nop
 8003d6c:	00030d40 	.word	0x00030d40

08003d70 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8003d70:	b480      	push	{r7}
 8003d72:	b085      	sub	sp, #20
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	6078      	str	r0, [r7, #4]
 8003d78:	460b      	mov	r3, r1
 8003d7a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d86:	681a      	ldr	r2, [r3, #0]
 8003d88:	78fb      	ldrb	r3, [r7, #3]
 8003d8a:	68f9      	ldr	r1, [r7, #12]
 8003d8c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003d90:	4313      	orrs	r3, r2
 8003d92:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8003d94:	2300      	movs	r3, #0
}
 8003d96:	4618      	mov	r0, r3
 8003d98:	3714      	adds	r7, #20
 8003d9a:	46bd      	mov	sp, r7
 8003d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da0:	4770      	bx	lr

08003da2 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8003da2:	b480      	push	{r7}
 8003da4:	b087      	sub	sp, #28
 8003da6:	af00      	add	r7, sp, #0
 8003da8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8003dae:	693b      	ldr	r3, [r7, #16]
 8003db0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003db4:	689b      	ldr	r3, [r3, #8]
 8003db6:	f003 0306 	and.w	r3, r3, #6
 8003dba:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d102      	bne.n	8003dc8 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8003dc2:	2300      	movs	r3, #0
 8003dc4:	75fb      	strb	r3, [r7, #23]
 8003dc6:	e00a      	b.n	8003dde <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	2b02      	cmp	r3, #2
 8003dcc:	d002      	beq.n	8003dd4 <USB_GetDevSpeed+0x32>
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	2b06      	cmp	r3, #6
 8003dd2:	d102      	bne.n	8003dda <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8003dd4:	2302      	movs	r3, #2
 8003dd6:	75fb      	strb	r3, [r7, #23]
 8003dd8:	e001      	b.n	8003dde <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8003dda:	230f      	movs	r3, #15
 8003ddc:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8003dde:	7dfb      	ldrb	r3, [r7, #23]
}
 8003de0:	4618      	mov	r0, r3
 8003de2:	371c      	adds	r7, #28
 8003de4:	46bd      	mov	sp, r7
 8003de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dea:	4770      	bx	lr

08003dec <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003dec:	b480      	push	{r7}
 8003dee:	b085      	sub	sp, #20
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	6078      	str	r0, [r7, #4]
 8003df4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003dfa:	683b      	ldr	r3, [r7, #0]
 8003dfc:	781b      	ldrb	r3, [r3, #0]
 8003dfe:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8003e00:	683b      	ldr	r3, [r7, #0]
 8003e02:	785b      	ldrb	r3, [r3, #1]
 8003e04:	2b01      	cmp	r3, #1
 8003e06:	d13a      	bne.n	8003e7e <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e0e:	69da      	ldr	r2, [r3, #28]
 8003e10:	683b      	ldr	r3, [r7, #0]
 8003e12:	781b      	ldrb	r3, [r3, #0]
 8003e14:	f003 030f 	and.w	r3, r3, #15
 8003e18:	2101      	movs	r1, #1
 8003e1a:	fa01 f303 	lsl.w	r3, r1, r3
 8003e1e:	b29b      	uxth	r3, r3
 8003e20:	68f9      	ldr	r1, [r7, #12]
 8003e22:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003e26:	4313      	orrs	r3, r2
 8003e28:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8003e2a:	68bb      	ldr	r3, [r7, #8]
 8003e2c:	015a      	lsls	r2, r3, #5
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	4413      	add	r3, r2
 8003e32:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d155      	bne.n	8003eec <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003e40:	68bb      	ldr	r3, [r7, #8]
 8003e42:	015a      	lsls	r2, r3, #5
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	4413      	add	r3, r2
 8003e48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e4c:	681a      	ldr	r2, [r3, #0]
 8003e4e:	683b      	ldr	r3, [r7, #0]
 8003e50:	689b      	ldr	r3, [r3, #8]
 8003e52:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003e56:	683b      	ldr	r3, [r7, #0]
 8003e58:	78db      	ldrb	r3, [r3, #3]
 8003e5a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003e5c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003e5e:	68bb      	ldr	r3, [r7, #8]
 8003e60:	059b      	lsls	r3, r3, #22
 8003e62:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003e64:	4313      	orrs	r3, r2
 8003e66:	68ba      	ldr	r2, [r7, #8]
 8003e68:	0151      	lsls	r1, r2, #5
 8003e6a:	68fa      	ldr	r2, [r7, #12]
 8003e6c:	440a      	add	r2, r1
 8003e6e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003e72:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e76:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003e7a:	6013      	str	r3, [r2, #0]
 8003e7c:	e036      	b.n	8003eec <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e84:	69da      	ldr	r2, [r3, #28]
 8003e86:	683b      	ldr	r3, [r7, #0]
 8003e88:	781b      	ldrb	r3, [r3, #0]
 8003e8a:	f003 030f 	and.w	r3, r3, #15
 8003e8e:	2101      	movs	r1, #1
 8003e90:	fa01 f303 	lsl.w	r3, r1, r3
 8003e94:	041b      	lsls	r3, r3, #16
 8003e96:	68f9      	ldr	r1, [r7, #12]
 8003e98:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003e9c:	4313      	orrs	r3, r2
 8003e9e:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8003ea0:	68bb      	ldr	r3, [r7, #8]
 8003ea2:	015a      	lsls	r2, r3, #5
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	4413      	add	r3, r2
 8003ea8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d11a      	bne.n	8003eec <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003eb6:	68bb      	ldr	r3, [r7, #8]
 8003eb8:	015a      	lsls	r2, r3, #5
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	4413      	add	r3, r2
 8003ebe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ec2:	681a      	ldr	r2, [r3, #0]
 8003ec4:	683b      	ldr	r3, [r7, #0]
 8003ec6:	689b      	ldr	r3, [r3, #8]
 8003ec8:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8003ecc:	683b      	ldr	r3, [r7, #0]
 8003ece:	78db      	ldrb	r3, [r3, #3]
 8003ed0:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003ed2:	430b      	orrs	r3, r1
 8003ed4:	4313      	orrs	r3, r2
 8003ed6:	68ba      	ldr	r2, [r7, #8]
 8003ed8:	0151      	lsls	r1, r2, #5
 8003eda:	68fa      	ldr	r2, [r7, #12]
 8003edc:	440a      	add	r2, r1
 8003ede:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003ee2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ee6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003eea:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8003eec:	2300      	movs	r3, #0
}
 8003eee:	4618      	mov	r0, r3
 8003ef0:	3714      	adds	r7, #20
 8003ef2:	46bd      	mov	sp, r7
 8003ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef8:	4770      	bx	lr
	...

08003efc <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003efc:	b480      	push	{r7}
 8003efe:	b085      	sub	sp, #20
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	6078      	str	r0, [r7, #4]
 8003f04:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003f0a:	683b      	ldr	r3, [r7, #0]
 8003f0c:	781b      	ldrb	r3, [r3, #0]
 8003f0e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8003f10:	683b      	ldr	r3, [r7, #0]
 8003f12:	785b      	ldrb	r3, [r3, #1]
 8003f14:	2b01      	cmp	r3, #1
 8003f16:	d161      	bne.n	8003fdc <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003f18:	68bb      	ldr	r3, [r7, #8]
 8003f1a:	015a      	lsls	r2, r3, #5
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	4413      	add	r3, r2
 8003f20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003f2a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003f2e:	d11f      	bne.n	8003f70 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8003f30:	68bb      	ldr	r3, [r7, #8]
 8003f32:	015a      	lsls	r2, r3, #5
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	4413      	add	r3, r2
 8003f38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	68ba      	ldr	r2, [r7, #8]
 8003f40:	0151      	lsls	r1, r2, #5
 8003f42:	68fa      	ldr	r2, [r7, #12]
 8003f44:	440a      	add	r2, r1
 8003f46:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003f4a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003f4e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8003f50:	68bb      	ldr	r3, [r7, #8]
 8003f52:	015a      	lsls	r2, r3, #5
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	4413      	add	r3, r2
 8003f58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	68ba      	ldr	r2, [r7, #8]
 8003f60:	0151      	lsls	r1, r2, #5
 8003f62:	68fa      	ldr	r2, [r7, #12]
 8003f64:	440a      	add	r2, r1
 8003f66:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003f6a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003f6e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f76:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003f78:	683b      	ldr	r3, [r7, #0]
 8003f7a:	781b      	ldrb	r3, [r3, #0]
 8003f7c:	f003 030f 	and.w	r3, r3, #15
 8003f80:	2101      	movs	r1, #1
 8003f82:	fa01 f303 	lsl.w	r3, r1, r3
 8003f86:	b29b      	uxth	r3, r3
 8003f88:	43db      	mvns	r3, r3
 8003f8a:	68f9      	ldr	r1, [r7, #12]
 8003f8c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003f90:	4013      	ands	r3, r2
 8003f92:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f9a:	69da      	ldr	r2, [r3, #28]
 8003f9c:	683b      	ldr	r3, [r7, #0]
 8003f9e:	781b      	ldrb	r3, [r3, #0]
 8003fa0:	f003 030f 	and.w	r3, r3, #15
 8003fa4:	2101      	movs	r1, #1
 8003fa6:	fa01 f303 	lsl.w	r3, r1, r3
 8003faa:	b29b      	uxth	r3, r3
 8003fac:	43db      	mvns	r3, r3
 8003fae:	68f9      	ldr	r1, [r7, #12]
 8003fb0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003fb4:	4013      	ands	r3, r2
 8003fb6:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8003fb8:	68bb      	ldr	r3, [r7, #8]
 8003fba:	015a      	lsls	r2, r3, #5
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	4413      	add	r3, r2
 8003fc0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003fc4:	681a      	ldr	r2, [r3, #0]
 8003fc6:	68bb      	ldr	r3, [r7, #8]
 8003fc8:	0159      	lsls	r1, r3, #5
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	440b      	add	r3, r1
 8003fce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003fd2:	4619      	mov	r1, r3
 8003fd4:	4b35      	ldr	r3, [pc, #212]	; (80040ac <USB_DeactivateEndpoint+0x1b0>)
 8003fd6:	4013      	ands	r3, r2
 8003fd8:	600b      	str	r3, [r1, #0]
 8003fda:	e060      	b.n	800409e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003fdc:	68bb      	ldr	r3, [r7, #8]
 8003fde:	015a      	lsls	r2, r3, #5
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	4413      	add	r3, r2
 8003fe4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003fee:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003ff2:	d11f      	bne.n	8004034 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003ff4:	68bb      	ldr	r3, [r7, #8]
 8003ff6:	015a      	lsls	r2, r3, #5
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	4413      	add	r3, r2
 8003ffc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	68ba      	ldr	r2, [r7, #8]
 8004004:	0151      	lsls	r1, r2, #5
 8004006:	68fa      	ldr	r2, [r7, #12]
 8004008:	440a      	add	r2, r1
 800400a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800400e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004012:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8004014:	68bb      	ldr	r3, [r7, #8]
 8004016:	015a      	lsls	r2, r3, #5
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	4413      	add	r3, r2
 800401c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	68ba      	ldr	r2, [r7, #8]
 8004024:	0151      	lsls	r1, r2, #5
 8004026:	68fa      	ldr	r2, [r7, #12]
 8004028:	440a      	add	r2, r1
 800402a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800402e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004032:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800403a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800403c:	683b      	ldr	r3, [r7, #0]
 800403e:	781b      	ldrb	r3, [r3, #0]
 8004040:	f003 030f 	and.w	r3, r3, #15
 8004044:	2101      	movs	r1, #1
 8004046:	fa01 f303 	lsl.w	r3, r1, r3
 800404a:	041b      	lsls	r3, r3, #16
 800404c:	43db      	mvns	r3, r3
 800404e:	68f9      	ldr	r1, [r7, #12]
 8004050:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004054:	4013      	ands	r3, r2
 8004056:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800405e:	69da      	ldr	r2, [r3, #28]
 8004060:	683b      	ldr	r3, [r7, #0]
 8004062:	781b      	ldrb	r3, [r3, #0]
 8004064:	f003 030f 	and.w	r3, r3, #15
 8004068:	2101      	movs	r1, #1
 800406a:	fa01 f303 	lsl.w	r3, r1, r3
 800406e:	041b      	lsls	r3, r3, #16
 8004070:	43db      	mvns	r3, r3
 8004072:	68f9      	ldr	r1, [r7, #12]
 8004074:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004078:	4013      	ands	r3, r2
 800407a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800407c:	68bb      	ldr	r3, [r7, #8]
 800407e:	015a      	lsls	r2, r3, #5
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	4413      	add	r3, r2
 8004084:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004088:	681a      	ldr	r2, [r3, #0]
 800408a:	68bb      	ldr	r3, [r7, #8]
 800408c:	0159      	lsls	r1, r3, #5
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	440b      	add	r3, r1
 8004092:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004096:	4619      	mov	r1, r3
 8004098:	4b05      	ldr	r3, [pc, #20]	; (80040b0 <USB_DeactivateEndpoint+0x1b4>)
 800409a:	4013      	ands	r3, r2
 800409c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800409e:	2300      	movs	r3, #0
}
 80040a0:	4618      	mov	r0, r3
 80040a2:	3714      	adds	r7, #20
 80040a4:	46bd      	mov	sp, r7
 80040a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040aa:	4770      	bx	lr
 80040ac:	ec337800 	.word	0xec337800
 80040b0:	eff37800 	.word	0xeff37800

080040b4 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80040b4:	b580      	push	{r7, lr}
 80040b6:	b08a      	sub	sp, #40	; 0x28
 80040b8:	af02      	add	r7, sp, #8
 80040ba:	60f8      	str	r0, [r7, #12]
 80040bc:	60b9      	str	r1, [r7, #8]
 80040be:	4613      	mov	r3, r2
 80040c0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80040c6:	68bb      	ldr	r3, [r7, #8]
 80040c8:	781b      	ldrb	r3, [r3, #0]
 80040ca:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80040cc:	68bb      	ldr	r3, [r7, #8]
 80040ce:	785b      	ldrb	r3, [r3, #1]
 80040d0:	2b01      	cmp	r3, #1
 80040d2:	f040 815c 	bne.w	800438e <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80040d6:	68bb      	ldr	r3, [r7, #8]
 80040d8:	695b      	ldr	r3, [r3, #20]
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d132      	bne.n	8004144 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80040de:	69bb      	ldr	r3, [r7, #24]
 80040e0:	015a      	lsls	r2, r3, #5
 80040e2:	69fb      	ldr	r3, [r7, #28]
 80040e4:	4413      	add	r3, r2
 80040e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80040ea:	691b      	ldr	r3, [r3, #16]
 80040ec:	69ba      	ldr	r2, [r7, #24]
 80040ee:	0151      	lsls	r1, r2, #5
 80040f0:	69fa      	ldr	r2, [r7, #28]
 80040f2:	440a      	add	r2, r1
 80040f4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80040f8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80040fc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004100:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004102:	69bb      	ldr	r3, [r7, #24]
 8004104:	015a      	lsls	r2, r3, #5
 8004106:	69fb      	ldr	r3, [r7, #28]
 8004108:	4413      	add	r3, r2
 800410a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800410e:	691b      	ldr	r3, [r3, #16]
 8004110:	69ba      	ldr	r2, [r7, #24]
 8004112:	0151      	lsls	r1, r2, #5
 8004114:	69fa      	ldr	r2, [r7, #28]
 8004116:	440a      	add	r2, r1
 8004118:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800411c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004120:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004122:	69bb      	ldr	r3, [r7, #24]
 8004124:	015a      	lsls	r2, r3, #5
 8004126:	69fb      	ldr	r3, [r7, #28]
 8004128:	4413      	add	r3, r2
 800412a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800412e:	691b      	ldr	r3, [r3, #16]
 8004130:	69ba      	ldr	r2, [r7, #24]
 8004132:	0151      	lsls	r1, r2, #5
 8004134:	69fa      	ldr	r2, [r7, #28]
 8004136:	440a      	add	r2, r1
 8004138:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800413c:	0cdb      	lsrs	r3, r3, #19
 800413e:	04db      	lsls	r3, r3, #19
 8004140:	6113      	str	r3, [r2, #16]
 8004142:	e074      	b.n	800422e <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004144:	69bb      	ldr	r3, [r7, #24]
 8004146:	015a      	lsls	r2, r3, #5
 8004148:	69fb      	ldr	r3, [r7, #28]
 800414a:	4413      	add	r3, r2
 800414c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004150:	691b      	ldr	r3, [r3, #16]
 8004152:	69ba      	ldr	r2, [r7, #24]
 8004154:	0151      	lsls	r1, r2, #5
 8004156:	69fa      	ldr	r2, [r7, #28]
 8004158:	440a      	add	r2, r1
 800415a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800415e:	0cdb      	lsrs	r3, r3, #19
 8004160:	04db      	lsls	r3, r3, #19
 8004162:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004164:	69bb      	ldr	r3, [r7, #24]
 8004166:	015a      	lsls	r2, r3, #5
 8004168:	69fb      	ldr	r3, [r7, #28]
 800416a:	4413      	add	r3, r2
 800416c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004170:	691b      	ldr	r3, [r3, #16]
 8004172:	69ba      	ldr	r2, [r7, #24]
 8004174:	0151      	lsls	r1, r2, #5
 8004176:	69fa      	ldr	r2, [r7, #28]
 8004178:	440a      	add	r2, r1
 800417a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800417e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004182:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004186:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8004188:	69bb      	ldr	r3, [r7, #24]
 800418a:	015a      	lsls	r2, r3, #5
 800418c:	69fb      	ldr	r3, [r7, #28]
 800418e:	4413      	add	r3, r2
 8004190:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004194:	691a      	ldr	r2, [r3, #16]
 8004196:	68bb      	ldr	r3, [r7, #8]
 8004198:	6959      	ldr	r1, [r3, #20]
 800419a:	68bb      	ldr	r3, [r7, #8]
 800419c:	689b      	ldr	r3, [r3, #8]
 800419e:	440b      	add	r3, r1
 80041a0:	1e59      	subs	r1, r3, #1
 80041a2:	68bb      	ldr	r3, [r7, #8]
 80041a4:	689b      	ldr	r3, [r3, #8]
 80041a6:	fbb1 f3f3 	udiv	r3, r1, r3
 80041aa:	04d9      	lsls	r1, r3, #19
 80041ac:	4b9d      	ldr	r3, [pc, #628]	; (8004424 <USB_EPStartXfer+0x370>)
 80041ae:	400b      	ands	r3, r1
 80041b0:	69b9      	ldr	r1, [r7, #24]
 80041b2:	0148      	lsls	r0, r1, #5
 80041b4:	69f9      	ldr	r1, [r7, #28]
 80041b6:	4401      	add	r1, r0
 80041b8:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80041bc:	4313      	orrs	r3, r2
 80041be:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80041c0:	69bb      	ldr	r3, [r7, #24]
 80041c2:	015a      	lsls	r2, r3, #5
 80041c4:	69fb      	ldr	r3, [r7, #28]
 80041c6:	4413      	add	r3, r2
 80041c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80041cc:	691a      	ldr	r2, [r3, #16]
 80041ce:	68bb      	ldr	r3, [r7, #8]
 80041d0:	695b      	ldr	r3, [r3, #20]
 80041d2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80041d6:	69b9      	ldr	r1, [r7, #24]
 80041d8:	0148      	lsls	r0, r1, #5
 80041da:	69f9      	ldr	r1, [r7, #28]
 80041dc:	4401      	add	r1, r0
 80041de:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80041e2:	4313      	orrs	r3, r2
 80041e4:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80041e6:	68bb      	ldr	r3, [r7, #8]
 80041e8:	78db      	ldrb	r3, [r3, #3]
 80041ea:	2b01      	cmp	r3, #1
 80041ec:	d11f      	bne.n	800422e <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80041ee:	69bb      	ldr	r3, [r7, #24]
 80041f0:	015a      	lsls	r2, r3, #5
 80041f2:	69fb      	ldr	r3, [r7, #28]
 80041f4:	4413      	add	r3, r2
 80041f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80041fa:	691b      	ldr	r3, [r3, #16]
 80041fc:	69ba      	ldr	r2, [r7, #24]
 80041fe:	0151      	lsls	r1, r2, #5
 8004200:	69fa      	ldr	r2, [r7, #28]
 8004202:	440a      	add	r2, r1
 8004204:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004208:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800420c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800420e:	69bb      	ldr	r3, [r7, #24]
 8004210:	015a      	lsls	r2, r3, #5
 8004212:	69fb      	ldr	r3, [r7, #28]
 8004214:	4413      	add	r3, r2
 8004216:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800421a:	691b      	ldr	r3, [r3, #16]
 800421c:	69ba      	ldr	r2, [r7, #24]
 800421e:	0151      	lsls	r1, r2, #5
 8004220:	69fa      	ldr	r2, [r7, #28]
 8004222:	440a      	add	r2, r1
 8004224:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004228:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800422c:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800422e:	79fb      	ldrb	r3, [r7, #7]
 8004230:	2b01      	cmp	r3, #1
 8004232:	d14b      	bne.n	80042cc <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004234:	68bb      	ldr	r3, [r7, #8]
 8004236:	691b      	ldr	r3, [r3, #16]
 8004238:	2b00      	cmp	r3, #0
 800423a:	d009      	beq.n	8004250 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800423c:	69bb      	ldr	r3, [r7, #24]
 800423e:	015a      	lsls	r2, r3, #5
 8004240:	69fb      	ldr	r3, [r7, #28]
 8004242:	4413      	add	r3, r2
 8004244:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004248:	461a      	mov	r2, r3
 800424a:	68bb      	ldr	r3, [r7, #8]
 800424c:	691b      	ldr	r3, [r3, #16]
 800424e:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8004250:	68bb      	ldr	r3, [r7, #8]
 8004252:	78db      	ldrb	r3, [r3, #3]
 8004254:	2b01      	cmp	r3, #1
 8004256:	d128      	bne.n	80042aa <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004258:	69fb      	ldr	r3, [r7, #28]
 800425a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800425e:	689b      	ldr	r3, [r3, #8]
 8004260:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004264:	2b00      	cmp	r3, #0
 8004266:	d110      	bne.n	800428a <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004268:	69bb      	ldr	r3, [r7, #24]
 800426a:	015a      	lsls	r2, r3, #5
 800426c:	69fb      	ldr	r3, [r7, #28]
 800426e:	4413      	add	r3, r2
 8004270:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	69ba      	ldr	r2, [r7, #24]
 8004278:	0151      	lsls	r1, r2, #5
 800427a:	69fa      	ldr	r2, [r7, #28]
 800427c:	440a      	add	r2, r1
 800427e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004282:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004286:	6013      	str	r3, [r2, #0]
 8004288:	e00f      	b.n	80042aa <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800428a:	69bb      	ldr	r3, [r7, #24]
 800428c:	015a      	lsls	r2, r3, #5
 800428e:	69fb      	ldr	r3, [r7, #28]
 8004290:	4413      	add	r3, r2
 8004292:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	69ba      	ldr	r2, [r7, #24]
 800429a:	0151      	lsls	r1, r2, #5
 800429c:	69fa      	ldr	r2, [r7, #28]
 800429e:	440a      	add	r2, r1
 80042a0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80042a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80042a8:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80042aa:	69bb      	ldr	r3, [r7, #24]
 80042ac:	015a      	lsls	r2, r3, #5
 80042ae:	69fb      	ldr	r3, [r7, #28]
 80042b0:	4413      	add	r3, r2
 80042b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	69ba      	ldr	r2, [r7, #24]
 80042ba:	0151      	lsls	r1, r2, #5
 80042bc:	69fa      	ldr	r2, [r7, #28]
 80042be:	440a      	add	r2, r1
 80042c0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80042c4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80042c8:	6013      	str	r3, [r2, #0]
 80042ca:	e12f      	b.n	800452c <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80042cc:	69bb      	ldr	r3, [r7, #24]
 80042ce:	015a      	lsls	r2, r3, #5
 80042d0:	69fb      	ldr	r3, [r7, #28]
 80042d2:	4413      	add	r3, r2
 80042d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	69ba      	ldr	r2, [r7, #24]
 80042dc:	0151      	lsls	r1, r2, #5
 80042de:	69fa      	ldr	r2, [r7, #28]
 80042e0:	440a      	add	r2, r1
 80042e2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80042e6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80042ea:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80042ec:	68bb      	ldr	r3, [r7, #8]
 80042ee:	78db      	ldrb	r3, [r3, #3]
 80042f0:	2b01      	cmp	r3, #1
 80042f2:	d015      	beq.n	8004320 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80042f4:	68bb      	ldr	r3, [r7, #8]
 80042f6:	695b      	ldr	r3, [r3, #20]
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	f000 8117 	beq.w	800452c <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80042fe:	69fb      	ldr	r3, [r7, #28]
 8004300:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004304:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004306:	68bb      	ldr	r3, [r7, #8]
 8004308:	781b      	ldrb	r3, [r3, #0]
 800430a:	f003 030f 	and.w	r3, r3, #15
 800430e:	2101      	movs	r1, #1
 8004310:	fa01 f303 	lsl.w	r3, r1, r3
 8004314:	69f9      	ldr	r1, [r7, #28]
 8004316:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800431a:	4313      	orrs	r3, r2
 800431c:	634b      	str	r3, [r1, #52]	; 0x34
 800431e:	e105      	b.n	800452c <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004320:	69fb      	ldr	r3, [r7, #28]
 8004322:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004326:	689b      	ldr	r3, [r3, #8]
 8004328:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800432c:	2b00      	cmp	r3, #0
 800432e:	d110      	bne.n	8004352 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004330:	69bb      	ldr	r3, [r7, #24]
 8004332:	015a      	lsls	r2, r3, #5
 8004334:	69fb      	ldr	r3, [r7, #28]
 8004336:	4413      	add	r3, r2
 8004338:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	69ba      	ldr	r2, [r7, #24]
 8004340:	0151      	lsls	r1, r2, #5
 8004342:	69fa      	ldr	r2, [r7, #28]
 8004344:	440a      	add	r2, r1
 8004346:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800434a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800434e:	6013      	str	r3, [r2, #0]
 8004350:	e00f      	b.n	8004372 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004352:	69bb      	ldr	r3, [r7, #24]
 8004354:	015a      	lsls	r2, r3, #5
 8004356:	69fb      	ldr	r3, [r7, #28]
 8004358:	4413      	add	r3, r2
 800435a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	69ba      	ldr	r2, [r7, #24]
 8004362:	0151      	lsls	r1, r2, #5
 8004364:	69fa      	ldr	r2, [r7, #28]
 8004366:	440a      	add	r2, r1
 8004368:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800436c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004370:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8004372:	68bb      	ldr	r3, [r7, #8]
 8004374:	68d9      	ldr	r1, [r3, #12]
 8004376:	68bb      	ldr	r3, [r7, #8]
 8004378:	781a      	ldrb	r2, [r3, #0]
 800437a:	68bb      	ldr	r3, [r7, #8]
 800437c:	695b      	ldr	r3, [r3, #20]
 800437e:	b298      	uxth	r0, r3
 8004380:	79fb      	ldrb	r3, [r7, #7]
 8004382:	9300      	str	r3, [sp, #0]
 8004384:	4603      	mov	r3, r0
 8004386:	68f8      	ldr	r0, [r7, #12]
 8004388:	f000 fa2b 	bl	80047e2 <USB_WritePacket>
 800438c:	e0ce      	b.n	800452c <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800438e:	69bb      	ldr	r3, [r7, #24]
 8004390:	015a      	lsls	r2, r3, #5
 8004392:	69fb      	ldr	r3, [r7, #28]
 8004394:	4413      	add	r3, r2
 8004396:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800439a:	691b      	ldr	r3, [r3, #16]
 800439c:	69ba      	ldr	r2, [r7, #24]
 800439e:	0151      	lsls	r1, r2, #5
 80043a0:	69fa      	ldr	r2, [r7, #28]
 80043a2:	440a      	add	r2, r1
 80043a4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80043a8:	0cdb      	lsrs	r3, r3, #19
 80043aa:	04db      	lsls	r3, r3, #19
 80043ac:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80043ae:	69bb      	ldr	r3, [r7, #24]
 80043b0:	015a      	lsls	r2, r3, #5
 80043b2:	69fb      	ldr	r3, [r7, #28]
 80043b4:	4413      	add	r3, r2
 80043b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043ba:	691b      	ldr	r3, [r3, #16]
 80043bc:	69ba      	ldr	r2, [r7, #24]
 80043be:	0151      	lsls	r1, r2, #5
 80043c0:	69fa      	ldr	r2, [r7, #28]
 80043c2:	440a      	add	r2, r1
 80043c4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80043c8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80043cc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80043d0:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 80043d2:	68bb      	ldr	r3, [r7, #8]
 80043d4:	695b      	ldr	r3, [r3, #20]
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d126      	bne.n	8004428 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80043da:	69bb      	ldr	r3, [r7, #24]
 80043dc:	015a      	lsls	r2, r3, #5
 80043de:	69fb      	ldr	r3, [r7, #28]
 80043e0:	4413      	add	r3, r2
 80043e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043e6:	691a      	ldr	r2, [r3, #16]
 80043e8:	68bb      	ldr	r3, [r7, #8]
 80043ea:	689b      	ldr	r3, [r3, #8]
 80043ec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80043f0:	69b9      	ldr	r1, [r7, #24]
 80043f2:	0148      	lsls	r0, r1, #5
 80043f4:	69f9      	ldr	r1, [r7, #28]
 80043f6:	4401      	add	r1, r0
 80043f8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80043fc:	4313      	orrs	r3, r2
 80043fe:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004400:	69bb      	ldr	r3, [r7, #24]
 8004402:	015a      	lsls	r2, r3, #5
 8004404:	69fb      	ldr	r3, [r7, #28]
 8004406:	4413      	add	r3, r2
 8004408:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800440c:	691b      	ldr	r3, [r3, #16]
 800440e:	69ba      	ldr	r2, [r7, #24]
 8004410:	0151      	lsls	r1, r2, #5
 8004412:	69fa      	ldr	r2, [r7, #28]
 8004414:	440a      	add	r2, r1
 8004416:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800441a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800441e:	6113      	str	r3, [r2, #16]
 8004420:	e036      	b.n	8004490 <USB_EPStartXfer+0x3dc>
 8004422:	bf00      	nop
 8004424:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8004428:	68bb      	ldr	r3, [r7, #8]
 800442a:	695a      	ldr	r2, [r3, #20]
 800442c:	68bb      	ldr	r3, [r7, #8]
 800442e:	689b      	ldr	r3, [r3, #8]
 8004430:	4413      	add	r3, r2
 8004432:	1e5a      	subs	r2, r3, #1
 8004434:	68bb      	ldr	r3, [r7, #8]
 8004436:	689b      	ldr	r3, [r3, #8]
 8004438:	fbb2 f3f3 	udiv	r3, r2, r3
 800443c:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800443e:	69bb      	ldr	r3, [r7, #24]
 8004440:	015a      	lsls	r2, r3, #5
 8004442:	69fb      	ldr	r3, [r7, #28]
 8004444:	4413      	add	r3, r2
 8004446:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800444a:	691a      	ldr	r2, [r3, #16]
 800444c:	8afb      	ldrh	r3, [r7, #22]
 800444e:	04d9      	lsls	r1, r3, #19
 8004450:	4b39      	ldr	r3, [pc, #228]	; (8004538 <USB_EPStartXfer+0x484>)
 8004452:	400b      	ands	r3, r1
 8004454:	69b9      	ldr	r1, [r7, #24]
 8004456:	0148      	lsls	r0, r1, #5
 8004458:	69f9      	ldr	r1, [r7, #28]
 800445a:	4401      	add	r1, r0
 800445c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004460:	4313      	orrs	r3, r2
 8004462:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8004464:	69bb      	ldr	r3, [r7, #24]
 8004466:	015a      	lsls	r2, r3, #5
 8004468:	69fb      	ldr	r3, [r7, #28]
 800446a:	4413      	add	r3, r2
 800446c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004470:	691a      	ldr	r2, [r3, #16]
 8004472:	68bb      	ldr	r3, [r7, #8]
 8004474:	689b      	ldr	r3, [r3, #8]
 8004476:	8af9      	ldrh	r1, [r7, #22]
 8004478:	fb01 f303 	mul.w	r3, r1, r3
 800447c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004480:	69b9      	ldr	r1, [r7, #24]
 8004482:	0148      	lsls	r0, r1, #5
 8004484:	69f9      	ldr	r1, [r7, #28]
 8004486:	4401      	add	r1, r0
 8004488:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800448c:	4313      	orrs	r3, r2
 800448e:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8004490:	79fb      	ldrb	r3, [r7, #7]
 8004492:	2b01      	cmp	r3, #1
 8004494:	d10d      	bne.n	80044b2 <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8004496:	68bb      	ldr	r3, [r7, #8]
 8004498:	68db      	ldr	r3, [r3, #12]
 800449a:	2b00      	cmp	r3, #0
 800449c:	d009      	beq.n	80044b2 <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800449e:	68bb      	ldr	r3, [r7, #8]
 80044a0:	68d9      	ldr	r1, [r3, #12]
 80044a2:	69bb      	ldr	r3, [r7, #24]
 80044a4:	015a      	lsls	r2, r3, #5
 80044a6:	69fb      	ldr	r3, [r7, #28]
 80044a8:	4413      	add	r3, r2
 80044aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044ae:	460a      	mov	r2, r1
 80044b0:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80044b2:	68bb      	ldr	r3, [r7, #8]
 80044b4:	78db      	ldrb	r3, [r3, #3]
 80044b6:	2b01      	cmp	r3, #1
 80044b8:	d128      	bne.n	800450c <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80044ba:	69fb      	ldr	r3, [r7, #28]
 80044bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80044c0:	689b      	ldr	r3, [r3, #8]
 80044c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d110      	bne.n	80044ec <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80044ca:	69bb      	ldr	r3, [r7, #24]
 80044cc:	015a      	lsls	r2, r3, #5
 80044ce:	69fb      	ldr	r3, [r7, #28]
 80044d0:	4413      	add	r3, r2
 80044d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	69ba      	ldr	r2, [r7, #24]
 80044da:	0151      	lsls	r1, r2, #5
 80044dc:	69fa      	ldr	r2, [r7, #28]
 80044de:	440a      	add	r2, r1
 80044e0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80044e4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80044e8:	6013      	str	r3, [r2, #0]
 80044ea:	e00f      	b.n	800450c <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80044ec:	69bb      	ldr	r3, [r7, #24]
 80044ee:	015a      	lsls	r2, r3, #5
 80044f0:	69fb      	ldr	r3, [r7, #28]
 80044f2:	4413      	add	r3, r2
 80044f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	69ba      	ldr	r2, [r7, #24]
 80044fc:	0151      	lsls	r1, r2, #5
 80044fe:	69fa      	ldr	r2, [r7, #28]
 8004500:	440a      	add	r2, r1
 8004502:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004506:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800450a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800450c:	69bb      	ldr	r3, [r7, #24]
 800450e:	015a      	lsls	r2, r3, #5
 8004510:	69fb      	ldr	r3, [r7, #28]
 8004512:	4413      	add	r3, r2
 8004514:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	69ba      	ldr	r2, [r7, #24]
 800451c:	0151      	lsls	r1, r2, #5
 800451e:	69fa      	ldr	r2, [r7, #28]
 8004520:	440a      	add	r2, r1
 8004522:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004526:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800452a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800452c:	2300      	movs	r3, #0
}
 800452e:	4618      	mov	r0, r3
 8004530:	3720      	adds	r7, #32
 8004532:	46bd      	mov	sp, r7
 8004534:	bd80      	pop	{r7, pc}
 8004536:	bf00      	nop
 8004538:	1ff80000 	.word	0x1ff80000

0800453c <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800453c:	b480      	push	{r7}
 800453e:	b087      	sub	sp, #28
 8004540:	af00      	add	r7, sp, #0
 8004542:	60f8      	str	r0, [r7, #12]
 8004544:	60b9      	str	r1, [r7, #8]
 8004546:	4613      	mov	r3, r2
 8004548:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800454e:	68bb      	ldr	r3, [r7, #8]
 8004550:	781b      	ldrb	r3, [r3, #0]
 8004552:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004554:	68bb      	ldr	r3, [r7, #8]
 8004556:	785b      	ldrb	r3, [r3, #1]
 8004558:	2b01      	cmp	r3, #1
 800455a:	f040 80cd 	bne.w	80046f8 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800455e:	68bb      	ldr	r3, [r7, #8]
 8004560:	695b      	ldr	r3, [r3, #20]
 8004562:	2b00      	cmp	r3, #0
 8004564:	d132      	bne.n	80045cc <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004566:	693b      	ldr	r3, [r7, #16]
 8004568:	015a      	lsls	r2, r3, #5
 800456a:	697b      	ldr	r3, [r7, #20]
 800456c:	4413      	add	r3, r2
 800456e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004572:	691b      	ldr	r3, [r3, #16]
 8004574:	693a      	ldr	r2, [r7, #16]
 8004576:	0151      	lsls	r1, r2, #5
 8004578:	697a      	ldr	r2, [r7, #20]
 800457a:	440a      	add	r2, r1
 800457c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004580:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004584:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004588:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800458a:	693b      	ldr	r3, [r7, #16]
 800458c:	015a      	lsls	r2, r3, #5
 800458e:	697b      	ldr	r3, [r7, #20]
 8004590:	4413      	add	r3, r2
 8004592:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004596:	691b      	ldr	r3, [r3, #16]
 8004598:	693a      	ldr	r2, [r7, #16]
 800459a:	0151      	lsls	r1, r2, #5
 800459c:	697a      	ldr	r2, [r7, #20]
 800459e:	440a      	add	r2, r1
 80045a0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80045a4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80045a8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80045aa:	693b      	ldr	r3, [r7, #16]
 80045ac:	015a      	lsls	r2, r3, #5
 80045ae:	697b      	ldr	r3, [r7, #20]
 80045b0:	4413      	add	r3, r2
 80045b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045b6:	691b      	ldr	r3, [r3, #16]
 80045b8:	693a      	ldr	r2, [r7, #16]
 80045ba:	0151      	lsls	r1, r2, #5
 80045bc:	697a      	ldr	r2, [r7, #20]
 80045be:	440a      	add	r2, r1
 80045c0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80045c4:	0cdb      	lsrs	r3, r3, #19
 80045c6:	04db      	lsls	r3, r3, #19
 80045c8:	6113      	str	r3, [r2, #16]
 80045ca:	e04e      	b.n	800466a <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80045cc:	693b      	ldr	r3, [r7, #16]
 80045ce:	015a      	lsls	r2, r3, #5
 80045d0:	697b      	ldr	r3, [r7, #20]
 80045d2:	4413      	add	r3, r2
 80045d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045d8:	691b      	ldr	r3, [r3, #16]
 80045da:	693a      	ldr	r2, [r7, #16]
 80045dc:	0151      	lsls	r1, r2, #5
 80045de:	697a      	ldr	r2, [r7, #20]
 80045e0:	440a      	add	r2, r1
 80045e2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80045e6:	0cdb      	lsrs	r3, r3, #19
 80045e8:	04db      	lsls	r3, r3, #19
 80045ea:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80045ec:	693b      	ldr	r3, [r7, #16]
 80045ee:	015a      	lsls	r2, r3, #5
 80045f0:	697b      	ldr	r3, [r7, #20]
 80045f2:	4413      	add	r3, r2
 80045f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045f8:	691b      	ldr	r3, [r3, #16]
 80045fa:	693a      	ldr	r2, [r7, #16]
 80045fc:	0151      	lsls	r1, r2, #5
 80045fe:	697a      	ldr	r2, [r7, #20]
 8004600:	440a      	add	r2, r1
 8004602:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004606:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800460a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800460e:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8004610:	68bb      	ldr	r3, [r7, #8]
 8004612:	695a      	ldr	r2, [r3, #20]
 8004614:	68bb      	ldr	r3, [r7, #8]
 8004616:	689b      	ldr	r3, [r3, #8]
 8004618:	429a      	cmp	r2, r3
 800461a:	d903      	bls.n	8004624 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800461c:	68bb      	ldr	r3, [r7, #8]
 800461e:	689a      	ldr	r2, [r3, #8]
 8004620:	68bb      	ldr	r3, [r7, #8]
 8004622:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004624:	693b      	ldr	r3, [r7, #16]
 8004626:	015a      	lsls	r2, r3, #5
 8004628:	697b      	ldr	r3, [r7, #20]
 800462a:	4413      	add	r3, r2
 800462c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004630:	691b      	ldr	r3, [r3, #16]
 8004632:	693a      	ldr	r2, [r7, #16]
 8004634:	0151      	lsls	r1, r2, #5
 8004636:	697a      	ldr	r2, [r7, #20]
 8004638:	440a      	add	r2, r1
 800463a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800463e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004642:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004644:	693b      	ldr	r3, [r7, #16]
 8004646:	015a      	lsls	r2, r3, #5
 8004648:	697b      	ldr	r3, [r7, #20]
 800464a:	4413      	add	r3, r2
 800464c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004650:	691a      	ldr	r2, [r3, #16]
 8004652:	68bb      	ldr	r3, [r7, #8]
 8004654:	695b      	ldr	r3, [r3, #20]
 8004656:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800465a:	6939      	ldr	r1, [r7, #16]
 800465c:	0148      	lsls	r0, r1, #5
 800465e:	6979      	ldr	r1, [r7, #20]
 8004660:	4401      	add	r1, r0
 8004662:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004666:	4313      	orrs	r3, r2
 8004668:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800466a:	79fb      	ldrb	r3, [r7, #7]
 800466c:	2b01      	cmp	r3, #1
 800466e:	d11e      	bne.n	80046ae <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004670:	68bb      	ldr	r3, [r7, #8]
 8004672:	691b      	ldr	r3, [r3, #16]
 8004674:	2b00      	cmp	r3, #0
 8004676:	d009      	beq.n	800468c <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004678:	693b      	ldr	r3, [r7, #16]
 800467a:	015a      	lsls	r2, r3, #5
 800467c:	697b      	ldr	r3, [r7, #20]
 800467e:	4413      	add	r3, r2
 8004680:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004684:	461a      	mov	r2, r3
 8004686:	68bb      	ldr	r3, [r7, #8]
 8004688:	691b      	ldr	r3, [r3, #16]
 800468a:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800468c:	693b      	ldr	r3, [r7, #16]
 800468e:	015a      	lsls	r2, r3, #5
 8004690:	697b      	ldr	r3, [r7, #20]
 8004692:	4413      	add	r3, r2
 8004694:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	693a      	ldr	r2, [r7, #16]
 800469c:	0151      	lsls	r1, r2, #5
 800469e:	697a      	ldr	r2, [r7, #20]
 80046a0:	440a      	add	r2, r1
 80046a2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80046a6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80046aa:	6013      	str	r3, [r2, #0]
 80046ac:	e092      	b.n	80047d4 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80046ae:	693b      	ldr	r3, [r7, #16]
 80046b0:	015a      	lsls	r2, r3, #5
 80046b2:	697b      	ldr	r3, [r7, #20]
 80046b4:	4413      	add	r3, r2
 80046b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	693a      	ldr	r2, [r7, #16]
 80046be:	0151      	lsls	r1, r2, #5
 80046c0:	697a      	ldr	r2, [r7, #20]
 80046c2:	440a      	add	r2, r1
 80046c4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80046c8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80046cc:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80046ce:	68bb      	ldr	r3, [r7, #8]
 80046d0:	695b      	ldr	r3, [r3, #20]
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d07e      	beq.n	80047d4 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80046d6:	697b      	ldr	r3, [r7, #20]
 80046d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80046dc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80046de:	68bb      	ldr	r3, [r7, #8]
 80046e0:	781b      	ldrb	r3, [r3, #0]
 80046e2:	f003 030f 	and.w	r3, r3, #15
 80046e6:	2101      	movs	r1, #1
 80046e8:	fa01 f303 	lsl.w	r3, r1, r3
 80046ec:	6979      	ldr	r1, [r7, #20]
 80046ee:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80046f2:	4313      	orrs	r3, r2
 80046f4:	634b      	str	r3, [r1, #52]	; 0x34
 80046f6:	e06d      	b.n	80047d4 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80046f8:	693b      	ldr	r3, [r7, #16]
 80046fa:	015a      	lsls	r2, r3, #5
 80046fc:	697b      	ldr	r3, [r7, #20]
 80046fe:	4413      	add	r3, r2
 8004700:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004704:	691b      	ldr	r3, [r3, #16]
 8004706:	693a      	ldr	r2, [r7, #16]
 8004708:	0151      	lsls	r1, r2, #5
 800470a:	697a      	ldr	r2, [r7, #20]
 800470c:	440a      	add	r2, r1
 800470e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004712:	0cdb      	lsrs	r3, r3, #19
 8004714:	04db      	lsls	r3, r3, #19
 8004716:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004718:	693b      	ldr	r3, [r7, #16]
 800471a:	015a      	lsls	r2, r3, #5
 800471c:	697b      	ldr	r3, [r7, #20]
 800471e:	4413      	add	r3, r2
 8004720:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004724:	691b      	ldr	r3, [r3, #16]
 8004726:	693a      	ldr	r2, [r7, #16]
 8004728:	0151      	lsls	r1, r2, #5
 800472a:	697a      	ldr	r2, [r7, #20]
 800472c:	440a      	add	r2, r1
 800472e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004732:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004736:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800473a:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800473c:	68bb      	ldr	r3, [r7, #8]
 800473e:	695b      	ldr	r3, [r3, #20]
 8004740:	2b00      	cmp	r3, #0
 8004742:	d003      	beq.n	800474c <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8004744:	68bb      	ldr	r3, [r7, #8]
 8004746:	689a      	ldr	r2, [r3, #8]
 8004748:	68bb      	ldr	r3, [r7, #8]
 800474a:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800474c:	693b      	ldr	r3, [r7, #16]
 800474e:	015a      	lsls	r2, r3, #5
 8004750:	697b      	ldr	r3, [r7, #20]
 8004752:	4413      	add	r3, r2
 8004754:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004758:	691b      	ldr	r3, [r3, #16]
 800475a:	693a      	ldr	r2, [r7, #16]
 800475c:	0151      	lsls	r1, r2, #5
 800475e:	697a      	ldr	r2, [r7, #20]
 8004760:	440a      	add	r2, r1
 8004762:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004766:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800476a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 800476c:	693b      	ldr	r3, [r7, #16]
 800476e:	015a      	lsls	r2, r3, #5
 8004770:	697b      	ldr	r3, [r7, #20]
 8004772:	4413      	add	r3, r2
 8004774:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004778:	691a      	ldr	r2, [r3, #16]
 800477a:	68bb      	ldr	r3, [r7, #8]
 800477c:	689b      	ldr	r3, [r3, #8]
 800477e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004782:	6939      	ldr	r1, [r7, #16]
 8004784:	0148      	lsls	r0, r1, #5
 8004786:	6979      	ldr	r1, [r7, #20]
 8004788:	4401      	add	r1, r0
 800478a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800478e:	4313      	orrs	r3, r2
 8004790:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8004792:	79fb      	ldrb	r3, [r7, #7]
 8004794:	2b01      	cmp	r3, #1
 8004796:	d10d      	bne.n	80047b4 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8004798:	68bb      	ldr	r3, [r7, #8]
 800479a:	68db      	ldr	r3, [r3, #12]
 800479c:	2b00      	cmp	r3, #0
 800479e:	d009      	beq.n	80047b4 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80047a0:	68bb      	ldr	r3, [r7, #8]
 80047a2:	68d9      	ldr	r1, [r3, #12]
 80047a4:	693b      	ldr	r3, [r7, #16]
 80047a6:	015a      	lsls	r2, r3, #5
 80047a8:	697b      	ldr	r3, [r7, #20]
 80047aa:	4413      	add	r3, r2
 80047ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047b0:	460a      	mov	r2, r1
 80047b2:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80047b4:	693b      	ldr	r3, [r7, #16]
 80047b6:	015a      	lsls	r2, r3, #5
 80047b8:	697b      	ldr	r3, [r7, #20]
 80047ba:	4413      	add	r3, r2
 80047bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	693a      	ldr	r2, [r7, #16]
 80047c4:	0151      	lsls	r1, r2, #5
 80047c6:	697a      	ldr	r2, [r7, #20]
 80047c8:	440a      	add	r2, r1
 80047ca:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80047ce:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80047d2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80047d4:	2300      	movs	r3, #0
}
 80047d6:	4618      	mov	r0, r3
 80047d8:	371c      	adds	r7, #28
 80047da:	46bd      	mov	sp, r7
 80047dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e0:	4770      	bx	lr

080047e2 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80047e2:	b480      	push	{r7}
 80047e4:	b089      	sub	sp, #36	; 0x24
 80047e6:	af00      	add	r7, sp, #0
 80047e8:	60f8      	str	r0, [r7, #12]
 80047ea:	60b9      	str	r1, [r7, #8]
 80047ec:	4611      	mov	r1, r2
 80047ee:	461a      	mov	r2, r3
 80047f0:	460b      	mov	r3, r1
 80047f2:	71fb      	strb	r3, [r7, #7]
 80047f4:	4613      	mov	r3, r2
 80047f6:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 80047fc:	68bb      	ldr	r3, [r7, #8]
 80047fe:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8004800:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004804:	2b00      	cmp	r3, #0
 8004806:	d11a      	bne.n	800483e <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8004808:	88bb      	ldrh	r3, [r7, #4]
 800480a:	3303      	adds	r3, #3
 800480c:	089b      	lsrs	r3, r3, #2
 800480e:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8004810:	2300      	movs	r3, #0
 8004812:	61bb      	str	r3, [r7, #24]
 8004814:	e00f      	b.n	8004836 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8004816:	79fb      	ldrb	r3, [r7, #7]
 8004818:	031a      	lsls	r2, r3, #12
 800481a:	697b      	ldr	r3, [r7, #20]
 800481c:	4413      	add	r3, r2
 800481e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004822:	461a      	mov	r2, r3
 8004824:	69fb      	ldr	r3, [r7, #28]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	6013      	str	r3, [r2, #0]
      pSrc++;
 800482a:	69fb      	ldr	r3, [r7, #28]
 800482c:	3304      	adds	r3, #4
 800482e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8004830:	69bb      	ldr	r3, [r7, #24]
 8004832:	3301      	adds	r3, #1
 8004834:	61bb      	str	r3, [r7, #24]
 8004836:	69ba      	ldr	r2, [r7, #24]
 8004838:	693b      	ldr	r3, [r7, #16]
 800483a:	429a      	cmp	r2, r3
 800483c:	d3eb      	bcc.n	8004816 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800483e:	2300      	movs	r3, #0
}
 8004840:	4618      	mov	r0, r3
 8004842:	3724      	adds	r7, #36	; 0x24
 8004844:	46bd      	mov	sp, r7
 8004846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800484a:	4770      	bx	lr

0800484c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800484c:	b480      	push	{r7}
 800484e:	b089      	sub	sp, #36	; 0x24
 8004850:	af00      	add	r7, sp, #0
 8004852:	60f8      	str	r0, [r7, #12]
 8004854:	60b9      	str	r1, [r7, #8]
 8004856:	4613      	mov	r3, r2
 8004858:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 800485e:	68bb      	ldr	r3, [r7, #8]
 8004860:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8004862:	88fb      	ldrh	r3, [r7, #6]
 8004864:	3303      	adds	r3, #3
 8004866:	089b      	lsrs	r3, r3, #2
 8004868:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 800486a:	2300      	movs	r3, #0
 800486c:	61bb      	str	r3, [r7, #24]
 800486e:	e00b      	b.n	8004888 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8004870:	697b      	ldr	r3, [r7, #20]
 8004872:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004876:	681a      	ldr	r2, [r3, #0]
 8004878:	69fb      	ldr	r3, [r7, #28]
 800487a:	601a      	str	r2, [r3, #0]
    pDest++;
 800487c:	69fb      	ldr	r3, [r7, #28]
 800487e:	3304      	adds	r3, #4
 8004880:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8004882:	69bb      	ldr	r3, [r7, #24]
 8004884:	3301      	adds	r3, #1
 8004886:	61bb      	str	r3, [r7, #24]
 8004888:	69ba      	ldr	r2, [r7, #24]
 800488a:	693b      	ldr	r3, [r7, #16]
 800488c:	429a      	cmp	r2, r3
 800488e:	d3ef      	bcc.n	8004870 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8004890:	69fb      	ldr	r3, [r7, #28]
}
 8004892:	4618      	mov	r0, r3
 8004894:	3724      	adds	r7, #36	; 0x24
 8004896:	46bd      	mov	sp, r7
 8004898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800489c:	4770      	bx	lr

0800489e <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800489e:	b480      	push	{r7}
 80048a0:	b085      	sub	sp, #20
 80048a2:	af00      	add	r7, sp, #0
 80048a4:	6078      	str	r0, [r7, #4]
 80048a6:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80048ac:	683b      	ldr	r3, [r7, #0]
 80048ae:	781b      	ldrb	r3, [r3, #0]
 80048b0:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80048b2:	683b      	ldr	r3, [r7, #0]
 80048b4:	785b      	ldrb	r3, [r3, #1]
 80048b6:	2b01      	cmp	r3, #1
 80048b8:	d12c      	bne.n	8004914 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80048ba:	68bb      	ldr	r3, [r7, #8]
 80048bc:	015a      	lsls	r2, r3, #5
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	4413      	add	r3, r2
 80048c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	db12      	blt.n	80048f2 <USB_EPSetStall+0x54>
 80048cc:	68bb      	ldr	r3, [r7, #8]
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d00f      	beq.n	80048f2 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80048d2:	68bb      	ldr	r3, [r7, #8]
 80048d4:	015a      	lsls	r2, r3, #5
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	4413      	add	r3, r2
 80048da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	68ba      	ldr	r2, [r7, #8]
 80048e2:	0151      	lsls	r1, r2, #5
 80048e4:	68fa      	ldr	r2, [r7, #12]
 80048e6:	440a      	add	r2, r1
 80048e8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80048ec:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80048f0:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80048f2:	68bb      	ldr	r3, [r7, #8]
 80048f4:	015a      	lsls	r2, r3, #5
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	4413      	add	r3, r2
 80048fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	68ba      	ldr	r2, [r7, #8]
 8004902:	0151      	lsls	r1, r2, #5
 8004904:	68fa      	ldr	r2, [r7, #12]
 8004906:	440a      	add	r2, r1
 8004908:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800490c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004910:	6013      	str	r3, [r2, #0]
 8004912:	e02b      	b.n	800496c <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004914:	68bb      	ldr	r3, [r7, #8]
 8004916:	015a      	lsls	r2, r3, #5
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	4413      	add	r3, r2
 800491c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	2b00      	cmp	r3, #0
 8004924:	db12      	blt.n	800494c <USB_EPSetStall+0xae>
 8004926:	68bb      	ldr	r3, [r7, #8]
 8004928:	2b00      	cmp	r3, #0
 800492a:	d00f      	beq.n	800494c <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800492c:	68bb      	ldr	r3, [r7, #8]
 800492e:	015a      	lsls	r2, r3, #5
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	4413      	add	r3, r2
 8004934:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	68ba      	ldr	r2, [r7, #8]
 800493c:	0151      	lsls	r1, r2, #5
 800493e:	68fa      	ldr	r2, [r7, #12]
 8004940:	440a      	add	r2, r1
 8004942:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004946:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800494a:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800494c:	68bb      	ldr	r3, [r7, #8]
 800494e:	015a      	lsls	r2, r3, #5
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	4413      	add	r3, r2
 8004954:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	68ba      	ldr	r2, [r7, #8]
 800495c:	0151      	lsls	r1, r2, #5
 800495e:	68fa      	ldr	r2, [r7, #12]
 8004960:	440a      	add	r2, r1
 8004962:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004966:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800496a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800496c:	2300      	movs	r3, #0
}
 800496e:	4618      	mov	r0, r3
 8004970:	3714      	adds	r7, #20
 8004972:	46bd      	mov	sp, r7
 8004974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004978:	4770      	bx	lr

0800497a <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800497a:	b480      	push	{r7}
 800497c:	b085      	sub	sp, #20
 800497e:	af00      	add	r7, sp, #0
 8004980:	6078      	str	r0, [r7, #4]
 8004982:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004988:	683b      	ldr	r3, [r7, #0]
 800498a:	781b      	ldrb	r3, [r3, #0]
 800498c:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800498e:	683b      	ldr	r3, [r7, #0]
 8004990:	785b      	ldrb	r3, [r3, #1]
 8004992:	2b01      	cmp	r3, #1
 8004994:	d128      	bne.n	80049e8 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004996:	68bb      	ldr	r3, [r7, #8]
 8004998:	015a      	lsls	r2, r3, #5
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	4413      	add	r3, r2
 800499e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	68ba      	ldr	r2, [r7, #8]
 80049a6:	0151      	lsls	r1, r2, #5
 80049a8:	68fa      	ldr	r2, [r7, #12]
 80049aa:	440a      	add	r2, r1
 80049ac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80049b0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80049b4:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80049b6:	683b      	ldr	r3, [r7, #0]
 80049b8:	78db      	ldrb	r3, [r3, #3]
 80049ba:	2b03      	cmp	r3, #3
 80049bc:	d003      	beq.n	80049c6 <USB_EPClearStall+0x4c>
 80049be:	683b      	ldr	r3, [r7, #0]
 80049c0:	78db      	ldrb	r3, [r3, #3]
 80049c2:	2b02      	cmp	r3, #2
 80049c4:	d138      	bne.n	8004a38 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80049c6:	68bb      	ldr	r3, [r7, #8]
 80049c8:	015a      	lsls	r2, r3, #5
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	4413      	add	r3, r2
 80049ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	68ba      	ldr	r2, [r7, #8]
 80049d6:	0151      	lsls	r1, r2, #5
 80049d8:	68fa      	ldr	r2, [r7, #12]
 80049da:	440a      	add	r2, r1
 80049dc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80049e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80049e4:	6013      	str	r3, [r2, #0]
 80049e6:	e027      	b.n	8004a38 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80049e8:	68bb      	ldr	r3, [r7, #8]
 80049ea:	015a      	lsls	r2, r3, #5
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	4413      	add	r3, r2
 80049f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	68ba      	ldr	r2, [r7, #8]
 80049f8:	0151      	lsls	r1, r2, #5
 80049fa:	68fa      	ldr	r2, [r7, #12]
 80049fc:	440a      	add	r2, r1
 80049fe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004a02:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004a06:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004a08:	683b      	ldr	r3, [r7, #0]
 8004a0a:	78db      	ldrb	r3, [r3, #3]
 8004a0c:	2b03      	cmp	r3, #3
 8004a0e:	d003      	beq.n	8004a18 <USB_EPClearStall+0x9e>
 8004a10:	683b      	ldr	r3, [r7, #0]
 8004a12:	78db      	ldrb	r3, [r3, #3]
 8004a14:	2b02      	cmp	r3, #2
 8004a16:	d10f      	bne.n	8004a38 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004a18:	68bb      	ldr	r3, [r7, #8]
 8004a1a:	015a      	lsls	r2, r3, #5
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	4413      	add	r3, r2
 8004a20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	68ba      	ldr	r2, [r7, #8]
 8004a28:	0151      	lsls	r1, r2, #5
 8004a2a:	68fa      	ldr	r2, [r7, #12]
 8004a2c:	440a      	add	r2, r1
 8004a2e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004a32:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a36:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8004a38:	2300      	movs	r3, #0
}
 8004a3a:	4618      	mov	r0, r3
 8004a3c:	3714      	adds	r7, #20
 8004a3e:	46bd      	mov	sp, r7
 8004a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a44:	4770      	bx	lr

08004a46 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8004a46:	b480      	push	{r7}
 8004a48:	b085      	sub	sp, #20
 8004a4a:	af00      	add	r7, sp, #0
 8004a4c:	6078      	str	r0, [r7, #4]
 8004a4e:	460b      	mov	r3, r1
 8004a50:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	68fa      	ldr	r2, [r7, #12]
 8004a60:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004a64:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8004a68:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a70:	681a      	ldr	r2, [r3, #0]
 8004a72:	78fb      	ldrb	r3, [r7, #3]
 8004a74:	011b      	lsls	r3, r3, #4
 8004a76:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8004a7a:	68f9      	ldr	r1, [r7, #12]
 8004a7c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004a80:	4313      	orrs	r3, r2
 8004a82:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8004a84:	2300      	movs	r3, #0
}
 8004a86:	4618      	mov	r0, r3
 8004a88:	3714      	adds	r7, #20
 8004a8a:	46bd      	mov	sp, r7
 8004a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a90:	4770      	bx	lr

08004a92 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004a92:	b480      	push	{r7}
 8004a94:	b085      	sub	sp, #20
 8004a96:	af00      	add	r7, sp, #0
 8004a98:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	68fa      	ldr	r2, [r7, #12]
 8004aa8:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004aac:	f023 0303 	bic.w	r3, r3, #3
 8004ab0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ab8:	685b      	ldr	r3, [r3, #4]
 8004aba:	68fa      	ldr	r2, [r7, #12]
 8004abc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004ac0:	f023 0302 	bic.w	r3, r3, #2
 8004ac4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004ac6:	2300      	movs	r3, #0
}
 8004ac8:	4618      	mov	r0, r3
 8004aca:	3714      	adds	r7, #20
 8004acc:	46bd      	mov	sp, r7
 8004ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad2:	4770      	bx	lr

08004ad4 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004ad4:	b480      	push	{r7}
 8004ad6:	b085      	sub	sp, #20
 8004ad8:	af00      	add	r7, sp, #0
 8004ada:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	68fa      	ldr	r2, [r7, #12]
 8004aea:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004aee:	f023 0303 	bic.w	r3, r3, #3
 8004af2:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004afa:	685b      	ldr	r3, [r3, #4]
 8004afc:	68fa      	ldr	r2, [r7, #12]
 8004afe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004b02:	f043 0302 	orr.w	r3, r3, #2
 8004b06:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004b08:	2300      	movs	r3, #0
}
 8004b0a:	4618      	mov	r0, r3
 8004b0c:	3714      	adds	r7, #20
 8004b0e:	46bd      	mov	sp, r7
 8004b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b14:	4770      	bx	lr

08004b16 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8004b16:	b480      	push	{r7}
 8004b18:	b085      	sub	sp, #20
 8004b1a:	af00      	add	r7, sp, #0
 8004b1c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	695b      	ldr	r3, [r3, #20]
 8004b22:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	699b      	ldr	r3, [r3, #24]
 8004b28:	68fa      	ldr	r2, [r7, #12]
 8004b2a:	4013      	ands	r3, r2
 8004b2c:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8004b2e:	68fb      	ldr	r3, [r7, #12]
}
 8004b30:	4618      	mov	r0, r3
 8004b32:	3714      	adds	r7, #20
 8004b34:	46bd      	mov	sp, r7
 8004b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b3a:	4770      	bx	lr

08004b3c <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8004b3c:	b480      	push	{r7}
 8004b3e:	b085      	sub	sp, #20
 8004b40:	af00      	add	r7, sp, #0
 8004b42:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b4e:	699b      	ldr	r3, [r3, #24]
 8004b50:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b58:	69db      	ldr	r3, [r3, #28]
 8004b5a:	68ba      	ldr	r2, [r7, #8]
 8004b5c:	4013      	ands	r3, r2
 8004b5e:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8004b60:	68bb      	ldr	r3, [r7, #8]
 8004b62:	0c1b      	lsrs	r3, r3, #16
}
 8004b64:	4618      	mov	r0, r3
 8004b66:	3714      	adds	r7, #20
 8004b68:	46bd      	mov	sp, r7
 8004b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b6e:	4770      	bx	lr

08004b70 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8004b70:	b480      	push	{r7}
 8004b72:	b085      	sub	sp, #20
 8004b74:	af00      	add	r7, sp, #0
 8004b76:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b82:	699b      	ldr	r3, [r3, #24]
 8004b84:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b8c:	69db      	ldr	r3, [r3, #28]
 8004b8e:	68ba      	ldr	r2, [r7, #8]
 8004b90:	4013      	ands	r3, r2
 8004b92:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8004b94:	68bb      	ldr	r3, [r7, #8]
 8004b96:	b29b      	uxth	r3, r3
}
 8004b98:	4618      	mov	r0, r3
 8004b9a:	3714      	adds	r7, #20
 8004b9c:	46bd      	mov	sp, r7
 8004b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba2:	4770      	bx	lr

08004ba4 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8004ba4:	b480      	push	{r7}
 8004ba6:	b085      	sub	sp, #20
 8004ba8:	af00      	add	r7, sp, #0
 8004baa:	6078      	str	r0, [r7, #4]
 8004bac:	460b      	mov	r3, r1
 8004bae:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8004bb4:	78fb      	ldrb	r3, [r7, #3]
 8004bb6:	015a      	lsls	r2, r3, #5
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	4413      	add	r3, r2
 8004bbc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004bc0:	689b      	ldr	r3, [r3, #8]
 8004bc2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004bca:	695b      	ldr	r3, [r3, #20]
 8004bcc:	68ba      	ldr	r2, [r7, #8]
 8004bce:	4013      	ands	r3, r2
 8004bd0:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004bd2:	68bb      	ldr	r3, [r7, #8]
}
 8004bd4:	4618      	mov	r0, r3
 8004bd6:	3714      	adds	r7, #20
 8004bd8:	46bd      	mov	sp, r7
 8004bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bde:	4770      	bx	lr

08004be0 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8004be0:	b480      	push	{r7}
 8004be2:	b087      	sub	sp, #28
 8004be4:	af00      	add	r7, sp, #0
 8004be6:	6078      	str	r0, [r7, #4]
 8004be8:	460b      	mov	r3, r1
 8004bea:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 8004bf0:	697b      	ldr	r3, [r7, #20]
 8004bf2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004bf6:	691b      	ldr	r3, [r3, #16]
 8004bf8:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8004bfa:	697b      	ldr	r3, [r7, #20]
 8004bfc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c02:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8004c04:	78fb      	ldrb	r3, [r7, #3]
 8004c06:	f003 030f 	and.w	r3, r3, #15
 8004c0a:	68fa      	ldr	r2, [r7, #12]
 8004c0c:	fa22 f303 	lsr.w	r3, r2, r3
 8004c10:	01db      	lsls	r3, r3, #7
 8004c12:	b2db      	uxtb	r3, r3
 8004c14:	693a      	ldr	r2, [r7, #16]
 8004c16:	4313      	orrs	r3, r2
 8004c18:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8004c1a:	78fb      	ldrb	r3, [r7, #3]
 8004c1c:	015a      	lsls	r2, r3, #5
 8004c1e:	697b      	ldr	r3, [r7, #20]
 8004c20:	4413      	add	r3, r2
 8004c22:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c26:	689b      	ldr	r3, [r3, #8]
 8004c28:	693a      	ldr	r2, [r7, #16]
 8004c2a:	4013      	ands	r3, r2
 8004c2c:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004c2e:	68bb      	ldr	r3, [r7, #8]
}
 8004c30:	4618      	mov	r0, r3
 8004c32:	371c      	adds	r7, #28
 8004c34:	46bd      	mov	sp, r7
 8004c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c3a:	4770      	bx	lr

08004c3c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8004c3c:	b480      	push	{r7}
 8004c3e:	b083      	sub	sp, #12
 8004c40:	af00      	add	r7, sp, #0
 8004c42:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	695b      	ldr	r3, [r3, #20]
 8004c48:	f003 0301 	and.w	r3, r3, #1
}
 8004c4c:	4618      	mov	r0, r3
 8004c4e:	370c      	adds	r7, #12
 8004c50:	46bd      	mov	sp, r7
 8004c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c56:	4770      	bx	lr

08004c58 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8004c58:	b480      	push	{r7}
 8004c5a:	b085      	sub	sp, #20
 8004c5c:	af00      	add	r7, sp, #0
 8004c5e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	68fa      	ldr	r2, [r7, #12]
 8004c6e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004c72:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8004c76:	f023 0307 	bic.w	r3, r3, #7
 8004c7a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c82:	685b      	ldr	r3, [r3, #4]
 8004c84:	68fa      	ldr	r2, [r7, #12]
 8004c86:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004c8a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c8e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004c90:	2300      	movs	r3, #0
}
 8004c92:	4618      	mov	r0, r3
 8004c94:	3714      	adds	r7, #20
 8004c96:	46bd      	mov	sp, r7
 8004c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c9c:	4770      	bx	lr
	...

08004ca0 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8004ca0:	b480      	push	{r7}
 8004ca2:	b087      	sub	sp, #28
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	60f8      	str	r0, [r7, #12]
 8004ca8:	460b      	mov	r3, r1
 8004caa:	607a      	str	r2, [r7, #4]
 8004cac:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	333c      	adds	r3, #60	; 0x3c
 8004cb6:	3304      	adds	r3, #4
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8004cbc:	693b      	ldr	r3, [r7, #16]
 8004cbe:	4a26      	ldr	r2, [pc, #152]	; (8004d58 <USB_EP0_OutStart+0xb8>)
 8004cc0:	4293      	cmp	r3, r2
 8004cc2:	d90a      	bls.n	8004cda <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004cc4:	697b      	ldr	r3, [r7, #20]
 8004cc6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004cd0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004cd4:	d101      	bne.n	8004cda <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8004cd6:	2300      	movs	r3, #0
 8004cd8:	e037      	b.n	8004d4a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8004cda:	697b      	ldr	r3, [r7, #20]
 8004cdc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ce0:	461a      	mov	r2, r3
 8004ce2:	2300      	movs	r3, #0
 8004ce4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004ce6:	697b      	ldr	r3, [r7, #20]
 8004ce8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004cec:	691b      	ldr	r3, [r3, #16]
 8004cee:	697a      	ldr	r2, [r7, #20]
 8004cf0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004cf4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004cf8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8004cfa:	697b      	ldr	r3, [r7, #20]
 8004cfc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d00:	691b      	ldr	r3, [r3, #16]
 8004d02:	697a      	ldr	r2, [r7, #20]
 8004d04:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004d08:	f043 0318 	orr.w	r3, r3, #24
 8004d0c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8004d0e:	697b      	ldr	r3, [r7, #20]
 8004d10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d14:	691b      	ldr	r3, [r3, #16]
 8004d16:	697a      	ldr	r2, [r7, #20]
 8004d18:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004d1c:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8004d20:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8004d22:	7afb      	ldrb	r3, [r7, #11]
 8004d24:	2b01      	cmp	r3, #1
 8004d26:	d10f      	bne.n	8004d48 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8004d28:	697b      	ldr	r3, [r7, #20]
 8004d2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d2e:	461a      	mov	r2, r3
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8004d34:	697b      	ldr	r3, [r7, #20]
 8004d36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	697a      	ldr	r2, [r7, #20]
 8004d3e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004d42:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8004d46:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004d48:	2300      	movs	r3, #0
}
 8004d4a:	4618      	mov	r0, r3
 8004d4c:	371c      	adds	r7, #28
 8004d4e:	46bd      	mov	sp, r7
 8004d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d54:	4770      	bx	lr
 8004d56:	bf00      	nop
 8004d58:	4f54300a 	.word	0x4f54300a

08004d5c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004d5c:	b480      	push	{r7}
 8004d5e:	b085      	sub	sp, #20
 8004d60:	af00      	add	r7, sp, #0
 8004d62:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8004d64:	2300      	movs	r3, #0
 8004d66:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	3301      	adds	r3, #1
 8004d6c:	60fb      	str	r3, [r7, #12]
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	4a13      	ldr	r2, [pc, #76]	; (8004dc0 <USB_CoreReset+0x64>)
 8004d72:	4293      	cmp	r3, r2
 8004d74:	d901      	bls.n	8004d7a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004d76:	2303      	movs	r3, #3
 8004d78:	e01b      	b.n	8004db2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	691b      	ldr	r3, [r3, #16]
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	daf2      	bge.n	8004d68 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004d82:	2300      	movs	r3, #0
 8004d84:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	691b      	ldr	r3, [r3, #16]
 8004d8a:	f043 0201 	orr.w	r2, r3, #1
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	3301      	adds	r3, #1
 8004d96:	60fb      	str	r3, [r7, #12]
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	4a09      	ldr	r2, [pc, #36]	; (8004dc0 <USB_CoreReset+0x64>)
 8004d9c:	4293      	cmp	r3, r2
 8004d9e:	d901      	bls.n	8004da4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004da0:	2303      	movs	r3, #3
 8004da2:	e006      	b.n	8004db2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	691b      	ldr	r3, [r3, #16]
 8004da8:	f003 0301 	and.w	r3, r3, #1
 8004dac:	2b01      	cmp	r3, #1
 8004dae:	d0f0      	beq.n	8004d92 <USB_CoreReset+0x36>

  return HAL_OK;
 8004db0:	2300      	movs	r3, #0
}
 8004db2:	4618      	mov	r0, r3
 8004db4:	3714      	adds	r7, #20
 8004db6:	46bd      	mov	sp, r7
 8004db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dbc:	4770      	bx	lr
 8004dbe:	bf00      	nop
 8004dc0:	00030d40 	.word	0x00030d40

08004dc4 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004dc4:	b580      	push	{r7, lr}
 8004dc6:	b084      	sub	sp, #16
 8004dc8:	af00      	add	r7, sp, #0
 8004dca:	6078      	str	r0, [r7, #4]
 8004dcc:	460b      	mov	r3, r1
 8004dce:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8004dd0:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8004dd4:	f002 f934 	bl	8007040 <malloc>
 8004dd8:	4603      	mov	r3, r0
 8004dda:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d105      	bne.n	8004dee <USBD_CDC_Init+0x2a>
  {
    pdev->pClassData = NULL;
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	2200      	movs	r2, #0
 8004de6:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8004dea:	2302      	movs	r3, #2
 8004dec:	e066      	b.n	8004ebc <USBD_CDC_Init+0xf8>
  }

  pdev->pClassData = (void *)hcdc;
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	68fa      	ldr	r2, [r7, #12]
 8004df2:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	7c1b      	ldrb	r3, [r3, #16]
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d119      	bne.n	8004e32 <USBD_CDC_Init+0x6e>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8004dfe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004e02:	2202      	movs	r2, #2
 8004e04:	2181      	movs	r1, #129	; 0x81
 8004e06:	6878      	ldr	r0, [r7, #4]
 8004e08:	f001 ffa1 	bl	8006d4e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	2201      	movs	r2, #1
 8004e10:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8004e12:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004e16:	2202      	movs	r2, #2
 8004e18:	2101      	movs	r1, #1
 8004e1a:	6878      	ldr	r0, [r7, #4]
 8004e1c:	f001 ff97 	bl	8006d4e <USBD_LL_OpenEP>
                          CDC_DATA_HS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	2201      	movs	r2, #1
 8004e24:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CDC CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	2210      	movs	r2, #16
 8004e2c:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8004e30:	e016      	b.n	8004e60 <USBD_CDC_Init+0x9c>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8004e32:	2340      	movs	r3, #64	; 0x40
 8004e34:	2202      	movs	r2, #2
 8004e36:	2181      	movs	r1, #129	; 0x81
 8004e38:	6878      	ldr	r0, [r7, #4]
 8004e3a:	f001 ff88 	bl	8006d4e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	2201      	movs	r2, #1
 8004e42:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8004e44:	2340      	movs	r3, #64	; 0x40
 8004e46:	2202      	movs	r2, #2
 8004e48:	2101      	movs	r1, #1
 8004e4a:	6878      	ldr	r0, [r7, #4]
 8004e4c:	f001 ff7f 	bl	8006d4e <USBD_LL_OpenEP>
                          CDC_DATA_FS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	2201      	movs	r2, #1
 8004e54:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	2210      	movs	r2, #16
 8004e5c:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8004e60:	2308      	movs	r3, #8
 8004e62:	2203      	movs	r2, #3
 8004e64:	2182      	movs	r1, #130	; 0x82
 8004e66:	6878      	ldr	r0, [r7, #4]
 8004e68:	f001 ff71 	bl	8006d4e <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	2201      	movs	r2, #1
 8004e70:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	2200      	movs	r2, #0
 8004e82:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	2200      	movs	r2, #0
 8004e8a:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	7c1b      	ldrb	r3, [r3, #16]
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d109      	bne.n	8004eaa <USBD_CDC_Init+0xe6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004e9c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004ea0:	2101      	movs	r1, #1
 8004ea2:	6878      	ldr	r0, [r7, #4]
 8004ea4:	f002 f842 	bl	8006f2c <USBD_LL_PrepareReceive>
 8004ea8:	e007      	b.n	8004eba <USBD_CDC_Init+0xf6>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004eb0:	2340      	movs	r3, #64	; 0x40
 8004eb2:	2101      	movs	r1, #1
 8004eb4:	6878      	ldr	r0, [r7, #4]
 8004eb6:	f002 f839 	bl	8006f2c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8004eba:	2300      	movs	r3, #0
}
 8004ebc:	4618      	mov	r0, r3
 8004ebe:	3710      	adds	r7, #16
 8004ec0:	46bd      	mov	sp, r7
 8004ec2:	bd80      	pop	{r7, pc}

08004ec4 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004ec4:	b580      	push	{r7, lr}
 8004ec6:	b084      	sub	sp, #16
 8004ec8:	af00      	add	r7, sp, #0
 8004eca:	6078      	str	r0, [r7, #4]
 8004ecc:	460b      	mov	r3, r1
 8004ece:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  uint8_t ret = 0U;
 8004ed0:	2300      	movs	r3, #0
 8004ed2:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8004ed4:	2181      	movs	r1, #129	; 0x81
 8004ed6:	6878      	ldr	r0, [r7, #4]
 8004ed8:	f001 ff5f 	bl	8006d9a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	2200      	movs	r2, #0
 8004ee0:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8004ee2:	2101      	movs	r1, #1
 8004ee4:	6878      	ldr	r0, [r7, #4]
 8004ee6:	f001 ff58 	bl	8006d9a <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	2200      	movs	r2, #0
 8004eee:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8004ef2:	2182      	movs	r1, #130	; 0x82
 8004ef4:	6878      	ldr	r0, [r7, #4]
 8004ef6:	f001 ff50 	bl	8006d9a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	2200      	movs	r2, #0
 8004efe:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	2200      	movs	r2, #0
 8004f06:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d00e      	beq.n	8004f32 <USBD_CDC_DeInit+0x6e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004f1a:	685b      	ldr	r3, [r3, #4]
 8004f1c:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004f24:	4618      	mov	r0, r3
 8004f26:	f002 f893 	bl	8007050 <free>
    pdev->pClassData = NULL;
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	2200      	movs	r2, #0
 8004f2e:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return ret;
 8004f32:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f34:	4618      	mov	r0, r3
 8004f36:	3710      	adds	r7, #16
 8004f38:	46bd      	mov	sp, r7
 8004f3a:	bd80      	pop	{r7, pc}

08004f3c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8004f3c:	b580      	push	{r7, lr}
 8004f3e:	b086      	sub	sp, #24
 8004f40:	af00      	add	r7, sp, #0
 8004f42:	6078      	str	r0, [r7, #4]
 8004f44:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004f4c:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8004f4e:	2300      	movs	r3, #0
 8004f50:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8004f52:	2300      	movs	r3, #0
 8004f54:	81bb      	strh	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 8004f56:	2300      	movs	r3, #0
 8004f58:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004f5a:	683b      	ldr	r3, [r7, #0]
 8004f5c:	781b      	ldrb	r3, [r3, #0]
 8004f5e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d03a      	beq.n	8004fdc <USBD_CDC_Setup+0xa0>
 8004f66:	2b20      	cmp	r3, #32
 8004f68:	f040 8097 	bne.w	800509a <USBD_CDC_Setup+0x15e>
  {
  case USB_REQ_TYPE_CLASS:
    if (req->wLength != 0U)
 8004f6c:	683b      	ldr	r3, [r7, #0]
 8004f6e:	88db      	ldrh	r3, [r3, #6]
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d029      	beq.n	8004fc8 <USBD_CDC_Setup+0x8c>
    {
      if ((req->bmRequest & 0x80U) != 0U)
 8004f74:	683b      	ldr	r3, [r7, #0]
 8004f76:	781b      	ldrb	r3, [r3, #0]
 8004f78:	b25b      	sxtb	r3, r3
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	da11      	bge.n	8004fa2 <USBD_CDC_Setup+0x66>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004f84:	689b      	ldr	r3, [r3, #8]
 8004f86:	683a      	ldr	r2, [r7, #0]
 8004f88:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)hcdc->data,
 8004f8a:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8004f8c:	683a      	ldr	r2, [r7, #0]
 8004f8e:	88d2      	ldrh	r2, [r2, #6]
 8004f90:	4798      	blx	r3
                                                          req->wLength);

          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, req->wLength);
 8004f92:	6939      	ldr	r1, [r7, #16]
 8004f94:	683b      	ldr	r3, [r7, #0]
 8004f96:	88db      	ldrh	r3, [r3, #6]
 8004f98:	461a      	mov	r2, r3
 8004f9a:	6878      	ldr	r0, [r7, #4]
 8004f9c:	f001 fa9d 	bl	80064da <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)req, 0U);
    }
    break;
 8004fa0:	e082      	b.n	80050a8 <USBD_CDC_Setup+0x16c>
        hcdc->CmdOpCode = req->bRequest;
 8004fa2:	683b      	ldr	r3, [r7, #0]
 8004fa4:	785a      	ldrb	r2, [r3, #1]
 8004fa6:	693b      	ldr	r3, [r7, #16]
 8004fa8:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 8004fac:	683b      	ldr	r3, [r7, #0]
 8004fae:	88db      	ldrh	r3, [r3, #6]
 8004fb0:	b2da      	uxtb	r2, r3
 8004fb2:	693b      	ldr	r3, [r7, #16]
 8004fb4:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8004fb8:	6939      	ldr	r1, [r7, #16]
 8004fba:	683b      	ldr	r3, [r7, #0]
 8004fbc:	88db      	ldrh	r3, [r3, #6]
 8004fbe:	461a      	mov	r2, r3
 8004fc0:	6878      	ldr	r0, [r7, #4]
 8004fc2:	f001 fab6 	bl	8006532 <USBD_CtlPrepareRx>
    break;
 8004fc6:	e06f      	b.n	80050a8 <USBD_CDC_Setup+0x16c>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004fce:	689b      	ldr	r3, [r3, #8]
 8004fd0:	683a      	ldr	r2, [r7, #0]
 8004fd2:	7850      	ldrb	r0, [r2, #1]
 8004fd4:	2200      	movs	r2, #0
 8004fd6:	6839      	ldr	r1, [r7, #0]
 8004fd8:	4798      	blx	r3
    break;
 8004fda:	e065      	b.n	80050a8 <USBD_CDC_Setup+0x16c>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8004fdc:	683b      	ldr	r3, [r7, #0]
 8004fde:	785b      	ldrb	r3, [r3, #1]
 8004fe0:	2b0b      	cmp	r3, #11
 8004fe2:	d84f      	bhi.n	8005084 <USBD_CDC_Setup+0x148>
 8004fe4:	a201      	add	r2, pc, #4	; (adr r2, 8004fec <USBD_CDC_Setup+0xb0>)
 8004fe6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fea:	bf00      	nop
 8004fec:	0800501d 	.word	0x0800501d
 8004ff0:	08005093 	.word	0x08005093
 8004ff4:	08005085 	.word	0x08005085
 8004ff8:	08005085 	.word	0x08005085
 8004ffc:	08005085 	.word	0x08005085
 8005000:	08005085 	.word	0x08005085
 8005004:	08005085 	.word	0x08005085
 8005008:	08005085 	.word	0x08005085
 800500c:	08005085 	.word	0x08005085
 8005010:	08005085 	.word	0x08005085
 8005014:	08005045 	.word	0x08005045
 8005018:	0800506d 	.word	0x0800506d
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005022:	2b03      	cmp	r3, #3
 8005024:	d107      	bne.n	8005036 <USBD_CDC_Setup+0xfa>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8005026:	f107 030c 	add.w	r3, r7, #12
 800502a:	2202      	movs	r2, #2
 800502c:	4619      	mov	r1, r3
 800502e:	6878      	ldr	r0, [r7, #4]
 8005030:	f001 fa53 	bl	80064da <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8005034:	e030      	b.n	8005098 <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 8005036:	6839      	ldr	r1, [r7, #0]
 8005038:	6878      	ldr	r0, [r7, #4]
 800503a:	f001 f9dd 	bl	80063f8 <USBD_CtlError>
        ret = USBD_FAIL;
 800503e:	2303      	movs	r3, #3
 8005040:	75fb      	strb	r3, [r7, #23]
      break;
 8005042:	e029      	b.n	8005098 <USBD_CDC_Setup+0x15c>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800504a:	2b03      	cmp	r3, #3
 800504c:	d107      	bne.n	800505e <USBD_CDC_Setup+0x122>
      {
        (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800504e:	f107 030f 	add.w	r3, r7, #15
 8005052:	2201      	movs	r2, #1
 8005054:	4619      	mov	r1, r3
 8005056:	6878      	ldr	r0, [r7, #4]
 8005058:	f001 fa3f 	bl	80064da <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 800505c:	e01c      	b.n	8005098 <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 800505e:	6839      	ldr	r1, [r7, #0]
 8005060:	6878      	ldr	r0, [r7, #4]
 8005062:	f001 f9c9 	bl	80063f8 <USBD_CtlError>
        ret = USBD_FAIL;
 8005066:	2303      	movs	r3, #3
 8005068:	75fb      	strb	r3, [r7, #23]
      break;
 800506a:	e015      	b.n	8005098 <USBD_CDC_Setup+0x15c>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005072:	2b03      	cmp	r3, #3
 8005074:	d00f      	beq.n	8005096 <USBD_CDC_Setup+0x15a>
      {
        USBD_CtlError(pdev, req);
 8005076:	6839      	ldr	r1, [r7, #0]
 8005078:	6878      	ldr	r0, [r7, #4]
 800507a:	f001 f9bd 	bl	80063f8 <USBD_CtlError>
        ret = USBD_FAIL;
 800507e:	2303      	movs	r3, #3
 8005080:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8005082:	e008      	b.n	8005096 <USBD_CDC_Setup+0x15a>

    case USB_REQ_CLEAR_FEATURE:
      break;

    default:
      USBD_CtlError(pdev, req);
 8005084:	6839      	ldr	r1, [r7, #0]
 8005086:	6878      	ldr	r0, [r7, #4]
 8005088:	f001 f9b6 	bl	80063f8 <USBD_CtlError>
      ret = USBD_FAIL;
 800508c:	2303      	movs	r3, #3
 800508e:	75fb      	strb	r3, [r7, #23]
      break;
 8005090:	e002      	b.n	8005098 <USBD_CDC_Setup+0x15c>
      break;
 8005092:	bf00      	nop
 8005094:	e008      	b.n	80050a8 <USBD_CDC_Setup+0x16c>
      break;
 8005096:	bf00      	nop
    }
    break;
 8005098:	e006      	b.n	80050a8 <USBD_CDC_Setup+0x16c>

  default:
    USBD_CtlError(pdev, req);
 800509a:	6839      	ldr	r1, [r7, #0]
 800509c:	6878      	ldr	r0, [r7, #4]
 800509e:	f001 f9ab 	bl	80063f8 <USBD_CtlError>
    ret = USBD_FAIL;
 80050a2:	2303      	movs	r3, #3
 80050a4:	75fb      	strb	r3, [r7, #23]
    break;
 80050a6:	bf00      	nop
  }

  return (uint8_t)ret;
 80050a8:	7dfb      	ldrb	r3, [r7, #23]
}
 80050aa:	4618      	mov	r0, r3
 80050ac:	3718      	adds	r7, #24
 80050ae:	46bd      	mov	sp, r7
 80050b0:	bd80      	pop	{r7, pc}
 80050b2:	bf00      	nop

080050b4 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80050b4:	b580      	push	{r7, lr}
 80050b6:	b084      	sub	sp, #16
 80050b8:	af00      	add	r7, sp, #0
 80050ba:	6078      	str	r0, [r7, #4]
 80050bc:	460b      	mov	r3, r1
 80050be:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80050c6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d101      	bne.n	80050d6 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80050d2:	2303      	movs	r3, #3
 80050d4:	e049      	b.n	800516a <USBD_CDC_DataIn+0xb6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80050dc:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 80050de:	78fa      	ldrb	r2, [r7, #3]
 80050e0:	6879      	ldr	r1, [r7, #4]
 80050e2:	4613      	mov	r3, r2
 80050e4:	009b      	lsls	r3, r3, #2
 80050e6:	4413      	add	r3, r2
 80050e8:	009b      	lsls	r3, r3, #2
 80050ea:	440b      	add	r3, r1
 80050ec:	3318      	adds	r3, #24
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d029      	beq.n	8005148 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80050f4:	78fa      	ldrb	r2, [r7, #3]
 80050f6:	6879      	ldr	r1, [r7, #4]
 80050f8:	4613      	mov	r3, r2
 80050fa:	009b      	lsls	r3, r3, #2
 80050fc:	4413      	add	r3, r2
 80050fe:	009b      	lsls	r3, r3, #2
 8005100:	440b      	add	r3, r1
 8005102:	3318      	adds	r3, #24
 8005104:	681a      	ldr	r2, [r3, #0]
 8005106:	78f9      	ldrb	r1, [r7, #3]
 8005108:	68f8      	ldr	r0, [r7, #12]
 800510a:	460b      	mov	r3, r1
 800510c:	00db      	lsls	r3, r3, #3
 800510e:	1a5b      	subs	r3, r3, r1
 8005110:	009b      	lsls	r3, r3, #2
 8005112:	4403      	add	r3, r0
 8005114:	3344      	adds	r3, #68	; 0x44
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	fbb2 f1f3 	udiv	r1, r2, r3
 800511c:	fb03 f301 	mul.w	r3, r3, r1
 8005120:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8005122:	2b00      	cmp	r3, #0
 8005124:	d110      	bne.n	8005148 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8005126:	78fa      	ldrb	r2, [r7, #3]
 8005128:	6879      	ldr	r1, [r7, #4]
 800512a:	4613      	mov	r3, r2
 800512c:	009b      	lsls	r3, r3, #2
 800512e:	4413      	add	r3, r2
 8005130:	009b      	lsls	r3, r3, #2
 8005132:	440b      	add	r3, r1
 8005134:	3318      	adds	r3, #24
 8005136:	2200      	movs	r2, #0
 8005138:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800513a:	78f9      	ldrb	r1, [r7, #3]
 800513c:	2300      	movs	r3, #0
 800513e:	2200      	movs	r2, #0
 8005140:	6878      	ldr	r0, [r7, #4]
 8005142:	f001 fed2 	bl	8006eea <USBD_LL_Transmit>
 8005146:	e00f      	b.n	8005168 <USBD_CDC_DataIn+0xb4>
  }
  else
  {
    hcdc->TxState = 0U;
 8005148:	68bb      	ldr	r3, [r7, #8]
 800514a:	2200      	movs	r2, #0
 800514c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005156:	691b      	ldr	r3, [r3, #16]
 8005158:	68ba      	ldr	r2, [r7, #8]
 800515a:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800515e:	68ba      	ldr	r2, [r7, #8]
 8005160:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8005164:	78fa      	ldrb	r2, [r7, #3]
 8005166:	4798      	blx	r3
  }

  return (uint8_t)USBD_OK;
 8005168:	2300      	movs	r3, #0
}
 800516a:	4618      	mov	r0, r3
 800516c:	3710      	adds	r7, #16
 800516e:	46bd      	mov	sp, r7
 8005170:	bd80      	pop	{r7, pc}

08005172 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005172:	b580      	push	{r7, lr}
 8005174:	b084      	sub	sp, #16
 8005176:	af00      	add	r7, sp, #0
 8005178:	6078      	str	r0, [r7, #4]
 800517a:	460b      	mov	r3, r1
 800517c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005184:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800518c:	2b00      	cmp	r3, #0
 800518e:	d101      	bne.n	8005194 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8005190:	2303      	movs	r3, #3
 8005192:	e015      	b.n	80051c0 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8005194:	78fb      	ldrb	r3, [r7, #3]
 8005196:	4619      	mov	r1, r3
 8005198:	6878      	ldr	r0, [r7, #4]
 800519a:	f001 fee8 	bl	8006f6e <USBD_LL_GetRxDataSize>
 800519e:	4602      	mov	r2, r0
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80051ac:	68db      	ldr	r3, [r3, #12]
 80051ae:	68fa      	ldr	r2, [r7, #12]
 80051b0:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80051b4:	68fa      	ldr	r2, [r7, #12]
 80051b6:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80051ba:	4611      	mov	r1, r2
 80051bc:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80051be:	2300      	movs	r3, #0
}
 80051c0:	4618      	mov	r0, r3
 80051c2:	3710      	adds	r7, #16
 80051c4:	46bd      	mov	sp, r7
 80051c6:	bd80      	pop	{r7, pc}

080051c8 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80051c8:	b580      	push	{r7, lr}
 80051ca:	b084      	sub	sp, #16
 80051cc:	af00      	add	r7, sp, #0
 80051ce:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80051d6:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d015      	beq.n	800520e <USBD_CDC_EP0_RxReady+0x46>
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80051e8:	2bff      	cmp	r3, #255	; 0xff
 80051ea:	d010      	beq.n	800520e <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80051f2:	689b      	ldr	r3, [r3, #8]
 80051f4:	68fa      	ldr	r2, [r7, #12]
 80051f6:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 80051fa:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 80051fc:	68fa      	ldr	r2, [r7, #12]
 80051fe:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8005202:	b292      	uxth	r2, r2
 8005204:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	22ff      	movs	r2, #255	; 0xff
 800520a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }

  return (uint8_t)USBD_OK;
 800520e:	2300      	movs	r3, #0
}
 8005210:	4618      	mov	r0, r3
 8005212:	3710      	adds	r7, #16
 8005214:	46bd      	mov	sp, r7
 8005216:	bd80      	pop	{r7, pc}

08005218 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8005218:	b480      	push	{r7}
 800521a:	b083      	sub	sp, #12
 800521c:	af00      	add	r7, sp, #0
 800521e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	2243      	movs	r2, #67	; 0x43
 8005224:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8005226:	4b03      	ldr	r3, [pc, #12]	; (8005234 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8005228:	4618      	mov	r0, r3
 800522a:	370c      	adds	r7, #12
 800522c:	46bd      	mov	sp, r7
 800522e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005232:	4770      	bx	lr
 8005234:	20000094 	.word	0x20000094

08005238 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8005238:	b480      	push	{r7}
 800523a:	b083      	sub	sp, #12
 800523c:	af00      	add	r7, sp, #0
 800523e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	2243      	movs	r2, #67	; 0x43
 8005244:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8005246:	4b03      	ldr	r3, [pc, #12]	; (8005254 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8005248:	4618      	mov	r0, r3
 800524a:	370c      	adds	r7, #12
 800524c:	46bd      	mov	sp, r7
 800524e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005252:	4770      	bx	lr
 8005254:	20000050 	.word	0x20000050

08005258 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8005258:	b480      	push	{r7}
 800525a:	b083      	sub	sp, #12
 800525c:	af00      	add	r7, sp, #0
 800525e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	2243      	movs	r2, #67	; 0x43
 8005264:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8005266:	4b03      	ldr	r3, [pc, #12]	; (8005274 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8005268:	4618      	mov	r0, r3
 800526a:	370c      	adds	r7, #12
 800526c:	46bd      	mov	sp, r7
 800526e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005272:	4770      	bx	lr
 8005274:	200000d8 	.word	0x200000d8

08005278 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8005278:	b480      	push	{r7}
 800527a:	b083      	sub	sp, #12
 800527c:	af00      	add	r7, sp, #0
 800527e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	220a      	movs	r2, #10
 8005284:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8005286:	4b03      	ldr	r3, [pc, #12]	; (8005294 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8005288:	4618      	mov	r0, r3
 800528a:	370c      	adds	r7, #12
 800528c:	46bd      	mov	sp, r7
 800528e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005292:	4770      	bx	lr
 8005294:	2000000c 	.word	0x2000000c

08005298 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8005298:	b480      	push	{r7}
 800529a:	b083      	sub	sp, #12
 800529c:	af00      	add	r7, sp, #0
 800529e:	6078      	str	r0, [r7, #4]
 80052a0:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80052a2:	683b      	ldr	r3, [r7, #0]
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d101      	bne.n	80052ac <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80052a8:	2303      	movs	r3, #3
 80052aa:	e004      	b.n	80052b6 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	683a      	ldr	r2, [r7, #0]
 80052b0:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 80052b4:	2300      	movs	r3, #0
}
 80052b6:	4618      	mov	r0, r3
 80052b8:	370c      	adds	r7, #12
 80052ba:	46bd      	mov	sp, r7
 80052bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c0:	4770      	bx	lr

080052c2 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80052c2:	b480      	push	{r7}
 80052c4:	b087      	sub	sp, #28
 80052c6:	af00      	add	r7, sp, #0
 80052c8:	60f8      	str	r0, [r7, #12]
 80052ca:	60b9      	str	r1, [r7, #8]
 80052cc:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80052d4:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 80052d6:	697b      	ldr	r3, [r7, #20]
 80052d8:	68ba      	ldr	r2, [r7, #8]
 80052da:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80052de:	697b      	ldr	r3, [r7, #20]
 80052e0:	687a      	ldr	r2, [r7, #4]
 80052e2:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 80052e6:	2300      	movs	r3, #0
}
 80052e8:	4618      	mov	r0, r3
 80052ea:	371c      	adds	r7, #28
 80052ec:	46bd      	mov	sp, r7
 80052ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f2:	4770      	bx	lr

080052f4 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80052f4:	b480      	push	{r7}
 80052f6:	b085      	sub	sp, #20
 80052f8:	af00      	add	r7, sp, #0
 80052fa:	6078      	str	r0, [r7, #4]
 80052fc:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005304:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	683a      	ldr	r2, [r7, #0]
 800530a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800530e:	2300      	movs	r3, #0
}
 8005310:	4618      	mov	r0, r3
 8005312:	3714      	adds	r7, #20
 8005314:	46bd      	mov	sp, r7
 8005316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800531a:	4770      	bx	lr

0800531c <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800531c:	b580      	push	{r7, lr}
 800531e:	b084      	sub	sp, #16
 8005320:	af00      	add	r7, sp, #0
 8005322:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800532a:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800532c:	2301      	movs	r3, #1
 800532e:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005336:	2b00      	cmp	r3, #0
 8005338:	d101      	bne.n	800533e <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800533a:	2303      	movs	r3, #3
 800533c:	e01a      	b.n	8005374 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 800533e:	68bb      	ldr	r3, [r7, #8]
 8005340:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005344:	2b00      	cmp	r3, #0
 8005346:	d114      	bne.n	8005372 <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8005348:	68bb      	ldr	r3, [r7, #8]
 800534a:	2201      	movs	r2, #1
 800534c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8005350:	68bb      	ldr	r3, [r7, #8]
 8005352:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 800535a:	68bb      	ldr	r3, [r7, #8]
 800535c:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8005360:	68bb      	ldr	r3, [r7, #8]
 8005362:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8005366:	2181      	movs	r1, #129	; 0x81
 8005368:	6878      	ldr	r0, [r7, #4]
 800536a:	f001 fdbe 	bl	8006eea <USBD_LL_Transmit>

    ret = USBD_OK;
 800536e:	2300      	movs	r3, #0
 8005370:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8005372:	7bfb      	ldrb	r3, [r7, #15]
}
 8005374:	4618      	mov	r0, r3
 8005376:	3710      	adds	r7, #16
 8005378:	46bd      	mov	sp, r7
 800537a:	bd80      	pop	{r7, pc}

0800537c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800537c:	b580      	push	{r7, lr}
 800537e:	b084      	sub	sp, #16
 8005380:	af00      	add	r7, sp, #0
 8005382:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800538a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005392:	2b00      	cmp	r3, #0
 8005394:	d101      	bne.n	800539a <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8005396:	2303      	movs	r3, #3
 8005398:	e016      	b.n	80053c8 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	7c1b      	ldrb	r3, [r3, #16]
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d109      	bne.n	80053b6 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80053a8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80053ac:	2101      	movs	r1, #1
 80053ae:	6878      	ldr	r0, [r7, #4]
 80053b0:	f001 fdbc 	bl	8006f2c <USBD_LL_PrepareReceive>
 80053b4:	e007      	b.n	80053c6 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80053bc:	2340      	movs	r3, #64	; 0x40
 80053be:	2101      	movs	r1, #1
 80053c0:	6878      	ldr	r0, [r7, #4]
 80053c2:	f001 fdb3 	bl	8006f2c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80053c6:	2300      	movs	r3, #0
}
 80053c8:	4618      	mov	r0, r3
 80053ca:	3710      	adds	r7, #16
 80053cc:	46bd      	mov	sp, r7
 80053ce:	bd80      	pop	{r7, pc}

080053d0 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80053d0:	b580      	push	{r7, lr}
 80053d2:	b086      	sub	sp, #24
 80053d4:	af00      	add	r7, sp, #0
 80053d6:	60f8      	str	r0, [r7, #12]
 80053d8:	60b9      	str	r1, [r7, #8]
 80053da:	4613      	mov	r3, r2
 80053dc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d101      	bne.n	80053e8 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80053e4:	2303      	movs	r3, #3
 80053e6:	e025      	b.n	8005434 <USBD_Init+0x64>
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d003      	beq.n	80053fa <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	2200      	movs	r2, #0
 80053f6:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 8005400:	2b00      	cmp	r3, #0
 8005402:	d003      	beq.n	800540c <USBD_Init+0x3c>
  {
    pdev->pConfDesc = NULL;
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	2200      	movs	r2, #0
 8005408:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800540c:	68bb      	ldr	r3, [r7, #8]
 800540e:	2b00      	cmp	r3, #0
 8005410:	d003      	beq.n	800541a <USBD_Init+0x4a>
  {
    pdev->pDesc = pdesc;
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	68ba      	ldr	r2, [r7, #8]
 8005416:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	2201      	movs	r2, #1
 800541e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	79fa      	ldrb	r2, [r7, #7]
 8005426:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8005428:	68f8      	ldr	r0, [r7, #12]
 800542a:	f001 fc29 	bl	8006c80 <USBD_LL_Init>
 800542e:	4603      	mov	r3, r0
 8005430:	75fb      	strb	r3, [r7, #23]

  return ret;
 8005432:	7dfb      	ldrb	r3, [r7, #23]
}
 8005434:	4618      	mov	r0, r3
 8005436:	3718      	adds	r7, #24
 8005438:	46bd      	mov	sp, r7
 800543a:	bd80      	pop	{r7, pc}

0800543c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800543c:	b580      	push	{r7, lr}
 800543e:	b084      	sub	sp, #16
 8005440:	af00      	add	r7, sp, #0
 8005442:	6078      	str	r0, [r7, #4]
 8005444:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8005446:	2300      	movs	r3, #0
 8005448:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800544a:	683b      	ldr	r3, [r7, #0]
 800544c:	2b00      	cmp	r3, #0
 800544e:	d101      	bne.n	8005454 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8005450:	2303      	movs	r3, #3
 8005452:	e010      	b.n	8005476 <USBD_RegisterClass+0x3a>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	683a      	ldr	r2, [r7, #0]
 8005458:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005462:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005464:	f107 020e 	add.w	r2, r7, #14
 8005468:	4610      	mov	r0, r2
 800546a:	4798      	blx	r3
 800546c:	4602      	mov	r2, r0
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#endif /* USE_USB_FS */


  return USBD_OK;
 8005474:	2300      	movs	r3, #0
}
 8005476:	4618      	mov	r0, r3
 8005478:	3710      	adds	r7, #16
 800547a:	46bd      	mov	sp, r7
 800547c:	bd80      	pop	{r7, pc}

0800547e <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800547e:	b580      	push	{r7, lr}
 8005480:	b082      	sub	sp, #8
 8005482:	af00      	add	r7, sp, #0
 8005484:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8005486:	6878      	ldr	r0, [r7, #4]
 8005488:	f001 fc46 	bl	8006d18 <USBD_LL_Start>
 800548c:	4603      	mov	r3, r0
}
 800548e:	4618      	mov	r0, r3
 8005490:	3708      	adds	r7, #8
 8005492:	46bd      	mov	sp, r7
 8005494:	bd80      	pop	{r7, pc}

08005496 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8005496:	b480      	push	{r7}
 8005498:	b083      	sub	sp, #12
 800549a:	af00      	add	r7, sp, #0
 800549c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800549e:	2300      	movs	r3, #0
}
 80054a0:	4618      	mov	r0, r3
 80054a2:	370c      	adds	r7, #12
 80054a4:	46bd      	mov	sp, r7
 80054a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054aa:	4770      	bx	lr

080054ac <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80054ac:	b580      	push	{r7, lr}
 80054ae:	b084      	sub	sp, #16
 80054b0:	af00      	add	r7, sp, #0
 80054b2:	6078      	str	r0, [r7, #4]
 80054b4:	460b      	mov	r3, r1
 80054b6:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80054b8:	2303      	movs	r3, #3
 80054ba:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d009      	beq.n	80054da <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	78fa      	ldrb	r2, [r7, #3]
 80054d0:	4611      	mov	r1, r2
 80054d2:	6878      	ldr	r0, [r7, #4]
 80054d4:	4798      	blx	r3
 80054d6:	4603      	mov	r3, r0
 80054d8:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80054da:	7bfb      	ldrb	r3, [r7, #15]
}
 80054dc:	4618      	mov	r0, r3
 80054de:	3710      	adds	r7, #16
 80054e0:	46bd      	mov	sp, r7
 80054e2:	bd80      	pop	{r7, pc}

080054e4 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80054e4:	b580      	push	{r7, lr}
 80054e6:	b082      	sub	sp, #8
 80054e8:	af00      	add	r7, sp, #0
 80054ea:	6078      	str	r0, [r7, #4]
 80054ec:	460b      	mov	r3, r1
 80054ee:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d007      	beq.n	800550a <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005500:	685b      	ldr	r3, [r3, #4]
 8005502:	78fa      	ldrb	r2, [r7, #3]
 8005504:	4611      	mov	r1, r2
 8005506:	6878      	ldr	r0, [r7, #4]
 8005508:	4798      	blx	r3
  }

  return USBD_OK;
 800550a:	2300      	movs	r3, #0
}
 800550c:	4618      	mov	r0, r3
 800550e:	3708      	adds	r7, #8
 8005510:	46bd      	mov	sp, r7
 8005512:	bd80      	pop	{r7, pc}

08005514 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8005514:	b580      	push	{r7, lr}
 8005516:	b084      	sub	sp, #16
 8005518:	af00      	add	r7, sp, #0
 800551a:	6078      	str	r0, [r7, #4]
 800551c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005524:	6839      	ldr	r1, [r7, #0]
 8005526:	4618      	mov	r0, r3
 8005528:	f000 ff2c 	bl	8006384 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	2201      	movs	r2, #1
 8005530:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800553a:	461a      	mov	r2, r3
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005548:	f003 031f 	and.w	r3, r3, #31
 800554c:	2b01      	cmp	r3, #1
 800554e:	d00e      	beq.n	800556e <USBD_LL_SetupStage+0x5a>
 8005550:	2b01      	cmp	r3, #1
 8005552:	d302      	bcc.n	800555a <USBD_LL_SetupStage+0x46>
 8005554:	2b02      	cmp	r3, #2
 8005556:	d014      	beq.n	8005582 <USBD_LL_SetupStage+0x6e>
 8005558:	e01d      	b.n	8005596 <USBD_LL_SetupStage+0x82>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005560:	4619      	mov	r1, r3
 8005562:	6878      	ldr	r0, [r7, #4]
 8005564:	f000 fa18 	bl	8005998 <USBD_StdDevReq>
 8005568:	4603      	mov	r3, r0
 800556a:	73fb      	strb	r3, [r7, #15]
      break;
 800556c:	e020      	b.n	80055b0 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005574:	4619      	mov	r1, r3
 8005576:	6878      	ldr	r0, [r7, #4]
 8005578:	f000 fa7c 	bl	8005a74 <USBD_StdItfReq>
 800557c:	4603      	mov	r3, r0
 800557e:	73fb      	strb	r3, [r7, #15]
      break;
 8005580:	e016      	b.n	80055b0 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005588:	4619      	mov	r1, r3
 800558a:	6878      	ldr	r0, [r7, #4]
 800558c:	f000 fab8 	bl	8005b00 <USBD_StdEPReq>
 8005590:	4603      	mov	r3, r0
 8005592:	73fb      	strb	r3, [r7, #15]
      break;
 8005594:	e00c      	b.n	80055b0 <USBD_LL_SetupStage+0x9c>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800559c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80055a0:	b2db      	uxtb	r3, r3
 80055a2:	4619      	mov	r1, r3
 80055a4:	6878      	ldr	r0, [r7, #4]
 80055a6:	f001 fc17 	bl	8006dd8 <USBD_LL_StallEP>
 80055aa:	4603      	mov	r3, r0
 80055ac:	73fb      	strb	r3, [r7, #15]
      break;
 80055ae:	bf00      	nop
  }

  return ret;
 80055b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80055b2:	4618      	mov	r0, r3
 80055b4:	3710      	adds	r7, #16
 80055b6:	46bd      	mov	sp, r7
 80055b8:	bd80      	pop	{r7, pc}

080055ba <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80055ba:	b580      	push	{r7, lr}
 80055bc:	b086      	sub	sp, #24
 80055be:	af00      	add	r7, sp, #0
 80055c0:	60f8      	str	r0, [r7, #12]
 80055c2:	460b      	mov	r3, r1
 80055c4:	607a      	str	r2, [r7, #4]
 80055c6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80055c8:	7afb      	ldrb	r3, [r7, #11]
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d137      	bne.n	800563e <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80055d4:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80055dc:	2b03      	cmp	r3, #3
 80055de:	d14a      	bne.n	8005676 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 80055e0:	693b      	ldr	r3, [r7, #16]
 80055e2:	689a      	ldr	r2, [r3, #8]
 80055e4:	693b      	ldr	r3, [r7, #16]
 80055e6:	68db      	ldr	r3, [r3, #12]
 80055e8:	429a      	cmp	r2, r3
 80055ea:	d913      	bls.n	8005614 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80055ec:	693b      	ldr	r3, [r7, #16]
 80055ee:	689a      	ldr	r2, [r3, #8]
 80055f0:	693b      	ldr	r3, [r7, #16]
 80055f2:	68db      	ldr	r3, [r3, #12]
 80055f4:	1ad2      	subs	r2, r2, r3
 80055f6:	693b      	ldr	r3, [r7, #16]
 80055f8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80055fa:	693b      	ldr	r3, [r7, #16]
 80055fc:	68da      	ldr	r2, [r3, #12]
 80055fe:	693b      	ldr	r3, [r7, #16]
 8005600:	689b      	ldr	r3, [r3, #8]
 8005602:	4293      	cmp	r3, r2
 8005604:	bf28      	it	cs
 8005606:	4613      	movcs	r3, r2
 8005608:	461a      	mov	r2, r3
 800560a:	6879      	ldr	r1, [r7, #4]
 800560c:	68f8      	ldr	r0, [r7, #12]
 800560e:	f000 ffad 	bl	800656c <USBD_CtlContinueRx>
 8005612:	e030      	b.n	8005676 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800561a:	691b      	ldr	r3, [r3, #16]
 800561c:	2b00      	cmp	r3, #0
 800561e:	d00a      	beq.n	8005636 <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8005626:	2b03      	cmp	r3, #3
 8005628:	d105      	bne.n	8005636 <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005630:	691b      	ldr	r3, [r3, #16]
 8005632:	68f8      	ldr	r0, [r7, #12]
 8005634:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 8005636:	68f8      	ldr	r0, [r7, #12]
 8005638:	f000 ffa9 	bl	800658e <USBD_CtlSendStatus>
 800563c:	e01b      	b.n	8005676 <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005644:	699b      	ldr	r3, [r3, #24]
 8005646:	2b00      	cmp	r3, #0
 8005648:	d013      	beq.n	8005672 <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8005650:	2b03      	cmp	r3, #3
 8005652:	d10e      	bne.n	8005672 <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800565a:	699b      	ldr	r3, [r3, #24]
 800565c:	7afa      	ldrb	r2, [r7, #11]
 800565e:	4611      	mov	r1, r2
 8005660:	68f8      	ldr	r0, [r7, #12]
 8005662:	4798      	blx	r3
 8005664:	4603      	mov	r3, r0
 8005666:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8005668:	7dfb      	ldrb	r3, [r7, #23]
 800566a:	2b00      	cmp	r3, #0
 800566c:	d003      	beq.n	8005676 <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 800566e:	7dfb      	ldrb	r3, [r7, #23]
 8005670:	e002      	b.n	8005678 <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8005672:	2303      	movs	r3, #3
 8005674:	e000      	b.n	8005678 <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 8005676:	2300      	movs	r3, #0
}
 8005678:	4618      	mov	r0, r3
 800567a:	3718      	adds	r7, #24
 800567c:	46bd      	mov	sp, r7
 800567e:	bd80      	pop	{r7, pc}

08005680 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8005680:	b580      	push	{r7, lr}
 8005682:	b086      	sub	sp, #24
 8005684:	af00      	add	r7, sp, #0
 8005686:	60f8      	str	r0, [r7, #12]
 8005688:	460b      	mov	r3, r1
 800568a:	607a      	str	r2, [r7, #4]
 800568c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800568e:	7afb      	ldrb	r3, [r7, #11]
 8005690:	2b00      	cmp	r3, #0
 8005692:	d16a      	bne.n	800576a <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	3314      	adds	r3, #20
 8005698:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80056a0:	2b02      	cmp	r3, #2
 80056a2:	d155      	bne.n	8005750 <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 80056a4:	693b      	ldr	r3, [r7, #16]
 80056a6:	689a      	ldr	r2, [r3, #8]
 80056a8:	693b      	ldr	r3, [r7, #16]
 80056aa:	68db      	ldr	r3, [r3, #12]
 80056ac:	429a      	cmp	r2, r3
 80056ae:	d914      	bls.n	80056da <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80056b0:	693b      	ldr	r3, [r7, #16]
 80056b2:	689a      	ldr	r2, [r3, #8]
 80056b4:	693b      	ldr	r3, [r7, #16]
 80056b6:	68db      	ldr	r3, [r3, #12]
 80056b8:	1ad2      	subs	r2, r2, r3
 80056ba:	693b      	ldr	r3, [r7, #16]
 80056bc:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80056be:	693b      	ldr	r3, [r7, #16]
 80056c0:	689b      	ldr	r3, [r3, #8]
 80056c2:	461a      	mov	r2, r3
 80056c4:	6879      	ldr	r1, [r7, #4]
 80056c6:	68f8      	ldr	r0, [r7, #12]
 80056c8:	f000 ff22 	bl	8006510 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80056cc:	2300      	movs	r3, #0
 80056ce:	2200      	movs	r2, #0
 80056d0:	2100      	movs	r1, #0
 80056d2:	68f8      	ldr	r0, [r7, #12]
 80056d4:	f001 fc2a 	bl	8006f2c <USBD_LL_PrepareReceive>
 80056d8:	e03a      	b.n	8005750 <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80056da:	693b      	ldr	r3, [r7, #16]
 80056dc:	68da      	ldr	r2, [r3, #12]
 80056de:	693b      	ldr	r3, [r7, #16]
 80056e0:	689b      	ldr	r3, [r3, #8]
 80056e2:	429a      	cmp	r2, r3
 80056e4:	d11c      	bne.n	8005720 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80056e6:	693b      	ldr	r3, [r7, #16]
 80056e8:	685a      	ldr	r2, [r3, #4]
 80056ea:	693b      	ldr	r3, [r7, #16]
 80056ec:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80056ee:	429a      	cmp	r2, r3
 80056f0:	d316      	bcc.n	8005720 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80056f2:	693b      	ldr	r3, [r7, #16]
 80056f4:	685a      	ldr	r2, [r3, #4]
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80056fc:	429a      	cmp	r2, r3
 80056fe:	d20f      	bcs.n	8005720 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8005700:	2200      	movs	r2, #0
 8005702:	2100      	movs	r1, #0
 8005704:	68f8      	ldr	r0, [r7, #12]
 8005706:	f000 ff03 	bl	8006510 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	2200      	movs	r2, #0
 800570e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005712:	2300      	movs	r3, #0
 8005714:	2200      	movs	r2, #0
 8005716:	2100      	movs	r1, #0
 8005718:	68f8      	ldr	r0, [r7, #12]
 800571a:	f001 fc07 	bl	8006f2c <USBD_LL_PrepareReceive>
 800571e:	e017      	b.n	8005750 <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005726:	68db      	ldr	r3, [r3, #12]
 8005728:	2b00      	cmp	r3, #0
 800572a:	d00a      	beq.n	8005742 <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8005732:	2b03      	cmp	r3, #3
 8005734:	d105      	bne.n	8005742 <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800573c:	68db      	ldr	r3, [r3, #12]
 800573e:	68f8      	ldr	r0, [r7, #12]
 8005740:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8005742:	2180      	movs	r1, #128	; 0x80
 8005744:	68f8      	ldr	r0, [r7, #12]
 8005746:	f001 fb47 	bl	8006dd8 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800574a:	68f8      	ldr	r0, [r7, #12]
 800574c:	f000 ff32 	bl	80065b4 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8005756:	2b01      	cmp	r3, #1
 8005758:	d123      	bne.n	80057a2 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800575a:	68f8      	ldr	r0, [r7, #12]
 800575c:	f7ff fe9b 	bl	8005496 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	2200      	movs	r2, #0
 8005764:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8005768:	e01b      	b.n	80057a2 <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005770:	695b      	ldr	r3, [r3, #20]
 8005772:	2b00      	cmp	r3, #0
 8005774:	d013      	beq.n	800579e <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800577c:	2b03      	cmp	r3, #3
 800577e:	d10e      	bne.n	800579e <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005786:	695b      	ldr	r3, [r3, #20]
 8005788:	7afa      	ldrb	r2, [r7, #11]
 800578a:	4611      	mov	r1, r2
 800578c:	68f8      	ldr	r0, [r7, #12]
 800578e:	4798      	blx	r3
 8005790:	4603      	mov	r3, r0
 8005792:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8005794:	7dfb      	ldrb	r3, [r7, #23]
 8005796:	2b00      	cmp	r3, #0
 8005798:	d003      	beq.n	80057a2 <USBD_LL_DataInStage+0x122>
    {
      return ret;
 800579a:	7dfb      	ldrb	r3, [r7, #23]
 800579c:	e002      	b.n	80057a4 <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800579e:	2303      	movs	r3, #3
 80057a0:	e000      	b.n	80057a4 <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 80057a2:	2300      	movs	r3, #0
}
 80057a4:	4618      	mov	r0, r3
 80057a6:	3718      	adds	r7, #24
 80057a8:	46bd      	mov	sp, r7
 80057aa:	bd80      	pop	{r7, pc}

080057ac <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80057ac:	b580      	push	{r7, lr}
 80057ae:	b082      	sub	sp, #8
 80057b0:	af00      	add	r7, sp, #0
 80057b2:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	2201      	movs	r2, #1
 80057b8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	2200      	movs	r2, #0
 80057c0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	2200      	movs	r2, #0
 80057c8:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	2200      	movs	r2, #0
 80057ce:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d009      	beq.n	80057f0 <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80057e2:	685b      	ldr	r3, [r3, #4]
 80057e4:	687a      	ldr	r2, [r7, #4]
 80057e6:	6852      	ldr	r2, [r2, #4]
 80057e8:	b2d2      	uxtb	r2, r2
 80057ea:	4611      	mov	r1, r2
 80057ec:	6878      	ldr	r0, [r7, #4]
 80057ee:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80057f0:	2340      	movs	r3, #64	; 0x40
 80057f2:	2200      	movs	r2, #0
 80057f4:	2100      	movs	r1, #0
 80057f6:	6878      	ldr	r0, [r7, #4]
 80057f8:	f001 faa9 	bl	8006d4e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	2201      	movs	r2, #1
 8005800:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	2240      	movs	r2, #64	; 0x40
 8005808:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800580c:	2340      	movs	r3, #64	; 0x40
 800580e:	2200      	movs	r2, #0
 8005810:	2180      	movs	r1, #128	; 0x80
 8005812:	6878      	ldr	r0, [r7, #4]
 8005814:	f001 fa9b 	bl	8006d4e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	2201      	movs	r2, #1
 800581c:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	2240      	movs	r2, #64	; 0x40
 8005822:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8005824:	2300      	movs	r3, #0
}
 8005826:	4618      	mov	r0, r3
 8005828:	3708      	adds	r7, #8
 800582a:	46bd      	mov	sp, r7
 800582c:	bd80      	pop	{r7, pc}

0800582e <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800582e:	b480      	push	{r7}
 8005830:	b083      	sub	sp, #12
 8005832:	af00      	add	r7, sp, #0
 8005834:	6078      	str	r0, [r7, #4]
 8005836:	460b      	mov	r3, r1
 8005838:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	78fa      	ldrb	r2, [r7, #3]
 800583e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8005840:	2300      	movs	r3, #0
}
 8005842:	4618      	mov	r0, r3
 8005844:	370c      	adds	r7, #12
 8005846:	46bd      	mov	sp, r7
 8005848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800584c:	4770      	bx	lr

0800584e <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800584e:	b480      	push	{r7}
 8005850:	b083      	sub	sp, #12
 8005852:	af00      	add	r7, sp, #0
 8005854:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	2204      	movs	r2, #4
 8005866:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800586a:	2300      	movs	r3, #0
}
 800586c:	4618      	mov	r0, r3
 800586e:	370c      	adds	r7, #12
 8005870:	46bd      	mov	sp, r7
 8005872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005876:	4770      	bx	lr

08005878 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8005878:	b480      	push	{r7}
 800587a:	b083      	sub	sp, #12
 800587c:	af00      	add	r7, sp, #0
 800587e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005886:	2b04      	cmp	r3, #4
 8005888:	d105      	bne.n	8005896 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8005896:	2300      	movs	r3, #0
}
 8005898:	4618      	mov	r0, r3
 800589a:	370c      	adds	r7, #12
 800589c:	46bd      	mov	sp, r7
 800589e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a2:	4770      	bx	lr

080058a4 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80058a4:	b580      	push	{r7, lr}
 80058a6:	b082      	sub	sp, #8
 80058a8:	af00      	add	r7, sp, #0
 80058aa:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80058b2:	2b03      	cmp	r3, #3
 80058b4:	d10b      	bne.n	80058ce <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80058bc:	69db      	ldr	r3, [r3, #28]
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d005      	beq.n	80058ce <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80058c8:	69db      	ldr	r3, [r3, #28]
 80058ca:	6878      	ldr	r0, [r7, #4]
 80058cc:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80058ce:	2300      	movs	r3, #0
}
 80058d0:	4618      	mov	r0, r3
 80058d2:	3708      	adds	r7, #8
 80058d4:	46bd      	mov	sp, r7
 80058d6:	bd80      	pop	{r7, pc}

080058d8 <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80058d8:	b480      	push	{r7}
 80058da:	b083      	sub	sp, #12
 80058dc:	af00      	add	r7, sp, #0
 80058de:	6078      	str	r0, [r7, #4]
 80058e0:	460b      	mov	r3, r1
 80058e2:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 80058e4:	2300      	movs	r3, #0
}
 80058e6:	4618      	mov	r0, r3
 80058e8:	370c      	adds	r7, #12
 80058ea:	46bd      	mov	sp, r7
 80058ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f0:	4770      	bx	lr

080058f2 <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80058f2:	b480      	push	{r7}
 80058f4:	b083      	sub	sp, #12
 80058f6:	af00      	add	r7, sp, #0
 80058f8:	6078      	str	r0, [r7, #4]
 80058fa:	460b      	mov	r3, r1
 80058fc:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 80058fe:	2300      	movs	r3, #0
}
 8005900:	4618      	mov	r0, r3
 8005902:	370c      	adds	r7, #12
 8005904:	46bd      	mov	sp, r7
 8005906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800590a:	4770      	bx	lr

0800590c <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800590c:	b480      	push	{r7}
 800590e:	b083      	sub	sp, #12
 8005910:	af00      	add	r7, sp, #0
 8005912:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005914:	2300      	movs	r3, #0
}
 8005916:	4618      	mov	r0, r3
 8005918:	370c      	adds	r7, #12
 800591a:	46bd      	mov	sp, r7
 800591c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005920:	4770      	bx	lr

08005922 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8005922:	b580      	push	{r7, lr}
 8005924:	b082      	sub	sp, #8
 8005926:	af00      	add	r7, sp, #0
 8005928:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	2201      	movs	r2, #1
 800592e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005938:	2b00      	cmp	r3, #0
 800593a:	d009      	beq.n	8005950 <USBD_LL_DevDisconnected+0x2e>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005942:	685b      	ldr	r3, [r3, #4]
 8005944:	687a      	ldr	r2, [r7, #4]
 8005946:	6852      	ldr	r2, [r2, #4]
 8005948:	b2d2      	uxtb	r2, r2
 800594a:	4611      	mov	r1, r2
 800594c:	6878      	ldr	r0, [r7, #4]
 800594e:	4798      	blx	r3
  }

  return USBD_OK;
 8005950:	2300      	movs	r3, #0
}
 8005952:	4618      	mov	r0, r3
 8005954:	3708      	adds	r7, #8
 8005956:	46bd      	mov	sp, r7
 8005958:	bd80      	pop	{r7, pc}

0800595a <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800595a:	b480      	push	{r7}
 800595c:	b087      	sub	sp, #28
 800595e:	af00      	add	r7, sp, #0
 8005960:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8005966:	697b      	ldr	r3, [r7, #20]
 8005968:	781b      	ldrb	r3, [r3, #0]
 800596a:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800596c:	697b      	ldr	r3, [r7, #20]
 800596e:	3301      	adds	r3, #1
 8005970:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8005972:	697b      	ldr	r3, [r7, #20]
 8005974:	781b      	ldrb	r3, [r3, #0]
 8005976:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8005978:	8a3b      	ldrh	r3, [r7, #16]
 800597a:	021b      	lsls	r3, r3, #8
 800597c:	b21a      	sxth	r2, r3
 800597e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8005982:	4313      	orrs	r3, r2
 8005984:	b21b      	sxth	r3, r3
 8005986:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8005988:	89fb      	ldrh	r3, [r7, #14]
}
 800598a:	4618      	mov	r0, r3
 800598c:	371c      	adds	r7, #28
 800598e:	46bd      	mov	sp, r7
 8005990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005994:	4770      	bx	lr
	...

08005998 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005998:	b580      	push	{r7, lr}
 800599a:	b084      	sub	sp, #16
 800599c:	af00      	add	r7, sp, #0
 800599e:	6078      	str	r0, [r7, #4]
 80059a0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80059a2:	2300      	movs	r3, #0
 80059a4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80059a6:	683b      	ldr	r3, [r7, #0]
 80059a8:	781b      	ldrb	r3, [r3, #0]
 80059aa:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80059ae:	2b20      	cmp	r3, #32
 80059b0:	d004      	beq.n	80059bc <USBD_StdDevReq+0x24>
 80059b2:	2b40      	cmp	r3, #64	; 0x40
 80059b4:	d002      	beq.n	80059bc <USBD_StdDevReq+0x24>
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d00a      	beq.n	80059d0 <USBD_StdDevReq+0x38>
 80059ba:	e050      	b.n	8005a5e <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80059c2:	689b      	ldr	r3, [r3, #8]
 80059c4:	6839      	ldr	r1, [r7, #0]
 80059c6:	6878      	ldr	r0, [r7, #4]
 80059c8:	4798      	blx	r3
 80059ca:	4603      	mov	r3, r0
 80059cc:	73fb      	strb	r3, [r7, #15]
    break;
 80059ce:	e04b      	b.n	8005a68 <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 80059d0:	683b      	ldr	r3, [r7, #0]
 80059d2:	785b      	ldrb	r3, [r3, #1]
 80059d4:	2b09      	cmp	r3, #9
 80059d6:	d83c      	bhi.n	8005a52 <USBD_StdDevReq+0xba>
 80059d8:	a201      	add	r2, pc, #4	; (adr r2, 80059e0 <USBD_StdDevReq+0x48>)
 80059da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059de:	bf00      	nop
 80059e0:	08005a35 	.word	0x08005a35
 80059e4:	08005a49 	.word	0x08005a49
 80059e8:	08005a53 	.word	0x08005a53
 80059ec:	08005a3f 	.word	0x08005a3f
 80059f0:	08005a53 	.word	0x08005a53
 80059f4:	08005a13 	.word	0x08005a13
 80059f8:	08005a09 	.word	0x08005a09
 80059fc:	08005a53 	.word	0x08005a53
 8005a00:	08005a2b 	.word	0x08005a2b
 8005a04:	08005a1d 	.word	0x08005a1d
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 8005a08:	6839      	ldr	r1, [r7, #0]
 8005a0a:	6878      	ldr	r0, [r7, #4]
 8005a0c:	f000 f9ce 	bl	8005dac <USBD_GetDescriptor>
      break;
 8005a10:	e024      	b.n	8005a5c <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 8005a12:	6839      	ldr	r1, [r7, #0]
 8005a14:	6878      	ldr	r0, [r7, #4]
 8005a16:	f000 fb33 	bl	8006080 <USBD_SetAddress>
      break;
 8005a1a:	e01f      	b.n	8005a5c <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 8005a1c:	6839      	ldr	r1, [r7, #0]
 8005a1e:	6878      	ldr	r0, [r7, #4]
 8005a20:	f000 fb70 	bl	8006104 <USBD_SetConfig>
 8005a24:	4603      	mov	r3, r0
 8005a26:	73fb      	strb	r3, [r7, #15]
      break;
 8005a28:	e018      	b.n	8005a5c <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 8005a2a:	6839      	ldr	r1, [r7, #0]
 8005a2c:	6878      	ldr	r0, [r7, #4]
 8005a2e:	f000 fc0d 	bl	800624c <USBD_GetConfig>
      break;
 8005a32:	e013      	b.n	8005a5c <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 8005a34:	6839      	ldr	r1, [r7, #0]
 8005a36:	6878      	ldr	r0, [r7, #4]
 8005a38:	f000 fc3c 	bl	80062b4 <USBD_GetStatus>
      break;
 8005a3c:	e00e      	b.n	8005a5c <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 8005a3e:	6839      	ldr	r1, [r7, #0]
 8005a40:	6878      	ldr	r0, [r7, #4]
 8005a42:	f000 fc6a 	bl	800631a <USBD_SetFeature>
      break;
 8005a46:	e009      	b.n	8005a5c <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 8005a48:	6839      	ldr	r1, [r7, #0]
 8005a4a:	6878      	ldr	r0, [r7, #4]
 8005a4c:	f000 fc79 	bl	8006342 <USBD_ClrFeature>
      break;
 8005a50:	e004      	b.n	8005a5c <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 8005a52:	6839      	ldr	r1, [r7, #0]
 8005a54:	6878      	ldr	r0, [r7, #4]
 8005a56:	f000 fccf 	bl	80063f8 <USBD_CtlError>
      break;
 8005a5a:	bf00      	nop
    }
    break;
 8005a5c:	e004      	b.n	8005a68 <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 8005a5e:	6839      	ldr	r1, [r7, #0]
 8005a60:	6878      	ldr	r0, [r7, #4]
 8005a62:	f000 fcc9 	bl	80063f8 <USBD_CtlError>
    break;
 8005a66:	bf00      	nop
  }

  return ret;
 8005a68:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a6a:	4618      	mov	r0, r3
 8005a6c:	3710      	adds	r7, #16
 8005a6e:	46bd      	mov	sp, r7
 8005a70:	bd80      	pop	{r7, pc}
 8005a72:	bf00      	nop

08005a74 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005a74:	b580      	push	{r7, lr}
 8005a76:	b084      	sub	sp, #16
 8005a78:	af00      	add	r7, sp, #0
 8005a7a:	6078      	str	r0, [r7, #4]
 8005a7c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005a7e:	2300      	movs	r3, #0
 8005a80:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005a82:	683b      	ldr	r3, [r7, #0]
 8005a84:	781b      	ldrb	r3, [r3, #0]
 8005a86:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005a8a:	2b20      	cmp	r3, #32
 8005a8c:	d003      	beq.n	8005a96 <USBD_StdItfReq+0x22>
 8005a8e:	2b40      	cmp	r3, #64	; 0x40
 8005a90:	d001      	beq.n	8005a96 <USBD_StdItfReq+0x22>
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d12a      	bne.n	8005aec <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005a9c:	3b01      	subs	r3, #1
 8005a9e:	2b02      	cmp	r3, #2
 8005aa0:	d81d      	bhi.n	8005ade <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8005aa2:	683b      	ldr	r3, [r7, #0]
 8005aa4:	889b      	ldrh	r3, [r3, #4]
 8005aa6:	b2db      	uxtb	r3, r3
 8005aa8:	2b01      	cmp	r3, #1
 8005aaa:	d813      	bhi.n	8005ad4 <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005ab2:	689b      	ldr	r3, [r3, #8]
 8005ab4:	6839      	ldr	r1, [r7, #0]
 8005ab6:	6878      	ldr	r0, [r7, #4]
 8005ab8:	4798      	blx	r3
 8005aba:	4603      	mov	r3, r0
 8005abc:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 8005abe:	683b      	ldr	r3, [r7, #0]
 8005ac0:	88db      	ldrh	r3, [r3, #6]
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d110      	bne.n	8005ae8 <USBD_StdItfReq+0x74>
 8005ac6:	7bfb      	ldrb	r3, [r7, #15]
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d10d      	bne.n	8005ae8 <USBD_StdItfReq+0x74>
        {
          (void)USBD_CtlSendStatus(pdev);
 8005acc:	6878      	ldr	r0, [r7, #4]
 8005ace:	f000 fd5e 	bl	800658e <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 8005ad2:	e009      	b.n	8005ae8 <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 8005ad4:	6839      	ldr	r1, [r7, #0]
 8005ad6:	6878      	ldr	r0, [r7, #4]
 8005ad8:	f000 fc8e 	bl	80063f8 <USBD_CtlError>
      break;
 8005adc:	e004      	b.n	8005ae8 <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 8005ade:	6839      	ldr	r1, [r7, #0]
 8005ae0:	6878      	ldr	r0, [r7, #4]
 8005ae2:	f000 fc89 	bl	80063f8 <USBD_CtlError>
      break;
 8005ae6:	e000      	b.n	8005aea <USBD_StdItfReq+0x76>
      break;
 8005ae8:	bf00      	nop
    }
    break;
 8005aea:	e004      	b.n	8005af6 <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 8005aec:	6839      	ldr	r1, [r7, #0]
 8005aee:	6878      	ldr	r0, [r7, #4]
 8005af0:	f000 fc82 	bl	80063f8 <USBD_CtlError>
    break;
 8005af4:	bf00      	nop
  }

  return ret;
 8005af6:	7bfb      	ldrb	r3, [r7, #15]
}
 8005af8:	4618      	mov	r0, r3
 8005afa:	3710      	adds	r7, #16
 8005afc:	46bd      	mov	sp, r7
 8005afe:	bd80      	pop	{r7, pc}

08005b00 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005b00:	b580      	push	{r7, lr}
 8005b02:	b084      	sub	sp, #16
 8005b04:	af00      	add	r7, sp, #0
 8005b06:	6078      	str	r0, [r7, #4]
 8005b08:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8005b0a:	2300      	movs	r3, #0
 8005b0c:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8005b0e:	683b      	ldr	r3, [r7, #0]
 8005b10:	889b      	ldrh	r3, [r3, #4]
 8005b12:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005b14:	683b      	ldr	r3, [r7, #0]
 8005b16:	781b      	ldrb	r3, [r3, #0]
 8005b18:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005b1c:	2b20      	cmp	r3, #32
 8005b1e:	d004      	beq.n	8005b2a <USBD_StdEPReq+0x2a>
 8005b20:	2b40      	cmp	r3, #64	; 0x40
 8005b22:	d002      	beq.n	8005b2a <USBD_StdEPReq+0x2a>
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d00a      	beq.n	8005b3e <USBD_StdEPReq+0x3e>
 8005b28:	e135      	b.n	8005d96 <USBD_StdEPReq+0x296>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005b30:	689b      	ldr	r3, [r3, #8]
 8005b32:	6839      	ldr	r1, [r7, #0]
 8005b34:	6878      	ldr	r0, [r7, #4]
 8005b36:	4798      	blx	r3
 8005b38:	4603      	mov	r3, r0
 8005b3a:	73fb      	strb	r3, [r7, #15]
    break;
 8005b3c:	e130      	b.n	8005da0 <USBD_StdEPReq+0x2a0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8005b3e:	683b      	ldr	r3, [r7, #0]
 8005b40:	785b      	ldrb	r3, [r3, #1]
 8005b42:	2b01      	cmp	r3, #1
 8005b44:	d03e      	beq.n	8005bc4 <USBD_StdEPReq+0xc4>
 8005b46:	2b03      	cmp	r3, #3
 8005b48:	d002      	beq.n	8005b50 <USBD_StdEPReq+0x50>
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d077      	beq.n	8005c3e <USBD_StdEPReq+0x13e>
 8005b4e:	e11c      	b.n	8005d8a <USBD_StdEPReq+0x28a>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005b56:	2b02      	cmp	r3, #2
 8005b58:	d002      	beq.n	8005b60 <USBD_StdEPReq+0x60>
 8005b5a:	2b03      	cmp	r3, #3
 8005b5c:	d015      	beq.n	8005b8a <USBD_StdEPReq+0x8a>
 8005b5e:	e02b      	b.n	8005bb8 <USBD_StdEPReq+0xb8>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005b60:	7bbb      	ldrb	r3, [r7, #14]
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d00c      	beq.n	8005b80 <USBD_StdEPReq+0x80>
 8005b66:	7bbb      	ldrb	r3, [r7, #14]
 8005b68:	2b80      	cmp	r3, #128	; 0x80
 8005b6a:	d009      	beq.n	8005b80 <USBD_StdEPReq+0x80>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8005b6c:	7bbb      	ldrb	r3, [r7, #14]
 8005b6e:	4619      	mov	r1, r3
 8005b70:	6878      	ldr	r0, [r7, #4]
 8005b72:	f001 f931 	bl	8006dd8 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8005b76:	2180      	movs	r1, #128	; 0x80
 8005b78:	6878      	ldr	r0, [r7, #4]
 8005b7a:	f001 f92d 	bl	8006dd8 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8005b7e:	e020      	b.n	8005bc2 <USBD_StdEPReq+0xc2>
          USBD_CtlError(pdev, req);
 8005b80:	6839      	ldr	r1, [r7, #0]
 8005b82:	6878      	ldr	r0, [r7, #4]
 8005b84:	f000 fc38 	bl	80063f8 <USBD_CtlError>
        break;
 8005b88:	e01b      	b.n	8005bc2 <USBD_StdEPReq+0xc2>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8005b8a:	683b      	ldr	r3, [r7, #0]
 8005b8c:	885b      	ldrh	r3, [r3, #2]
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d10e      	bne.n	8005bb0 <USBD_StdEPReq+0xb0>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8005b92:	7bbb      	ldrb	r3, [r7, #14]
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d00b      	beq.n	8005bb0 <USBD_StdEPReq+0xb0>
 8005b98:	7bbb      	ldrb	r3, [r7, #14]
 8005b9a:	2b80      	cmp	r3, #128	; 0x80
 8005b9c:	d008      	beq.n	8005bb0 <USBD_StdEPReq+0xb0>
 8005b9e:	683b      	ldr	r3, [r7, #0]
 8005ba0:	88db      	ldrh	r3, [r3, #6]
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d104      	bne.n	8005bb0 <USBD_StdEPReq+0xb0>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 8005ba6:	7bbb      	ldrb	r3, [r7, #14]
 8005ba8:	4619      	mov	r1, r3
 8005baa:	6878      	ldr	r0, [r7, #4]
 8005bac:	f001 f914 	bl	8006dd8 <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 8005bb0:	6878      	ldr	r0, [r7, #4]
 8005bb2:	f000 fcec 	bl	800658e <USBD_CtlSendStatus>

        break;
 8005bb6:	e004      	b.n	8005bc2 <USBD_StdEPReq+0xc2>

      default:
        USBD_CtlError(pdev, req);
 8005bb8:	6839      	ldr	r1, [r7, #0]
 8005bba:	6878      	ldr	r0, [r7, #4]
 8005bbc:	f000 fc1c 	bl	80063f8 <USBD_CtlError>
        break;
 8005bc0:	bf00      	nop
      }
      break;
 8005bc2:	e0e7      	b.n	8005d94 <USBD_StdEPReq+0x294>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005bca:	2b02      	cmp	r3, #2
 8005bcc:	d002      	beq.n	8005bd4 <USBD_StdEPReq+0xd4>
 8005bce:	2b03      	cmp	r3, #3
 8005bd0:	d015      	beq.n	8005bfe <USBD_StdEPReq+0xfe>
 8005bd2:	e02d      	b.n	8005c30 <USBD_StdEPReq+0x130>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005bd4:	7bbb      	ldrb	r3, [r7, #14]
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d00c      	beq.n	8005bf4 <USBD_StdEPReq+0xf4>
 8005bda:	7bbb      	ldrb	r3, [r7, #14]
 8005bdc:	2b80      	cmp	r3, #128	; 0x80
 8005bde:	d009      	beq.n	8005bf4 <USBD_StdEPReq+0xf4>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8005be0:	7bbb      	ldrb	r3, [r7, #14]
 8005be2:	4619      	mov	r1, r3
 8005be4:	6878      	ldr	r0, [r7, #4]
 8005be6:	f001 f8f7 	bl	8006dd8 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8005bea:	2180      	movs	r1, #128	; 0x80
 8005bec:	6878      	ldr	r0, [r7, #4]
 8005bee:	f001 f8f3 	bl	8006dd8 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8005bf2:	e023      	b.n	8005c3c <USBD_StdEPReq+0x13c>
          USBD_CtlError(pdev, req);
 8005bf4:	6839      	ldr	r1, [r7, #0]
 8005bf6:	6878      	ldr	r0, [r7, #4]
 8005bf8:	f000 fbfe 	bl	80063f8 <USBD_CtlError>
        break;
 8005bfc:	e01e      	b.n	8005c3c <USBD_StdEPReq+0x13c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8005bfe:	683b      	ldr	r3, [r7, #0]
 8005c00:	885b      	ldrh	r3, [r3, #2]
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d119      	bne.n	8005c3a <USBD_StdEPReq+0x13a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 8005c06:	7bbb      	ldrb	r3, [r7, #14]
 8005c08:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d004      	beq.n	8005c1a <USBD_StdEPReq+0x11a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8005c10:	7bbb      	ldrb	r3, [r7, #14]
 8005c12:	4619      	mov	r1, r3
 8005c14:	6878      	ldr	r0, [r7, #4]
 8005c16:	f001 f8fe 	bl	8006e16 <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 8005c1a:	6878      	ldr	r0, [r7, #4]
 8005c1c:	f000 fcb7 	bl	800658e <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005c26:	689b      	ldr	r3, [r3, #8]
 8005c28:	6839      	ldr	r1, [r7, #0]
 8005c2a:	6878      	ldr	r0, [r7, #4]
 8005c2c:	4798      	blx	r3
        }
        break;
 8005c2e:	e004      	b.n	8005c3a <USBD_StdEPReq+0x13a>

      default:
        USBD_CtlError(pdev, req);
 8005c30:	6839      	ldr	r1, [r7, #0]
 8005c32:	6878      	ldr	r0, [r7, #4]
 8005c34:	f000 fbe0 	bl	80063f8 <USBD_CtlError>
        break;
 8005c38:	e000      	b.n	8005c3c <USBD_StdEPReq+0x13c>
        break;
 8005c3a:	bf00      	nop
      }
      break;
 8005c3c:	e0aa      	b.n	8005d94 <USBD_StdEPReq+0x294>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005c44:	2b02      	cmp	r3, #2
 8005c46:	d002      	beq.n	8005c4e <USBD_StdEPReq+0x14e>
 8005c48:	2b03      	cmp	r3, #3
 8005c4a:	d032      	beq.n	8005cb2 <USBD_StdEPReq+0x1b2>
 8005c4c:	e097      	b.n	8005d7e <USBD_StdEPReq+0x27e>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005c4e:	7bbb      	ldrb	r3, [r7, #14]
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d007      	beq.n	8005c64 <USBD_StdEPReq+0x164>
 8005c54:	7bbb      	ldrb	r3, [r7, #14]
 8005c56:	2b80      	cmp	r3, #128	; 0x80
 8005c58:	d004      	beq.n	8005c64 <USBD_StdEPReq+0x164>
        {
          USBD_CtlError(pdev, req);
 8005c5a:	6839      	ldr	r1, [r7, #0]
 8005c5c:	6878      	ldr	r0, [r7, #4]
 8005c5e:	f000 fbcb 	bl	80063f8 <USBD_CtlError>
          break;
 8005c62:	e091      	b.n	8005d88 <USBD_StdEPReq+0x288>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005c64:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	da0b      	bge.n	8005c84 <USBD_StdEPReq+0x184>
 8005c6c:	7bbb      	ldrb	r3, [r7, #14]
 8005c6e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005c72:	4613      	mov	r3, r2
 8005c74:	009b      	lsls	r3, r3, #2
 8005c76:	4413      	add	r3, r2
 8005c78:	009b      	lsls	r3, r3, #2
 8005c7a:	3310      	adds	r3, #16
 8005c7c:	687a      	ldr	r2, [r7, #4]
 8005c7e:	4413      	add	r3, r2
 8005c80:	3304      	adds	r3, #4
 8005c82:	e00b      	b.n	8005c9c <USBD_StdEPReq+0x19c>
              &pdev->ep_out[ep_addr & 0x7FU];
 8005c84:	7bbb      	ldrb	r3, [r7, #14]
 8005c86:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005c8a:	4613      	mov	r3, r2
 8005c8c:	009b      	lsls	r3, r3, #2
 8005c8e:	4413      	add	r3, r2
 8005c90:	009b      	lsls	r3, r3, #2
 8005c92:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8005c96:	687a      	ldr	r2, [r7, #4]
 8005c98:	4413      	add	r3, r2
 8005c9a:	3304      	adds	r3, #4
 8005c9c:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 8005c9e:	68bb      	ldr	r3, [r7, #8]
 8005ca0:	2200      	movs	r2, #0
 8005ca2:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8005ca4:	68bb      	ldr	r3, [r7, #8]
 8005ca6:	2202      	movs	r2, #2
 8005ca8:	4619      	mov	r1, r3
 8005caa:	6878      	ldr	r0, [r7, #4]
 8005cac:	f000 fc15 	bl	80064da <USBD_CtlSendData>
        break;
 8005cb0:	e06a      	b.n	8005d88 <USBD_StdEPReq+0x288>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 8005cb2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	da11      	bge.n	8005cde <USBD_StdEPReq+0x1de>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8005cba:	7bbb      	ldrb	r3, [r7, #14]
 8005cbc:	f003 020f 	and.w	r2, r3, #15
 8005cc0:	6879      	ldr	r1, [r7, #4]
 8005cc2:	4613      	mov	r3, r2
 8005cc4:	009b      	lsls	r3, r3, #2
 8005cc6:	4413      	add	r3, r2
 8005cc8:	009b      	lsls	r3, r3, #2
 8005cca:	440b      	add	r3, r1
 8005ccc:	3324      	adds	r3, #36	; 0x24
 8005cce:	881b      	ldrh	r3, [r3, #0]
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d117      	bne.n	8005d04 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 8005cd4:	6839      	ldr	r1, [r7, #0]
 8005cd6:	6878      	ldr	r0, [r7, #4]
 8005cd8:	f000 fb8e 	bl	80063f8 <USBD_CtlError>
            break;
 8005cdc:	e054      	b.n	8005d88 <USBD_StdEPReq+0x288>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8005cde:	7bbb      	ldrb	r3, [r7, #14]
 8005ce0:	f003 020f 	and.w	r2, r3, #15
 8005ce4:	6879      	ldr	r1, [r7, #4]
 8005ce6:	4613      	mov	r3, r2
 8005ce8:	009b      	lsls	r3, r3, #2
 8005cea:	4413      	add	r3, r2
 8005cec:	009b      	lsls	r3, r3, #2
 8005cee:	440b      	add	r3, r1
 8005cf0:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8005cf4:	881b      	ldrh	r3, [r3, #0]
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d104      	bne.n	8005d04 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 8005cfa:	6839      	ldr	r1, [r7, #0]
 8005cfc:	6878      	ldr	r0, [r7, #4]
 8005cfe:	f000 fb7b 	bl	80063f8 <USBD_CtlError>
            break;
 8005d02:	e041      	b.n	8005d88 <USBD_StdEPReq+0x288>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005d04:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	da0b      	bge.n	8005d24 <USBD_StdEPReq+0x224>
 8005d0c:	7bbb      	ldrb	r3, [r7, #14]
 8005d0e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005d12:	4613      	mov	r3, r2
 8005d14:	009b      	lsls	r3, r3, #2
 8005d16:	4413      	add	r3, r2
 8005d18:	009b      	lsls	r3, r3, #2
 8005d1a:	3310      	adds	r3, #16
 8005d1c:	687a      	ldr	r2, [r7, #4]
 8005d1e:	4413      	add	r3, r2
 8005d20:	3304      	adds	r3, #4
 8005d22:	e00b      	b.n	8005d3c <USBD_StdEPReq+0x23c>
              &pdev->ep_out[ep_addr & 0x7FU];
 8005d24:	7bbb      	ldrb	r3, [r7, #14]
 8005d26:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005d2a:	4613      	mov	r3, r2
 8005d2c:	009b      	lsls	r3, r3, #2
 8005d2e:	4413      	add	r3, r2
 8005d30:	009b      	lsls	r3, r3, #2
 8005d32:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8005d36:	687a      	ldr	r2, [r7, #4]
 8005d38:	4413      	add	r3, r2
 8005d3a:	3304      	adds	r3, #4
 8005d3c:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8005d3e:	7bbb      	ldrb	r3, [r7, #14]
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d002      	beq.n	8005d4a <USBD_StdEPReq+0x24a>
 8005d44:	7bbb      	ldrb	r3, [r7, #14]
 8005d46:	2b80      	cmp	r3, #128	; 0x80
 8005d48:	d103      	bne.n	8005d52 <USBD_StdEPReq+0x252>
          {
            pep->status = 0x0000U;
 8005d4a:	68bb      	ldr	r3, [r7, #8]
 8005d4c:	2200      	movs	r2, #0
 8005d4e:	601a      	str	r2, [r3, #0]
 8005d50:	e00e      	b.n	8005d70 <USBD_StdEPReq+0x270>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8005d52:	7bbb      	ldrb	r3, [r7, #14]
 8005d54:	4619      	mov	r1, r3
 8005d56:	6878      	ldr	r0, [r7, #4]
 8005d58:	f001 f87c 	bl	8006e54 <USBD_LL_IsStallEP>
 8005d5c:	4603      	mov	r3, r0
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d003      	beq.n	8005d6a <USBD_StdEPReq+0x26a>
          {
            pep->status = 0x0001U;
 8005d62:	68bb      	ldr	r3, [r7, #8]
 8005d64:	2201      	movs	r2, #1
 8005d66:	601a      	str	r2, [r3, #0]
 8005d68:	e002      	b.n	8005d70 <USBD_StdEPReq+0x270>
          }
          else
          {
            pep->status = 0x0000U;
 8005d6a:	68bb      	ldr	r3, [r7, #8]
 8005d6c:	2200      	movs	r2, #0
 8005d6e:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8005d70:	68bb      	ldr	r3, [r7, #8]
 8005d72:	2202      	movs	r2, #2
 8005d74:	4619      	mov	r1, r3
 8005d76:	6878      	ldr	r0, [r7, #4]
 8005d78:	f000 fbaf 	bl	80064da <USBD_CtlSendData>
          break;
 8005d7c:	e004      	b.n	8005d88 <USBD_StdEPReq+0x288>

      default:
        USBD_CtlError(pdev, req);
 8005d7e:	6839      	ldr	r1, [r7, #0]
 8005d80:	6878      	ldr	r0, [r7, #4]
 8005d82:	f000 fb39 	bl	80063f8 <USBD_CtlError>
        break;
 8005d86:	bf00      	nop
      }
      break;
 8005d88:	e004      	b.n	8005d94 <USBD_StdEPReq+0x294>

    default:
      USBD_CtlError(pdev, req);
 8005d8a:	6839      	ldr	r1, [r7, #0]
 8005d8c:	6878      	ldr	r0, [r7, #4]
 8005d8e:	f000 fb33 	bl	80063f8 <USBD_CtlError>
      break;
 8005d92:	bf00      	nop
    }
    break;
 8005d94:	e004      	b.n	8005da0 <USBD_StdEPReq+0x2a0>

  default:
    USBD_CtlError(pdev, req);
 8005d96:	6839      	ldr	r1, [r7, #0]
 8005d98:	6878      	ldr	r0, [r7, #4]
 8005d9a:	f000 fb2d 	bl	80063f8 <USBD_CtlError>
    break;
 8005d9e:	bf00      	nop
  }

  return ret;
 8005da0:	7bfb      	ldrb	r3, [r7, #15]
}
 8005da2:	4618      	mov	r0, r3
 8005da4:	3710      	adds	r7, #16
 8005da6:	46bd      	mov	sp, r7
 8005da8:	bd80      	pop	{r7, pc}
	...

08005dac <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005dac:	b580      	push	{r7, lr}
 8005dae:	b084      	sub	sp, #16
 8005db0:	af00      	add	r7, sp, #0
 8005db2:	6078      	str	r0, [r7, #4]
 8005db4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8005db6:	2300      	movs	r3, #0
 8005db8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8005dba:	2300      	movs	r3, #0
 8005dbc:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8005dbe:	2300      	movs	r3, #0
 8005dc0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8005dc2:	683b      	ldr	r3, [r7, #0]
 8005dc4:	885b      	ldrh	r3, [r3, #2]
 8005dc6:	0a1b      	lsrs	r3, r3, #8
 8005dc8:	b29b      	uxth	r3, r3
 8005dca:	3b01      	subs	r3, #1
 8005dcc:	2b06      	cmp	r3, #6
 8005dce:	f200 8128 	bhi.w	8006022 <USBD_GetDescriptor+0x276>
 8005dd2:	a201      	add	r2, pc, #4	; (adr r2, 8005dd8 <USBD_GetDescriptor+0x2c>)
 8005dd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005dd8:	08005df5 	.word	0x08005df5
 8005ddc:	08005e0d 	.word	0x08005e0d
 8005de0:	08005e4d 	.word	0x08005e4d
 8005de4:	08006023 	.word	0x08006023
 8005de8:	08006023 	.word	0x08006023
 8005dec:	08005fc3 	.word	0x08005fc3
 8005df0:	08005fef 	.word	0x08005fef
      err++;
    }
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	687a      	ldr	r2, [r7, #4]
 8005dfe:	7c12      	ldrb	r2, [r2, #16]
 8005e00:	f107 0108 	add.w	r1, r7, #8
 8005e04:	4610      	mov	r0, r2
 8005e06:	4798      	blx	r3
 8005e08:	60f8      	str	r0, [r7, #12]
    break;
 8005e0a:	e112      	b.n	8006032 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	7c1b      	ldrb	r3, [r3, #16]
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d10d      	bne.n	8005e30 <USBD_GetDescriptor+0x84>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e1c:	f107 0208 	add.w	r2, r7, #8
 8005e20:	4610      	mov	r0, r2
 8005e22:	4798      	blx	r3
 8005e24:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	3301      	adds	r3, #1
 8005e2a:	2202      	movs	r2, #2
 8005e2c:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 8005e2e:	e100      	b.n	8006032 <USBD_GetDescriptor+0x286>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e38:	f107 0208 	add.w	r2, r7, #8
 8005e3c:	4610      	mov	r0, r2
 8005e3e:	4798      	blx	r3
 8005e40:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	3301      	adds	r3, #1
 8005e46:	2202      	movs	r2, #2
 8005e48:	701a      	strb	r2, [r3, #0]
    break;
 8005e4a:	e0f2      	b.n	8006032 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 8005e4c:	683b      	ldr	r3, [r7, #0]
 8005e4e:	885b      	ldrh	r3, [r3, #2]
 8005e50:	b2db      	uxtb	r3, r3
 8005e52:	2b05      	cmp	r3, #5
 8005e54:	f200 80ac 	bhi.w	8005fb0 <USBD_GetDescriptor+0x204>
 8005e58:	a201      	add	r2, pc, #4	; (adr r2, 8005e60 <USBD_GetDescriptor+0xb4>)
 8005e5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e5e:	bf00      	nop
 8005e60:	08005e79 	.word	0x08005e79
 8005e64:	08005ead 	.word	0x08005ead
 8005e68:	08005ee1 	.word	0x08005ee1
 8005e6c:	08005f15 	.word	0x08005f15
 8005e70:	08005f49 	.word	0x08005f49
 8005e74:	08005f7d 	.word	0x08005f7d
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005e7e:	685b      	ldr	r3, [r3, #4]
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d00b      	beq.n	8005e9c <USBD_GetDescriptor+0xf0>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005e8a:	685b      	ldr	r3, [r3, #4]
 8005e8c:	687a      	ldr	r2, [r7, #4]
 8005e8e:	7c12      	ldrb	r2, [r2, #16]
 8005e90:	f107 0108 	add.w	r1, r7, #8
 8005e94:	4610      	mov	r0, r2
 8005e96:	4798      	blx	r3
 8005e98:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005e9a:	e091      	b.n	8005fc0 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8005e9c:	6839      	ldr	r1, [r7, #0]
 8005e9e:	6878      	ldr	r0, [r7, #4]
 8005ea0:	f000 faaa 	bl	80063f8 <USBD_CtlError>
        err++;
 8005ea4:	7afb      	ldrb	r3, [r7, #11]
 8005ea6:	3301      	adds	r3, #1
 8005ea8:	72fb      	strb	r3, [r7, #11]
      break;
 8005eaa:	e089      	b.n	8005fc0 <USBD_GetDescriptor+0x214>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005eb2:	689b      	ldr	r3, [r3, #8]
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d00b      	beq.n	8005ed0 <USBD_GetDescriptor+0x124>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005ebe:	689b      	ldr	r3, [r3, #8]
 8005ec0:	687a      	ldr	r2, [r7, #4]
 8005ec2:	7c12      	ldrb	r2, [r2, #16]
 8005ec4:	f107 0108 	add.w	r1, r7, #8
 8005ec8:	4610      	mov	r0, r2
 8005eca:	4798      	blx	r3
 8005ecc:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005ece:	e077      	b.n	8005fc0 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8005ed0:	6839      	ldr	r1, [r7, #0]
 8005ed2:	6878      	ldr	r0, [r7, #4]
 8005ed4:	f000 fa90 	bl	80063f8 <USBD_CtlError>
        err++;
 8005ed8:	7afb      	ldrb	r3, [r7, #11]
 8005eda:	3301      	adds	r3, #1
 8005edc:	72fb      	strb	r3, [r7, #11]
      break;
 8005ede:	e06f      	b.n	8005fc0 <USBD_GetDescriptor+0x214>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005ee6:	68db      	ldr	r3, [r3, #12]
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d00b      	beq.n	8005f04 <USBD_GetDescriptor+0x158>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005ef2:	68db      	ldr	r3, [r3, #12]
 8005ef4:	687a      	ldr	r2, [r7, #4]
 8005ef6:	7c12      	ldrb	r2, [r2, #16]
 8005ef8:	f107 0108 	add.w	r1, r7, #8
 8005efc:	4610      	mov	r0, r2
 8005efe:	4798      	blx	r3
 8005f00:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005f02:	e05d      	b.n	8005fc0 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8005f04:	6839      	ldr	r1, [r7, #0]
 8005f06:	6878      	ldr	r0, [r7, #4]
 8005f08:	f000 fa76 	bl	80063f8 <USBD_CtlError>
        err++;
 8005f0c:	7afb      	ldrb	r3, [r7, #11]
 8005f0e:	3301      	adds	r3, #1
 8005f10:	72fb      	strb	r3, [r7, #11]
      break;
 8005f12:	e055      	b.n	8005fc0 <USBD_GetDescriptor+0x214>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005f1a:	691b      	ldr	r3, [r3, #16]
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d00b      	beq.n	8005f38 <USBD_GetDescriptor+0x18c>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005f26:	691b      	ldr	r3, [r3, #16]
 8005f28:	687a      	ldr	r2, [r7, #4]
 8005f2a:	7c12      	ldrb	r2, [r2, #16]
 8005f2c:	f107 0108 	add.w	r1, r7, #8
 8005f30:	4610      	mov	r0, r2
 8005f32:	4798      	blx	r3
 8005f34:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005f36:	e043      	b.n	8005fc0 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8005f38:	6839      	ldr	r1, [r7, #0]
 8005f3a:	6878      	ldr	r0, [r7, #4]
 8005f3c:	f000 fa5c 	bl	80063f8 <USBD_CtlError>
        err++;
 8005f40:	7afb      	ldrb	r3, [r7, #11]
 8005f42:	3301      	adds	r3, #1
 8005f44:	72fb      	strb	r3, [r7, #11]
      break;
 8005f46:	e03b      	b.n	8005fc0 <USBD_GetDescriptor+0x214>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005f4e:	695b      	ldr	r3, [r3, #20]
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d00b      	beq.n	8005f6c <USBD_GetDescriptor+0x1c0>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005f5a:	695b      	ldr	r3, [r3, #20]
 8005f5c:	687a      	ldr	r2, [r7, #4]
 8005f5e:	7c12      	ldrb	r2, [r2, #16]
 8005f60:	f107 0108 	add.w	r1, r7, #8
 8005f64:	4610      	mov	r0, r2
 8005f66:	4798      	blx	r3
 8005f68:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005f6a:	e029      	b.n	8005fc0 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8005f6c:	6839      	ldr	r1, [r7, #0]
 8005f6e:	6878      	ldr	r0, [r7, #4]
 8005f70:	f000 fa42 	bl	80063f8 <USBD_CtlError>
        err++;
 8005f74:	7afb      	ldrb	r3, [r7, #11]
 8005f76:	3301      	adds	r3, #1
 8005f78:	72fb      	strb	r3, [r7, #11]
      break;
 8005f7a:	e021      	b.n	8005fc0 <USBD_GetDescriptor+0x214>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005f82:	699b      	ldr	r3, [r3, #24]
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d00b      	beq.n	8005fa0 <USBD_GetDescriptor+0x1f4>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005f8e:	699b      	ldr	r3, [r3, #24]
 8005f90:	687a      	ldr	r2, [r7, #4]
 8005f92:	7c12      	ldrb	r2, [r2, #16]
 8005f94:	f107 0108 	add.w	r1, r7, #8
 8005f98:	4610      	mov	r0, r2
 8005f9a:	4798      	blx	r3
 8005f9c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005f9e:	e00f      	b.n	8005fc0 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8005fa0:	6839      	ldr	r1, [r7, #0]
 8005fa2:	6878      	ldr	r0, [r7, #4]
 8005fa4:	f000 fa28 	bl	80063f8 <USBD_CtlError>
        err++;
 8005fa8:	7afb      	ldrb	r3, [r7, #11]
 8005faa:	3301      	adds	r3, #1
 8005fac:	72fb      	strb	r3, [r7, #11]
      break;
 8005fae:	e007      	b.n	8005fc0 <USBD_GetDescriptor+0x214>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 8005fb0:	6839      	ldr	r1, [r7, #0]
 8005fb2:	6878      	ldr	r0, [r7, #4]
 8005fb4:	f000 fa20 	bl	80063f8 <USBD_CtlError>
      err++;
 8005fb8:	7afb      	ldrb	r3, [r7, #11]
 8005fba:	3301      	adds	r3, #1
 8005fbc:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 8005fbe:	bf00      	nop
    }
    break;
 8005fc0:	e037      	b.n	8006032 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	7c1b      	ldrb	r3, [r3, #16]
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d109      	bne.n	8005fde <USBD_GetDescriptor+0x232>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005fd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005fd2:	f107 0208 	add.w	r2, r7, #8
 8005fd6:	4610      	mov	r0, r2
 8005fd8:	4798      	blx	r3
 8005fda:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8005fdc:	e029      	b.n	8006032 <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 8005fde:	6839      	ldr	r1, [r7, #0]
 8005fe0:	6878      	ldr	r0, [r7, #4]
 8005fe2:	f000 fa09 	bl	80063f8 <USBD_CtlError>
      err++;
 8005fe6:	7afb      	ldrb	r3, [r7, #11]
 8005fe8:	3301      	adds	r3, #1
 8005fea:	72fb      	strb	r3, [r7, #11]
    break;
 8005fec:	e021      	b.n	8006032 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	7c1b      	ldrb	r3, [r3, #16]
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d10d      	bne.n	8006012 <USBD_GetDescriptor+0x266>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005ffc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ffe:	f107 0208 	add.w	r2, r7, #8
 8006002:	4610      	mov	r0, r2
 8006004:	4798      	blx	r3
 8006006:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	3301      	adds	r3, #1
 800600c:	2207      	movs	r2, #7
 800600e:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8006010:	e00f      	b.n	8006032 <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 8006012:	6839      	ldr	r1, [r7, #0]
 8006014:	6878      	ldr	r0, [r7, #4]
 8006016:	f000 f9ef 	bl	80063f8 <USBD_CtlError>
      err++;
 800601a:	7afb      	ldrb	r3, [r7, #11]
 800601c:	3301      	adds	r3, #1
 800601e:	72fb      	strb	r3, [r7, #11]
    break;
 8006020:	e007      	b.n	8006032 <USBD_GetDescriptor+0x286>

  default:
    USBD_CtlError(pdev, req);
 8006022:	6839      	ldr	r1, [r7, #0]
 8006024:	6878      	ldr	r0, [r7, #4]
 8006026:	f000 f9e7 	bl	80063f8 <USBD_CtlError>
    err++;
 800602a:	7afb      	ldrb	r3, [r7, #11]
 800602c:	3301      	adds	r3, #1
 800602e:	72fb      	strb	r3, [r7, #11]
    break;
 8006030:	bf00      	nop
  }

  if (err != 0U)
 8006032:	7afb      	ldrb	r3, [r7, #11]
 8006034:	2b00      	cmp	r3, #0
 8006036:	d11e      	bne.n	8006076 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 8006038:	683b      	ldr	r3, [r7, #0]
 800603a:	88db      	ldrh	r3, [r3, #6]
 800603c:	2b00      	cmp	r3, #0
 800603e:	d016      	beq.n	800606e <USBD_GetDescriptor+0x2c2>
    {
      if (len != 0U)
 8006040:	893b      	ldrh	r3, [r7, #8]
 8006042:	2b00      	cmp	r3, #0
 8006044:	d00e      	beq.n	8006064 <USBD_GetDescriptor+0x2b8>
      {
        len = MIN(len, req->wLength);
 8006046:	683b      	ldr	r3, [r7, #0]
 8006048:	88da      	ldrh	r2, [r3, #6]
 800604a:	893b      	ldrh	r3, [r7, #8]
 800604c:	4293      	cmp	r3, r2
 800604e:	bf28      	it	cs
 8006050:	4613      	movcs	r3, r2
 8006052:	b29b      	uxth	r3, r3
 8006054:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 8006056:	893b      	ldrh	r3, [r7, #8]
 8006058:	461a      	mov	r2, r3
 800605a:	68f9      	ldr	r1, [r7, #12]
 800605c:	6878      	ldr	r0, [r7, #4]
 800605e:	f000 fa3c 	bl	80064da <USBD_CtlSendData>
 8006062:	e009      	b.n	8006078 <USBD_GetDescriptor+0x2cc>
      }
      else
      {
        USBD_CtlError(pdev, req);
 8006064:	6839      	ldr	r1, [r7, #0]
 8006066:	6878      	ldr	r0, [r7, #4]
 8006068:	f000 f9c6 	bl	80063f8 <USBD_CtlError>
 800606c:	e004      	b.n	8006078 <USBD_GetDescriptor+0x2cc>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 800606e:	6878      	ldr	r0, [r7, #4]
 8006070:	f000 fa8d 	bl	800658e <USBD_CtlSendStatus>
 8006074:	e000      	b.n	8006078 <USBD_GetDescriptor+0x2cc>
    return;
 8006076:	bf00      	nop
    }
  }
}
 8006078:	3710      	adds	r7, #16
 800607a:	46bd      	mov	sp, r7
 800607c:	bd80      	pop	{r7, pc}
 800607e:	bf00      	nop

08006080 <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006080:	b580      	push	{r7, lr}
 8006082:	b084      	sub	sp, #16
 8006084:	af00      	add	r7, sp, #0
 8006086:	6078      	str	r0, [r7, #4]
 8006088:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800608a:	683b      	ldr	r3, [r7, #0]
 800608c:	889b      	ldrh	r3, [r3, #4]
 800608e:	2b00      	cmp	r3, #0
 8006090:	d130      	bne.n	80060f4 <USBD_SetAddress+0x74>
 8006092:	683b      	ldr	r3, [r7, #0]
 8006094:	88db      	ldrh	r3, [r3, #6]
 8006096:	2b00      	cmp	r3, #0
 8006098:	d12c      	bne.n	80060f4 <USBD_SetAddress+0x74>
 800609a:	683b      	ldr	r3, [r7, #0]
 800609c:	885b      	ldrh	r3, [r3, #2]
 800609e:	2b7f      	cmp	r3, #127	; 0x7f
 80060a0:	d828      	bhi.n	80060f4 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80060a2:	683b      	ldr	r3, [r7, #0]
 80060a4:	885b      	ldrh	r3, [r3, #2]
 80060a6:	b2db      	uxtb	r3, r3
 80060a8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80060ac:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80060b4:	2b03      	cmp	r3, #3
 80060b6:	d104      	bne.n	80060c2 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 80060b8:	6839      	ldr	r1, [r7, #0]
 80060ba:	6878      	ldr	r0, [r7, #4]
 80060bc:	f000 f99c 	bl	80063f8 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80060c0:	e01c      	b.n	80060fc <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	7bfa      	ldrb	r2, [r7, #15]
 80060c6:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80060ca:	7bfb      	ldrb	r3, [r7, #15]
 80060cc:	4619      	mov	r1, r3
 80060ce:	6878      	ldr	r0, [r7, #4]
 80060d0:	f000 feec 	bl	8006eac <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80060d4:	6878      	ldr	r0, [r7, #4]
 80060d6:	f000 fa5a 	bl	800658e <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80060da:	7bfb      	ldrb	r3, [r7, #15]
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d004      	beq.n	80060ea <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	2202      	movs	r2, #2
 80060e4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80060e8:	e008      	b.n	80060fc <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	2201      	movs	r2, #1
 80060ee:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80060f2:	e003      	b.n	80060fc <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80060f4:	6839      	ldr	r1, [r7, #0]
 80060f6:	6878      	ldr	r0, [r7, #4]
 80060f8:	f000 f97e 	bl	80063f8 <USBD_CtlError>
  }
}
 80060fc:	bf00      	nop
 80060fe:	3710      	adds	r7, #16
 8006100:	46bd      	mov	sp, r7
 8006102:	bd80      	pop	{r7, pc}

08006104 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006104:	b580      	push	{r7, lr}
 8006106:	b084      	sub	sp, #16
 8006108:	af00      	add	r7, sp, #0
 800610a:	6078      	str	r0, [r7, #4]
 800610c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800610e:	2300      	movs	r3, #0
 8006110:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8006112:	683b      	ldr	r3, [r7, #0]
 8006114:	885b      	ldrh	r3, [r3, #2]
 8006116:	b2da      	uxtb	r2, r3
 8006118:	4b4b      	ldr	r3, [pc, #300]	; (8006248 <USBD_SetConfig+0x144>)
 800611a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800611c:	4b4a      	ldr	r3, [pc, #296]	; (8006248 <USBD_SetConfig+0x144>)
 800611e:	781b      	ldrb	r3, [r3, #0]
 8006120:	2b01      	cmp	r3, #1
 8006122:	d905      	bls.n	8006130 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8006124:	6839      	ldr	r1, [r7, #0]
 8006126:	6878      	ldr	r0, [r7, #4]
 8006128:	f000 f966 	bl	80063f8 <USBD_CtlError>
    return USBD_FAIL;
 800612c:	2303      	movs	r3, #3
 800612e:	e087      	b.n	8006240 <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006136:	2b02      	cmp	r3, #2
 8006138:	d002      	beq.n	8006140 <USBD_SetConfig+0x3c>
 800613a:	2b03      	cmp	r3, #3
 800613c:	d025      	beq.n	800618a <USBD_SetConfig+0x86>
 800613e:	e071      	b.n	8006224 <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 8006140:	4b41      	ldr	r3, [pc, #260]	; (8006248 <USBD_SetConfig+0x144>)
 8006142:	781b      	ldrb	r3, [r3, #0]
 8006144:	2b00      	cmp	r3, #0
 8006146:	d01c      	beq.n	8006182 <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 8006148:	4b3f      	ldr	r3, [pc, #252]	; (8006248 <USBD_SetConfig+0x144>)
 800614a:	781b      	ldrb	r3, [r3, #0]
 800614c:	461a      	mov	r2, r3
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 8006152:	4b3d      	ldr	r3, [pc, #244]	; (8006248 <USBD_SetConfig+0x144>)
 8006154:	781b      	ldrb	r3, [r3, #0]
 8006156:	4619      	mov	r1, r3
 8006158:	6878      	ldr	r0, [r7, #4]
 800615a:	f7ff f9a7 	bl	80054ac <USBD_SetClassConfig>
 800615e:	4603      	mov	r3, r0
 8006160:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 8006162:	7bfb      	ldrb	r3, [r7, #15]
 8006164:	2b00      	cmp	r3, #0
 8006166:	d004      	beq.n	8006172 <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 8006168:	6839      	ldr	r1, [r7, #0]
 800616a:	6878      	ldr	r0, [r7, #4]
 800616c:	f000 f944 	bl	80063f8 <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8006170:	e065      	b.n	800623e <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8006172:	6878      	ldr	r0, [r7, #4]
 8006174:	f000 fa0b 	bl	800658e <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	2203      	movs	r2, #3
 800617c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8006180:	e05d      	b.n	800623e <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8006182:	6878      	ldr	r0, [r7, #4]
 8006184:	f000 fa03 	bl	800658e <USBD_CtlSendStatus>
    break;
 8006188:	e059      	b.n	800623e <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 800618a:	4b2f      	ldr	r3, [pc, #188]	; (8006248 <USBD_SetConfig+0x144>)
 800618c:	781b      	ldrb	r3, [r3, #0]
 800618e:	2b00      	cmp	r3, #0
 8006190:	d112      	bne.n	80061b8 <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	2202      	movs	r2, #2
 8006196:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 800619a:	4b2b      	ldr	r3, [pc, #172]	; (8006248 <USBD_SetConfig+0x144>)
 800619c:	781b      	ldrb	r3, [r3, #0]
 800619e:	461a      	mov	r2, r3
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80061a4:	4b28      	ldr	r3, [pc, #160]	; (8006248 <USBD_SetConfig+0x144>)
 80061a6:	781b      	ldrb	r3, [r3, #0]
 80061a8:	4619      	mov	r1, r3
 80061aa:	6878      	ldr	r0, [r7, #4]
 80061ac:	f7ff f99a 	bl	80054e4 <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 80061b0:	6878      	ldr	r0, [r7, #4]
 80061b2:	f000 f9ec 	bl	800658e <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 80061b6:	e042      	b.n	800623e <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 80061b8:	4b23      	ldr	r3, [pc, #140]	; (8006248 <USBD_SetConfig+0x144>)
 80061ba:	781b      	ldrb	r3, [r3, #0]
 80061bc:	461a      	mov	r2, r3
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	685b      	ldr	r3, [r3, #4]
 80061c2:	429a      	cmp	r2, r3
 80061c4:	d02a      	beq.n	800621c <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	685b      	ldr	r3, [r3, #4]
 80061ca:	b2db      	uxtb	r3, r3
 80061cc:	4619      	mov	r1, r3
 80061ce:	6878      	ldr	r0, [r7, #4]
 80061d0:	f7ff f988 	bl	80054e4 <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 80061d4:	4b1c      	ldr	r3, [pc, #112]	; (8006248 <USBD_SetConfig+0x144>)
 80061d6:	781b      	ldrb	r3, [r3, #0]
 80061d8:	461a      	mov	r2, r3
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 80061de:	4b1a      	ldr	r3, [pc, #104]	; (8006248 <USBD_SetConfig+0x144>)
 80061e0:	781b      	ldrb	r3, [r3, #0]
 80061e2:	4619      	mov	r1, r3
 80061e4:	6878      	ldr	r0, [r7, #4]
 80061e6:	f7ff f961 	bl	80054ac <USBD_SetClassConfig>
 80061ea:	4603      	mov	r3, r0
 80061ec:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 80061ee:	7bfb      	ldrb	r3, [r7, #15]
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d00f      	beq.n	8006214 <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 80061f4:	6839      	ldr	r1, [r7, #0]
 80061f6:	6878      	ldr	r0, [r7, #4]
 80061f8:	f000 f8fe 	bl	80063f8 <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	685b      	ldr	r3, [r3, #4]
 8006200:	b2db      	uxtb	r3, r3
 8006202:	4619      	mov	r1, r3
 8006204:	6878      	ldr	r0, [r7, #4]
 8006206:	f7ff f96d 	bl	80054e4 <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	2202      	movs	r2, #2
 800620e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8006212:	e014      	b.n	800623e <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8006214:	6878      	ldr	r0, [r7, #4]
 8006216:	f000 f9ba 	bl	800658e <USBD_CtlSendStatus>
    break;
 800621a:	e010      	b.n	800623e <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 800621c:	6878      	ldr	r0, [r7, #4]
 800621e:	f000 f9b6 	bl	800658e <USBD_CtlSendStatus>
    break;
 8006222:	e00c      	b.n	800623e <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 8006224:	6839      	ldr	r1, [r7, #0]
 8006226:	6878      	ldr	r0, [r7, #4]
 8006228:	f000 f8e6 	bl	80063f8 <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 800622c:	4b06      	ldr	r3, [pc, #24]	; (8006248 <USBD_SetConfig+0x144>)
 800622e:	781b      	ldrb	r3, [r3, #0]
 8006230:	4619      	mov	r1, r3
 8006232:	6878      	ldr	r0, [r7, #4]
 8006234:	f7ff f956 	bl	80054e4 <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 8006238:	2303      	movs	r3, #3
 800623a:	73fb      	strb	r3, [r7, #15]
    break;
 800623c:	bf00      	nop
  }

  return ret;
 800623e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006240:	4618      	mov	r0, r3
 8006242:	3710      	adds	r7, #16
 8006244:	46bd      	mov	sp, r7
 8006246:	bd80      	pop	{r7, pc}
 8006248:	20000204 	.word	0x20000204

0800624c <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800624c:	b580      	push	{r7, lr}
 800624e:	b082      	sub	sp, #8
 8006250:	af00      	add	r7, sp, #0
 8006252:	6078      	str	r0, [r7, #4]
 8006254:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8006256:	683b      	ldr	r3, [r7, #0]
 8006258:	88db      	ldrh	r3, [r3, #6]
 800625a:	2b01      	cmp	r3, #1
 800625c:	d004      	beq.n	8006268 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800625e:	6839      	ldr	r1, [r7, #0]
 8006260:	6878      	ldr	r0, [r7, #4]
 8006262:	f000 f8c9 	bl	80063f8 <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 8006266:	e021      	b.n	80062ac <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800626e:	2b01      	cmp	r3, #1
 8006270:	db17      	blt.n	80062a2 <USBD_GetConfig+0x56>
 8006272:	2b02      	cmp	r3, #2
 8006274:	dd02      	ble.n	800627c <USBD_GetConfig+0x30>
 8006276:	2b03      	cmp	r3, #3
 8006278:	d00b      	beq.n	8006292 <USBD_GetConfig+0x46>
 800627a:	e012      	b.n	80062a2 <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	2200      	movs	r2, #0
 8006280:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	3308      	adds	r3, #8
 8006286:	2201      	movs	r2, #1
 8006288:	4619      	mov	r1, r3
 800628a:	6878      	ldr	r0, [r7, #4]
 800628c:	f000 f925 	bl	80064da <USBD_CtlSendData>
      break;
 8006290:	e00c      	b.n	80062ac <USBD_GetConfig+0x60>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	3304      	adds	r3, #4
 8006296:	2201      	movs	r2, #1
 8006298:	4619      	mov	r1, r3
 800629a:	6878      	ldr	r0, [r7, #4]
 800629c:	f000 f91d 	bl	80064da <USBD_CtlSendData>
      break;
 80062a0:	e004      	b.n	80062ac <USBD_GetConfig+0x60>
      USBD_CtlError(pdev, req);
 80062a2:	6839      	ldr	r1, [r7, #0]
 80062a4:	6878      	ldr	r0, [r7, #4]
 80062a6:	f000 f8a7 	bl	80063f8 <USBD_CtlError>
      break;
 80062aa:	bf00      	nop
}
 80062ac:	bf00      	nop
 80062ae:	3708      	adds	r7, #8
 80062b0:	46bd      	mov	sp, r7
 80062b2:	bd80      	pop	{r7, pc}

080062b4 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80062b4:	b580      	push	{r7, lr}
 80062b6:	b082      	sub	sp, #8
 80062b8:	af00      	add	r7, sp, #0
 80062ba:	6078      	str	r0, [r7, #4]
 80062bc:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80062c4:	3b01      	subs	r3, #1
 80062c6:	2b02      	cmp	r3, #2
 80062c8:	d81e      	bhi.n	8006308 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 80062ca:	683b      	ldr	r3, [r7, #0]
 80062cc:	88db      	ldrh	r3, [r3, #6]
 80062ce:	2b02      	cmp	r3, #2
 80062d0:	d004      	beq.n	80062dc <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 80062d2:	6839      	ldr	r1, [r7, #0]
 80062d4:	6878      	ldr	r0, [r7, #4]
 80062d6:	f000 f88f 	bl	80063f8 <USBD_CtlError>
      break;
 80062da:	e01a      	b.n	8006312 <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	2201      	movs	r2, #1
 80062e0:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d005      	beq.n	80062f8 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	68db      	ldr	r3, [r3, #12]
 80062f0:	f043 0202 	orr.w	r2, r3, #2
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	330c      	adds	r3, #12
 80062fc:	2202      	movs	r2, #2
 80062fe:	4619      	mov	r1, r3
 8006300:	6878      	ldr	r0, [r7, #4]
 8006302:	f000 f8ea 	bl	80064da <USBD_CtlSendData>
    break;
 8006306:	e004      	b.n	8006312 <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 8006308:	6839      	ldr	r1, [r7, #0]
 800630a:	6878      	ldr	r0, [r7, #4]
 800630c:	f000 f874 	bl	80063f8 <USBD_CtlError>
    break;
 8006310:	bf00      	nop
  }
}
 8006312:	bf00      	nop
 8006314:	3708      	adds	r7, #8
 8006316:	46bd      	mov	sp, r7
 8006318:	bd80      	pop	{r7, pc}

0800631a <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800631a:	b580      	push	{r7, lr}
 800631c:	b082      	sub	sp, #8
 800631e:	af00      	add	r7, sp, #0
 8006320:	6078      	str	r0, [r7, #4]
 8006322:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006324:	683b      	ldr	r3, [r7, #0]
 8006326:	885b      	ldrh	r3, [r3, #2]
 8006328:	2b01      	cmp	r3, #1
 800632a:	d106      	bne.n	800633a <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	2201      	movs	r2, #1
 8006330:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8006334:	6878      	ldr	r0, [r7, #4]
 8006336:	f000 f92a 	bl	800658e <USBD_CtlSendStatus>
  }
}
 800633a:	bf00      	nop
 800633c:	3708      	adds	r7, #8
 800633e:	46bd      	mov	sp, r7
 8006340:	bd80      	pop	{r7, pc}

08006342 <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006342:	b580      	push	{r7, lr}
 8006344:	b082      	sub	sp, #8
 8006346:	af00      	add	r7, sp, #0
 8006348:	6078      	str	r0, [r7, #4]
 800634a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006352:	3b01      	subs	r3, #1
 8006354:	2b02      	cmp	r3, #2
 8006356:	d80b      	bhi.n	8006370 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006358:	683b      	ldr	r3, [r7, #0]
 800635a:	885b      	ldrh	r3, [r3, #2]
 800635c:	2b01      	cmp	r3, #1
 800635e:	d10c      	bne.n	800637a <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	2200      	movs	r2, #0
 8006364:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8006368:	6878      	ldr	r0, [r7, #4]
 800636a:	f000 f910 	bl	800658e <USBD_CtlSendStatus>
      }
      break;
 800636e:	e004      	b.n	800637a <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8006370:	6839      	ldr	r1, [r7, #0]
 8006372:	6878      	ldr	r0, [r7, #4]
 8006374:	f000 f840 	bl	80063f8 <USBD_CtlError>
      break;
 8006378:	e000      	b.n	800637c <USBD_ClrFeature+0x3a>
      break;
 800637a:	bf00      	nop
  }
}
 800637c:	bf00      	nop
 800637e:	3708      	adds	r7, #8
 8006380:	46bd      	mov	sp, r7
 8006382:	bd80      	pop	{r7, pc}

08006384 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8006384:	b580      	push	{r7, lr}
 8006386:	b084      	sub	sp, #16
 8006388:	af00      	add	r7, sp, #0
 800638a:	6078      	str	r0, [r7, #4]
 800638c:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800638e:	683b      	ldr	r3, [r7, #0]
 8006390:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	781a      	ldrb	r2, [r3, #0]
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	3301      	adds	r3, #1
 800639e:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	781a      	ldrb	r2, [r3, #0]
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	3301      	adds	r3, #1
 80063ac:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80063ae:	68f8      	ldr	r0, [r7, #12]
 80063b0:	f7ff fad3 	bl	800595a <SWAPBYTE>
 80063b4:	4603      	mov	r3, r0
 80063b6:	461a      	mov	r2, r3
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	3301      	adds	r3, #1
 80063c0:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	3301      	adds	r3, #1
 80063c6:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80063c8:	68f8      	ldr	r0, [r7, #12]
 80063ca:	f7ff fac6 	bl	800595a <SWAPBYTE>
 80063ce:	4603      	mov	r3, r0
 80063d0:	461a      	mov	r2, r3
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	3301      	adds	r3, #1
 80063da:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	3301      	adds	r3, #1
 80063e0:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80063e2:	68f8      	ldr	r0, [r7, #12]
 80063e4:	f7ff fab9 	bl	800595a <SWAPBYTE>
 80063e8:	4603      	mov	r3, r0
 80063ea:	461a      	mov	r2, r3
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	80da      	strh	r2, [r3, #6]
}
 80063f0:	bf00      	nop
 80063f2:	3710      	adds	r7, #16
 80063f4:	46bd      	mov	sp, r7
 80063f6:	bd80      	pop	{r7, pc}

080063f8 <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80063f8:	b580      	push	{r7, lr}
 80063fa:	b082      	sub	sp, #8
 80063fc:	af00      	add	r7, sp, #0
 80063fe:	6078      	str	r0, [r7, #4]
 8006400:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8006402:	2180      	movs	r1, #128	; 0x80
 8006404:	6878      	ldr	r0, [r7, #4]
 8006406:	f000 fce7 	bl	8006dd8 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800640a:	2100      	movs	r1, #0
 800640c:	6878      	ldr	r0, [r7, #4]
 800640e:	f000 fce3 	bl	8006dd8 <USBD_LL_StallEP>
}
 8006412:	bf00      	nop
 8006414:	3708      	adds	r7, #8
 8006416:	46bd      	mov	sp, r7
 8006418:	bd80      	pop	{r7, pc}

0800641a <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800641a:	b580      	push	{r7, lr}
 800641c:	b086      	sub	sp, #24
 800641e:	af00      	add	r7, sp, #0
 8006420:	60f8      	str	r0, [r7, #12]
 8006422:	60b9      	str	r1, [r7, #8]
 8006424:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8006426:	2300      	movs	r3, #0
 8006428:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	2b00      	cmp	r3, #0
 800642e:	d036      	beq.n	800649e <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8006434:	6938      	ldr	r0, [r7, #16]
 8006436:	f000 f836 	bl	80064a6 <USBD_GetLen>
 800643a:	4603      	mov	r3, r0
 800643c:	3301      	adds	r3, #1
 800643e:	b29b      	uxth	r3, r3
 8006440:	005b      	lsls	r3, r3, #1
 8006442:	b29a      	uxth	r2, r3
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8006448:	7dfb      	ldrb	r3, [r7, #23]
 800644a:	68ba      	ldr	r2, [r7, #8]
 800644c:	4413      	add	r3, r2
 800644e:	687a      	ldr	r2, [r7, #4]
 8006450:	7812      	ldrb	r2, [r2, #0]
 8006452:	701a      	strb	r2, [r3, #0]
  idx++;
 8006454:	7dfb      	ldrb	r3, [r7, #23]
 8006456:	3301      	adds	r3, #1
 8006458:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800645a:	7dfb      	ldrb	r3, [r7, #23]
 800645c:	68ba      	ldr	r2, [r7, #8]
 800645e:	4413      	add	r3, r2
 8006460:	2203      	movs	r2, #3
 8006462:	701a      	strb	r2, [r3, #0]
  idx++;
 8006464:	7dfb      	ldrb	r3, [r7, #23]
 8006466:	3301      	adds	r3, #1
 8006468:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800646a:	e013      	b.n	8006494 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800646c:	7dfb      	ldrb	r3, [r7, #23]
 800646e:	68ba      	ldr	r2, [r7, #8]
 8006470:	4413      	add	r3, r2
 8006472:	693a      	ldr	r2, [r7, #16]
 8006474:	7812      	ldrb	r2, [r2, #0]
 8006476:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8006478:	693b      	ldr	r3, [r7, #16]
 800647a:	3301      	adds	r3, #1
 800647c:	613b      	str	r3, [r7, #16]
    idx++;
 800647e:	7dfb      	ldrb	r3, [r7, #23]
 8006480:	3301      	adds	r3, #1
 8006482:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8006484:	7dfb      	ldrb	r3, [r7, #23]
 8006486:	68ba      	ldr	r2, [r7, #8]
 8006488:	4413      	add	r3, r2
 800648a:	2200      	movs	r2, #0
 800648c:	701a      	strb	r2, [r3, #0]
    idx++;
 800648e:	7dfb      	ldrb	r3, [r7, #23]
 8006490:	3301      	adds	r3, #1
 8006492:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8006494:	693b      	ldr	r3, [r7, #16]
 8006496:	781b      	ldrb	r3, [r3, #0]
 8006498:	2b00      	cmp	r3, #0
 800649a:	d1e7      	bne.n	800646c <USBD_GetString+0x52>
 800649c:	e000      	b.n	80064a0 <USBD_GetString+0x86>
    return;
 800649e:	bf00      	nop
  }
}
 80064a0:	3718      	adds	r7, #24
 80064a2:	46bd      	mov	sp, r7
 80064a4:	bd80      	pop	{r7, pc}

080064a6 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80064a6:	b480      	push	{r7}
 80064a8:	b085      	sub	sp, #20
 80064aa:	af00      	add	r7, sp, #0
 80064ac:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80064ae:	2300      	movs	r3, #0
 80064b0:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80064b6:	e005      	b.n	80064c4 <USBD_GetLen+0x1e>
  {
    len++;
 80064b8:	7bfb      	ldrb	r3, [r7, #15]
 80064ba:	3301      	adds	r3, #1
 80064bc:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80064be:	68bb      	ldr	r3, [r7, #8]
 80064c0:	3301      	adds	r3, #1
 80064c2:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80064c4:	68bb      	ldr	r3, [r7, #8]
 80064c6:	781b      	ldrb	r3, [r3, #0]
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d1f5      	bne.n	80064b8 <USBD_GetLen+0x12>
  }

  return len;
 80064cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80064ce:	4618      	mov	r0, r3
 80064d0:	3714      	adds	r7, #20
 80064d2:	46bd      	mov	sp, r7
 80064d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064d8:	4770      	bx	lr

080064da <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80064da:	b580      	push	{r7, lr}
 80064dc:	b084      	sub	sp, #16
 80064de:	af00      	add	r7, sp, #0
 80064e0:	60f8      	str	r0, [r7, #12]
 80064e2:	60b9      	str	r1, [r7, #8]
 80064e4:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	2202      	movs	r2, #2
 80064ea:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	687a      	ldr	r2, [r7, #4]
 80064f2:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	687a      	ldr	r2, [r7, #4]
 80064f8:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	68ba      	ldr	r2, [r7, #8]
 80064fe:	2100      	movs	r1, #0
 8006500:	68f8      	ldr	r0, [r7, #12]
 8006502:	f000 fcf2 	bl	8006eea <USBD_LL_Transmit>

  return USBD_OK;
 8006506:	2300      	movs	r3, #0
}
 8006508:	4618      	mov	r0, r3
 800650a:	3710      	adds	r7, #16
 800650c:	46bd      	mov	sp, r7
 800650e:	bd80      	pop	{r7, pc}

08006510 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8006510:	b580      	push	{r7, lr}
 8006512:	b084      	sub	sp, #16
 8006514:	af00      	add	r7, sp, #0
 8006516:	60f8      	str	r0, [r7, #12]
 8006518:	60b9      	str	r1, [r7, #8]
 800651a:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	68ba      	ldr	r2, [r7, #8]
 8006520:	2100      	movs	r1, #0
 8006522:	68f8      	ldr	r0, [r7, #12]
 8006524:	f000 fce1 	bl	8006eea <USBD_LL_Transmit>

  return USBD_OK;
 8006528:	2300      	movs	r3, #0
}
 800652a:	4618      	mov	r0, r3
 800652c:	3710      	adds	r7, #16
 800652e:	46bd      	mov	sp, r7
 8006530:	bd80      	pop	{r7, pc}

08006532 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8006532:	b580      	push	{r7, lr}
 8006534:	b084      	sub	sp, #16
 8006536:	af00      	add	r7, sp, #0
 8006538:	60f8      	str	r0, [r7, #12]
 800653a:	60b9      	str	r1, [r7, #8]
 800653c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	2203      	movs	r2, #3
 8006542:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	687a      	ldr	r2, [r7, #4]
 800654a:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  pdev->ep_out[0].rem_length = len;
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	687a      	ldr	r2, [r7, #4]
 8006552:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	68ba      	ldr	r2, [r7, #8]
 800655a:	2100      	movs	r1, #0
 800655c:	68f8      	ldr	r0, [r7, #12]
 800655e:	f000 fce5 	bl	8006f2c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006562:	2300      	movs	r3, #0
}
 8006564:	4618      	mov	r0, r3
 8006566:	3710      	adds	r7, #16
 8006568:	46bd      	mov	sp, r7
 800656a:	bd80      	pop	{r7, pc}

0800656c <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800656c:	b580      	push	{r7, lr}
 800656e:	b084      	sub	sp, #16
 8006570:	af00      	add	r7, sp, #0
 8006572:	60f8      	str	r0, [r7, #12]
 8006574:	60b9      	str	r1, [r7, #8]
 8006576:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	68ba      	ldr	r2, [r7, #8]
 800657c:	2100      	movs	r1, #0
 800657e:	68f8      	ldr	r0, [r7, #12]
 8006580:	f000 fcd4 	bl	8006f2c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006584:	2300      	movs	r3, #0
}
 8006586:	4618      	mov	r0, r3
 8006588:	3710      	adds	r7, #16
 800658a:	46bd      	mov	sp, r7
 800658c:	bd80      	pop	{r7, pc}

0800658e <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800658e:	b580      	push	{r7, lr}
 8006590:	b082      	sub	sp, #8
 8006592:	af00      	add	r7, sp, #0
 8006594:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	2204      	movs	r2, #4
 800659a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800659e:	2300      	movs	r3, #0
 80065a0:	2200      	movs	r2, #0
 80065a2:	2100      	movs	r1, #0
 80065a4:	6878      	ldr	r0, [r7, #4]
 80065a6:	f000 fca0 	bl	8006eea <USBD_LL_Transmit>

  return USBD_OK;
 80065aa:	2300      	movs	r3, #0
}
 80065ac:	4618      	mov	r0, r3
 80065ae:	3708      	adds	r7, #8
 80065b0:	46bd      	mov	sp, r7
 80065b2:	bd80      	pop	{r7, pc}

080065b4 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80065b4:	b580      	push	{r7, lr}
 80065b6:	b082      	sub	sp, #8
 80065b8:	af00      	add	r7, sp, #0
 80065ba:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	2205      	movs	r2, #5
 80065c0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80065c4:	2300      	movs	r3, #0
 80065c6:	2200      	movs	r2, #0
 80065c8:	2100      	movs	r1, #0
 80065ca:	6878      	ldr	r0, [r7, #4]
 80065cc:	f000 fcae 	bl	8006f2c <USBD_LL_PrepareReceive>

  return USBD_OK;
 80065d0:	2300      	movs	r3, #0
}
 80065d2:	4618      	mov	r0, r3
 80065d4:	3708      	adds	r7, #8
 80065d6:	46bd      	mov	sp, r7
 80065d8:	bd80      	pop	{r7, pc}
	...

080065dc <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80065dc:	b580      	push	{r7, lr}
 80065de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80065e0:	2200      	movs	r2, #0
 80065e2:	4912      	ldr	r1, [pc, #72]	; (800662c <MX_USB_DEVICE_Init+0x50>)
 80065e4:	4812      	ldr	r0, [pc, #72]	; (8006630 <MX_USB_DEVICE_Init+0x54>)
 80065e6:	f7fe fef3 	bl	80053d0 <USBD_Init>
 80065ea:	4603      	mov	r3, r0
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d001      	beq.n	80065f4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80065f0:	f7fa fee6 	bl	80013c0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80065f4:	490f      	ldr	r1, [pc, #60]	; (8006634 <MX_USB_DEVICE_Init+0x58>)
 80065f6:	480e      	ldr	r0, [pc, #56]	; (8006630 <MX_USB_DEVICE_Init+0x54>)
 80065f8:	f7fe ff20 	bl	800543c <USBD_RegisterClass>
 80065fc:	4603      	mov	r3, r0
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d001      	beq.n	8006606 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8006602:	f7fa fedd 	bl	80013c0 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8006606:	490c      	ldr	r1, [pc, #48]	; (8006638 <MX_USB_DEVICE_Init+0x5c>)
 8006608:	4809      	ldr	r0, [pc, #36]	; (8006630 <MX_USB_DEVICE_Init+0x54>)
 800660a:	f7fe fe45 	bl	8005298 <USBD_CDC_RegisterInterface>
 800660e:	4603      	mov	r3, r0
 8006610:	2b00      	cmp	r3, #0
 8006612:	d001      	beq.n	8006618 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8006614:	f7fa fed4 	bl	80013c0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8006618:	4805      	ldr	r0, [pc, #20]	; (8006630 <MX_USB_DEVICE_Init+0x54>)
 800661a:	f7fe ff30 	bl	800547e <USBD_Start>
 800661e:	4603      	mov	r3, r0
 8006620:	2b00      	cmp	r3, #0
 8006622:	d001      	beq.n	8006628 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8006624:	f7fa fecc 	bl	80013c0 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8006628:	bf00      	nop
 800662a:	bd80      	pop	{r7, pc}
 800662c:	20000130 	.word	0x20000130
 8006630:	2000b6d4 	.word	0x2000b6d4
 8006634:	20000018 	.word	0x20000018
 8006638:	2000011c 	.word	0x2000011c

0800663c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800663c:	b580      	push	{r7, lr}
 800663e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8006640:	2200      	movs	r2, #0
 8006642:	4905      	ldr	r1, [pc, #20]	; (8006658 <CDC_Init_FS+0x1c>)
 8006644:	4805      	ldr	r0, [pc, #20]	; (800665c <CDC_Init_FS+0x20>)
 8006646:	f7fe fe3c 	bl	80052c2 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800664a:	4905      	ldr	r1, [pc, #20]	; (8006660 <CDC_Init_FS+0x24>)
 800664c:	4803      	ldr	r0, [pc, #12]	; (800665c <CDC_Init_FS+0x20>)
 800664e:	f7fe fe51 	bl	80052f4 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8006652:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8006654:	4618      	mov	r0, r3
 8006656:	bd80      	pop	{r7, pc}
 8006658:	2000b9d8 	.word	0x2000b9d8
 800665c:	2000b6d4 	.word	0x2000b6d4
 8006660:	2000b9a4 	.word	0x2000b9a4

08006664 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8006664:	b480      	push	{r7}
 8006666:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8006668:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800666a:	4618      	mov	r0, r3
 800666c:	46bd      	mov	sp, r7
 800666e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006672:	4770      	bx	lr

08006674 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8006674:	b480      	push	{r7}
 8006676:	b083      	sub	sp, #12
 8006678:	af00      	add	r7, sp, #0
 800667a:	4603      	mov	r3, r0
 800667c:	6039      	str	r1, [r7, #0]
 800667e:	71fb      	strb	r3, [r7, #7]
 8006680:	4613      	mov	r3, r2
 8006682:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8006684:	79fb      	ldrb	r3, [r7, #7]
 8006686:	2b23      	cmp	r3, #35	; 0x23
 8006688:	d84a      	bhi.n	8006720 <CDC_Control_FS+0xac>
 800668a:	a201      	add	r2, pc, #4	; (adr r2, 8006690 <CDC_Control_FS+0x1c>)
 800668c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006690:	08006721 	.word	0x08006721
 8006694:	08006721 	.word	0x08006721
 8006698:	08006721 	.word	0x08006721
 800669c:	08006721 	.word	0x08006721
 80066a0:	08006721 	.word	0x08006721
 80066a4:	08006721 	.word	0x08006721
 80066a8:	08006721 	.word	0x08006721
 80066ac:	08006721 	.word	0x08006721
 80066b0:	08006721 	.word	0x08006721
 80066b4:	08006721 	.word	0x08006721
 80066b8:	08006721 	.word	0x08006721
 80066bc:	08006721 	.word	0x08006721
 80066c0:	08006721 	.word	0x08006721
 80066c4:	08006721 	.word	0x08006721
 80066c8:	08006721 	.word	0x08006721
 80066cc:	08006721 	.word	0x08006721
 80066d0:	08006721 	.word	0x08006721
 80066d4:	08006721 	.word	0x08006721
 80066d8:	08006721 	.word	0x08006721
 80066dc:	08006721 	.word	0x08006721
 80066e0:	08006721 	.word	0x08006721
 80066e4:	08006721 	.word	0x08006721
 80066e8:	08006721 	.word	0x08006721
 80066ec:	08006721 	.word	0x08006721
 80066f0:	08006721 	.word	0x08006721
 80066f4:	08006721 	.word	0x08006721
 80066f8:	08006721 	.word	0x08006721
 80066fc:	08006721 	.word	0x08006721
 8006700:	08006721 	.word	0x08006721
 8006704:	08006721 	.word	0x08006721
 8006708:	08006721 	.word	0x08006721
 800670c:	08006721 	.word	0x08006721
 8006710:	08006721 	.word	0x08006721
 8006714:	08006721 	.word	0x08006721
 8006718:	08006721 	.word	0x08006721
 800671c:	08006721 	.word	0x08006721
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8006720:	bf00      	nop
  }

  return (USBD_OK);
 8006722:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8006724:	4618      	mov	r0, r3
 8006726:	370c      	adds	r7, #12
 8006728:	46bd      	mov	sp, r7
 800672a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800672e:	4770      	bx	lr

08006730 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8006730:	b580      	push	{r7, lr}
 8006732:	b082      	sub	sp, #8
 8006734:	af00      	add	r7, sp, #0
 8006736:	6078      	str	r0, [r7, #4]
 8006738:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800673a:	6879      	ldr	r1, [r7, #4]
 800673c:	4808      	ldr	r0, [pc, #32]	; (8006760 <CDC_Receive_FS+0x30>)
 800673e:	f7fe fdd9 	bl	80052f4 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8006742:	4807      	ldr	r0, [pc, #28]	; (8006760 <CDC_Receive_FS+0x30>)
 8006744:	f7fe fe1a 	bl	800537c <USBD_CDC_ReceivePacket>
  DAS_Receive_Clbk_USB(Buf, *Len);
 8006748:	683b      	ldr	r3, [r7, #0]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	4619      	mov	r1, r3
 800674e:	6878      	ldr	r0, [r7, #4]
 8006750:	f7fa f84c 	bl	80007ec <DAS_Receive_Clbk_USB>
  return (USBD_OK);
 8006754:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8006756:	4618      	mov	r0, r3
 8006758:	3708      	adds	r7, #8
 800675a:	46bd      	mov	sp, r7
 800675c:	bd80      	pop	{r7, pc}
 800675e:	bf00      	nop
 8006760:	2000b6d4 	.word	0x2000b6d4

08006764 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8006764:	b580      	push	{r7, lr}
 8006766:	b084      	sub	sp, #16
 8006768:	af00      	add	r7, sp, #0
 800676a:	6078      	str	r0, [r7, #4]
 800676c:	460b      	mov	r3, r1
 800676e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8006770:	2300      	movs	r3, #0
 8006772:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8006774:	4b0d      	ldr	r3, [pc, #52]	; (80067ac <CDC_Transmit_FS+0x48>)
 8006776:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800677a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800677c:	68bb      	ldr	r3, [r7, #8]
 800677e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006782:	2b00      	cmp	r3, #0
 8006784:	d001      	beq.n	800678a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8006786:	2301      	movs	r3, #1
 8006788:	e00b      	b.n	80067a2 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800678a:	887b      	ldrh	r3, [r7, #2]
 800678c:	461a      	mov	r2, r3
 800678e:	6879      	ldr	r1, [r7, #4]
 8006790:	4806      	ldr	r0, [pc, #24]	; (80067ac <CDC_Transmit_FS+0x48>)
 8006792:	f7fe fd96 	bl	80052c2 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8006796:	4805      	ldr	r0, [pc, #20]	; (80067ac <CDC_Transmit_FS+0x48>)
 8006798:	f7fe fdc0 	bl	800531c <USBD_CDC_TransmitPacket>
 800679c:	4603      	mov	r3, r0
 800679e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 80067a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80067a2:	4618      	mov	r0, r3
 80067a4:	3710      	adds	r7, #16
 80067a6:	46bd      	mov	sp, r7
 80067a8:	bd80      	pop	{r7, pc}
 80067aa:	bf00      	nop
 80067ac:	2000b6d4 	.word	0x2000b6d4

080067b0 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80067b0:	b580      	push	{r7, lr}
 80067b2:	b086      	sub	sp, #24
 80067b4:	af00      	add	r7, sp, #0
 80067b6:	60f8      	str	r0, [r7, #12]
 80067b8:	60b9      	str	r1, [r7, #8]
 80067ba:	4613      	mov	r3, r2
 80067bc:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80067be:	2300      	movs	r3, #0
 80067c0:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  result = DAS_Transmit_Clbk_USB();
 80067c2:	f7fa f825 	bl	8000810 <DAS_Transmit_Clbk_USB>
 80067c6:	4603      	mov	r3, r0
 80067c8:	75fb      	strb	r3, [r7, #23]
  /* USER CODE END 13 */
  return result;
 80067ca:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80067ce:	4618      	mov	r0, r3
 80067d0:	3718      	adds	r7, #24
 80067d2:	46bd      	mov	sp, r7
 80067d4:	bd80      	pop	{r7, pc}
	...

080067d8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80067d8:	b480      	push	{r7}
 80067da:	b083      	sub	sp, #12
 80067dc:	af00      	add	r7, sp, #0
 80067de:	4603      	mov	r3, r0
 80067e0:	6039      	str	r1, [r7, #0]
 80067e2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80067e4:	683b      	ldr	r3, [r7, #0]
 80067e6:	2212      	movs	r2, #18
 80067e8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80067ea:	4b03      	ldr	r3, [pc, #12]	; (80067f8 <USBD_FS_DeviceDescriptor+0x20>)
}
 80067ec:	4618      	mov	r0, r3
 80067ee:	370c      	adds	r7, #12
 80067f0:	46bd      	mov	sp, r7
 80067f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067f6:	4770      	bx	lr
 80067f8:	2000014c 	.word	0x2000014c

080067fc <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80067fc:	b480      	push	{r7}
 80067fe:	b083      	sub	sp, #12
 8006800:	af00      	add	r7, sp, #0
 8006802:	4603      	mov	r3, r0
 8006804:	6039      	str	r1, [r7, #0]
 8006806:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8006808:	683b      	ldr	r3, [r7, #0]
 800680a:	2204      	movs	r2, #4
 800680c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800680e:	4b03      	ldr	r3, [pc, #12]	; (800681c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8006810:	4618      	mov	r0, r3
 8006812:	370c      	adds	r7, #12
 8006814:	46bd      	mov	sp, r7
 8006816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800681a:	4770      	bx	lr
 800681c:	20000160 	.word	0x20000160

08006820 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006820:	b580      	push	{r7, lr}
 8006822:	b082      	sub	sp, #8
 8006824:	af00      	add	r7, sp, #0
 8006826:	4603      	mov	r3, r0
 8006828:	6039      	str	r1, [r7, #0]
 800682a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800682c:	79fb      	ldrb	r3, [r7, #7]
 800682e:	2b00      	cmp	r3, #0
 8006830:	d105      	bne.n	800683e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006832:	683a      	ldr	r2, [r7, #0]
 8006834:	4907      	ldr	r1, [pc, #28]	; (8006854 <USBD_FS_ProductStrDescriptor+0x34>)
 8006836:	4808      	ldr	r0, [pc, #32]	; (8006858 <USBD_FS_ProductStrDescriptor+0x38>)
 8006838:	f7ff fdef 	bl	800641a <USBD_GetString>
 800683c:	e004      	b.n	8006848 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800683e:	683a      	ldr	r2, [r7, #0]
 8006840:	4904      	ldr	r1, [pc, #16]	; (8006854 <USBD_FS_ProductStrDescriptor+0x34>)
 8006842:	4805      	ldr	r0, [pc, #20]	; (8006858 <USBD_FS_ProductStrDescriptor+0x38>)
 8006844:	f7ff fde9 	bl	800641a <USBD_GetString>
  }
  return USBD_StrDesc;
 8006848:	4b02      	ldr	r3, [pc, #8]	; (8006854 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800684a:	4618      	mov	r0, r3
 800684c:	3708      	adds	r7, #8
 800684e:	46bd      	mov	sp, r7
 8006850:	bd80      	pop	{r7, pc}
 8006852:	bf00      	nop
 8006854:	2000c1d8 	.word	0x2000c1d8
 8006858:	080071fc 	.word	0x080071fc

0800685c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800685c:	b580      	push	{r7, lr}
 800685e:	b082      	sub	sp, #8
 8006860:	af00      	add	r7, sp, #0
 8006862:	4603      	mov	r3, r0
 8006864:	6039      	str	r1, [r7, #0]
 8006866:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8006868:	683a      	ldr	r2, [r7, #0]
 800686a:	4904      	ldr	r1, [pc, #16]	; (800687c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800686c:	4804      	ldr	r0, [pc, #16]	; (8006880 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800686e:	f7ff fdd4 	bl	800641a <USBD_GetString>
  return USBD_StrDesc;
 8006872:	4b02      	ldr	r3, [pc, #8]	; (800687c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8006874:	4618      	mov	r0, r3
 8006876:	3708      	adds	r7, #8
 8006878:	46bd      	mov	sp, r7
 800687a:	bd80      	pop	{r7, pc}
 800687c:	2000c1d8 	.word	0x2000c1d8
 8006880:	08007214 	.word	0x08007214

08006884 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006884:	b580      	push	{r7, lr}
 8006886:	b082      	sub	sp, #8
 8006888:	af00      	add	r7, sp, #0
 800688a:	4603      	mov	r3, r0
 800688c:	6039      	str	r1, [r7, #0]
 800688e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8006890:	683b      	ldr	r3, [r7, #0]
 8006892:	221a      	movs	r2, #26
 8006894:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8006896:	f000 f843 	bl	8006920 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800689a:	4b02      	ldr	r3, [pc, #8]	; (80068a4 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800689c:	4618      	mov	r0, r3
 800689e:	3708      	adds	r7, #8
 80068a0:	46bd      	mov	sp, r7
 80068a2:	bd80      	pop	{r7, pc}
 80068a4:	20000164 	.word	0x20000164

080068a8 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80068a8:	b580      	push	{r7, lr}
 80068aa:	b082      	sub	sp, #8
 80068ac:	af00      	add	r7, sp, #0
 80068ae:	4603      	mov	r3, r0
 80068b0:	6039      	str	r1, [r7, #0]
 80068b2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80068b4:	79fb      	ldrb	r3, [r7, #7]
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d105      	bne.n	80068c6 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80068ba:	683a      	ldr	r2, [r7, #0]
 80068bc:	4907      	ldr	r1, [pc, #28]	; (80068dc <USBD_FS_ConfigStrDescriptor+0x34>)
 80068be:	4808      	ldr	r0, [pc, #32]	; (80068e0 <USBD_FS_ConfigStrDescriptor+0x38>)
 80068c0:	f7ff fdab 	bl	800641a <USBD_GetString>
 80068c4:	e004      	b.n	80068d0 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80068c6:	683a      	ldr	r2, [r7, #0]
 80068c8:	4904      	ldr	r1, [pc, #16]	; (80068dc <USBD_FS_ConfigStrDescriptor+0x34>)
 80068ca:	4805      	ldr	r0, [pc, #20]	; (80068e0 <USBD_FS_ConfigStrDescriptor+0x38>)
 80068cc:	f7ff fda5 	bl	800641a <USBD_GetString>
  }
  return USBD_StrDesc;
 80068d0:	4b02      	ldr	r3, [pc, #8]	; (80068dc <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80068d2:	4618      	mov	r0, r3
 80068d4:	3708      	adds	r7, #8
 80068d6:	46bd      	mov	sp, r7
 80068d8:	bd80      	pop	{r7, pc}
 80068da:	bf00      	nop
 80068dc:	2000c1d8 	.word	0x2000c1d8
 80068e0:	08007228 	.word	0x08007228

080068e4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80068e4:	b580      	push	{r7, lr}
 80068e6:	b082      	sub	sp, #8
 80068e8:	af00      	add	r7, sp, #0
 80068ea:	4603      	mov	r3, r0
 80068ec:	6039      	str	r1, [r7, #0]
 80068ee:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80068f0:	79fb      	ldrb	r3, [r7, #7]
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d105      	bne.n	8006902 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80068f6:	683a      	ldr	r2, [r7, #0]
 80068f8:	4907      	ldr	r1, [pc, #28]	; (8006918 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80068fa:	4808      	ldr	r0, [pc, #32]	; (800691c <USBD_FS_InterfaceStrDescriptor+0x38>)
 80068fc:	f7ff fd8d 	bl	800641a <USBD_GetString>
 8006900:	e004      	b.n	800690c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8006902:	683a      	ldr	r2, [r7, #0]
 8006904:	4904      	ldr	r1, [pc, #16]	; (8006918 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8006906:	4805      	ldr	r0, [pc, #20]	; (800691c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006908:	f7ff fd87 	bl	800641a <USBD_GetString>
  }
  return USBD_StrDesc;
 800690c:	4b02      	ldr	r3, [pc, #8]	; (8006918 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800690e:	4618      	mov	r0, r3
 8006910:	3708      	adds	r7, #8
 8006912:	46bd      	mov	sp, r7
 8006914:	bd80      	pop	{r7, pc}
 8006916:	bf00      	nop
 8006918:	2000c1d8 	.word	0x2000c1d8
 800691c:	08007234 	.word	0x08007234

08006920 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8006920:	b580      	push	{r7, lr}
 8006922:	b084      	sub	sp, #16
 8006924:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8006926:	4b0f      	ldr	r3, [pc, #60]	; (8006964 <Get_SerialNum+0x44>)
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800692c:	4b0e      	ldr	r3, [pc, #56]	; (8006968 <Get_SerialNum+0x48>)
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8006932:	4b0e      	ldr	r3, [pc, #56]	; (800696c <Get_SerialNum+0x4c>)
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8006938:	68fa      	ldr	r2, [r7, #12]
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	4413      	add	r3, r2
 800693e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	2b00      	cmp	r3, #0
 8006944:	d009      	beq.n	800695a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8006946:	2208      	movs	r2, #8
 8006948:	4909      	ldr	r1, [pc, #36]	; (8006970 <Get_SerialNum+0x50>)
 800694a:	68f8      	ldr	r0, [r7, #12]
 800694c:	f000 f814 	bl	8006978 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8006950:	2204      	movs	r2, #4
 8006952:	4908      	ldr	r1, [pc, #32]	; (8006974 <Get_SerialNum+0x54>)
 8006954:	68b8      	ldr	r0, [r7, #8]
 8006956:	f000 f80f 	bl	8006978 <IntToUnicode>
  }
}
 800695a:	bf00      	nop
 800695c:	3710      	adds	r7, #16
 800695e:	46bd      	mov	sp, r7
 8006960:	bd80      	pop	{r7, pc}
 8006962:	bf00      	nop
 8006964:	1fff7a10 	.word	0x1fff7a10
 8006968:	1fff7a14 	.word	0x1fff7a14
 800696c:	1fff7a18 	.word	0x1fff7a18
 8006970:	20000166 	.word	0x20000166
 8006974:	20000176 	.word	0x20000176

08006978 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8006978:	b480      	push	{r7}
 800697a:	b087      	sub	sp, #28
 800697c:	af00      	add	r7, sp, #0
 800697e:	60f8      	str	r0, [r7, #12]
 8006980:	60b9      	str	r1, [r7, #8]
 8006982:	4613      	mov	r3, r2
 8006984:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8006986:	2300      	movs	r3, #0
 8006988:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800698a:	2300      	movs	r3, #0
 800698c:	75fb      	strb	r3, [r7, #23]
 800698e:	e027      	b.n	80069e0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	0f1b      	lsrs	r3, r3, #28
 8006994:	2b09      	cmp	r3, #9
 8006996:	d80b      	bhi.n	80069b0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	0f1b      	lsrs	r3, r3, #28
 800699c:	b2da      	uxtb	r2, r3
 800699e:	7dfb      	ldrb	r3, [r7, #23]
 80069a0:	005b      	lsls	r3, r3, #1
 80069a2:	4619      	mov	r1, r3
 80069a4:	68bb      	ldr	r3, [r7, #8]
 80069a6:	440b      	add	r3, r1
 80069a8:	3230      	adds	r2, #48	; 0x30
 80069aa:	b2d2      	uxtb	r2, r2
 80069ac:	701a      	strb	r2, [r3, #0]
 80069ae:	e00a      	b.n	80069c6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	0f1b      	lsrs	r3, r3, #28
 80069b4:	b2da      	uxtb	r2, r3
 80069b6:	7dfb      	ldrb	r3, [r7, #23]
 80069b8:	005b      	lsls	r3, r3, #1
 80069ba:	4619      	mov	r1, r3
 80069bc:	68bb      	ldr	r3, [r7, #8]
 80069be:	440b      	add	r3, r1
 80069c0:	3237      	adds	r2, #55	; 0x37
 80069c2:	b2d2      	uxtb	r2, r2
 80069c4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	011b      	lsls	r3, r3, #4
 80069ca:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80069cc:	7dfb      	ldrb	r3, [r7, #23]
 80069ce:	005b      	lsls	r3, r3, #1
 80069d0:	3301      	adds	r3, #1
 80069d2:	68ba      	ldr	r2, [r7, #8]
 80069d4:	4413      	add	r3, r2
 80069d6:	2200      	movs	r2, #0
 80069d8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80069da:	7dfb      	ldrb	r3, [r7, #23]
 80069dc:	3301      	adds	r3, #1
 80069de:	75fb      	strb	r3, [r7, #23]
 80069e0:	7dfa      	ldrb	r2, [r7, #23]
 80069e2:	79fb      	ldrb	r3, [r7, #7]
 80069e4:	429a      	cmp	r2, r3
 80069e6:	d3d3      	bcc.n	8006990 <IntToUnicode+0x18>
  }
}
 80069e8:	bf00      	nop
 80069ea:	371c      	adds	r7, #28
 80069ec:	46bd      	mov	sp, r7
 80069ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f2:	4770      	bx	lr

080069f4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80069f4:	b580      	push	{r7, lr}
 80069f6:	b08a      	sub	sp, #40	; 0x28
 80069f8:	af00      	add	r7, sp, #0
 80069fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80069fc:	f107 0314 	add.w	r3, r7, #20
 8006a00:	2200      	movs	r2, #0
 8006a02:	601a      	str	r2, [r3, #0]
 8006a04:	605a      	str	r2, [r3, #4]
 8006a06:	609a      	str	r2, [r3, #8]
 8006a08:	60da      	str	r2, [r3, #12]
 8006a0a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006a14:	d13a      	bne.n	8006a8c <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006a16:	2300      	movs	r3, #0
 8006a18:	613b      	str	r3, [r7, #16]
 8006a1a:	4b1e      	ldr	r3, [pc, #120]	; (8006a94 <HAL_PCD_MspInit+0xa0>)
 8006a1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a1e:	4a1d      	ldr	r2, [pc, #116]	; (8006a94 <HAL_PCD_MspInit+0xa0>)
 8006a20:	f043 0301 	orr.w	r3, r3, #1
 8006a24:	6313      	str	r3, [r2, #48]	; 0x30
 8006a26:	4b1b      	ldr	r3, [pc, #108]	; (8006a94 <HAL_PCD_MspInit+0xa0>)
 8006a28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a2a:	f003 0301 	and.w	r3, r3, #1
 8006a2e:	613b      	str	r3, [r7, #16]
 8006a30:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8006a32:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8006a36:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006a38:	2302      	movs	r3, #2
 8006a3a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006a3c:	2300      	movs	r3, #0
 8006a3e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006a40:	2303      	movs	r3, #3
 8006a42:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8006a44:	230a      	movs	r3, #10
 8006a46:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006a48:	f107 0314 	add.w	r3, r7, #20
 8006a4c:	4619      	mov	r1, r3
 8006a4e:	4812      	ldr	r0, [pc, #72]	; (8006a98 <HAL_PCD_MspInit+0xa4>)
 8006a50:	f7fa ff3a 	bl	80018c8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8006a54:	4b0f      	ldr	r3, [pc, #60]	; (8006a94 <HAL_PCD_MspInit+0xa0>)
 8006a56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a58:	4a0e      	ldr	r2, [pc, #56]	; (8006a94 <HAL_PCD_MspInit+0xa0>)
 8006a5a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a5e:	6353      	str	r3, [r2, #52]	; 0x34
 8006a60:	2300      	movs	r3, #0
 8006a62:	60fb      	str	r3, [r7, #12]
 8006a64:	4b0b      	ldr	r3, [pc, #44]	; (8006a94 <HAL_PCD_MspInit+0xa0>)
 8006a66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a68:	4a0a      	ldr	r2, [pc, #40]	; (8006a94 <HAL_PCD_MspInit+0xa0>)
 8006a6a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006a6e:	6453      	str	r3, [r2, #68]	; 0x44
 8006a70:	4b08      	ldr	r3, [pc, #32]	; (8006a94 <HAL_PCD_MspInit+0xa0>)
 8006a72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a74:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006a78:	60fb      	str	r3, [r7, #12]
 8006a7a:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8006a7c:	2200      	movs	r2, #0
 8006a7e:	2100      	movs	r1, #0
 8006a80:	2043      	movs	r0, #67	; 0x43
 8006a82:	f7fa feea 	bl	800185a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8006a86:	2043      	movs	r0, #67	; 0x43
 8006a88:	f7fa ff03 	bl	8001892 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8006a8c:	bf00      	nop
 8006a8e:	3728      	adds	r7, #40	; 0x28
 8006a90:	46bd      	mov	sp, r7
 8006a92:	bd80      	pop	{r7, pc}
 8006a94:	40023800 	.word	0x40023800
 8006a98:	40020000 	.word	0x40020000

08006a9c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006a9c:	b580      	push	{r7, lr}
 8006a9e:	b082      	sub	sp, #8
 8006aa0:	af00      	add	r7, sp, #0
 8006aa2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8006ab0:	4619      	mov	r1, r3
 8006ab2:	4610      	mov	r0, r2
 8006ab4:	f7fe fd2e 	bl	8005514 <USBD_LL_SetupStage>
}
 8006ab8:	bf00      	nop
 8006aba:	3708      	adds	r7, #8
 8006abc:	46bd      	mov	sp, r7
 8006abe:	bd80      	pop	{r7, pc}

08006ac0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006ac0:	b580      	push	{r7, lr}
 8006ac2:	b082      	sub	sp, #8
 8006ac4:	af00      	add	r7, sp, #0
 8006ac6:	6078      	str	r0, [r7, #4]
 8006ac8:	460b      	mov	r3, r1
 8006aca:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8006ad2:	78fa      	ldrb	r2, [r7, #3]
 8006ad4:	6879      	ldr	r1, [r7, #4]
 8006ad6:	4613      	mov	r3, r2
 8006ad8:	00db      	lsls	r3, r3, #3
 8006ada:	1a9b      	subs	r3, r3, r2
 8006adc:	009b      	lsls	r3, r3, #2
 8006ade:	440b      	add	r3, r1
 8006ae0:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8006ae4:	681a      	ldr	r2, [r3, #0]
 8006ae6:	78fb      	ldrb	r3, [r7, #3]
 8006ae8:	4619      	mov	r1, r3
 8006aea:	f7fe fd66 	bl	80055ba <USBD_LL_DataOutStage>
}
 8006aee:	bf00      	nop
 8006af0:	3708      	adds	r7, #8
 8006af2:	46bd      	mov	sp, r7
 8006af4:	bd80      	pop	{r7, pc}

08006af6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006af6:	b580      	push	{r7, lr}
 8006af8:	b082      	sub	sp, #8
 8006afa:	af00      	add	r7, sp, #0
 8006afc:	6078      	str	r0, [r7, #4]
 8006afe:	460b      	mov	r3, r1
 8006b00:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8006b08:	78fa      	ldrb	r2, [r7, #3]
 8006b0a:	6879      	ldr	r1, [r7, #4]
 8006b0c:	4613      	mov	r3, r2
 8006b0e:	00db      	lsls	r3, r3, #3
 8006b10:	1a9b      	subs	r3, r3, r2
 8006b12:	009b      	lsls	r3, r3, #2
 8006b14:	440b      	add	r3, r1
 8006b16:	3348      	adds	r3, #72	; 0x48
 8006b18:	681a      	ldr	r2, [r3, #0]
 8006b1a:	78fb      	ldrb	r3, [r7, #3]
 8006b1c:	4619      	mov	r1, r3
 8006b1e:	f7fe fdaf 	bl	8005680 <USBD_LL_DataInStage>
}
 8006b22:	bf00      	nop
 8006b24:	3708      	adds	r7, #8
 8006b26:	46bd      	mov	sp, r7
 8006b28:	bd80      	pop	{r7, pc}

08006b2a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006b2a:	b580      	push	{r7, lr}
 8006b2c:	b082      	sub	sp, #8
 8006b2e:	af00      	add	r7, sp, #0
 8006b30:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006b38:	4618      	mov	r0, r3
 8006b3a:	f7fe feb3 	bl	80058a4 <USBD_LL_SOF>
}
 8006b3e:	bf00      	nop
 8006b40:	3708      	adds	r7, #8
 8006b42:	46bd      	mov	sp, r7
 8006b44:	bd80      	pop	{r7, pc}

08006b46 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006b46:	b580      	push	{r7, lr}
 8006b48:	b084      	sub	sp, #16
 8006b4a:	af00      	add	r7, sp, #0
 8006b4c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8006b4e:	2301      	movs	r3, #1
 8006b50:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	68db      	ldr	r3, [r3, #12]
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d102      	bne.n	8006b60 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8006b5a:	2300      	movs	r3, #0
 8006b5c:	73fb      	strb	r3, [r7, #15]
 8006b5e:	e008      	b.n	8006b72 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	68db      	ldr	r3, [r3, #12]
 8006b64:	2b02      	cmp	r3, #2
 8006b66:	d102      	bne.n	8006b6e <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8006b68:	2301      	movs	r3, #1
 8006b6a:	73fb      	strb	r3, [r7, #15]
 8006b6c:	e001      	b.n	8006b72 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8006b6e:	f7fa fc27 	bl	80013c0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006b78:	7bfa      	ldrb	r2, [r7, #15]
 8006b7a:	4611      	mov	r1, r2
 8006b7c:	4618      	mov	r0, r3
 8006b7e:	f7fe fe56 	bl	800582e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006b88:	4618      	mov	r0, r3
 8006b8a:	f7fe fe0f 	bl	80057ac <USBD_LL_Reset>
}
 8006b8e:	bf00      	nop
 8006b90:	3710      	adds	r7, #16
 8006b92:	46bd      	mov	sp, r7
 8006b94:	bd80      	pop	{r7, pc}
	...

08006b98 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006b98:	b580      	push	{r7, lr}
 8006b9a:	b082      	sub	sp, #8
 8006b9c:	af00      	add	r7, sp, #0
 8006b9e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006ba6:	4618      	mov	r0, r3
 8006ba8:	f7fe fe51 	bl	800584e <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	687a      	ldr	r2, [r7, #4]
 8006bb8:	6812      	ldr	r2, [r2, #0]
 8006bba:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006bbe:	f043 0301 	orr.w	r3, r3, #1
 8006bc2:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	6a1b      	ldr	r3, [r3, #32]
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d005      	beq.n	8006bd8 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8006bcc:	4b04      	ldr	r3, [pc, #16]	; (8006be0 <HAL_PCD_SuspendCallback+0x48>)
 8006bce:	691b      	ldr	r3, [r3, #16]
 8006bd0:	4a03      	ldr	r2, [pc, #12]	; (8006be0 <HAL_PCD_SuspendCallback+0x48>)
 8006bd2:	f043 0306 	orr.w	r3, r3, #6
 8006bd6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8006bd8:	bf00      	nop
 8006bda:	3708      	adds	r7, #8
 8006bdc:	46bd      	mov	sp, r7
 8006bde:	bd80      	pop	{r7, pc}
 8006be0:	e000ed00 	.word	0xe000ed00

08006be4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006be4:	b580      	push	{r7, lr}
 8006be6:	b082      	sub	sp, #8
 8006be8:	af00      	add	r7, sp, #0
 8006bea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006bf2:	4618      	mov	r0, r3
 8006bf4:	f7fe fe40 	bl	8005878 <USBD_LL_Resume>
}
 8006bf8:	bf00      	nop
 8006bfa:	3708      	adds	r7, #8
 8006bfc:	46bd      	mov	sp, r7
 8006bfe:	bd80      	pop	{r7, pc}

08006c00 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006c00:	b580      	push	{r7, lr}
 8006c02:	b082      	sub	sp, #8
 8006c04:	af00      	add	r7, sp, #0
 8006c06:	6078      	str	r0, [r7, #4]
 8006c08:	460b      	mov	r3, r1
 8006c0a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006c12:	78fa      	ldrb	r2, [r7, #3]
 8006c14:	4611      	mov	r1, r2
 8006c16:	4618      	mov	r0, r3
 8006c18:	f7fe fe6b 	bl	80058f2 <USBD_LL_IsoOUTIncomplete>
}
 8006c1c:	bf00      	nop
 8006c1e:	3708      	adds	r7, #8
 8006c20:	46bd      	mov	sp, r7
 8006c22:	bd80      	pop	{r7, pc}

08006c24 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006c24:	b580      	push	{r7, lr}
 8006c26:	b082      	sub	sp, #8
 8006c28:	af00      	add	r7, sp, #0
 8006c2a:	6078      	str	r0, [r7, #4]
 8006c2c:	460b      	mov	r3, r1
 8006c2e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006c36:	78fa      	ldrb	r2, [r7, #3]
 8006c38:	4611      	mov	r1, r2
 8006c3a:	4618      	mov	r0, r3
 8006c3c:	f7fe fe4c 	bl	80058d8 <USBD_LL_IsoINIncomplete>
}
 8006c40:	bf00      	nop
 8006c42:	3708      	adds	r7, #8
 8006c44:	46bd      	mov	sp, r7
 8006c46:	bd80      	pop	{r7, pc}

08006c48 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006c48:	b580      	push	{r7, lr}
 8006c4a:	b082      	sub	sp, #8
 8006c4c:	af00      	add	r7, sp, #0
 8006c4e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006c56:	4618      	mov	r0, r3
 8006c58:	f7fe fe58 	bl	800590c <USBD_LL_DevConnected>
}
 8006c5c:	bf00      	nop
 8006c5e:	3708      	adds	r7, #8
 8006c60:	46bd      	mov	sp, r7
 8006c62:	bd80      	pop	{r7, pc}

08006c64 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006c64:	b580      	push	{r7, lr}
 8006c66:	b082      	sub	sp, #8
 8006c68:	af00      	add	r7, sp, #0
 8006c6a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006c72:	4618      	mov	r0, r3
 8006c74:	f7fe fe55 	bl	8005922 <USBD_LL_DevDisconnected>
}
 8006c78:	bf00      	nop
 8006c7a:	3708      	adds	r7, #8
 8006c7c:	46bd      	mov	sp, r7
 8006c7e:	bd80      	pop	{r7, pc}

08006c80 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8006c80:	b580      	push	{r7, lr}
 8006c82:	b082      	sub	sp, #8
 8006c84:	af00      	add	r7, sp, #0
 8006c86:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	781b      	ldrb	r3, [r3, #0]
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d13c      	bne.n	8006d0a <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8006c90:	4a20      	ldr	r2, [pc, #128]	; (8006d14 <USBD_LL_Init+0x94>)
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	4a1e      	ldr	r2, [pc, #120]	; (8006d14 <USBD_LL_Init+0x94>)
 8006c9c:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8006ca0:	4b1c      	ldr	r3, [pc, #112]	; (8006d14 <USBD_LL_Init+0x94>)
 8006ca2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8006ca6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8006ca8:	4b1a      	ldr	r3, [pc, #104]	; (8006d14 <USBD_LL_Init+0x94>)
 8006caa:	2204      	movs	r2, #4
 8006cac:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8006cae:	4b19      	ldr	r3, [pc, #100]	; (8006d14 <USBD_LL_Init+0x94>)
 8006cb0:	2202      	movs	r2, #2
 8006cb2:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8006cb4:	4b17      	ldr	r3, [pc, #92]	; (8006d14 <USBD_LL_Init+0x94>)
 8006cb6:	2200      	movs	r2, #0
 8006cb8:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8006cba:	4b16      	ldr	r3, [pc, #88]	; (8006d14 <USBD_LL_Init+0x94>)
 8006cbc:	2202      	movs	r2, #2
 8006cbe:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8006cc0:	4b14      	ldr	r3, [pc, #80]	; (8006d14 <USBD_LL_Init+0x94>)
 8006cc2:	2200      	movs	r2, #0
 8006cc4:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8006cc6:	4b13      	ldr	r3, [pc, #76]	; (8006d14 <USBD_LL_Init+0x94>)
 8006cc8:	2200      	movs	r2, #0
 8006cca:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8006ccc:	4b11      	ldr	r3, [pc, #68]	; (8006d14 <USBD_LL_Init+0x94>)
 8006cce:	2200      	movs	r2, #0
 8006cd0:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8006cd2:	4b10      	ldr	r3, [pc, #64]	; (8006d14 <USBD_LL_Init+0x94>)
 8006cd4:	2200      	movs	r2, #0
 8006cd6:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8006cd8:	4b0e      	ldr	r3, [pc, #56]	; (8006d14 <USBD_LL_Init+0x94>)
 8006cda:	2200      	movs	r2, #0
 8006cdc:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8006cde:	480d      	ldr	r0, [pc, #52]	; (8006d14 <USBD_LL_Init+0x94>)
 8006ce0:	f7fa ff8d 	bl	8001bfe <HAL_PCD_Init>
 8006ce4:	4603      	mov	r3, r0
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d001      	beq.n	8006cee <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8006cea:	f7fa fb69 	bl	80013c0 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8006cee:	2180      	movs	r1, #128	; 0x80
 8006cf0:	4808      	ldr	r0, [pc, #32]	; (8006d14 <USBD_LL_Init+0x94>)
 8006cf2:	f7fc f8ea 	bl	8002eca <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8006cf6:	2240      	movs	r2, #64	; 0x40
 8006cf8:	2100      	movs	r1, #0
 8006cfa:	4806      	ldr	r0, [pc, #24]	; (8006d14 <USBD_LL_Init+0x94>)
 8006cfc:	f7fc f89e 	bl	8002e3c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8006d00:	2280      	movs	r2, #128	; 0x80
 8006d02:	2101      	movs	r1, #1
 8006d04:	4803      	ldr	r0, [pc, #12]	; (8006d14 <USBD_LL_Init+0x94>)
 8006d06:	f7fc f899 	bl	8002e3c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8006d0a:	2300      	movs	r3, #0
}
 8006d0c:	4618      	mov	r0, r3
 8006d0e:	3708      	adds	r7, #8
 8006d10:	46bd      	mov	sp, r7
 8006d12:	bd80      	pop	{r7, pc}
 8006d14:	2000c3d8 	.word	0x2000c3d8

08006d18 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8006d18:	b580      	push	{r7, lr}
 8006d1a:	b084      	sub	sp, #16
 8006d1c:	af00      	add	r7, sp, #0
 8006d1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006d20:	2300      	movs	r3, #0
 8006d22:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006d24:	2300      	movs	r3, #0
 8006d26:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006d2e:	4618      	mov	r0, r3
 8006d30:	f7fb f882 	bl	8001e38 <HAL_PCD_Start>
 8006d34:	4603      	mov	r3, r0
 8006d36:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006d38:	7bfb      	ldrb	r3, [r7, #15]
 8006d3a:	4618      	mov	r0, r3
 8006d3c:	f000 f92a 	bl	8006f94 <USBD_Get_USB_Status>
 8006d40:	4603      	mov	r3, r0
 8006d42:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006d44:	7bbb      	ldrb	r3, [r7, #14]
}
 8006d46:	4618      	mov	r0, r3
 8006d48:	3710      	adds	r7, #16
 8006d4a:	46bd      	mov	sp, r7
 8006d4c:	bd80      	pop	{r7, pc}

08006d4e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8006d4e:	b580      	push	{r7, lr}
 8006d50:	b084      	sub	sp, #16
 8006d52:	af00      	add	r7, sp, #0
 8006d54:	6078      	str	r0, [r7, #4]
 8006d56:	4608      	mov	r0, r1
 8006d58:	4611      	mov	r1, r2
 8006d5a:	461a      	mov	r2, r3
 8006d5c:	4603      	mov	r3, r0
 8006d5e:	70fb      	strb	r3, [r7, #3]
 8006d60:	460b      	mov	r3, r1
 8006d62:	70bb      	strb	r3, [r7, #2]
 8006d64:	4613      	mov	r3, r2
 8006d66:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006d68:	2300      	movs	r3, #0
 8006d6a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006d6c:	2300      	movs	r3, #0
 8006d6e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8006d76:	78bb      	ldrb	r3, [r7, #2]
 8006d78:	883a      	ldrh	r2, [r7, #0]
 8006d7a:	78f9      	ldrb	r1, [r7, #3]
 8006d7c:	f7fb fc66 	bl	800264c <HAL_PCD_EP_Open>
 8006d80:	4603      	mov	r3, r0
 8006d82:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006d84:	7bfb      	ldrb	r3, [r7, #15]
 8006d86:	4618      	mov	r0, r3
 8006d88:	f000 f904 	bl	8006f94 <USBD_Get_USB_Status>
 8006d8c:	4603      	mov	r3, r0
 8006d8e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006d90:	7bbb      	ldrb	r3, [r7, #14]
}
 8006d92:	4618      	mov	r0, r3
 8006d94:	3710      	adds	r7, #16
 8006d96:	46bd      	mov	sp, r7
 8006d98:	bd80      	pop	{r7, pc}

08006d9a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006d9a:	b580      	push	{r7, lr}
 8006d9c:	b084      	sub	sp, #16
 8006d9e:	af00      	add	r7, sp, #0
 8006da0:	6078      	str	r0, [r7, #4]
 8006da2:	460b      	mov	r3, r1
 8006da4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006da6:	2300      	movs	r3, #0
 8006da8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006daa:	2300      	movs	r3, #0
 8006dac:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006db4:	78fa      	ldrb	r2, [r7, #3]
 8006db6:	4611      	mov	r1, r2
 8006db8:	4618      	mov	r0, r3
 8006dba:	f7fb fcaf 	bl	800271c <HAL_PCD_EP_Close>
 8006dbe:	4603      	mov	r3, r0
 8006dc0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006dc2:	7bfb      	ldrb	r3, [r7, #15]
 8006dc4:	4618      	mov	r0, r3
 8006dc6:	f000 f8e5 	bl	8006f94 <USBD_Get_USB_Status>
 8006dca:	4603      	mov	r3, r0
 8006dcc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006dce:	7bbb      	ldrb	r3, [r7, #14]
}
 8006dd0:	4618      	mov	r0, r3
 8006dd2:	3710      	adds	r7, #16
 8006dd4:	46bd      	mov	sp, r7
 8006dd6:	bd80      	pop	{r7, pc}

08006dd8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006dd8:	b580      	push	{r7, lr}
 8006dda:	b084      	sub	sp, #16
 8006ddc:	af00      	add	r7, sp, #0
 8006dde:	6078      	str	r0, [r7, #4]
 8006de0:	460b      	mov	r3, r1
 8006de2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006de4:	2300      	movs	r3, #0
 8006de6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006de8:	2300      	movs	r3, #0
 8006dea:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006df2:	78fa      	ldrb	r2, [r7, #3]
 8006df4:	4611      	mov	r1, r2
 8006df6:	4618      	mov	r0, r3
 8006df8:	f7fb fd87 	bl	800290a <HAL_PCD_EP_SetStall>
 8006dfc:	4603      	mov	r3, r0
 8006dfe:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006e00:	7bfb      	ldrb	r3, [r7, #15]
 8006e02:	4618      	mov	r0, r3
 8006e04:	f000 f8c6 	bl	8006f94 <USBD_Get_USB_Status>
 8006e08:	4603      	mov	r3, r0
 8006e0a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006e0c:	7bbb      	ldrb	r3, [r7, #14]
}
 8006e0e:	4618      	mov	r0, r3
 8006e10:	3710      	adds	r7, #16
 8006e12:	46bd      	mov	sp, r7
 8006e14:	bd80      	pop	{r7, pc}

08006e16 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006e16:	b580      	push	{r7, lr}
 8006e18:	b084      	sub	sp, #16
 8006e1a:	af00      	add	r7, sp, #0
 8006e1c:	6078      	str	r0, [r7, #4]
 8006e1e:	460b      	mov	r3, r1
 8006e20:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006e22:	2300      	movs	r3, #0
 8006e24:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006e26:	2300      	movs	r3, #0
 8006e28:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006e30:	78fa      	ldrb	r2, [r7, #3]
 8006e32:	4611      	mov	r1, r2
 8006e34:	4618      	mov	r0, r3
 8006e36:	f7fb fdcc 	bl	80029d2 <HAL_PCD_EP_ClrStall>
 8006e3a:	4603      	mov	r3, r0
 8006e3c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006e3e:	7bfb      	ldrb	r3, [r7, #15]
 8006e40:	4618      	mov	r0, r3
 8006e42:	f000 f8a7 	bl	8006f94 <USBD_Get_USB_Status>
 8006e46:	4603      	mov	r3, r0
 8006e48:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006e4a:	7bbb      	ldrb	r3, [r7, #14]
}
 8006e4c:	4618      	mov	r0, r3
 8006e4e:	3710      	adds	r7, #16
 8006e50:	46bd      	mov	sp, r7
 8006e52:	bd80      	pop	{r7, pc}

08006e54 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006e54:	b480      	push	{r7}
 8006e56:	b085      	sub	sp, #20
 8006e58:	af00      	add	r7, sp, #0
 8006e5a:	6078      	str	r0, [r7, #4]
 8006e5c:	460b      	mov	r3, r1
 8006e5e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006e66:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8006e68:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	da0b      	bge.n	8006e88 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8006e70:	78fb      	ldrb	r3, [r7, #3]
 8006e72:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006e76:	68f9      	ldr	r1, [r7, #12]
 8006e78:	4613      	mov	r3, r2
 8006e7a:	00db      	lsls	r3, r3, #3
 8006e7c:	1a9b      	subs	r3, r3, r2
 8006e7e:	009b      	lsls	r3, r3, #2
 8006e80:	440b      	add	r3, r1
 8006e82:	333e      	adds	r3, #62	; 0x3e
 8006e84:	781b      	ldrb	r3, [r3, #0]
 8006e86:	e00b      	b.n	8006ea0 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8006e88:	78fb      	ldrb	r3, [r7, #3]
 8006e8a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006e8e:	68f9      	ldr	r1, [r7, #12]
 8006e90:	4613      	mov	r3, r2
 8006e92:	00db      	lsls	r3, r3, #3
 8006e94:	1a9b      	subs	r3, r3, r2
 8006e96:	009b      	lsls	r3, r3, #2
 8006e98:	440b      	add	r3, r1
 8006e9a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8006e9e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8006ea0:	4618      	mov	r0, r3
 8006ea2:	3714      	adds	r7, #20
 8006ea4:	46bd      	mov	sp, r7
 8006ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eaa:	4770      	bx	lr

08006eac <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8006eac:	b580      	push	{r7, lr}
 8006eae:	b084      	sub	sp, #16
 8006eb0:	af00      	add	r7, sp, #0
 8006eb2:	6078      	str	r0, [r7, #4]
 8006eb4:	460b      	mov	r3, r1
 8006eb6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006eb8:	2300      	movs	r3, #0
 8006eba:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006ebc:	2300      	movs	r3, #0
 8006ebe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006ec6:	78fa      	ldrb	r2, [r7, #3]
 8006ec8:	4611      	mov	r1, r2
 8006eca:	4618      	mov	r0, r3
 8006ecc:	f7fb fb99 	bl	8002602 <HAL_PCD_SetAddress>
 8006ed0:	4603      	mov	r3, r0
 8006ed2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006ed4:	7bfb      	ldrb	r3, [r7, #15]
 8006ed6:	4618      	mov	r0, r3
 8006ed8:	f000 f85c 	bl	8006f94 <USBD_Get_USB_Status>
 8006edc:	4603      	mov	r3, r0
 8006ede:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006ee0:	7bbb      	ldrb	r3, [r7, #14]
}
 8006ee2:	4618      	mov	r0, r3
 8006ee4:	3710      	adds	r7, #16
 8006ee6:	46bd      	mov	sp, r7
 8006ee8:	bd80      	pop	{r7, pc}

08006eea <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8006eea:	b580      	push	{r7, lr}
 8006eec:	b086      	sub	sp, #24
 8006eee:	af00      	add	r7, sp, #0
 8006ef0:	60f8      	str	r0, [r7, #12]
 8006ef2:	607a      	str	r2, [r7, #4]
 8006ef4:	603b      	str	r3, [r7, #0]
 8006ef6:	460b      	mov	r3, r1
 8006ef8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006efa:	2300      	movs	r3, #0
 8006efc:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006efe:	2300      	movs	r3, #0
 8006f00:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8006f08:	7af9      	ldrb	r1, [r7, #11]
 8006f0a:	683b      	ldr	r3, [r7, #0]
 8006f0c:	687a      	ldr	r2, [r7, #4]
 8006f0e:	f7fb fcb2 	bl	8002876 <HAL_PCD_EP_Transmit>
 8006f12:	4603      	mov	r3, r0
 8006f14:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006f16:	7dfb      	ldrb	r3, [r7, #23]
 8006f18:	4618      	mov	r0, r3
 8006f1a:	f000 f83b 	bl	8006f94 <USBD_Get_USB_Status>
 8006f1e:	4603      	mov	r3, r0
 8006f20:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8006f22:	7dbb      	ldrb	r3, [r7, #22]
}
 8006f24:	4618      	mov	r0, r3
 8006f26:	3718      	adds	r7, #24
 8006f28:	46bd      	mov	sp, r7
 8006f2a:	bd80      	pop	{r7, pc}

08006f2c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8006f2c:	b580      	push	{r7, lr}
 8006f2e:	b086      	sub	sp, #24
 8006f30:	af00      	add	r7, sp, #0
 8006f32:	60f8      	str	r0, [r7, #12]
 8006f34:	607a      	str	r2, [r7, #4]
 8006f36:	603b      	str	r3, [r7, #0]
 8006f38:	460b      	mov	r3, r1
 8006f3a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006f3c:	2300      	movs	r3, #0
 8006f3e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006f40:	2300      	movs	r3, #0
 8006f42:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8006f4a:	7af9      	ldrb	r1, [r7, #11]
 8006f4c:	683b      	ldr	r3, [r7, #0]
 8006f4e:	687a      	ldr	r2, [r7, #4]
 8006f50:	f7fb fc2e 	bl	80027b0 <HAL_PCD_EP_Receive>
 8006f54:	4603      	mov	r3, r0
 8006f56:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006f58:	7dfb      	ldrb	r3, [r7, #23]
 8006f5a:	4618      	mov	r0, r3
 8006f5c:	f000 f81a 	bl	8006f94 <USBD_Get_USB_Status>
 8006f60:	4603      	mov	r3, r0
 8006f62:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8006f64:	7dbb      	ldrb	r3, [r7, #22]
}
 8006f66:	4618      	mov	r0, r3
 8006f68:	3718      	adds	r7, #24
 8006f6a:	46bd      	mov	sp, r7
 8006f6c:	bd80      	pop	{r7, pc}

08006f6e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006f6e:	b580      	push	{r7, lr}
 8006f70:	b082      	sub	sp, #8
 8006f72:	af00      	add	r7, sp, #0
 8006f74:	6078      	str	r0, [r7, #4]
 8006f76:	460b      	mov	r3, r1
 8006f78:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006f80:	78fa      	ldrb	r2, [r7, #3]
 8006f82:	4611      	mov	r1, r2
 8006f84:	4618      	mov	r0, r3
 8006f86:	f7fb fc5e 	bl	8002846 <HAL_PCD_EP_GetRxCount>
 8006f8a:	4603      	mov	r3, r0
}
 8006f8c:	4618      	mov	r0, r3
 8006f8e:	3708      	adds	r7, #8
 8006f90:	46bd      	mov	sp, r7
 8006f92:	bd80      	pop	{r7, pc}

08006f94 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8006f94:	b480      	push	{r7}
 8006f96:	b085      	sub	sp, #20
 8006f98:	af00      	add	r7, sp, #0
 8006f9a:	4603      	mov	r3, r0
 8006f9c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006f9e:	2300      	movs	r3, #0
 8006fa0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8006fa2:	79fb      	ldrb	r3, [r7, #7]
 8006fa4:	2b03      	cmp	r3, #3
 8006fa6:	d817      	bhi.n	8006fd8 <USBD_Get_USB_Status+0x44>
 8006fa8:	a201      	add	r2, pc, #4	; (adr r2, 8006fb0 <USBD_Get_USB_Status+0x1c>)
 8006faa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fae:	bf00      	nop
 8006fb0:	08006fc1 	.word	0x08006fc1
 8006fb4:	08006fc7 	.word	0x08006fc7
 8006fb8:	08006fcd 	.word	0x08006fcd
 8006fbc:	08006fd3 	.word	0x08006fd3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8006fc0:	2300      	movs	r3, #0
 8006fc2:	73fb      	strb	r3, [r7, #15]
    break;
 8006fc4:	e00b      	b.n	8006fde <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8006fc6:	2303      	movs	r3, #3
 8006fc8:	73fb      	strb	r3, [r7, #15]
    break;
 8006fca:	e008      	b.n	8006fde <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8006fcc:	2301      	movs	r3, #1
 8006fce:	73fb      	strb	r3, [r7, #15]
    break;
 8006fd0:	e005      	b.n	8006fde <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8006fd2:	2303      	movs	r3, #3
 8006fd4:	73fb      	strb	r3, [r7, #15]
    break;
 8006fd6:	e002      	b.n	8006fde <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8006fd8:	2303      	movs	r3, #3
 8006fda:	73fb      	strb	r3, [r7, #15]
    break;
 8006fdc:	bf00      	nop
  }
  return usb_status;
 8006fde:	7bfb      	ldrb	r3, [r7, #15]
}
 8006fe0:	4618      	mov	r0, r3
 8006fe2:	3714      	adds	r7, #20
 8006fe4:	46bd      	mov	sp, r7
 8006fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fea:	4770      	bx	lr

08006fec <__errno>:
 8006fec:	4b01      	ldr	r3, [pc, #4]	; (8006ff4 <__errno+0x8>)
 8006fee:	6818      	ldr	r0, [r3, #0]
 8006ff0:	4770      	bx	lr
 8006ff2:	bf00      	nop
 8006ff4:	20000180 	.word	0x20000180

08006ff8 <__libc_init_array>:
 8006ff8:	b570      	push	{r4, r5, r6, lr}
 8006ffa:	4e0d      	ldr	r6, [pc, #52]	; (8007030 <__libc_init_array+0x38>)
 8006ffc:	4c0d      	ldr	r4, [pc, #52]	; (8007034 <__libc_init_array+0x3c>)
 8006ffe:	1ba4      	subs	r4, r4, r6
 8007000:	10a4      	asrs	r4, r4, #2
 8007002:	2500      	movs	r5, #0
 8007004:	42a5      	cmp	r5, r4
 8007006:	d109      	bne.n	800701c <__libc_init_array+0x24>
 8007008:	4e0b      	ldr	r6, [pc, #44]	; (8007038 <__libc_init_array+0x40>)
 800700a:	4c0c      	ldr	r4, [pc, #48]	; (800703c <__libc_init_array+0x44>)
 800700c:	f000 f8ea 	bl	80071e4 <_init>
 8007010:	1ba4      	subs	r4, r4, r6
 8007012:	10a4      	asrs	r4, r4, #2
 8007014:	2500      	movs	r5, #0
 8007016:	42a5      	cmp	r5, r4
 8007018:	d105      	bne.n	8007026 <__libc_init_array+0x2e>
 800701a:	bd70      	pop	{r4, r5, r6, pc}
 800701c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007020:	4798      	blx	r3
 8007022:	3501      	adds	r5, #1
 8007024:	e7ee      	b.n	8007004 <__libc_init_array+0xc>
 8007026:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800702a:	4798      	blx	r3
 800702c:	3501      	adds	r5, #1
 800702e:	e7f2      	b.n	8007016 <__libc_init_array+0x1e>
 8007030:	0800725c 	.word	0x0800725c
 8007034:	0800725c 	.word	0x0800725c
 8007038:	0800725c 	.word	0x0800725c
 800703c:	08007260 	.word	0x08007260

08007040 <malloc>:
 8007040:	4b02      	ldr	r3, [pc, #8]	; (800704c <malloc+0xc>)
 8007042:	4601      	mov	r1, r0
 8007044:	6818      	ldr	r0, [r3, #0]
 8007046:	f000 b861 	b.w	800710c <_malloc_r>
 800704a:	bf00      	nop
 800704c:	20000180 	.word	0x20000180

08007050 <free>:
 8007050:	4b02      	ldr	r3, [pc, #8]	; (800705c <free+0xc>)
 8007052:	4601      	mov	r1, r0
 8007054:	6818      	ldr	r0, [r3, #0]
 8007056:	f000 b80b 	b.w	8007070 <_free_r>
 800705a:	bf00      	nop
 800705c:	20000180 	.word	0x20000180

08007060 <memset>:
 8007060:	4402      	add	r2, r0
 8007062:	4603      	mov	r3, r0
 8007064:	4293      	cmp	r3, r2
 8007066:	d100      	bne.n	800706a <memset+0xa>
 8007068:	4770      	bx	lr
 800706a:	f803 1b01 	strb.w	r1, [r3], #1
 800706e:	e7f9      	b.n	8007064 <memset+0x4>

08007070 <_free_r>:
 8007070:	b538      	push	{r3, r4, r5, lr}
 8007072:	4605      	mov	r5, r0
 8007074:	2900      	cmp	r1, #0
 8007076:	d045      	beq.n	8007104 <_free_r+0x94>
 8007078:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800707c:	1f0c      	subs	r4, r1, #4
 800707e:	2b00      	cmp	r3, #0
 8007080:	bfb8      	it	lt
 8007082:	18e4      	addlt	r4, r4, r3
 8007084:	f000 f8ac 	bl	80071e0 <__malloc_lock>
 8007088:	4a1f      	ldr	r2, [pc, #124]	; (8007108 <_free_r+0x98>)
 800708a:	6813      	ldr	r3, [r2, #0]
 800708c:	4610      	mov	r0, r2
 800708e:	b933      	cbnz	r3, 800709e <_free_r+0x2e>
 8007090:	6063      	str	r3, [r4, #4]
 8007092:	6014      	str	r4, [r2, #0]
 8007094:	4628      	mov	r0, r5
 8007096:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800709a:	f000 b8a2 	b.w	80071e2 <__malloc_unlock>
 800709e:	42a3      	cmp	r3, r4
 80070a0:	d90c      	bls.n	80070bc <_free_r+0x4c>
 80070a2:	6821      	ldr	r1, [r4, #0]
 80070a4:	1862      	adds	r2, r4, r1
 80070a6:	4293      	cmp	r3, r2
 80070a8:	bf04      	itt	eq
 80070aa:	681a      	ldreq	r2, [r3, #0]
 80070ac:	685b      	ldreq	r3, [r3, #4]
 80070ae:	6063      	str	r3, [r4, #4]
 80070b0:	bf04      	itt	eq
 80070b2:	1852      	addeq	r2, r2, r1
 80070b4:	6022      	streq	r2, [r4, #0]
 80070b6:	6004      	str	r4, [r0, #0]
 80070b8:	e7ec      	b.n	8007094 <_free_r+0x24>
 80070ba:	4613      	mov	r3, r2
 80070bc:	685a      	ldr	r2, [r3, #4]
 80070be:	b10a      	cbz	r2, 80070c4 <_free_r+0x54>
 80070c0:	42a2      	cmp	r2, r4
 80070c2:	d9fa      	bls.n	80070ba <_free_r+0x4a>
 80070c4:	6819      	ldr	r1, [r3, #0]
 80070c6:	1858      	adds	r0, r3, r1
 80070c8:	42a0      	cmp	r0, r4
 80070ca:	d10b      	bne.n	80070e4 <_free_r+0x74>
 80070cc:	6820      	ldr	r0, [r4, #0]
 80070ce:	4401      	add	r1, r0
 80070d0:	1858      	adds	r0, r3, r1
 80070d2:	4282      	cmp	r2, r0
 80070d4:	6019      	str	r1, [r3, #0]
 80070d6:	d1dd      	bne.n	8007094 <_free_r+0x24>
 80070d8:	6810      	ldr	r0, [r2, #0]
 80070da:	6852      	ldr	r2, [r2, #4]
 80070dc:	605a      	str	r2, [r3, #4]
 80070de:	4401      	add	r1, r0
 80070e0:	6019      	str	r1, [r3, #0]
 80070e2:	e7d7      	b.n	8007094 <_free_r+0x24>
 80070e4:	d902      	bls.n	80070ec <_free_r+0x7c>
 80070e6:	230c      	movs	r3, #12
 80070e8:	602b      	str	r3, [r5, #0]
 80070ea:	e7d3      	b.n	8007094 <_free_r+0x24>
 80070ec:	6820      	ldr	r0, [r4, #0]
 80070ee:	1821      	adds	r1, r4, r0
 80070f0:	428a      	cmp	r2, r1
 80070f2:	bf04      	itt	eq
 80070f4:	6811      	ldreq	r1, [r2, #0]
 80070f6:	6852      	ldreq	r2, [r2, #4]
 80070f8:	6062      	str	r2, [r4, #4]
 80070fa:	bf04      	itt	eq
 80070fc:	1809      	addeq	r1, r1, r0
 80070fe:	6021      	streq	r1, [r4, #0]
 8007100:	605c      	str	r4, [r3, #4]
 8007102:	e7c7      	b.n	8007094 <_free_r+0x24>
 8007104:	bd38      	pop	{r3, r4, r5, pc}
 8007106:	bf00      	nop
 8007108:	20000208 	.word	0x20000208

0800710c <_malloc_r>:
 800710c:	b570      	push	{r4, r5, r6, lr}
 800710e:	1ccd      	adds	r5, r1, #3
 8007110:	f025 0503 	bic.w	r5, r5, #3
 8007114:	3508      	adds	r5, #8
 8007116:	2d0c      	cmp	r5, #12
 8007118:	bf38      	it	cc
 800711a:	250c      	movcc	r5, #12
 800711c:	2d00      	cmp	r5, #0
 800711e:	4606      	mov	r6, r0
 8007120:	db01      	blt.n	8007126 <_malloc_r+0x1a>
 8007122:	42a9      	cmp	r1, r5
 8007124:	d903      	bls.n	800712e <_malloc_r+0x22>
 8007126:	230c      	movs	r3, #12
 8007128:	6033      	str	r3, [r6, #0]
 800712a:	2000      	movs	r0, #0
 800712c:	bd70      	pop	{r4, r5, r6, pc}
 800712e:	f000 f857 	bl	80071e0 <__malloc_lock>
 8007132:	4a21      	ldr	r2, [pc, #132]	; (80071b8 <_malloc_r+0xac>)
 8007134:	6814      	ldr	r4, [r2, #0]
 8007136:	4621      	mov	r1, r4
 8007138:	b991      	cbnz	r1, 8007160 <_malloc_r+0x54>
 800713a:	4c20      	ldr	r4, [pc, #128]	; (80071bc <_malloc_r+0xb0>)
 800713c:	6823      	ldr	r3, [r4, #0]
 800713e:	b91b      	cbnz	r3, 8007148 <_malloc_r+0x3c>
 8007140:	4630      	mov	r0, r6
 8007142:	f000 f83d 	bl	80071c0 <_sbrk_r>
 8007146:	6020      	str	r0, [r4, #0]
 8007148:	4629      	mov	r1, r5
 800714a:	4630      	mov	r0, r6
 800714c:	f000 f838 	bl	80071c0 <_sbrk_r>
 8007150:	1c43      	adds	r3, r0, #1
 8007152:	d124      	bne.n	800719e <_malloc_r+0x92>
 8007154:	230c      	movs	r3, #12
 8007156:	6033      	str	r3, [r6, #0]
 8007158:	4630      	mov	r0, r6
 800715a:	f000 f842 	bl	80071e2 <__malloc_unlock>
 800715e:	e7e4      	b.n	800712a <_malloc_r+0x1e>
 8007160:	680b      	ldr	r3, [r1, #0]
 8007162:	1b5b      	subs	r3, r3, r5
 8007164:	d418      	bmi.n	8007198 <_malloc_r+0x8c>
 8007166:	2b0b      	cmp	r3, #11
 8007168:	d90f      	bls.n	800718a <_malloc_r+0x7e>
 800716a:	600b      	str	r3, [r1, #0]
 800716c:	50cd      	str	r5, [r1, r3]
 800716e:	18cc      	adds	r4, r1, r3
 8007170:	4630      	mov	r0, r6
 8007172:	f000 f836 	bl	80071e2 <__malloc_unlock>
 8007176:	f104 000b 	add.w	r0, r4, #11
 800717a:	1d23      	adds	r3, r4, #4
 800717c:	f020 0007 	bic.w	r0, r0, #7
 8007180:	1ac3      	subs	r3, r0, r3
 8007182:	d0d3      	beq.n	800712c <_malloc_r+0x20>
 8007184:	425a      	negs	r2, r3
 8007186:	50e2      	str	r2, [r4, r3]
 8007188:	e7d0      	b.n	800712c <_malloc_r+0x20>
 800718a:	428c      	cmp	r4, r1
 800718c:	684b      	ldr	r3, [r1, #4]
 800718e:	bf16      	itet	ne
 8007190:	6063      	strne	r3, [r4, #4]
 8007192:	6013      	streq	r3, [r2, #0]
 8007194:	460c      	movne	r4, r1
 8007196:	e7eb      	b.n	8007170 <_malloc_r+0x64>
 8007198:	460c      	mov	r4, r1
 800719a:	6849      	ldr	r1, [r1, #4]
 800719c:	e7cc      	b.n	8007138 <_malloc_r+0x2c>
 800719e:	1cc4      	adds	r4, r0, #3
 80071a0:	f024 0403 	bic.w	r4, r4, #3
 80071a4:	42a0      	cmp	r0, r4
 80071a6:	d005      	beq.n	80071b4 <_malloc_r+0xa8>
 80071a8:	1a21      	subs	r1, r4, r0
 80071aa:	4630      	mov	r0, r6
 80071ac:	f000 f808 	bl	80071c0 <_sbrk_r>
 80071b0:	3001      	adds	r0, #1
 80071b2:	d0cf      	beq.n	8007154 <_malloc_r+0x48>
 80071b4:	6025      	str	r5, [r4, #0]
 80071b6:	e7db      	b.n	8007170 <_malloc_r+0x64>
 80071b8:	20000208 	.word	0x20000208
 80071bc:	2000020c 	.word	0x2000020c

080071c0 <_sbrk_r>:
 80071c0:	b538      	push	{r3, r4, r5, lr}
 80071c2:	4c06      	ldr	r4, [pc, #24]	; (80071dc <_sbrk_r+0x1c>)
 80071c4:	2300      	movs	r3, #0
 80071c6:	4605      	mov	r5, r0
 80071c8:	4608      	mov	r0, r1
 80071ca:	6023      	str	r3, [r4, #0]
 80071cc:	f7fa f960 	bl	8001490 <_sbrk>
 80071d0:	1c43      	adds	r3, r0, #1
 80071d2:	d102      	bne.n	80071da <_sbrk_r+0x1a>
 80071d4:	6823      	ldr	r3, [r4, #0]
 80071d6:	b103      	cbz	r3, 80071da <_sbrk_r+0x1a>
 80071d8:	602b      	str	r3, [r5, #0]
 80071da:	bd38      	pop	{r3, r4, r5, pc}
 80071dc:	2000c7e0 	.word	0x2000c7e0

080071e0 <__malloc_lock>:
 80071e0:	4770      	bx	lr

080071e2 <__malloc_unlock>:
 80071e2:	4770      	bx	lr

080071e4 <_init>:
 80071e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80071e6:	bf00      	nop
 80071e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80071ea:	bc08      	pop	{r3}
 80071ec:	469e      	mov	lr, r3
 80071ee:	4770      	bx	lr

080071f0 <_fini>:
 80071f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80071f2:	bf00      	nop
 80071f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80071f6:	bc08      	pop	{r3}
 80071f8:	469e      	mov	lr, r3
 80071fa:	4770      	bx	lr
