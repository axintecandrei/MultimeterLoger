
MultimeterLoger.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008eec  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  08009080  08009080  00019080  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080090d8  080090d8  00020180  2**0
                  CONTENTS
  4 .ARM          00000008  080090d8  080090d8  000190d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080090e0  080090e0  00020180  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080090e0  080090e0  000190e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080090e4  080090e4  000190e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000180  20000000  080090e8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003874  20000180  08009268  00020180  2**2
                  ALLOC
 10 ._user_heap_stack 00000804  200039f4  08009268  000239f4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020180  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001bc0b  00000000  00000000  000201b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003c7b  00000000  00000000  0003bdbb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012d0  00000000  00000000  0003fa38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001138  00000000  00000000  00040d08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001af0c  00000000  00000000  00041e40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001793b  00000000  00000000  0005cd4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009b34c  00000000  00000000  00074687  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0010f9d3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004e14  00000000  00000000  0010fa28  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000180 	.word	0x20000180
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08009068 	.word	0x08009068

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000184 	.word	0x20000184
 80001d0:	08009068 	.word	0x08009068

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295
 80001e8:	f000 b96e 	b.w	80004c8 <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	9d08      	ldr	r5, [sp, #32]
 800020a:	4604      	mov	r4, r0
 800020c:	468c      	mov	ip, r1
 800020e:	2b00      	cmp	r3, #0
 8000210:	f040 8083 	bne.w	800031a <__udivmoddi4+0x116>
 8000214:	428a      	cmp	r2, r1
 8000216:	4617      	mov	r7, r2
 8000218:	d947      	bls.n	80002aa <__udivmoddi4+0xa6>
 800021a:	fab2 f282 	clz	r2, r2
 800021e:	b142      	cbz	r2, 8000232 <__udivmoddi4+0x2e>
 8000220:	f1c2 0020 	rsb	r0, r2, #32
 8000224:	fa24 f000 	lsr.w	r0, r4, r0
 8000228:	4091      	lsls	r1, r2
 800022a:	4097      	lsls	r7, r2
 800022c:	ea40 0c01 	orr.w	ip, r0, r1
 8000230:	4094      	lsls	r4, r2
 8000232:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000236:	0c23      	lsrs	r3, r4, #16
 8000238:	fbbc f6f8 	udiv	r6, ip, r8
 800023c:	fa1f fe87 	uxth.w	lr, r7
 8000240:	fb08 c116 	mls	r1, r8, r6, ip
 8000244:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000248:	fb06 f10e 	mul.w	r1, r6, lr
 800024c:	4299      	cmp	r1, r3
 800024e:	d909      	bls.n	8000264 <__udivmoddi4+0x60>
 8000250:	18fb      	adds	r3, r7, r3
 8000252:	f106 30ff 	add.w	r0, r6, #4294967295
 8000256:	f080 8119 	bcs.w	800048c <__udivmoddi4+0x288>
 800025a:	4299      	cmp	r1, r3
 800025c:	f240 8116 	bls.w	800048c <__udivmoddi4+0x288>
 8000260:	3e02      	subs	r6, #2
 8000262:	443b      	add	r3, r7
 8000264:	1a5b      	subs	r3, r3, r1
 8000266:	b2a4      	uxth	r4, r4
 8000268:	fbb3 f0f8 	udiv	r0, r3, r8
 800026c:	fb08 3310 	mls	r3, r8, r0, r3
 8000270:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000274:	fb00 fe0e 	mul.w	lr, r0, lr
 8000278:	45a6      	cmp	lr, r4
 800027a:	d909      	bls.n	8000290 <__udivmoddi4+0x8c>
 800027c:	193c      	adds	r4, r7, r4
 800027e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000282:	f080 8105 	bcs.w	8000490 <__udivmoddi4+0x28c>
 8000286:	45a6      	cmp	lr, r4
 8000288:	f240 8102 	bls.w	8000490 <__udivmoddi4+0x28c>
 800028c:	3802      	subs	r0, #2
 800028e:	443c      	add	r4, r7
 8000290:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000294:	eba4 040e 	sub.w	r4, r4, lr
 8000298:	2600      	movs	r6, #0
 800029a:	b11d      	cbz	r5, 80002a4 <__udivmoddi4+0xa0>
 800029c:	40d4      	lsrs	r4, r2
 800029e:	2300      	movs	r3, #0
 80002a0:	e9c5 4300 	strd	r4, r3, [r5]
 80002a4:	4631      	mov	r1, r6
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	b902      	cbnz	r2, 80002ae <__udivmoddi4+0xaa>
 80002ac:	deff      	udf	#255	; 0xff
 80002ae:	fab2 f282 	clz	r2, r2
 80002b2:	2a00      	cmp	r2, #0
 80002b4:	d150      	bne.n	8000358 <__udivmoddi4+0x154>
 80002b6:	1bcb      	subs	r3, r1, r7
 80002b8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002bc:	fa1f f887 	uxth.w	r8, r7
 80002c0:	2601      	movs	r6, #1
 80002c2:	fbb3 fcfe 	udiv	ip, r3, lr
 80002c6:	0c21      	lsrs	r1, r4, #16
 80002c8:	fb0e 331c 	mls	r3, lr, ip, r3
 80002cc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002d0:	fb08 f30c 	mul.w	r3, r8, ip
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d907      	bls.n	80002e8 <__udivmoddi4+0xe4>
 80002d8:	1879      	adds	r1, r7, r1
 80002da:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002de:	d202      	bcs.n	80002e6 <__udivmoddi4+0xe2>
 80002e0:	428b      	cmp	r3, r1
 80002e2:	f200 80e9 	bhi.w	80004b8 <__udivmoddi4+0x2b4>
 80002e6:	4684      	mov	ip, r0
 80002e8:	1ac9      	subs	r1, r1, r3
 80002ea:	b2a3      	uxth	r3, r4
 80002ec:	fbb1 f0fe 	udiv	r0, r1, lr
 80002f0:	fb0e 1110 	mls	r1, lr, r0, r1
 80002f4:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002f8:	fb08 f800 	mul.w	r8, r8, r0
 80002fc:	45a0      	cmp	r8, r4
 80002fe:	d907      	bls.n	8000310 <__udivmoddi4+0x10c>
 8000300:	193c      	adds	r4, r7, r4
 8000302:	f100 33ff 	add.w	r3, r0, #4294967295
 8000306:	d202      	bcs.n	800030e <__udivmoddi4+0x10a>
 8000308:	45a0      	cmp	r8, r4
 800030a:	f200 80d9 	bhi.w	80004c0 <__udivmoddi4+0x2bc>
 800030e:	4618      	mov	r0, r3
 8000310:	eba4 0408 	sub.w	r4, r4, r8
 8000314:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000318:	e7bf      	b.n	800029a <__udivmoddi4+0x96>
 800031a:	428b      	cmp	r3, r1
 800031c:	d909      	bls.n	8000332 <__udivmoddi4+0x12e>
 800031e:	2d00      	cmp	r5, #0
 8000320:	f000 80b1 	beq.w	8000486 <__udivmoddi4+0x282>
 8000324:	2600      	movs	r6, #0
 8000326:	e9c5 0100 	strd	r0, r1, [r5]
 800032a:	4630      	mov	r0, r6
 800032c:	4631      	mov	r1, r6
 800032e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000332:	fab3 f683 	clz	r6, r3
 8000336:	2e00      	cmp	r6, #0
 8000338:	d14a      	bne.n	80003d0 <__udivmoddi4+0x1cc>
 800033a:	428b      	cmp	r3, r1
 800033c:	d302      	bcc.n	8000344 <__udivmoddi4+0x140>
 800033e:	4282      	cmp	r2, r0
 8000340:	f200 80b8 	bhi.w	80004b4 <__udivmoddi4+0x2b0>
 8000344:	1a84      	subs	r4, r0, r2
 8000346:	eb61 0103 	sbc.w	r1, r1, r3
 800034a:	2001      	movs	r0, #1
 800034c:	468c      	mov	ip, r1
 800034e:	2d00      	cmp	r5, #0
 8000350:	d0a8      	beq.n	80002a4 <__udivmoddi4+0xa0>
 8000352:	e9c5 4c00 	strd	r4, ip, [r5]
 8000356:	e7a5      	b.n	80002a4 <__udivmoddi4+0xa0>
 8000358:	f1c2 0320 	rsb	r3, r2, #32
 800035c:	fa20 f603 	lsr.w	r6, r0, r3
 8000360:	4097      	lsls	r7, r2
 8000362:	fa01 f002 	lsl.w	r0, r1, r2
 8000366:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800036a:	40d9      	lsrs	r1, r3
 800036c:	4330      	orrs	r0, r6
 800036e:	0c03      	lsrs	r3, r0, #16
 8000370:	fbb1 f6fe 	udiv	r6, r1, lr
 8000374:	fa1f f887 	uxth.w	r8, r7
 8000378:	fb0e 1116 	mls	r1, lr, r6, r1
 800037c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000380:	fb06 f108 	mul.w	r1, r6, r8
 8000384:	4299      	cmp	r1, r3
 8000386:	fa04 f402 	lsl.w	r4, r4, r2
 800038a:	d909      	bls.n	80003a0 <__udivmoddi4+0x19c>
 800038c:	18fb      	adds	r3, r7, r3
 800038e:	f106 3cff 	add.w	ip, r6, #4294967295
 8000392:	f080 808d 	bcs.w	80004b0 <__udivmoddi4+0x2ac>
 8000396:	4299      	cmp	r1, r3
 8000398:	f240 808a 	bls.w	80004b0 <__udivmoddi4+0x2ac>
 800039c:	3e02      	subs	r6, #2
 800039e:	443b      	add	r3, r7
 80003a0:	1a5b      	subs	r3, r3, r1
 80003a2:	b281      	uxth	r1, r0
 80003a4:	fbb3 f0fe 	udiv	r0, r3, lr
 80003a8:	fb0e 3310 	mls	r3, lr, r0, r3
 80003ac:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003b0:	fb00 f308 	mul.w	r3, r0, r8
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d907      	bls.n	80003c8 <__udivmoddi4+0x1c4>
 80003b8:	1879      	adds	r1, r7, r1
 80003ba:	f100 3cff 	add.w	ip, r0, #4294967295
 80003be:	d273      	bcs.n	80004a8 <__udivmoddi4+0x2a4>
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d971      	bls.n	80004a8 <__udivmoddi4+0x2a4>
 80003c4:	3802      	subs	r0, #2
 80003c6:	4439      	add	r1, r7
 80003c8:	1acb      	subs	r3, r1, r3
 80003ca:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003ce:	e778      	b.n	80002c2 <__udivmoddi4+0xbe>
 80003d0:	f1c6 0c20 	rsb	ip, r6, #32
 80003d4:	fa03 f406 	lsl.w	r4, r3, r6
 80003d8:	fa22 f30c 	lsr.w	r3, r2, ip
 80003dc:	431c      	orrs	r4, r3
 80003de:	fa20 f70c 	lsr.w	r7, r0, ip
 80003e2:	fa01 f306 	lsl.w	r3, r1, r6
 80003e6:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003ea:	fa21 f10c 	lsr.w	r1, r1, ip
 80003ee:	431f      	orrs	r7, r3
 80003f0:	0c3b      	lsrs	r3, r7, #16
 80003f2:	fbb1 f9fe 	udiv	r9, r1, lr
 80003f6:	fa1f f884 	uxth.w	r8, r4
 80003fa:	fb0e 1119 	mls	r1, lr, r9, r1
 80003fe:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000402:	fb09 fa08 	mul.w	sl, r9, r8
 8000406:	458a      	cmp	sl, r1
 8000408:	fa02 f206 	lsl.w	r2, r2, r6
 800040c:	fa00 f306 	lsl.w	r3, r0, r6
 8000410:	d908      	bls.n	8000424 <__udivmoddi4+0x220>
 8000412:	1861      	adds	r1, r4, r1
 8000414:	f109 30ff 	add.w	r0, r9, #4294967295
 8000418:	d248      	bcs.n	80004ac <__udivmoddi4+0x2a8>
 800041a:	458a      	cmp	sl, r1
 800041c:	d946      	bls.n	80004ac <__udivmoddi4+0x2a8>
 800041e:	f1a9 0902 	sub.w	r9, r9, #2
 8000422:	4421      	add	r1, r4
 8000424:	eba1 010a 	sub.w	r1, r1, sl
 8000428:	b2bf      	uxth	r7, r7
 800042a:	fbb1 f0fe 	udiv	r0, r1, lr
 800042e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000432:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000436:	fb00 f808 	mul.w	r8, r0, r8
 800043a:	45b8      	cmp	r8, r7
 800043c:	d907      	bls.n	800044e <__udivmoddi4+0x24a>
 800043e:	19e7      	adds	r7, r4, r7
 8000440:	f100 31ff 	add.w	r1, r0, #4294967295
 8000444:	d22e      	bcs.n	80004a4 <__udivmoddi4+0x2a0>
 8000446:	45b8      	cmp	r8, r7
 8000448:	d92c      	bls.n	80004a4 <__udivmoddi4+0x2a0>
 800044a:	3802      	subs	r0, #2
 800044c:	4427      	add	r7, r4
 800044e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000452:	eba7 0708 	sub.w	r7, r7, r8
 8000456:	fba0 8902 	umull	r8, r9, r0, r2
 800045a:	454f      	cmp	r7, r9
 800045c:	46c6      	mov	lr, r8
 800045e:	4649      	mov	r1, r9
 8000460:	d31a      	bcc.n	8000498 <__udivmoddi4+0x294>
 8000462:	d017      	beq.n	8000494 <__udivmoddi4+0x290>
 8000464:	b15d      	cbz	r5, 800047e <__udivmoddi4+0x27a>
 8000466:	ebb3 020e 	subs.w	r2, r3, lr
 800046a:	eb67 0701 	sbc.w	r7, r7, r1
 800046e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000472:	40f2      	lsrs	r2, r6
 8000474:	ea4c 0202 	orr.w	r2, ip, r2
 8000478:	40f7      	lsrs	r7, r6
 800047a:	e9c5 2700 	strd	r2, r7, [r5]
 800047e:	2600      	movs	r6, #0
 8000480:	4631      	mov	r1, r6
 8000482:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000486:	462e      	mov	r6, r5
 8000488:	4628      	mov	r0, r5
 800048a:	e70b      	b.n	80002a4 <__udivmoddi4+0xa0>
 800048c:	4606      	mov	r6, r0
 800048e:	e6e9      	b.n	8000264 <__udivmoddi4+0x60>
 8000490:	4618      	mov	r0, r3
 8000492:	e6fd      	b.n	8000290 <__udivmoddi4+0x8c>
 8000494:	4543      	cmp	r3, r8
 8000496:	d2e5      	bcs.n	8000464 <__udivmoddi4+0x260>
 8000498:	ebb8 0e02 	subs.w	lr, r8, r2
 800049c:	eb69 0104 	sbc.w	r1, r9, r4
 80004a0:	3801      	subs	r0, #1
 80004a2:	e7df      	b.n	8000464 <__udivmoddi4+0x260>
 80004a4:	4608      	mov	r0, r1
 80004a6:	e7d2      	b.n	800044e <__udivmoddi4+0x24a>
 80004a8:	4660      	mov	r0, ip
 80004aa:	e78d      	b.n	80003c8 <__udivmoddi4+0x1c4>
 80004ac:	4681      	mov	r9, r0
 80004ae:	e7b9      	b.n	8000424 <__udivmoddi4+0x220>
 80004b0:	4666      	mov	r6, ip
 80004b2:	e775      	b.n	80003a0 <__udivmoddi4+0x19c>
 80004b4:	4630      	mov	r0, r6
 80004b6:	e74a      	b.n	800034e <__udivmoddi4+0x14a>
 80004b8:	f1ac 0c02 	sub.w	ip, ip, #2
 80004bc:	4439      	add	r1, r7
 80004be:	e713      	b.n	80002e8 <__udivmoddi4+0xe4>
 80004c0:	3802      	subs	r0, #2
 80004c2:	443c      	add	r4, r7
 80004c4:	e724      	b.n	8000310 <__udivmoddi4+0x10c>
 80004c6:	bf00      	nop

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <TESS_DAS_INIT>:

static void TESS_FILL_DASOUTPUT_BUFFER(r_buff_data_t* out_buffer);
static void TESS_DAS_ADD_SIGNAL(float signal, dtype_t dtype, float resolution);

void TESS_DAS_INIT()
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	af00      	add	r7, sp, #0

   TESS_RING_BUFFER_INIT(&TESS_RING_BUFFER);
 80004d0:	4812      	ldr	r0, [pc, #72]	; (800051c <TESS_DAS_INIT+0x50>)
 80004d2:	f000 fab5 	bl	8000a40 <TESS_RING_BUFFER_INIT>
   TESS_LOOP_CNT = 0;
 80004d6:	4b12      	ldr	r3, [pc, #72]	; (8000520 <TESS_DAS_INIT+0x54>)
 80004d8:	2200      	movs	r2, #0
 80004da:	601a      	str	r2, [r3, #0]

   /*init das buffer*/
   TESS_DASOUTPUT_BUFF.p_byte_data = &TESS_DASOUTPUT_BUFF.buff.byte0;
 80004dc:	4b11      	ldr	r3, [pc, #68]	; (8000524 <TESS_DAS_INIT+0x58>)
 80004de:	4a12      	ldr	r2, [pc, #72]	; (8000528 <TESS_DAS_INIT+0x5c>)
 80004e0:	605a      	str	r2, [r3, #4]
   for (TESS_DASOUTPUT_BUFF.filled = 0; TESS_DASOUTPUT_BUFF.filled < ACQ_BUFFER_SIZE; TESS_DASOUTPUT_BUFF.filled++)
 80004e2:	4b10      	ldr	r3, [pc, #64]	; (8000524 <TESS_DAS_INIT+0x58>)
 80004e4:	2200      	movs	r2, #0
 80004e6:	701a      	strb	r2, [r3, #0]
 80004e8:	e00c      	b.n	8000504 <TESS_DAS_INIT+0x38>
   {
      *(TESS_DASOUTPUT_BUFF.p_byte_data + TESS_DASOUTPUT_BUFF.filled) = 0;
 80004ea:	4b0e      	ldr	r3, [pc, #56]	; (8000524 <TESS_DAS_INIT+0x58>)
 80004ec:	685b      	ldr	r3, [r3, #4]
 80004ee:	4a0d      	ldr	r2, [pc, #52]	; (8000524 <TESS_DAS_INIT+0x58>)
 80004f0:	7812      	ldrb	r2, [r2, #0]
 80004f2:	4413      	add	r3, r2
 80004f4:	2200      	movs	r2, #0
 80004f6:	701a      	strb	r2, [r3, #0]
   for (TESS_DASOUTPUT_BUFF.filled = 0; TESS_DASOUTPUT_BUFF.filled < ACQ_BUFFER_SIZE; TESS_DASOUTPUT_BUFF.filled++)
 80004f8:	4b0a      	ldr	r3, [pc, #40]	; (8000524 <TESS_DAS_INIT+0x58>)
 80004fa:	781b      	ldrb	r3, [r3, #0]
 80004fc:	3301      	adds	r3, #1
 80004fe:	b2da      	uxtb	r2, r3
 8000500:	4b08      	ldr	r3, [pc, #32]	; (8000524 <TESS_DAS_INIT+0x58>)
 8000502:	701a      	strb	r2, [r3, #0]
 8000504:	4b07      	ldr	r3, [pc, #28]	; (8000524 <TESS_DAS_INIT+0x58>)
 8000506:	781b      	ldrb	r3, [r3, #0]
 8000508:	2b05      	cmp	r3, #5
 800050a:	d9ee      	bls.n	80004ea <TESS_DAS_INIT+0x1e>
   }
   TESS_DASOUTPUT_BUFF.filled = 0;
 800050c:	4b05      	ldr	r3, [pc, #20]	; (8000524 <TESS_DAS_INIT+0x58>)
 800050e:	2200      	movs	r2, #0
 8000510:	701a      	strb	r2, [r3, #0]
   Set_TessDasStates(DAS_StandBy);
 8000512:	4b06      	ldr	r3, [pc, #24]	; (800052c <TESS_DAS_INIT+0x60>)
 8000514:	2200      	movs	r2, #0
 8000516:	701a      	strb	r2, [r3, #0]
}
 8000518:	bf00      	nop
 800051a:	bd80      	pop	{r7, pc}
 800051c:	200003cc 	.word	0x200003cc
 8000520:	200027e0 	.word	0x200027e0
 8000524:	200027f0 	.word	0x200027f0
 8000528:	200027f8 	.word	0x200027f8
 800052c:	200027e4 	.word	0x200027e4

08000530 <TESS_FILL_DASOUTPUT_BUFFER>:

static void TESS_FILL_DASOUTPUT_BUFFER(r_buff_data_t* out_buffer)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	b082      	sub	sp, #8
 8000534:	af00      	add	r7, sp, #0
 8000536:	6078      	str	r0, [r7, #4]
   /* fill buffer with data*/
   TESS_DAS_ADD_SIGNAL(TESS_LOOP_CNT,uint32,1); /*0*/
 8000538:	4b10      	ldr	r3, [pc, #64]	; (800057c <TESS_FILL_DASOUTPUT_BUFFER+0x4c>)
 800053a:	681b      	ldr	r3, [r3, #0]
 800053c:	ee07 3a90 	vmov	s15, r3
 8000540:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000544:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8000548:	2004      	movs	r0, #4
 800054a:	eeb0 0a67 	vmov.f32	s0, s15
 800054e:	f000 f8e3 	bl	8000718 <TESS_DAS_ADD_SIGNAL>
   TESS_DAS_ADD_SIGNAL(Get_TessDasADC_CH_1(),uint16,1);     /*4*/
 8000552:	4b0b      	ldr	r3, [pc, #44]	; (8000580 <TESS_FILL_DASOUTPUT_BUFFER+0x50>)
 8000554:	881b      	ldrh	r3, [r3, #0]
 8000556:	ee07 3a90 	vmov	s15, r3
 800055a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800055e:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8000562:	2002      	movs	r0, #2
 8000564:	eeb0 0a67 	vmov.f32	s0, s15
 8000568:	f000 f8d6 	bl	8000718 <TESS_DAS_ADD_SIGNAL>

   /*Reset */
   TESS_DASOUTPUT_BUFF.filled = 0;
 800056c:	4b05      	ldr	r3, [pc, #20]	; (8000584 <TESS_FILL_DASOUTPUT_BUFFER+0x54>)
 800056e:	2200      	movs	r2, #0
 8000570:	701a      	strb	r2, [r3, #0]

}
 8000572:	bf00      	nop
 8000574:	3708      	adds	r7, #8
 8000576:	46bd      	mov	sp, r7
 8000578:	bd80      	pop	{r7, pc}
 800057a:	bf00      	nop
 800057c:	200027e0 	.word	0x200027e0
 8000580:	200027d6 	.word	0x200027d6
 8000584:	200027f0 	.word	0x200027f0

08000588 <TESS_DAS_MAIN>:

void TESS_DAS_MAIN()
{
 8000588:	b590      	push	{r4, r7, lr}
 800058a:	b083      	sub	sp, #12
 800058c:	af00      	add	r7, sp, #0
   /*DAS State Machine*/
   switch(Get_TessDasStates())
 800058e:	4b24      	ldr	r3, [pc, #144]	; (8000620 <TESS_DAS_MAIN+0x98>)
 8000590:	781b      	ldrb	r3, [r3, #0]
 8000592:	2b04      	cmp	r3, #4
 8000594:	d039      	beq.n	800060a <TESS_DAS_MAIN+0x82>
 8000596:	2b04      	cmp	r3, #4
 8000598:	dc3d      	bgt.n	8000616 <TESS_DAS_MAIN+0x8e>
 800059a:	2b02      	cmp	r3, #2
 800059c:	d002      	beq.n	80005a4 <TESS_DAS_MAIN+0x1c>
 800059e:	2b03      	cmp	r3, #3
 80005a0:	d023      	beq.n	80005ea <TESS_DAS_MAIN+0x62>
      Set_TessDasStates(DAS_StandBy);
      break;
   case DAS_StandBy:

   default:
      break;
 80005a2:	e038      	b.n	8000616 <TESS_DAS_MAIN+0x8e>
      TESS_FILL_DASOUTPUT_BUFFER(&TESS_DATA_ACQ_BUFFER);
 80005a4:	481f      	ldr	r0, [pc, #124]	; (8000624 <TESS_DAS_MAIN+0x9c>)
 80005a6:	f7ff ffc3 	bl	8000530 <TESS_FILL_DASOUTPUT_BUFFER>
      TESS_RING_BUFFER_PUT(&TESS_RING_BUFFER, TESS_DASOUTPUT_BUFF.buff);
 80005aa:	4b1f      	ldr	r3, [pc, #124]	; (8000628 <TESS_DAS_MAIN+0xa0>)
 80005ac:	3308      	adds	r3, #8
 80005ae:	e893 0006 	ldmia.w	r3, {r1, r2}
 80005b2:	481e      	ldr	r0, [pc, #120]	; (800062c <TESS_DAS_MAIN+0xa4>)
 80005b4:	f000 fae5 	bl	8000b82 <TESS_RING_BUFFER_PUT>
      TESS_DMA_BUFFER = TESS_RING_BUFFER_GET(&TESS_RING_BUFFER);
 80005b8:	4c1d      	ldr	r4, [pc, #116]	; (8000630 <TESS_DAS_MAIN+0xa8>)
 80005ba:	463b      	mov	r3, r7
 80005bc:	491b      	ldr	r1, [pc, #108]	; (800062c <TESS_DAS_MAIN+0xa4>)
 80005be:	4618      	mov	r0, r3
 80005c0:	f000 fa9b 	bl	8000afa <TESS_RING_BUFFER_GET>
 80005c4:	4622      	mov	r2, r4
 80005c6:	463b      	mov	r3, r7
 80005c8:	6819      	ldr	r1, [r3, #0]
 80005ca:	6011      	str	r1, [r2, #0]
 80005cc:	889b      	ldrh	r3, [r3, #4]
 80005ce:	8093      	strh	r3, [r2, #4]
      CDC_Transmit_FS((uint8_t *)&TESS_DMA_BUFFER,ACQ_BUFFER_SIZE);
 80005d0:	2106      	movs	r1, #6
 80005d2:	4817      	ldr	r0, [pc, #92]	; (8000630 <TESS_DAS_MAIN+0xa8>)
 80005d4:	f008 f8be 	bl	8008754 <CDC_Transmit_FS>
      TESS_LOOP_CNT++;
 80005d8:	4b16      	ldr	r3, [pc, #88]	; (8000634 <TESS_DAS_MAIN+0xac>)
 80005da:	681b      	ldr	r3, [r3, #0]
 80005dc:	3301      	adds	r3, #1
 80005de:	4a15      	ldr	r2, [pc, #84]	; (8000634 <TESS_DAS_MAIN+0xac>)
 80005e0:	6013      	str	r3, [r2, #0]
      Set_TessDasStates(DAS_KeepPacking);
 80005e2:	4b0f      	ldr	r3, [pc, #60]	; (8000620 <TESS_DAS_MAIN+0x98>)
 80005e4:	2203      	movs	r2, #3
 80005e6:	701a      	strb	r2, [r3, #0]
      break;
 80005e8:	e016      	b.n	8000618 <TESS_DAS_MAIN+0x90>
      TESS_FILL_DASOUTPUT_BUFFER(&TESS_DATA_ACQ_BUFFER);
 80005ea:	480e      	ldr	r0, [pc, #56]	; (8000624 <TESS_DAS_MAIN+0x9c>)
 80005ec:	f7ff ffa0 	bl	8000530 <TESS_FILL_DASOUTPUT_BUFFER>
      TESS_RING_BUFFER_PUT(&TESS_RING_BUFFER, TESS_DASOUTPUT_BUFF.buff);
 80005f0:	4b0d      	ldr	r3, [pc, #52]	; (8000628 <TESS_DAS_MAIN+0xa0>)
 80005f2:	3308      	adds	r3, #8
 80005f4:	e893 0006 	ldmia.w	r3, {r1, r2}
 80005f8:	480c      	ldr	r0, [pc, #48]	; (800062c <TESS_DAS_MAIN+0xa4>)
 80005fa:	f000 fac2 	bl	8000b82 <TESS_RING_BUFFER_PUT>
      TESS_LOOP_CNT++;
 80005fe:	4b0d      	ldr	r3, [pc, #52]	; (8000634 <TESS_DAS_MAIN+0xac>)
 8000600:	681b      	ldr	r3, [r3, #0]
 8000602:	3301      	adds	r3, #1
 8000604:	4a0b      	ldr	r2, [pc, #44]	; (8000634 <TESS_DAS_MAIN+0xac>)
 8000606:	6013      	str	r3, [r2, #0]
      break;
 8000608:	e006      	b.n	8000618 <TESS_DAS_MAIN+0x90>
      TESS_DAS_INIT();
 800060a:	f7ff ff5f 	bl	80004cc <TESS_DAS_INIT>
      Set_TessDasStates(DAS_StandBy);
 800060e:	4b04      	ldr	r3, [pc, #16]	; (8000620 <TESS_DAS_MAIN+0x98>)
 8000610:	2200      	movs	r2, #0
 8000612:	701a      	strb	r2, [r3, #0]
      break;
 8000614:	e000      	b.n	8000618 <TESS_DAS_MAIN+0x90>
      break;
 8000616:	bf00      	nop
   }

}
 8000618:	bf00      	nop
 800061a:	370c      	adds	r7, #12
 800061c:	46bd      	mov	sp, r7
 800061e:	bd90      	pop	{r4, r7, pc}
 8000620:	200027e4 	.word	0x200027e4
 8000624:	20002800 	.word	0x20002800
 8000628:	200027f0 	.word	0x200027f0
 800062c:	200003cc 	.word	0x200003cc
 8000630:	200027e8 	.word	0x200027e8
 8000634:	200027e0 	.word	0x200027e0

08000638 <TESS_DAS_GET_COMMANDS>:

void TESS_DAS_GET_COMMANDS(uint8_t command)
{
 8000638:	b480      	push	{r7}
 800063a:	b083      	sub	sp, #12
 800063c:	af00      	add	r7, sp, #0
 800063e:	4603      	mov	r3, r0
 8000640:	71fb      	strb	r3, [r7, #7]
   if ((command == DAS_START_MEAS) )
 8000642:	79fb      	ldrb	r3, [r7, #7]
 8000644:	2b31      	cmp	r3, #49	; 0x31
 8000646:	d107      	bne.n	8000658 <TESS_DAS_GET_COMMANDS+0x20>
   {
      if (Get_TessDasStates() == DAS_StandBy)
 8000648:	4b0d      	ldr	r3, [pc, #52]	; (8000680 <TESS_DAS_GET_COMMANDS+0x48>)
 800064a:	781b      	ldrb	r3, [r3, #0]
 800064c:	2b00      	cmp	r3, #0
 800064e:	d111      	bne.n	8000674 <TESS_DAS_GET_COMMANDS+0x3c>
      {
         Set_TessDasStates(DAS_StartMeas);
 8000650:	4b0b      	ldr	r3, [pc, #44]	; (8000680 <TESS_DAS_GET_COMMANDS+0x48>)
 8000652:	2202      	movs	r2, #2
 8000654:	701a      	strb	r2, [r3, #0]
      else
      {
         /*transition from other states forbidden*/
      }
   }
}
 8000656:	e00d      	b.n	8000674 <TESS_DAS_GET_COMMANDS+0x3c>
   else if(command == DAS_STOP_MEAS)
 8000658:	79fb      	ldrb	r3, [r7, #7]
 800065a:	2b30      	cmp	r3, #48	; 0x30
 800065c:	d10a      	bne.n	8000674 <TESS_DAS_GET_COMMANDS+0x3c>
      if ((Get_TessDasStates() == DAS_KeepPacking) || (Get_TessDasStates() == DAS_StartMeas))
 800065e:	4b08      	ldr	r3, [pc, #32]	; (8000680 <TESS_DAS_GET_COMMANDS+0x48>)
 8000660:	781b      	ldrb	r3, [r3, #0]
 8000662:	2b03      	cmp	r3, #3
 8000664:	d003      	beq.n	800066e <TESS_DAS_GET_COMMANDS+0x36>
 8000666:	4b06      	ldr	r3, [pc, #24]	; (8000680 <TESS_DAS_GET_COMMANDS+0x48>)
 8000668:	781b      	ldrb	r3, [r3, #0]
 800066a:	2b02      	cmp	r3, #2
 800066c:	d102      	bne.n	8000674 <TESS_DAS_GET_COMMANDS+0x3c>
         Set_TessDasStates(DAS_StopOfMeasurement);
 800066e:	4b04      	ldr	r3, [pc, #16]	; (8000680 <TESS_DAS_GET_COMMANDS+0x48>)
 8000670:	2204      	movs	r2, #4
 8000672:	701a      	strb	r2, [r3, #0]
}
 8000674:	bf00      	nop
 8000676:	370c      	adds	r7, #12
 8000678:	46bd      	mov	sp, r7
 800067a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800067e:	4770      	bx	lr
 8000680:	200027e4 	.word	0x200027e4

08000684 <TESS_DAS_UPDATE_UPON_TC>:

uint8_t TESS_DAS_UPDATE_UPON_TC()
{
 8000684:	b590      	push	{r4, r7, lr}
 8000686:	b085      	sub	sp, #20
 8000688:	af00      	add	r7, sp, #0
   uint8_t  usb_tx_result = USBD_OK;
 800068a:	2300      	movs	r3, #0
 800068c:	73fb      	strb	r3, [r7, #15]


   if (Get_TessDasStates() == DAS_KeepPacking)
 800068e:	4b12      	ldr	r3, [pc, #72]	; (80006d8 <TESS_DAS_UPDATE_UPON_TC+0x54>)
 8000690:	781b      	ldrb	r3, [r3, #0]
 8000692:	2b03      	cmp	r3, #3
 8000694:	d11b      	bne.n	80006ce <TESS_DAS_UPDATE_UPON_TC+0x4a>
   {
      if (!TESS_RINGBUFF_IS_EMPTY(&TESS_RING_BUFFER) )
 8000696:	4811      	ldr	r0, [pc, #68]	; (80006dc <TESS_DAS_UPDATE_UPON_TC+0x58>)
 8000698:	f000 facf 	bl	8000c3a <TESS_RINGBUFF_IS_EMPTY>
 800069c:	4603      	mov	r3, r0
 800069e:	2b00      	cmp	r3, #0
 80006a0:	d112      	bne.n	80006c8 <TESS_DAS_UPDATE_UPON_TC+0x44>
      {
         TESS_DMA_BUFFER = TESS_RING_BUFFER_GET(&TESS_RING_BUFFER);
 80006a2:	4c0f      	ldr	r4, [pc, #60]	; (80006e0 <TESS_DAS_UPDATE_UPON_TC+0x5c>)
 80006a4:	463b      	mov	r3, r7
 80006a6:	490d      	ldr	r1, [pc, #52]	; (80006dc <TESS_DAS_UPDATE_UPON_TC+0x58>)
 80006a8:	4618      	mov	r0, r3
 80006aa:	f000 fa26 	bl	8000afa <TESS_RING_BUFFER_GET>
 80006ae:	4622      	mov	r2, r4
 80006b0:	463b      	mov	r3, r7
 80006b2:	6819      	ldr	r1, [r3, #0]
 80006b4:	6011      	str	r1, [r2, #0]
 80006b6:	889b      	ldrh	r3, [r3, #4]
 80006b8:	8093      	strh	r3, [r2, #4]
         usb_tx_result =  CDC_Transmit_FS((uint8_t *)&TESS_DMA_BUFFER,ACQ_BUFFER_SIZE);
 80006ba:	2106      	movs	r1, #6
 80006bc:	4808      	ldr	r0, [pc, #32]	; (80006e0 <TESS_DAS_UPDATE_UPON_TC+0x5c>)
 80006be:	f008 f849 	bl	8008754 <CDC_Transmit_FS>
 80006c2:	4603      	mov	r3, r0
 80006c4:	73fb      	strb	r3, [r7, #15]
 80006c6:	e002      	b.n	80006ce <TESS_DAS_UPDATE_UPON_TC+0x4a>
      }
      else
      {
         /*trigger another transmittion*/
         Set_TessDasStates(DAS_StartMeas);
 80006c8:	4b03      	ldr	r3, [pc, #12]	; (80006d8 <TESS_DAS_UPDATE_UPON_TC+0x54>)
 80006ca:	2202      	movs	r2, #2
 80006cc:	701a      	strb	r2, [r3, #0]
      }
   }
   return usb_tx_result;
 80006ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80006d0:	4618      	mov	r0, r3
 80006d2:	3714      	adds	r7, #20
 80006d4:	46bd      	mov	sp, r7
 80006d6:	bd90      	pop	{r4, r7, pc}
 80006d8:	200027e4 	.word	0x200027e4
 80006dc:	200003cc 	.word	0x200003cc
 80006e0:	200027e8 	.word	0x200027e8

080006e4 <DAS_Receive_Clbk_USB>:


void DAS_Receive_Clbk_USB (uint8_t* Buf, uint32_t Len)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b084      	sub	sp, #16
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	6078      	str	r0, [r7, #4]
 80006ec:	6039      	str	r1, [r7, #0]
   uint8_t  rx_char_usb = 0;
 80006ee:	2300      	movs	r3, #0
 80006f0:	73fb      	strb	r3, [r7, #15]

   rx_char_usb = Buf[0];
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	781b      	ldrb	r3, [r3, #0]
 80006f6:	73fb      	strb	r3, [r7, #15]
   TESS_DAS_GET_COMMANDS(rx_char_usb);
 80006f8:	7bfb      	ldrb	r3, [r7, #15]
 80006fa:	4618      	mov	r0, r3
 80006fc:	f7ff ff9c 	bl	8000638 <TESS_DAS_GET_COMMANDS>
}
 8000700:	bf00      	nop
 8000702:	3710      	adds	r7, #16
 8000704:	46bd      	mov	sp, r7
 8000706:	bd80      	pop	{r7, pc}

08000708 <DAS_Transmit_Clbk_USB>:

int8_t  DAS_Transmit_Clbk_USB (void)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	af00      	add	r7, sp, #0

   return TESS_DAS_UPDATE_UPON_TC();
 800070c:	f7ff ffba 	bl	8000684 <TESS_DAS_UPDATE_UPON_TC>
 8000710:	4603      	mov	r3, r0
 8000712:	b25b      	sxtb	r3, r3
}
 8000714:	4618      	mov	r0, r3
 8000716:	bd80      	pop	{r7, pc}

08000718 <TESS_DAS_ADD_SIGNAL>:


static void TESS_DAS_ADD_SIGNAL(float signal, dtype_t dtype, float resolution)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	b086      	sub	sp, #24
 800071c:	af00      	add	r7, sp, #0
 800071e:	ed87 0a03 	vstr	s0, [r7, #12]
 8000722:	4603      	mov	r3, r0
 8000724:	edc7 0a01 	vstr	s1, [r7, #4]
 8000728:	72fb      	strb	r3, [r7, #11]
   uint32_t  temp32;


   switch (dtype)
 800072a:	7afb      	ldrb	r3, [r7, #11]
 800072c:	2b05      	cmp	r3, #5
 800072e:	f200 8180 	bhi.w	8000a32 <TESS_DAS_ADD_SIGNAL+0x31a>
 8000732:	a201      	add	r2, pc, #4	; (adr r2, 8000738 <TESS_DAS_ADD_SIGNAL+0x20>)
 8000734:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000738:	08000785 	.word	0x08000785
 800073c:	08000751 	.word	0x08000751
 8000740:	080007bf 	.word	0x080007bf
 8000744:	08000829 	.word	0x08000829
 8000748:	080008a3 	.word	0x080008a3
 800074c:	08000975 	.word	0x08000975
   {
   case uint8:
      {
         *(TESS_DASOUTPUT_BUFF.p_byte_data + TESS_DASOUTPUT_BUFF.filled) = (uint8_t)signal;
 8000750:	4b86      	ldr	r3, [pc, #536]	; (800096c <TESS_DAS_ADD_SIGNAL+0x254>)
 8000752:	685b      	ldr	r3, [r3, #4]
 8000754:	4a85      	ldr	r2, [pc, #532]	; (800096c <TESS_DAS_ADD_SIGNAL+0x254>)
 8000756:	7812      	ldrb	r2, [r2, #0]
 8000758:	4413      	add	r3, r2
 800075a:	edd7 7a03 	vldr	s15, [r7, #12]
 800075e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000762:	edc7 7a00 	vstr	s15, [r7]
 8000766:	683a      	ldr	r2, [r7, #0]
 8000768:	b2d2      	uxtb	r2, r2
 800076a:	701a      	strb	r2, [r3, #0]
         TESS_DASOUTPUT_BUFF.filled = TESS_BUFF_IDX_INC(TESS_DASOUTPUT_BUFF.filled, ACQ_BUFFER_SIZE);
 800076c:	4b7f      	ldr	r3, [pc, #508]	; (800096c <TESS_DAS_ADD_SIGNAL+0x254>)
 800076e:	781b      	ldrb	r3, [r3, #0]
 8000770:	b29b      	uxth	r3, r3
 8000772:	2106      	movs	r1, #6
 8000774:	4618      	mov	r0, r3
 8000776:	f000 fa71 	bl	8000c5c <TESS_BUFF_IDX_INC>
 800077a:	4603      	mov	r3, r0
 800077c:	b2da      	uxtb	r2, r3
 800077e:	4b7b      	ldr	r3, [pc, #492]	; (800096c <TESS_DAS_ADD_SIGNAL+0x254>)
 8000780:	701a      	strb	r2, [r3, #0]
      }
      break;
 8000782:	e156      	b.n	8000a32 <TESS_DAS_ADD_SIGNAL+0x31a>
   case int8:
      {
         *(TESS_DASOUTPUT_BUFF.p_byte_data + TESS_DASOUTPUT_BUFF.filled) = TESS_SINT8_TO_UINT8((int8_t)signal);
 8000784:	edd7 7a03 	vldr	s15, [r7, #12]
 8000788:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800078c:	edc7 7a00 	vstr	s15, [r7]
 8000790:	683b      	ldr	r3, [r7, #0]
 8000792:	b25b      	sxtb	r3, r3
 8000794:	b2da      	uxtb	r2, r3
 8000796:	4b75      	ldr	r3, [pc, #468]	; (800096c <TESS_DAS_ADD_SIGNAL+0x254>)
 8000798:	685b      	ldr	r3, [r3, #4]
 800079a:	4974      	ldr	r1, [pc, #464]	; (800096c <TESS_DAS_ADD_SIGNAL+0x254>)
 800079c:	7809      	ldrb	r1, [r1, #0]
 800079e:	440b      	add	r3, r1
 80007a0:	3a80      	subs	r2, #128	; 0x80
 80007a2:	b2d2      	uxtb	r2, r2
 80007a4:	701a      	strb	r2, [r3, #0]
         TESS_DASOUTPUT_BUFF.filled = TESS_BUFF_IDX_INC(TESS_DASOUTPUT_BUFF.filled, ACQ_BUFFER_SIZE);
 80007a6:	4b71      	ldr	r3, [pc, #452]	; (800096c <TESS_DAS_ADD_SIGNAL+0x254>)
 80007a8:	781b      	ldrb	r3, [r3, #0]
 80007aa:	b29b      	uxth	r3, r3
 80007ac:	2106      	movs	r1, #6
 80007ae:	4618      	mov	r0, r3
 80007b0:	f000 fa54 	bl	8000c5c <TESS_BUFF_IDX_INC>
 80007b4:	4603      	mov	r3, r0
 80007b6:	b2da      	uxtb	r2, r3
 80007b8:	4b6c      	ldr	r3, [pc, #432]	; (800096c <TESS_DAS_ADD_SIGNAL+0x254>)
 80007ba:	701a      	strb	r2, [r3, #0]
      }
      break;
 80007bc:	e139      	b.n	8000a32 <TESS_DAS_ADD_SIGNAL+0x31a>
   case uint16:
      {
         *(TESS_DASOUTPUT_BUFF.p_byte_data + TESS_DASOUTPUT_BUFF.filled) = ((uint16_t)(signal)&0x00FF);
 80007be:	edd7 7a03 	vldr	s15, [r7, #12]
 80007c2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80007c6:	ee17 3a90 	vmov	r3, s15
 80007ca:	b299      	uxth	r1, r3
 80007cc:	4b67      	ldr	r3, [pc, #412]	; (800096c <TESS_DAS_ADD_SIGNAL+0x254>)
 80007ce:	685b      	ldr	r3, [r3, #4]
 80007d0:	4a66      	ldr	r2, [pc, #408]	; (800096c <TESS_DAS_ADD_SIGNAL+0x254>)
 80007d2:	7812      	ldrb	r2, [r2, #0]
 80007d4:	4413      	add	r3, r2
 80007d6:	b2ca      	uxtb	r2, r1
 80007d8:	701a      	strb	r2, [r3, #0]
         TESS_DASOUTPUT_BUFF.filled = TESS_BUFF_IDX_INC(TESS_DASOUTPUT_BUFF.filled, ACQ_BUFFER_SIZE);
 80007da:	4b64      	ldr	r3, [pc, #400]	; (800096c <TESS_DAS_ADD_SIGNAL+0x254>)
 80007dc:	781b      	ldrb	r3, [r3, #0]
 80007de:	b29b      	uxth	r3, r3
 80007e0:	2106      	movs	r1, #6
 80007e2:	4618      	mov	r0, r3
 80007e4:	f000 fa3a 	bl	8000c5c <TESS_BUFF_IDX_INC>
 80007e8:	4603      	mov	r3, r0
 80007ea:	b2da      	uxtb	r2, r3
 80007ec:	4b5f      	ldr	r3, [pc, #380]	; (800096c <TESS_DAS_ADD_SIGNAL+0x254>)
 80007ee:	701a      	strb	r2, [r3, #0]
         *(TESS_DASOUTPUT_BUFF.p_byte_data + TESS_DASOUTPUT_BUFF.filled) = ((uint16_t)(signal)&0xFF00)>>8;
 80007f0:	edd7 7a03 	vldr	s15, [r7, #12]
 80007f4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80007f8:	ee17 3a90 	vmov	r3, s15
 80007fc:	b29b      	uxth	r3, r3
 80007fe:	0a1b      	lsrs	r3, r3, #8
 8000800:	b299      	uxth	r1, r3
 8000802:	4b5a      	ldr	r3, [pc, #360]	; (800096c <TESS_DAS_ADD_SIGNAL+0x254>)
 8000804:	685b      	ldr	r3, [r3, #4]
 8000806:	4a59      	ldr	r2, [pc, #356]	; (800096c <TESS_DAS_ADD_SIGNAL+0x254>)
 8000808:	7812      	ldrb	r2, [r2, #0]
 800080a:	4413      	add	r3, r2
 800080c:	b2ca      	uxtb	r2, r1
 800080e:	701a      	strb	r2, [r3, #0]
         TESS_DASOUTPUT_BUFF.filled = TESS_BUFF_IDX_INC(TESS_DASOUTPUT_BUFF.filled, ACQ_BUFFER_SIZE);
 8000810:	4b56      	ldr	r3, [pc, #344]	; (800096c <TESS_DAS_ADD_SIGNAL+0x254>)
 8000812:	781b      	ldrb	r3, [r3, #0]
 8000814:	b29b      	uxth	r3, r3
 8000816:	2106      	movs	r1, #6
 8000818:	4618      	mov	r0, r3
 800081a:	f000 fa1f 	bl	8000c5c <TESS_BUFF_IDX_INC>
 800081e:	4603      	mov	r3, r0
 8000820:	b2da      	uxtb	r2, r3
 8000822:	4b52      	ldr	r3, [pc, #328]	; (800096c <TESS_DAS_ADD_SIGNAL+0x254>)
 8000824:	701a      	strb	r2, [r3, #0]
      }
      break;
 8000826:	e104      	b.n	8000a32 <TESS_DAS_ADD_SIGNAL+0x31a>
   case int16:
      {
         *(TESS_DASOUTPUT_BUFF.p_byte_data + TESS_DASOUTPUT_BUFF.filled) = ((TESS_SINT16_TO_UINT16(signal))&0x00FF);
 8000828:	edd7 7a03 	vldr	s15, [r7, #12]
 800082c:	ed9f 7a50 	vldr	s14, [pc, #320]	; 8000970 <TESS_DAS_ADD_SIGNAL+0x258>
 8000830:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000834:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000838:	ee17 3a90 	vmov	r3, s15
 800083c:	b299      	uxth	r1, r3
 800083e:	4b4b      	ldr	r3, [pc, #300]	; (800096c <TESS_DAS_ADD_SIGNAL+0x254>)
 8000840:	685b      	ldr	r3, [r3, #4]
 8000842:	4a4a      	ldr	r2, [pc, #296]	; (800096c <TESS_DAS_ADD_SIGNAL+0x254>)
 8000844:	7812      	ldrb	r2, [r2, #0]
 8000846:	4413      	add	r3, r2
 8000848:	b2ca      	uxtb	r2, r1
 800084a:	701a      	strb	r2, [r3, #0]
         TESS_DASOUTPUT_BUFF.filled = TESS_BUFF_IDX_INC(TESS_DASOUTPUT_BUFF.filled, ACQ_BUFFER_SIZE);
 800084c:	4b47      	ldr	r3, [pc, #284]	; (800096c <TESS_DAS_ADD_SIGNAL+0x254>)
 800084e:	781b      	ldrb	r3, [r3, #0]
 8000850:	b29b      	uxth	r3, r3
 8000852:	2106      	movs	r1, #6
 8000854:	4618      	mov	r0, r3
 8000856:	f000 fa01 	bl	8000c5c <TESS_BUFF_IDX_INC>
 800085a:	4603      	mov	r3, r0
 800085c:	b2da      	uxtb	r2, r3
 800085e:	4b43      	ldr	r3, [pc, #268]	; (800096c <TESS_DAS_ADD_SIGNAL+0x254>)
 8000860:	701a      	strb	r2, [r3, #0]
         *(TESS_DASOUTPUT_BUFF.p_byte_data + TESS_DASOUTPUT_BUFF.filled) = ((TESS_SINT16_TO_UINT16(signal))&0xFF00)>>8;
 8000862:	edd7 7a03 	vldr	s15, [r7, #12]
 8000866:	ed9f 7a42 	vldr	s14, [pc, #264]	; 8000970 <TESS_DAS_ADD_SIGNAL+0x258>
 800086a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800086e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000872:	ee17 3a90 	vmov	r3, s15
 8000876:	b29b      	uxth	r3, r3
 8000878:	0a1b      	lsrs	r3, r3, #8
 800087a:	b299      	uxth	r1, r3
 800087c:	4b3b      	ldr	r3, [pc, #236]	; (800096c <TESS_DAS_ADD_SIGNAL+0x254>)
 800087e:	685b      	ldr	r3, [r3, #4]
 8000880:	4a3a      	ldr	r2, [pc, #232]	; (800096c <TESS_DAS_ADD_SIGNAL+0x254>)
 8000882:	7812      	ldrb	r2, [r2, #0]
 8000884:	4413      	add	r3, r2
 8000886:	b2ca      	uxtb	r2, r1
 8000888:	701a      	strb	r2, [r3, #0]
         TESS_DASOUTPUT_BUFF.filled = TESS_BUFF_IDX_INC(TESS_DASOUTPUT_BUFF.filled, ACQ_BUFFER_SIZE);
 800088a:	4b38      	ldr	r3, [pc, #224]	; (800096c <TESS_DAS_ADD_SIGNAL+0x254>)
 800088c:	781b      	ldrb	r3, [r3, #0]
 800088e:	b29b      	uxth	r3, r3
 8000890:	2106      	movs	r1, #6
 8000892:	4618      	mov	r0, r3
 8000894:	f000 f9e2 	bl	8000c5c <TESS_BUFF_IDX_INC>
 8000898:	4603      	mov	r3, r0
 800089a:	b2da      	uxtb	r2, r3
 800089c:	4b33      	ldr	r3, [pc, #204]	; (800096c <TESS_DAS_ADD_SIGNAL+0x254>)
 800089e:	701a      	strb	r2, [r3, #0]
      }
      break;
 80008a0:	e0c7      	b.n	8000a32 <TESS_DAS_ADD_SIGNAL+0x31a>
   case uint32:
      {
         *(TESS_DASOUTPUT_BUFF.p_byte_data + TESS_DASOUTPUT_BUFF.filled) = (((uint32_t)(signal))&0x000000FF);
 80008a2:	edd7 7a03 	vldr	s15, [r7, #12]
 80008a6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80008aa:	edc7 7a00 	vstr	s15, [r7]
 80008ae:	4b2f      	ldr	r3, [pc, #188]	; (800096c <TESS_DAS_ADD_SIGNAL+0x254>)
 80008b0:	685b      	ldr	r3, [r3, #4]
 80008b2:	4a2e      	ldr	r2, [pc, #184]	; (800096c <TESS_DAS_ADD_SIGNAL+0x254>)
 80008b4:	7812      	ldrb	r2, [r2, #0]
 80008b6:	4413      	add	r3, r2
 80008b8:	683a      	ldr	r2, [r7, #0]
 80008ba:	b2d2      	uxtb	r2, r2
 80008bc:	701a      	strb	r2, [r3, #0]
         TESS_DASOUTPUT_BUFF.filled = TESS_BUFF_IDX_INC(TESS_DASOUTPUT_BUFF.filled, ACQ_BUFFER_SIZE);
 80008be:	4b2b      	ldr	r3, [pc, #172]	; (800096c <TESS_DAS_ADD_SIGNAL+0x254>)
 80008c0:	781b      	ldrb	r3, [r3, #0]
 80008c2:	b29b      	uxth	r3, r3
 80008c4:	2106      	movs	r1, #6
 80008c6:	4618      	mov	r0, r3
 80008c8:	f000 f9c8 	bl	8000c5c <TESS_BUFF_IDX_INC>
 80008cc:	4603      	mov	r3, r0
 80008ce:	b2da      	uxtb	r2, r3
 80008d0:	4b26      	ldr	r3, [pc, #152]	; (800096c <TESS_DAS_ADD_SIGNAL+0x254>)
 80008d2:	701a      	strb	r2, [r3, #0]
         *(TESS_DASOUTPUT_BUFF.p_byte_data + TESS_DASOUTPUT_BUFF.filled) = (((uint32_t)(signal))&0x0000FF00)>>8;
 80008d4:	edd7 7a03 	vldr	s15, [r7, #12]
 80008d8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80008dc:	ee17 3a90 	vmov	r3, s15
 80008e0:	0a19      	lsrs	r1, r3, #8
 80008e2:	4b22      	ldr	r3, [pc, #136]	; (800096c <TESS_DAS_ADD_SIGNAL+0x254>)
 80008e4:	685b      	ldr	r3, [r3, #4]
 80008e6:	4a21      	ldr	r2, [pc, #132]	; (800096c <TESS_DAS_ADD_SIGNAL+0x254>)
 80008e8:	7812      	ldrb	r2, [r2, #0]
 80008ea:	4413      	add	r3, r2
 80008ec:	b2ca      	uxtb	r2, r1
 80008ee:	701a      	strb	r2, [r3, #0]
         TESS_DASOUTPUT_BUFF.filled = TESS_BUFF_IDX_INC(TESS_DASOUTPUT_BUFF.filled, ACQ_BUFFER_SIZE);
 80008f0:	4b1e      	ldr	r3, [pc, #120]	; (800096c <TESS_DAS_ADD_SIGNAL+0x254>)
 80008f2:	781b      	ldrb	r3, [r3, #0]
 80008f4:	b29b      	uxth	r3, r3
 80008f6:	2106      	movs	r1, #6
 80008f8:	4618      	mov	r0, r3
 80008fa:	f000 f9af 	bl	8000c5c <TESS_BUFF_IDX_INC>
 80008fe:	4603      	mov	r3, r0
 8000900:	b2da      	uxtb	r2, r3
 8000902:	4b1a      	ldr	r3, [pc, #104]	; (800096c <TESS_DAS_ADD_SIGNAL+0x254>)
 8000904:	701a      	strb	r2, [r3, #0]
         *(TESS_DASOUTPUT_BUFF.p_byte_data + TESS_DASOUTPUT_BUFF.filled) = (((uint32_t)(signal))&0x00FF0000)>>16;
 8000906:	edd7 7a03 	vldr	s15, [r7, #12]
 800090a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800090e:	ee17 3a90 	vmov	r3, s15
 8000912:	0c19      	lsrs	r1, r3, #16
 8000914:	4b15      	ldr	r3, [pc, #84]	; (800096c <TESS_DAS_ADD_SIGNAL+0x254>)
 8000916:	685b      	ldr	r3, [r3, #4]
 8000918:	4a14      	ldr	r2, [pc, #80]	; (800096c <TESS_DAS_ADD_SIGNAL+0x254>)
 800091a:	7812      	ldrb	r2, [r2, #0]
 800091c:	4413      	add	r3, r2
 800091e:	b2ca      	uxtb	r2, r1
 8000920:	701a      	strb	r2, [r3, #0]
         TESS_DASOUTPUT_BUFF.filled = TESS_BUFF_IDX_INC(TESS_DASOUTPUT_BUFF.filled, ACQ_BUFFER_SIZE);
 8000922:	4b12      	ldr	r3, [pc, #72]	; (800096c <TESS_DAS_ADD_SIGNAL+0x254>)
 8000924:	781b      	ldrb	r3, [r3, #0]
 8000926:	b29b      	uxth	r3, r3
 8000928:	2106      	movs	r1, #6
 800092a:	4618      	mov	r0, r3
 800092c:	f000 f996 	bl	8000c5c <TESS_BUFF_IDX_INC>
 8000930:	4603      	mov	r3, r0
 8000932:	b2da      	uxtb	r2, r3
 8000934:	4b0d      	ldr	r3, [pc, #52]	; (800096c <TESS_DAS_ADD_SIGNAL+0x254>)
 8000936:	701a      	strb	r2, [r3, #0]
         *(TESS_DASOUTPUT_BUFF.p_byte_data + TESS_DASOUTPUT_BUFF.filled) = (((uint32_t)(signal))&0xFF000000)>>24;
 8000938:	edd7 7a03 	vldr	s15, [r7, #12]
 800093c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000940:	ee17 3a90 	vmov	r3, s15
 8000944:	0e19      	lsrs	r1, r3, #24
 8000946:	4b09      	ldr	r3, [pc, #36]	; (800096c <TESS_DAS_ADD_SIGNAL+0x254>)
 8000948:	685b      	ldr	r3, [r3, #4]
 800094a:	4a08      	ldr	r2, [pc, #32]	; (800096c <TESS_DAS_ADD_SIGNAL+0x254>)
 800094c:	7812      	ldrb	r2, [r2, #0]
 800094e:	4413      	add	r3, r2
 8000950:	b2ca      	uxtb	r2, r1
 8000952:	701a      	strb	r2, [r3, #0]
         TESS_DASOUTPUT_BUFF.filled = TESS_BUFF_IDX_INC(TESS_DASOUTPUT_BUFF.filled, ACQ_BUFFER_SIZE);
 8000954:	4b05      	ldr	r3, [pc, #20]	; (800096c <TESS_DAS_ADD_SIGNAL+0x254>)
 8000956:	781b      	ldrb	r3, [r3, #0]
 8000958:	b29b      	uxth	r3, r3
 800095a:	2106      	movs	r1, #6
 800095c:	4618      	mov	r0, r3
 800095e:	f000 f97d 	bl	8000c5c <TESS_BUFF_IDX_INC>
 8000962:	4603      	mov	r3, r0
 8000964:	b2da      	uxtb	r2, r3
 8000966:	4b01      	ldr	r3, [pc, #4]	; (800096c <TESS_DAS_ADD_SIGNAL+0x254>)
 8000968:	701a      	strb	r2, [r3, #0]
      }
      break;
 800096a:	e062      	b.n	8000a32 <TESS_DAS_ADD_SIGNAL+0x31a>
 800096c:	200027f0 	.word	0x200027f0
 8000970:	47000000 	.word	0x47000000
   case int32:      /*or float 32*/
      {
         temp32 = (int32_t)(signal*resolution);
 8000974:	ed97 7a03 	vldr	s14, [r7, #12]
 8000978:	edd7 7a01 	vldr	s15, [r7, #4]
 800097c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000980:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000984:	ee17 3a90 	vmov	r3, s15
 8000988:	617b      	str	r3, [r7, #20]
         temp32 = TESS_SINT32_TO_UINT32(temp32);
 800098a:	697b      	ldr	r3, [r7, #20]
 800098c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8000990:	617b      	str	r3, [r7, #20]
         *(TESS_DASOUTPUT_BUFF.p_byte_data + TESS_DASOUTPUT_BUFF.filled) = (temp32&0x000000FF);
 8000992:	4b2a      	ldr	r3, [pc, #168]	; (8000a3c <TESS_DAS_ADD_SIGNAL+0x324>)
 8000994:	685b      	ldr	r3, [r3, #4]
 8000996:	4a29      	ldr	r2, [pc, #164]	; (8000a3c <TESS_DAS_ADD_SIGNAL+0x324>)
 8000998:	7812      	ldrb	r2, [r2, #0]
 800099a:	4413      	add	r3, r2
 800099c:	697a      	ldr	r2, [r7, #20]
 800099e:	b2d2      	uxtb	r2, r2
 80009a0:	701a      	strb	r2, [r3, #0]
         TESS_DASOUTPUT_BUFF.filled = TESS_BUFF_IDX_INC(TESS_DASOUTPUT_BUFF.filled, ACQ_BUFFER_SIZE);
 80009a2:	4b26      	ldr	r3, [pc, #152]	; (8000a3c <TESS_DAS_ADD_SIGNAL+0x324>)
 80009a4:	781b      	ldrb	r3, [r3, #0]
 80009a6:	b29b      	uxth	r3, r3
 80009a8:	2106      	movs	r1, #6
 80009aa:	4618      	mov	r0, r3
 80009ac:	f000 f956 	bl	8000c5c <TESS_BUFF_IDX_INC>
 80009b0:	4603      	mov	r3, r0
 80009b2:	b2da      	uxtb	r2, r3
 80009b4:	4b21      	ldr	r3, [pc, #132]	; (8000a3c <TESS_DAS_ADD_SIGNAL+0x324>)
 80009b6:	701a      	strb	r2, [r3, #0]
         *(TESS_DASOUTPUT_BUFF.p_byte_data + TESS_DASOUTPUT_BUFF.filled) = (temp32&0x0000FF00)>>8;
 80009b8:	697b      	ldr	r3, [r7, #20]
 80009ba:	0a19      	lsrs	r1, r3, #8
 80009bc:	4b1f      	ldr	r3, [pc, #124]	; (8000a3c <TESS_DAS_ADD_SIGNAL+0x324>)
 80009be:	685b      	ldr	r3, [r3, #4]
 80009c0:	4a1e      	ldr	r2, [pc, #120]	; (8000a3c <TESS_DAS_ADD_SIGNAL+0x324>)
 80009c2:	7812      	ldrb	r2, [r2, #0]
 80009c4:	4413      	add	r3, r2
 80009c6:	b2ca      	uxtb	r2, r1
 80009c8:	701a      	strb	r2, [r3, #0]
         TESS_DASOUTPUT_BUFF.filled = TESS_BUFF_IDX_INC(TESS_DASOUTPUT_BUFF.filled, ACQ_BUFFER_SIZE);
 80009ca:	4b1c      	ldr	r3, [pc, #112]	; (8000a3c <TESS_DAS_ADD_SIGNAL+0x324>)
 80009cc:	781b      	ldrb	r3, [r3, #0]
 80009ce:	b29b      	uxth	r3, r3
 80009d0:	2106      	movs	r1, #6
 80009d2:	4618      	mov	r0, r3
 80009d4:	f000 f942 	bl	8000c5c <TESS_BUFF_IDX_INC>
 80009d8:	4603      	mov	r3, r0
 80009da:	b2da      	uxtb	r2, r3
 80009dc:	4b17      	ldr	r3, [pc, #92]	; (8000a3c <TESS_DAS_ADD_SIGNAL+0x324>)
 80009de:	701a      	strb	r2, [r3, #0]
         *(TESS_DASOUTPUT_BUFF.p_byte_data + TESS_DASOUTPUT_BUFF.filled) = (temp32&0x00FF0000)>>16;
 80009e0:	697b      	ldr	r3, [r7, #20]
 80009e2:	0c19      	lsrs	r1, r3, #16
 80009e4:	4b15      	ldr	r3, [pc, #84]	; (8000a3c <TESS_DAS_ADD_SIGNAL+0x324>)
 80009e6:	685b      	ldr	r3, [r3, #4]
 80009e8:	4a14      	ldr	r2, [pc, #80]	; (8000a3c <TESS_DAS_ADD_SIGNAL+0x324>)
 80009ea:	7812      	ldrb	r2, [r2, #0]
 80009ec:	4413      	add	r3, r2
 80009ee:	b2ca      	uxtb	r2, r1
 80009f0:	701a      	strb	r2, [r3, #0]
         TESS_DASOUTPUT_BUFF.filled = TESS_BUFF_IDX_INC(TESS_DASOUTPUT_BUFF.filled, ACQ_BUFFER_SIZE);
 80009f2:	4b12      	ldr	r3, [pc, #72]	; (8000a3c <TESS_DAS_ADD_SIGNAL+0x324>)
 80009f4:	781b      	ldrb	r3, [r3, #0]
 80009f6:	b29b      	uxth	r3, r3
 80009f8:	2106      	movs	r1, #6
 80009fa:	4618      	mov	r0, r3
 80009fc:	f000 f92e 	bl	8000c5c <TESS_BUFF_IDX_INC>
 8000a00:	4603      	mov	r3, r0
 8000a02:	b2da      	uxtb	r2, r3
 8000a04:	4b0d      	ldr	r3, [pc, #52]	; (8000a3c <TESS_DAS_ADD_SIGNAL+0x324>)
 8000a06:	701a      	strb	r2, [r3, #0]
         *(TESS_DASOUTPUT_BUFF.p_byte_data + TESS_DASOUTPUT_BUFF.filled) = (temp32&0xFF000000)>>24;
 8000a08:	697b      	ldr	r3, [r7, #20]
 8000a0a:	0e19      	lsrs	r1, r3, #24
 8000a0c:	4b0b      	ldr	r3, [pc, #44]	; (8000a3c <TESS_DAS_ADD_SIGNAL+0x324>)
 8000a0e:	685b      	ldr	r3, [r3, #4]
 8000a10:	4a0a      	ldr	r2, [pc, #40]	; (8000a3c <TESS_DAS_ADD_SIGNAL+0x324>)
 8000a12:	7812      	ldrb	r2, [r2, #0]
 8000a14:	4413      	add	r3, r2
 8000a16:	b2ca      	uxtb	r2, r1
 8000a18:	701a      	strb	r2, [r3, #0]
         TESS_DASOUTPUT_BUFF.filled = TESS_BUFF_IDX_INC(TESS_DASOUTPUT_BUFF.filled, ACQ_BUFFER_SIZE);
 8000a1a:	4b08      	ldr	r3, [pc, #32]	; (8000a3c <TESS_DAS_ADD_SIGNAL+0x324>)
 8000a1c:	781b      	ldrb	r3, [r3, #0]
 8000a1e:	b29b      	uxth	r3, r3
 8000a20:	2106      	movs	r1, #6
 8000a22:	4618      	mov	r0, r3
 8000a24:	f000 f91a 	bl	8000c5c <TESS_BUFF_IDX_INC>
 8000a28:	4603      	mov	r3, r0
 8000a2a:	b2da      	uxtb	r2, r3
 8000a2c:	4b03      	ldr	r3, [pc, #12]	; (8000a3c <TESS_DAS_ADD_SIGNAL+0x324>)
 8000a2e:	701a      	strb	r2, [r3, #0]
      }
      break;
 8000a30:	bf00      	nop
   }


}
 8000a32:	bf00      	nop
 8000a34:	3718      	adds	r7, #24
 8000a36:	46bd      	mov	sp, r7
 8000a38:	bd80      	pop	{r7, pc}
 8000a3a:	bf00      	nop
 8000a3c:	200027f0 	.word	0x200027f0

08000a40 <TESS_RING_BUFFER_INIT>:
#if CFG_ACQ_ON

static void DATA_COPY ( const r_buff_data_t *source, r_buff_data_t *dest);
static void FULL_BUFF_DATA(r_buff_data_t *dest);
void TESS_RING_BUFFER_INIT(ring_buffer_t * buff)
{
 8000a40:	b480      	push	{r7}
 8000a42:	b085      	sub	sp, #20
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	6078      	str	r0, [r7, #4]
   uint16_t  idx;


   buff->count         = 0;
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	809a      	strh	r2, [r3, #4]
   buff->inner_count   = 0;
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	2200      	movs	r2, #0
 8000a52:	80da      	strh	r2, [r3, #6]
   buff->head          = 0;
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	2200      	movs	r2, #0
 8000a58:	801a      	strh	r2, [r3, #0]
   buff->tail          = 0;
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	805a      	strh	r2, [r3, #2]

   for (idx = 0; idx < RBUF_SIZE; idx++)
 8000a60:	2300      	movs	r3, #0
 8000a62:	81fb      	strh	r3, [r7, #14]
 8000a64:	e03e      	b.n	8000ae4 <TESS_RING_BUFFER_INIT+0xa4>
   {
      buff->buff_data[idx].byte0 = 0;
 8000a66:	89fa      	ldrh	r2, [r7, #14]
 8000a68:	6879      	ldr	r1, [r7, #4]
 8000a6a:	4613      	mov	r3, r2
 8000a6c:	005b      	lsls	r3, r3, #1
 8000a6e:	4413      	add	r3, r2
 8000a70:	005b      	lsls	r3, r3, #1
 8000a72:	440b      	add	r3, r1
 8000a74:	330a      	adds	r3, #10
 8000a76:	2200      	movs	r2, #0
 8000a78:	701a      	strb	r2, [r3, #0]
      buff->buff_data[idx].byte1 = 0;
 8000a7a:	89fa      	ldrh	r2, [r7, #14]
 8000a7c:	6879      	ldr	r1, [r7, #4]
 8000a7e:	4613      	mov	r3, r2
 8000a80:	005b      	lsls	r3, r3, #1
 8000a82:	4413      	add	r3, r2
 8000a84:	005b      	lsls	r3, r3, #1
 8000a86:	440b      	add	r3, r1
 8000a88:	330b      	adds	r3, #11
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	701a      	strb	r2, [r3, #0]
      buff->buff_data[idx].byte2 = 0;
 8000a8e:	89fa      	ldrh	r2, [r7, #14]
 8000a90:	6879      	ldr	r1, [r7, #4]
 8000a92:	4613      	mov	r3, r2
 8000a94:	005b      	lsls	r3, r3, #1
 8000a96:	4413      	add	r3, r2
 8000a98:	005b      	lsls	r3, r3, #1
 8000a9a:	440b      	add	r3, r1
 8000a9c:	330c      	adds	r3, #12
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	701a      	strb	r2, [r3, #0]
      buff->buff_data[idx].byte3 = 0;
 8000aa2:	89fa      	ldrh	r2, [r7, #14]
 8000aa4:	6879      	ldr	r1, [r7, #4]
 8000aa6:	4613      	mov	r3, r2
 8000aa8:	005b      	lsls	r3, r3, #1
 8000aaa:	4413      	add	r3, r2
 8000aac:	005b      	lsls	r3, r3, #1
 8000aae:	440b      	add	r3, r1
 8000ab0:	330d      	adds	r3, #13
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	701a      	strb	r2, [r3, #0]
      buff->buff_data[idx].byte4 = 0;
 8000ab6:	89fa      	ldrh	r2, [r7, #14]
 8000ab8:	6879      	ldr	r1, [r7, #4]
 8000aba:	4613      	mov	r3, r2
 8000abc:	005b      	lsls	r3, r3, #1
 8000abe:	4413      	add	r3, r2
 8000ac0:	005b      	lsls	r3, r3, #1
 8000ac2:	440b      	add	r3, r1
 8000ac4:	330e      	adds	r3, #14
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	701a      	strb	r2, [r3, #0]
      buff->buff_data[idx].byte5 = 0;
 8000aca:	89fa      	ldrh	r2, [r7, #14]
 8000acc:	6879      	ldr	r1, [r7, #4]
 8000ace:	4613      	mov	r3, r2
 8000ad0:	005b      	lsls	r3, r3, #1
 8000ad2:	4413      	add	r3, r2
 8000ad4:	005b      	lsls	r3, r3, #1
 8000ad6:	440b      	add	r3, r1
 8000ad8:	330f      	adds	r3, #15
 8000ada:	2200      	movs	r2, #0
 8000adc:	701a      	strb	r2, [r3, #0]
   for (idx = 0; idx < RBUF_SIZE; idx++)
 8000ade:	89fb      	ldrh	r3, [r7, #14]
 8000ae0:	3301      	adds	r3, #1
 8000ae2:	81fb      	strh	r3, [r7, #14]
 8000ae4:	89fb      	ldrh	r3, [r7, #14]
 8000ae6:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8000aea:	d3bc      	bcc.n	8000a66 <TESS_RING_BUFFER_INIT+0x26>
   }
}
 8000aec:	bf00      	nop
 8000aee:	bf00      	nop
 8000af0:	3714      	adds	r7, #20
 8000af2:	46bd      	mov	sp, r7
 8000af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af8:	4770      	bx	lr

08000afa <TESS_RING_BUFFER_GET>:

r_buff_data_t TESS_RING_BUFFER_GET(ring_buffer_t * buff)
{
 8000afa:	b580      	push	{r7, lr}
 8000afc:	b084      	sub	sp, #16
 8000afe:	af00      	add	r7, sp, #0
 8000b00:	6078      	str	r0, [r7, #4]
 8000b02:	6039      	str	r1, [r7, #0]
   r_buff_data_t  loc_buff_data;


   if (buff->count > 0u)
 8000b04:	683b      	ldr	r3, [r7, #0]
 8000b06:	889b      	ldrh	r3, [r3, #4]
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d022      	beq.n	8000b52 <TESS_RING_BUFFER_GET+0x58>
   {
      /*copy data from the buffer to local structure*/
      DATA_COPY(&(buff->buff_data[buff->tail]), &loc_buff_data);
 8000b0c:	683b      	ldr	r3, [r7, #0]
 8000b0e:	885b      	ldrh	r3, [r3, #2]
 8000b10:	461a      	mov	r2, r3
 8000b12:	4613      	mov	r3, r2
 8000b14:	005b      	lsls	r3, r3, #1
 8000b16:	4413      	add	r3, r2
 8000b18:	005b      	lsls	r3, r3, #1
 8000b1a:	3308      	adds	r3, #8
 8000b1c:	683a      	ldr	r2, [r7, #0]
 8000b1e:	4413      	add	r3, r2
 8000b20:	3302      	adds	r3, #2
 8000b22:	f107 0208 	add.w	r2, r7, #8
 8000b26:	4611      	mov	r1, r2
 8000b28:	4618      	mov	r0, r3
 8000b2a:	f000 f8b1 	bl	8000c90 <DATA_COPY>

      buff->tail  = TESS_BUFF_IDX_INC (buff->tail, RBUF_SIZE);
 8000b2e:	683b      	ldr	r3, [r7, #0]
 8000b30:	885b      	ldrh	r3, [r3, #2]
 8000b32:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8000b36:	4618      	mov	r0, r3
 8000b38:	f000 f890 	bl	8000c5c <TESS_BUFF_IDX_INC>
 8000b3c:	4603      	mov	r3, r0
 8000b3e:	461a      	mov	r2, r3
 8000b40:	683b      	ldr	r3, [r7, #0]
 8000b42:	805a      	strh	r2, [r3, #2]
      buff->count--;
 8000b44:	683b      	ldr	r3, [r7, #0]
 8000b46:	889b      	ldrh	r3, [r3, #4]
 8000b48:	3b01      	subs	r3, #1
 8000b4a:	b29a      	uxth	r2, r3
 8000b4c:	683b      	ldr	r3, [r7, #0]
 8000b4e:	809a      	strh	r2, [r3, #4]
 8000b50:	e00b      	b.n	8000b6a <TESS_RING_BUFFER_GET+0x70>

   }
   else
   {
      /* fill buffer with dummy data*/
      loc_buff_data.byte0 = 1;
 8000b52:	2301      	movs	r3, #1
 8000b54:	723b      	strb	r3, [r7, #8]
      loc_buff_data.byte1 = 1;
 8000b56:	2301      	movs	r3, #1
 8000b58:	727b      	strb	r3, [r7, #9]
      loc_buff_data.byte2 = 1;
 8000b5a:	2301      	movs	r3, #1
 8000b5c:	72bb      	strb	r3, [r7, #10]
      loc_buff_data.byte3 = 1;
 8000b5e:	2301      	movs	r3, #1
 8000b60:	72fb      	strb	r3, [r7, #11]
      loc_buff_data.byte4 = 1;
 8000b62:	2301      	movs	r3, #1
 8000b64:	733b      	strb	r3, [r7, #12]
      loc_buff_data.byte5 = 1;
 8000b66:	2301      	movs	r3, #1
 8000b68:	737b      	strb	r3, [r7, #13]
   }

   /*return the entire structure at once*/
   return (loc_buff_data);
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	461a      	mov	r2, r3
 8000b6e:	f107 0308 	add.w	r3, r7, #8
 8000b72:	6818      	ldr	r0, [r3, #0]
 8000b74:	6010      	str	r0, [r2, #0]
 8000b76:	889b      	ldrh	r3, [r3, #4]
 8000b78:	8093      	strh	r3, [r2, #4]
}
 8000b7a:	6878      	ldr	r0, [r7, #4]
 8000b7c:	3710      	adds	r7, #16
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	bd80      	pop	{r7, pc}

08000b82 <TESS_RING_BUFFER_PUT>:

void TESS_RING_BUFFER_PUT(ring_buffer_t * buff, r_buff_data_t data)
{
 8000b82:	b580      	push	{r7, lr}
 8000b84:	b084      	sub	sp, #16
 8000b86:	af00      	add	r7, sp, #0
 8000b88:	60f8      	str	r0, [r7, #12]
 8000b8a:	1d3b      	adds	r3, r7, #4
 8000b8c:	e883 0006 	stmia.w	r3, {r1, r2}

   if (buff->count < RBUF_SIZE)
 8000b90:	68fb      	ldr	r3, [r7, #12]
 8000b92:	889b      	ldrh	r3, [r3, #4]
 8000b94:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8000b98:	d221      	bcs.n	8000bde <TESS_RING_BUFFER_PUT+0x5c>
   {
      DATA_COPY(&data, &(buff->buff_data[buff->head]));    /* copy received data to the buffer */
 8000b9a:	68fb      	ldr	r3, [r7, #12]
 8000b9c:	881b      	ldrh	r3, [r3, #0]
 8000b9e:	461a      	mov	r2, r3
 8000ba0:	4613      	mov	r3, r2
 8000ba2:	005b      	lsls	r3, r3, #1
 8000ba4:	4413      	add	r3, r2
 8000ba6:	005b      	lsls	r3, r3, #1
 8000ba8:	3308      	adds	r3, #8
 8000baa:	68fa      	ldr	r2, [r7, #12]
 8000bac:	4413      	add	r3, r2
 8000bae:	1c9a      	adds	r2, r3, #2
 8000bb0:	1d3b      	adds	r3, r7, #4
 8000bb2:	4611      	mov	r1, r2
 8000bb4:	4618      	mov	r0, r3
 8000bb6:	f000 f86b 	bl	8000c90 <DATA_COPY>

      buff->head = TESS_BUFF_IDX_INC (buff->head, RBUF_SIZE);
 8000bba:	68fb      	ldr	r3, [r7, #12]
 8000bbc:	881b      	ldrh	r3, [r3, #0]
 8000bbe:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	f000 f84a 	bl	8000c5c <TESS_BUFF_IDX_INC>
 8000bc8:	4603      	mov	r3, r0
 8000bca:	461a      	mov	r2, r3
 8000bcc:	68fb      	ldr	r3, [r7, #12]
 8000bce:	801a      	strh	r2, [r3, #0]
      buff->count++;
 8000bd0:	68fb      	ldr	r3, [r7, #12]
 8000bd2:	889b      	ldrh	r3, [r3, #4]
 8000bd4:	3301      	adds	r3, #1
 8000bd6:	b29a      	uxth	r2, r3
 8000bd8:	68fb      	ldr	r3, [r7, #12]
 8000bda:	809a      	strh	r2, [r3, #4]
      DATA_COPY(&data, &(buff->buff_data[buff->head]));    /* copy received data to the buffer */
      buff->head = TESS_BUFF_IDX_INC (buff->head, RBUF_SIZE);

      /*count will remain constant*/
   }
}
 8000bdc:	e029      	b.n	8000c32 <TESS_RING_BUFFER_PUT+0xb0>
      buff->tail = TESS_BUFF_IDX_INC (buff->tail, RBUF_SIZE);
 8000bde:	68fb      	ldr	r3, [r7, #12]
 8000be0:	885b      	ldrh	r3, [r3, #2]
 8000be2:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8000be6:	4618      	mov	r0, r3
 8000be8:	f000 f838 	bl	8000c5c <TESS_BUFF_IDX_INC>
 8000bec:	4603      	mov	r3, r0
 8000bee:	461a      	mov	r2, r3
 8000bf0:	68fb      	ldr	r3, [r7, #12]
 8000bf2:	805a      	strh	r2, [r3, #2]
      FULL_BUFF_DATA(&data);
 8000bf4:	1d3b      	adds	r3, r7, #4
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	f000 f86d 	bl	8000cd6 <FULL_BUFF_DATA>
      DATA_COPY(&data, &(buff->buff_data[buff->head]));    /* copy received data to the buffer */
 8000bfc:	68fb      	ldr	r3, [r7, #12]
 8000bfe:	881b      	ldrh	r3, [r3, #0]
 8000c00:	461a      	mov	r2, r3
 8000c02:	4613      	mov	r3, r2
 8000c04:	005b      	lsls	r3, r3, #1
 8000c06:	4413      	add	r3, r2
 8000c08:	005b      	lsls	r3, r3, #1
 8000c0a:	3308      	adds	r3, #8
 8000c0c:	68fa      	ldr	r2, [r7, #12]
 8000c0e:	4413      	add	r3, r2
 8000c10:	1c9a      	adds	r2, r3, #2
 8000c12:	1d3b      	adds	r3, r7, #4
 8000c14:	4611      	mov	r1, r2
 8000c16:	4618      	mov	r0, r3
 8000c18:	f000 f83a 	bl	8000c90 <DATA_COPY>
      buff->head = TESS_BUFF_IDX_INC (buff->head, RBUF_SIZE);
 8000c1c:	68fb      	ldr	r3, [r7, #12]
 8000c1e:	881b      	ldrh	r3, [r3, #0]
 8000c20:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8000c24:	4618      	mov	r0, r3
 8000c26:	f000 f819 	bl	8000c5c <TESS_BUFF_IDX_INC>
 8000c2a:	4603      	mov	r3, r0
 8000c2c:	461a      	mov	r2, r3
 8000c2e:	68fb      	ldr	r3, [r7, #12]
 8000c30:	801a      	strh	r2, [r3, #0]
}
 8000c32:	bf00      	nop
 8000c34:	3710      	adds	r7, #16
 8000c36:	46bd      	mov	sp, r7
 8000c38:	bd80      	pop	{r7, pc}

08000c3a <TESS_RINGBUFF_IS_EMPTY>:

uint8_t TESS_RINGBUFF_IS_EMPTY( const ring_buffer_t * buff)
{
 8000c3a:	b480      	push	{r7}
 8000c3c:	b083      	sub	sp, #12
 8000c3e:	af00      	add	r7, sp, #0
 8000c40:	6078      	str	r0, [r7, #4]
   return (buff->count == 0);
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	889b      	ldrh	r3, [r3, #4]
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	bf0c      	ite	eq
 8000c4a:	2301      	moveq	r3, #1
 8000c4c:	2300      	movne	r3, #0
 8000c4e:	b2db      	uxtb	r3, r3
}
 8000c50:	4618      	mov	r0, r3
 8000c52:	370c      	adds	r7, #12
 8000c54:	46bd      	mov	sp, r7
 8000c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5a:	4770      	bx	lr

08000c5c <TESS_BUFF_IDX_INC>:
{
   return (RBUF_SIZE == buff->count);
}

uint16_t TESS_BUFF_IDX_INC (const uint16_t currentVal,const uint16_t buff_size)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	b085      	sub	sp, #20
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	4603      	mov	r3, r0
 8000c64:	460a      	mov	r2, r1
 8000c66:	80fb      	strh	r3, [r7, #6]
 8000c68:	4613      	mov	r3, r2
 8000c6a:	80bb      	strh	r3, [r7, #4]
   uint16_t  newVal;

   newVal = currentVal + 1;
 8000c6c:	88fb      	ldrh	r3, [r7, #6]
 8000c6e:	3301      	adds	r3, #1
 8000c70:	81fb      	strh	r3, [r7, #14]
   newVal %= buff_size;
 8000c72:	89fb      	ldrh	r3, [r7, #14]
 8000c74:	88ba      	ldrh	r2, [r7, #4]
 8000c76:	fbb3 f1f2 	udiv	r1, r3, r2
 8000c7a:	fb02 f201 	mul.w	r2, r2, r1
 8000c7e:	1a9b      	subs	r3, r3, r2
 8000c80:	81fb      	strh	r3, [r7, #14]

   return newVal;
 8000c82:	89fb      	ldrh	r3, [r7, #14]
}
 8000c84:	4618      	mov	r0, r3
 8000c86:	3714      	adds	r7, #20
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8e:	4770      	bx	lr

08000c90 <DATA_COPY>:

static void DATA_COPY ( const r_buff_data_t *source, r_buff_data_t *dest)
{
 8000c90:	b480      	push	{r7}
 8000c92:	b083      	sub	sp, #12
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	6078      	str	r0, [r7, #4]
 8000c98:	6039      	str	r1, [r7, #0]
   /* copy byte by byte*/
   dest->byte0 = source->byte0;
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	781a      	ldrb	r2, [r3, #0]
 8000c9e:	683b      	ldr	r3, [r7, #0]
 8000ca0:	701a      	strb	r2, [r3, #0]
   dest->byte1 = source->byte1;
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	785a      	ldrb	r2, [r3, #1]
 8000ca6:	683b      	ldr	r3, [r7, #0]
 8000ca8:	705a      	strb	r2, [r3, #1]
   dest->byte2 = source->byte2;
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	789a      	ldrb	r2, [r3, #2]
 8000cae:	683b      	ldr	r3, [r7, #0]
 8000cb0:	709a      	strb	r2, [r3, #2]
   dest->byte3 = source->byte3;
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	78da      	ldrb	r2, [r3, #3]
 8000cb6:	683b      	ldr	r3, [r7, #0]
 8000cb8:	70da      	strb	r2, [r3, #3]
   dest->byte4 = source->byte4;
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	791a      	ldrb	r2, [r3, #4]
 8000cbe:	683b      	ldr	r3, [r7, #0]
 8000cc0:	711a      	strb	r2, [r3, #4]
   dest->byte5 = source->byte5;
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	795a      	ldrb	r2, [r3, #5]
 8000cc6:	683b      	ldr	r3, [r7, #0]
 8000cc8:	715a      	strb	r2, [r3, #5]

}
 8000cca:	bf00      	nop
 8000ccc:	370c      	adds	r7, #12
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd4:	4770      	bx	lr

08000cd6 <FULL_BUFF_DATA>:

static void FULL_BUFF_DATA(r_buff_data_t *dest)
{
 8000cd6:	b480      	push	{r7}
 8000cd8:	b083      	sub	sp, #12
 8000cda:	af00      	add	r7, sp, #0
 8000cdc:	6078      	str	r0, [r7, #4]
   dest->byte0 = 0;
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	701a      	strb	r2, [r3, #0]
   dest->byte1 = 0;
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	705a      	strb	r2, [r3, #1]
   dest->byte2 = 0;
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	2200      	movs	r2, #0
 8000cee:	709a      	strb	r2, [r3, #2]
   dest->byte3 = 0;
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	70da      	strb	r2, [r3, #3]
   dest->byte4 = 0;
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	711a      	strb	r2, [r3, #4]
   dest->byte5 = 0;
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	2200      	movs	r2, #0
 8000d00:	715a      	strb	r2, [r3, #5]
}
 8000d02:	bf00      	nop
 8000d04:	370c      	adds	r7, #12
 8000d06:	46bd      	mov	sp, r7
 8000d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0c:	4770      	bx	lr

08000d0e <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d0e:	b580      	push	{r7, lr}
 8000d10:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d12:	f000 fc4f 	bl	80015b4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d16:	f000 f80d 	bl	8000d34 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d1a:	f000 fa0f 	bl	800113c <MX_GPIO_Init>
  MX_ADC1_Init();
 8000d1e:	f000 f873 	bl	8000e08 <MX_ADC1_Init>
  MX_TIM1_Init();
 8000d22:	f000 f917 	bl	8000f54 <MX_TIM1_Init>
  MX_TIM3_Init();
 8000d26:	f000 f9b5 	bl	8001094 <MX_TIM3_Init>
  MX_USB_DEVICE_Init();
 8000d2a:	f007 fc4f 	bl	80085cc <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  TESS_DAS_INIT();
 8000d2e:	f7ff fbcd 	bl	80004cc <TESS_DAS_INIT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000d32:	e7fe      	b.n	8000d32 <main+0x24>

08000d34 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b094      	sub	sp, #80	; 0x50
 8000d38:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d3a:	f107 0320 	add.w	r3, r7, #32
 8000d3e:	2230      	movs	r2, #48	; 0x30
 8000d40:	2100      	movs	r1, #0
 8000d42:	4618      	mov	r0, r3
 8000d44:	f008 f988 	bl	8009058 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d48:	f107 030c 	add.w	r3, r7, #12
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	601a      	str	r2, [r3, #0]
 8000d50:	605a      	str	r2, [r3, #4]
 8000d52:	609a      	str	r2, [r3, #8]
 8000d54:	60da      	str	r2, [r3, #12]
 8000d56:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d58:	2300      	movs	r3, #0
 8000d5a:	60bb      	str	r3, [r7, #8]
 8000d5c:	4b28      	ldr	r3, [pc, #160]	; (8000e00 <SystemClock_Config+0xcc>)
 8000d5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d60:	4a27      	ldr	r2, [pc, #156]	; (8000e00 <SystemClock_Config+0xcc>)
 8000d62:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d66:	6413      	str	r3, [r2, #64]	; 0x40
 8000d68:	4b25      	ldr	r3, [pc, #148]	; (8000e00 <SystemClock_Config+0xcc>)
 8000d6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d6c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d70:	60bb      	str	r3, [r7, #8]
 8000d72:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000d74:	2300      	movs	r3, #0
 8000d76:	607b      	str	r3, [r7, #4]
 8000d78:	4b22      	ldr	r3, [pc, #136]	; (8000e04 <SystemClock_Config+0xd0>)
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000d80:	4a20      	ldr	r2, [pc, #128]	; (8000e04 <SystemClock_Config+0xd0>)
 8000d82:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000d86:	6013      	str	r3, [r2, #0]
 8000d88:	4b1e      	ldr	r3, [pc, #120]	; (8000e04 <SystemClock_Config+0xd0>)
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000d90:	607b      	str	r3, [r7, #4]
 8000d92:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000d94:	2301      	movs	r3, #1
 8000d96:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000d98:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000d9c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d9e:	2302      	movs	r3, #2
 8000da0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000da2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000da6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000da8:	2304      	movs	r3, #4
 8000daa:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000dac:	23a8      	movs	r3, #168	; 0xa8
 8000dae:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000db0:	2304      	movs	r3, #4
 8000db2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000db4:	2307      	movs	r3, #7
 8000db6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000db8:	f107 0320 	add.w	r3, r7, #32
 8000dbc:	4618      	mov	r0, r3
 8000dbe:	f002 fee9 	bl	8003b94 <HAL_RCC_OscConfig>
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d001      	beq.n	8000dcc <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000dc8:	f000 fa48 	bl	800125c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000dcc:	230f      	movs	r3, #15
 8000dce:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000dd0:	2302      	movs	r3, #2
 8000dd2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000dd8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ddc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000dde:	2300      	movs	r3, #0
 8000de0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000de2:	f107 030c 	add.w	r3, r7, #12
 8000de6:	2102      	movs	r1, #2
 8000de8:	4618      	mov	r0, r3
 8000dea:	f003 f94b 	bl	8004084 <HAL_RCC_ClockConfig>
 8000dee:	4603      	mov	r3, r0
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d001      	beq.n	8000df8 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000df4:	f000 fa32 	bl	800125c <Error_Handler>
  }
}
 8000df8:	bf00      	nop
 8000dfa:	3750      	adds	r7, #80	; 0x50
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	bd80      	pop	{r7, pc}
 8000e00:	40023800 	.word	0x40023800
 8000e04:	40007000 	.word	0x40007000

08000e08 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b08c      	sub	sp, #48	; 0x30
 8000e0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000e0e:	f107 0320 	add.w	r3, r7, #32
 8000e12:	2200      	movs	r2, #0
 8000e14:	601a      	str	r2, [r3, #0]
 8000e16:	605a      	str	r2, [r3, #4]
 8000e18:	609a      	str	r2, [r3, #8]
 8000e1a:	60da      	str	r2, [r3, #12]
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8000e1c:	463b      	mov	r3, r7
 8000e1e:	2220      	movs	r2, #32
 8000e20:	2100      	movs	r1, #0
 8000e22:	4618      	mov	r0, r3
 8000e24:	f008 f918 	bl	8009058 <memset>
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000e28:	4b47      	ldr	r3, [pc, #284]	; (8000f48 <MX_ADC1_Init+0x140>)
 8000e2a:	4a48      	ldr	r2, [pc, #288]	; (8000f4c <MX_ADC1_Init+0x144>)
 8000e2c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000e2e:	4b46      	ldr	r3, [pc, #280]	; (8000f48 <MX_ADC1_Init+0x140>)
 8000e30:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000e34:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000e36:	4b44      	ldr	r3, [pc, #272]	; (8000f48 <MX_ADC1_Init+0x140>)
 8000e38:	2200      	movs	r2, #0
 8000e3a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000e3c:	4b42      	ldr	r3, [pc, #264]	; (8000f48 <MX_ADC1_Init+0x140>)
 8000e3e:	2201      	movs	r2, #1
 8000e40:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000e42:	4b41      	ldr	r3, [pc, #260]	; (8000f48 <MX_ADC1_Init+0x140>)
 8000e44:	2201      	movs	r2, #1
 8000e46:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000e48:	4b3f      	ldr	r3, [pc, #252]	; (8000f48 <MX_ADC1_Init+0x140>)
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000e50:	4b3d      	ldr	r3, [pc, #244]	; (8000f48 <MX_ADC1_Init+0x140>)
 8000e52:	2200      	movs	r2, #0
 8000e54:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000e56:	4b3c      	ldr	r3, [pc, #240]	; (8000f48 <MX_ADC1_Init+0x140>)
 8000e58:	4a3d      	ldr	r2, [pc, #244]	; (8000f50 <MX_ADC1_Init+0x148>)
 8000e5a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000e5c:	4b3a      	ldr	r3, [pc, #232]	; (8000f48 <MX_ADC1_Init+0x140>)
 8000e5e:	2200      	movs	r2, #0
 8000e60:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000e62:	4b39      	ldr	r3, [pc, #228]	; (8000f48 <MX_ADC1_Init+0x140>)
 8000e64:	2201      	movs	r2, #1
 8000e66:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000e68:	4b37      	ldr	r3, [pc, #220]	; (8000f48 <MX_ADC1_Init+0x140>)
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000e70:	4b35      	ldr	r3, [pc, #212]	; (8000f48 <MX_ADC1_Init+0x140>)
 8000e72:	2200      	movs	r2, #0
 8000e74:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000e76:	4834      	ldr	r0, [pc, #208]	; (8000f48 <MX_ADC1_Init+0x140>)
 8000e78:	f000 fc32 	bl	80016e0 <HAL_ADC_Init>
 8000e7c:	4603      	mov	r3, r0
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d001      	beq.n	8000e86 <MX_ADC1_Init+0x7e>
  {
    Error_Handler();
 8000e82:	f000 f9eb 	bl	800125c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000e86:	230a      	movs	r3, #10
 8000e88:	623b      	str	r3, [r7, #32]
  sConfig.Rank = 1;
 8000e8a:	2301      	movs	r3, #1
 8000e8c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e92:	f107 0320 	add.w	r3, r7, #32
 8000e96:	4619      	mov	r1, r3
 8000e98:	482b      	ldr	r0, [pc, #172]	; (8000f48 <MX_ADC1_Init+0x140>)
 8000e9a:	f000 fdc3 	bl	8001a24 <HAL_ADC_ConfigChannel>
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d001      	beq.n	8000ea8 <MX_ADC1_Init+0xa0>
  {
    Error_Handler();
 8000ea4:	f000 f9da 	bl	800125c <Error_Handler>
  }
  /** Configures for the selected ADC injected channel its corresponding rank in the sequencer and its sample time
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_10;
 8000ea8:	230a      	movs	r3, #10
 8000eaa:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = 1;
 8000eac:	2301      	movs	r3, #1
 8000eae:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedNbrOfConversion = 4;
 8000eb0:	2304      	movs	r3, #4
 8000eb2:	613b      	str	r3, [r7, #16]
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_480CYCLES;
 8000eb4:	2307      	movs	r3, #7
 8000eb6:	60bb      	str	r3, [r7, #8]
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONVEDGE_RISING;
 8000eb8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000ebc:	61fb      	str	r3, [r7, #28]
  sConfigInjected.ExternalTrigInjecConv = ADC_EXTERNALTRIGINJECCONV_T1_TRGO;
 8000ebe:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000ec2:	61bb      	str	r3, [r7, #24]
  sConfigInjected.AutoInjectedConv = DISABLE;
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	757b      	strb	r3, [r7, #21]
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 8000ec8:	2300      	movs	r3, #0
 8000eca:	753b      	strb	r3, [r7, #20]
  sConfigInjected.InjectedOffset = 0;
 8000ecc:	2300      	movs	r3, #0
 8000ece:	60fb      	str	r3, [r7, #12]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8000ed0:	463b      	mov	r3, r7
 8000ed2:	4619      	mov	r1, r3
 8000ed4:	481c      	ldr	r0, [pc, #112]	; (8000f48 <MX_ADC1_Init+0x140>)
 8000ed6:	f001 f895 	bl	8002004 <HAL_ADCEx_InjectedConfigChannel>
 8000eda:	4603      	mov	r3, r0
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d001      	beq.n	8000ee4 <MX_ADC1_Init+0xdc>
  {
    Error_Handler();
 8000ee0:	f000 f9bc 	bl	800125c <Error_Handler>
  }
  /** Configures for the selected ADC injected channel its corresponding rank in the sequencer and its sample time
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_11;
 8000ee4:	230b      	movs	r3, #11
 8000ee6:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = 2;
 8000ee8:	2302      	movs	r3, #2
 8000eea:	607b      	str	r3, [r7, #4]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8000eec:	463b      	mov	r3, r7
 8000eee:	4619      	mov	r1, r3
 8000ef0:	4815      	ldr	r0, [pc, #84]	; (8000f48 <MX_ADC1_Init+0x140>)
 8000ef2:	f001 f887 	bl	8002004 <HAL_ADCEx_InjectedConfigChannel>
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d001      	beq.n	8000f00 <MX_ADC1_Init+0xf8>
  {
    Error_Handler();
 8000efc:	f000 f9ae 	bl	800125c <Error_Handler>
  }
  /** Configures for the selected ADC injected channel its corresponding rank in the sequencer and its sample time
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_12;
 8000f00:	230c      	movs	r3, #12
 8000f02:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = 3;
 8000f04:	2303      	movs	r3, #3
 8000f06:	607b      	str	r3, [r7, #4]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8000f08:	463b      	mov	r3, r7
 8000f0a:	4619      	mov	r1, r3
 8000f0c:	480e      	ldr	r0, [pc, #56]	; (8000f48 <MX_ADC1_Init+0x140>)
 8000f0e:	f001 f879 	bl	8002004 <HAL_ADCEx_InjectedConfigChannel>
 8000f12:	4603      	mov	r3, r0
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d001      	beq.n	8000f1c <MX_ADC1_Init+0x114>
  {
    Error_Handler();
 8000f18:	f000 f9a0 	bl	800125c <Error_Handler>
  }
  /** Configures for the selected ADC injected channel its corresponding rank in the sequencer and its sample time
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_13;
 8000f1c:	230d      	movs	r3, #13
 8000f1e:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = 4;
 8000f20:	2304      	movs	r3, #4
 8000f22:	607b      	str	r3, [r7, #4]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8000f24:	463b      	mov	r3, r7
 8000f26:	4619      	mov	r1, r3
 8000f28:	4807      	ldr	r0, [pc, #28]	; (8000f48 <MX_ADC1_Init+0x140>)
 8000f2a:	f001 f86b 	bl	8002004 <HAL_ADCEx_InjectedConfigChannel>
 8000f2e:	4603      	mov	r3, r0
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d001      	beq.n	8000f38 <MX_ADC1_Init+0x130>
  {
    Error_Handler();
 8000f34:	f000 f992 	bl	800125c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */
  HAL_ADCEx_InjectedStart_IT(&hadc1);
 8000f38:	4803      	ldr	r0, [pc, #12]	; (8000f48 <MX_ADC1_Init+0x140>)
 8000f3a:	f000 ff91 	bl	8001e60 <HAL_ADCEx_InjectedStart_IT>
  /* USER CODE END ADC1_Init 2 */

}
 8000f3e:	bf00      	nop
 8000f40:	3730      	adds	r7, #48	; 0x30
 8000f42:	46bd      	mov	sp, r7
 8000f44:	bd80      	pop	{r7, pc}
 8000f46:	bf00      	nop
 8000f48:	20002850 	.word	0x20002850
 8000f4c:	40012000 	.word	0x40012000
 8000f50:	0f000001 	.word	0x0f000001

08000f54 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b096      	sub	sp, #88	; 0x58
 8000f58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f5a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000f5e:	2200      	movs	r2, #0
 8000f60:	601a      	str	r2, [r3, #0]
 8000f62:	605a      	str	r2, [r3, #4]
 8000f64:	609a      	str	r2, [r3, #8]
 8000f66:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f68:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	601a      	str	r2, [r3, #0]
 8000f70:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000f72:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f76:	2200      	movs	r2, #0
 8000f78:	601a      	str	r2, [r3, #0]
 8000f7a:	605a      	str	r2, [r3, #4]
 8000f7c:	609a      	str	r2, [r3, #8]
 8000f7e:	60da      	str	r2, [r3, #12]
 8000f80:	611a      	str	r2, [r3, #16]
 8000f82:	615a      	str	r2, [r3, #20]
 8000f84:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000f86:	1d3b      	adds	r3, r7, #4
 8000f88:	2220      	movs	r2, #32
 8000f8a:	2100      	movs	r1, #0
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	f008 f863 	bl	8009058 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000f92:	4b3e      	ldr	r3, [pc, #248]	; (800108c <MX_TIM1_Init+0x138>)
 8000f94:	4a3e      	ldr	r2, [pc, #248]	; (8001090 <MX_TIM1_Init+0x13c>)
 8000f96:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1;
 8000f98:	4b3c      	ldr	r3, [pc, #240]	; (800108c <MX_TIM1_Init+0x138>)
 8000f9a:	2201      	movs	r2, #1
 8000f9c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f9e:	4b3b      	ldr	r3, [pc, #236]	; (800108c <MX_TIM1_Init+0x138>)
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 4199;
 8000fa4:	4b39      	ldr	r3, [pc, #228]	; (800108c <MX_TIM1_Init+0x138>)
 8000fa6:	f241 0267 	movw	r2, #4199	; 0x1067
 8000faa:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fac:	4b37      	ldr	r3, [pc, #220]	; (800108c <MX_TIM1_Init+0x138>)
 8000fae:	2200      	movs	r2, #0
 8000fb0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 1;
 8000fb2:	4b36      	ldr	r3, [pc, #216]	; (800108c <MX_TIM1_Init+0x138>)
 8000fb4:	2201      	movs	r2, #1
 8000fb6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000fb8:	4b34      	ldr	r3, [pc, #208]	; (800108c <MX_TIM1_Init+0x138>)
 8000fba:	2200      	movs	r2, #0
 8000fbc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000fbe:	4833      	ldr	r0, [pc, #204]	; (800108c <MX_TIM1_Init+0x138>)
 8000fc0:	f003 fa34 	bl	800442c <HAL_TIM_Base_Init>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d001      	beq.n	8000fce <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8000fca:	f000 f947 	bl	800125c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000fce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000fd2:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000fd4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000fd8:	4619      	mov	r1, r3
 8000fda:	482c      	ldr	r0, [pc, #176]	; (800108c <MX_TIM1_Init+0x138>)
 8000fdc:	f003 fd7a 	bl	8004ad4 <HAL_TIM_ConfigClockSource>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d001      	beq.n	8000fea <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000fe6:	f000 f939 	bl	800125c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000fea:	4828      	ldr	r0, [pc, #160]	; (800108c <MX_TIM1_Init+0x138>)
 8000fec:	f003 fa6d 	bl	80044ca <HAL_TIM_PWM_Init>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d001      	beq.n	8000ffa <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8000ff6:	f000 f931 	bl	800125c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000ffa:	2320      	movs	r3, #32
 8000ffc:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 8000ffe:	2380      	movs	r3, #128	; 0x80
 8001000:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001002:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001006:	4619      	mov	r1, r3
 8001008:	4820      	ldr	r0, [pc, #128]	; (800108c <MX_TIM1_Init+0x138>)
 800100a:	f004 fa15 	bl	8005438 <HAL_TIMEx_MasterConfigSynchronization>
 800100e:	4603      	mov	r3, r0
 8001010:	2b00      	cmp	r3, #0
 8001012:	d001      	beq.n	8001018 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001014:	f000 f922 	bl	800125c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001018:	2360      	movs	r3, #96	; 0x60
 800101a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 800101c:	2300      	movs	r3, #0
 800101e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001020:	2300      	movs	r3, #0
 8001022:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001024:	2300      	movs	r3, #0
 8001026:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001028:	2300      	movs	r3, #0
 800102a:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800102c:	2300      	movs	r3, #0
 800102e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001030:	2300      	movs	r3, #0
 8001032:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001034:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001038:	2200      	movs	r2, #0
 800103a:	4619      	mov	r1, r3
 800103c:	4813      	ldr	r0, [pc, #76]	; (800108c <MX_TIM1_Init+0x138>)
 800103e:	f003 fc87 	bl	8004950 <HAL_TIM_PWM_ConfigChannel>
 8001042:	4603      	mov	r3, r0
 8001044:	2b00      	cmp	r3, #0
 8001046:	d001      	beq.n	800104c <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8001048:	f000 f908 	bl	800125c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800104c:	2300      	movs	r3, #0
 800104e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001050:	2300      	movs	r3, #0
 8001052:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001054:	2300      	movs	r3, #0
 8001056:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001058:	2300      	movs	r3, #0
 800105a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800105c:	2300      	movs	r3, #0
 800105e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001060:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001064:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001066:	2300      	movs	r3, #0
 8001068:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800106a:	1d3b      	adds	r3, r7, #4
 800106c:	4619      	mov	r1, r3
 800106e:	4807      	ldr	r0, [pc, #28]	; (800108c <MX_TIM1_Init+0x138>)
 8001070:	f004 fa50 	bl	8005514 <HAL_TIMEx_ConfigBreakDeadTime>
 8001074:	4603      	mov	r3, r0
 8001076:	2b00      	cmp	r3, #0
 8001078:	d001      	beq.n	800107e <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 800107a:	f000 f8ef 	bl	800125c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800107e:	4803      	ldr	r0, [pc, #12]	; (800108c <MX_TIM1_Init+0x138>)
 8001080:	f000 f9d2 	bl	8001428 <HAL_TIM_MspPostInit>

}
 8001084:	bf00      	nop
 8001086:	3758      	adds	r7, #88	; 0x58
 8001088:	46bd      	mov	sp, r7
 800108a:	bd80      	pop	{r7, pc}
 800108c:	2000289c 	.word	0x2000289c
 8001090:	40010000 	.word	0x40010000

08001094 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b086      	sub	sp, #24
 8001098:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800109a:	f107 0310 	add.w	r3, r7, #16
 800109e:	2200      	movs	r2, #0
 80010a0:	601a      	str	r2, [r3, #0]
 80010a2:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80010a4:	463b      	mov	r3, r7
 80010a6:	2200      	movs	r2, #0
 80010a8:	601a      	str	r2, [r3, #0]
 80010aa:	605a      	str	r2, [r3, #4]
 80010ac:	609a      	str	r2, [r3, #8]
 80010ae:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80010b0:	4b20      	ldr	r3, [pc, #128]	; (8001134 <MX_TIM3_Init+0xa0>)
 80010b2:	4a21      	ldr	r2, [pc, #132]	; (8001138 <MX_TIM3_Init+0xa4>)
 80010b4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80010b6:	4b1f      	ldr	r3, [pc, #124]	; (8001134 <MX_TIM3_Init+0xa0>)
 80010b8:	2200      	movs	r2, #0
 80010ba:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010bc:	4b1d      	ldr	r3, [pc, #116]	; (8001134 <MX_TIM3_Init+0xa0>)
 80010be:	2200      	movs	r2, #0
 80010c0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80010c2:	4b1c      	ldr	r3, [pc, #112]	; (8001134 <MX_TIM3_Init+0xa0>)
 80010c4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80010c8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010ca:	4b1a      	ldr	r3, [pc, #104]	; (8001134 <MX_TIM3_Init+0xa0>)
 80010cc:	2200      	movs	r2, #0
 80010ce:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010d0:	4b18      	ldr	r3, [pc, #96]	; (8001134 <MX_TIM3_Init+0xa0>)
 80010d2:	2200      	movs	r2, #0
 80010d4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 80010d6:	4817      	ldr	r0, [pc, #92]	; (8001134 <MX_TIM3_Init+0xa0>)
 80010d8:	f003 fb4e 	bl	8004778 <HAL_TIM_IC_Init>
 80010dc:	4603      	mov	r3, r0
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d001      	beq.n	80010e6 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 80010e2:	f000 f8bb 	bl	800125c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010e6:	2300      	movs	r3, #0
 80010e8:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010ea:	2300      	movs	r3, #0
 80010ec:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80010ee:	f107 0310 	add.w	r3, r7, #16
 80010f2:	4619      	mov	r1, r3
 80010f4:	480f      	ldr	r0, [pc, #60]	; (8001134 <MX_TIM3_Init+0xa0>)
 80010f6:	f004 f99f 	bl	8005438 <HAL_TIMEx_MasterConfigSynchronization>
 80010fa:	4603      	mov	r3, r0
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d001      	beq.n	8001104 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8001100:	f000 f8ac 	bl	800125c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001104:	2300      	movs	r3, #0
 8001106:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001108:	2301      	movs	r3, #1
 800110a:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800110c:	2300      	movs	r3, #0
 800110e:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8001110:	2300      	movs	r3, #0
 8001112:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001114:	463b      	mov	r3, r7
 8001116:	2200      	movs	r2, #0
 8001118:	4619      	mov	r1, r3
 800111a:	4806      	ldr	r0, [pc, #24]	; (8001134 <MX_TIM3_Init+0xa0>)
 800111c:	f003 fb7b 	bl	8004816 <HAL_TIM_IC_ConfigChannel>
 8001120:	4603      	mov	r3, r0
 8001122:	2b00      	cmp	r3, #0
 8001124:	d001      	beq.n	800112a <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 8001126:	f000 f899 	bl	800125c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800112a:	bf00      	nop
 800112c:	3718      	adds	r7, #24
 800112e:	46bd      	mov	sp, r7
 8001130:	bd80      	pop	{r7, pc}
 8001132:	bf00      	nop
 8001134:	20002808 	.word	0x20002808
 8001138:	40000400 	.word	0x40000400

0800113c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b08a      	sub	sp, #40	; 0x28
 8001140:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001142:	f107 0314 	add.w	r3, r7, #20
 8001146:	2200      	movs	r2, #0
 8001148:	601a      	str	r2, [r3, #0]
 800114a:	605a      	str	r2, [r3, #4]
 800114c:	609a      	str	r2, [r3, #8]
 800114e:	60da      	str	r2, [r3, #12]
 8001150:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001152:	2300      	movs	r3, #0
 8001154:	613b      	str	r3, [r7, #16]
 8001156:	4b35      	ldr	r3, [pc, #212]	; (800122c <MX_GPIO_Init+0xf0>)
 8001158:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800115a:	4a34      	ldr	r2, [pc, #208]	; (800122c <MX_GPIO_Init+0xf0>)
 800115c:	f043 0304 	orr.w	r3, r3, #4
 8001160:	6313      	str	r3, [r2, #48]	; 0x30
 8001162:	4b32      	ldr	r3, [pc, #200]	; (800122c <MX_GPIO_Init+0xf0>)
 8001164:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001166:	f003 0304 	and.w	r3, r3, #4
 800116a:	613b      	str	r3, [r7, #16]
 800116c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800116e:	2300      	movs	r3, #0
 8001170:	60fb      	str	r3, [r7, #12]
 8001172:	4b2e      	ldr	r3, [pc, #184]	; (800122c <MX_GPIO_Init+0xf0>)
 8001174:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001176:	4a2d      	ldr	r2, [pc, #180]	; (800122c <MX_GPIO_Init+0xf0>)
 8001178:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800117c:	6313      	str	r3, [r2, #48]	; 0x30
 800117e:	4b2b      	ldr	r3, [pc, #172]	; (800122c <MX_GPIO_Init+0xf0>)
 8001180:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001182:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001186:	60fb      	str	r3, [r7, #12]
 8001188:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800118a:	2300      	movs	r3, #0
 800118c:	60bb      	str	r3, [r7, #8]
 800118e:	4b27      	ldr	r3, [pc, #156]	; (800122c <MX_GPIO_Init+0xf0>)
 8001190:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001192:	4a26      	ldr	r2, [pc, #152]	; (800122c <MX_GPIO_Init+0xf0>)
 8001194:	f043 0301 	orr.w	r3, r3, #1
 8001198:	6313      	str	r3, [r2, #48]	; 0x30
 800119a:	4b24      	ldr	r3, [pc, #144]	; (800122c <MX_GPIO_Init+0xf0>)
 800119c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800119e:	f003 0301 	and.w	r3, r3, #1
 80011a2:	60bb      	str	r3, [r7, #8]
 80011a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011a6:	2300      	movs	r3, #0
 80011a8:	607b      	str	r3, [r7, #4]
 80011aa:	4b20      	ldr	r3, [pc, #128]	; (800122c <MX_GPIO_Init+0xf0>)
 80011ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ae:	4a1f      	ldr	r2, [pc, #124]	; (800122c <MX_GPIO_Init+0xf0>)
 80011b0:	f043 0302 	orr.w	r3, r3, #2
 80011b4:	6313      	str	r3, [r2, #48]	; 0x30
 80011b6:	4b1d      	ldr	r3, [pc, #116]	; (800122c <MX_GPIO_Init+0xf0>)
 80011b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ba:	f003 0302 	and.w	r3, r3, #2
 80011be:	607b      	str	r3, [r7, #4]
 80011c0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80011c2:	2200      	movs	r2, #0
 80011c4:	2120      	movs	r1, #32
 80011c6:	481a      	ldr	r0, [pc, #104]	; (8001230 <MX_GPIO_Init+0xf4>)
 80011c8:	f001 fb48 	bl	800285c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80011cc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80011d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80011d2:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80011d6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d8:	2300      	movs	r3, #0
 80011da:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80011dc:	f107 0314 	add.w	r3, r7, #20
 80011e0:	4619      	mov	r1, r3
 80011e2:	4814      	ldr	r0, [pc, #80]	; (8001234 <MX_GPIO_Init+0xf8>)
 80011e4:	f001 f9b6 	bl	8002554 <HAL_GPIO_Init>

  /*Configure GPIO pins : USART_TX_Pin USART_RX_Pin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80011e8:	230c      	movs	r3, #12
 80011ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011ec:	2302      	movs	r3, #2
 80011ee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011f0:	2300      	movs	r3, #0
 80011f2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011f4:	2300      	movs	r3, #0
 80011f6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80011f8:	2307      	movs	r3, #7
 80011fa:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011fc:	f107 0314 	add.w	r3, r7, #20
 8001200:	4619      	mov	r1, r3
 8001202:	480b      	ldr	r0, [pc, #44]	; (8001230 <MX_GPIO_Init+0xf4>)
 8001204:	f001 f9a6 	bl	8002554 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001208:	2320      	movs	r3, #32
 800120a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800120c:	2301      	movs	r3, #1
 800120e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001210:	2300      	movs	r3, #0
 8001212:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001214:	2300      	movs	r3, #0
 8001216:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001218:	f107 0314 	add.w	r3, r7, #20
 800121c:	4619      	mov	r1, r3
 800121e:	4804      	ldr	r0, [pc, #16]	; (8001230 <MX_GPIO_Init+0xf4>)
 8001220:	f001 f998 	bl	8002554 <HAL_GPIO_Init>

}
 8001224:	bf00      	nop
 8001226:	3728      	adds	r7, #40	; 0x28
 8001228:	46bd      	mov	sp, r7
 800122a:	bd80      	pop	{r7, pc}
 800122c:	40023800 	.word	0x40023800
 8001230:	40020000 	.word	0x40020000
 8001234:	40020800 	.word	0x40020800

08001238 <HAL_ADCEx_InjectedConvCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b082      	sub	sp, #8
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
	Set_TessDasADC_CH_1(hadc->Instance->JDR1);
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001246:	b29a      	uxth	r2, r3
 8001248:	4b03      	ldr	r3, [pc, #12]	; (8001258 <HAL_ADCEx_InjectedConvCpltCallback+0x20>)
 800124a:	801a      	strh	r2, [r3, #0]
	TESS_DAS_MAIN();
 800124c:	f7ff f99c 	bl	8000588 <TESS_DAS_MAIN>
	/*Debug*/
	/*MainClock++;
	HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);*/
}
 8001250:	bf00      	nop
 8001252:	3708      	adds	r7, #8
 8001254:	46bd      	mov	sp, r7
 8001256:	bd80      	pop	{r7, pc}
 8001258:	200027d6 	.word	0x200027d6

0800125c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800125c:	b480      	push	{r7}
 800125e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001260:	bf00      	nop
 8001262:	46bd      	mov	sp, r7
 8001264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001268:	4770      	bx	lr
	...

0800126c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b082      	sub	sp, #8
 8001270:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001272:	2300      	movs	r3, #0
 8001274:	607b      	str	r3, [r7, #4]
 8001276:	4b10      	ldr	r3, [pc, #64]	; (80012b8 <HAL_MspInit+0x4c>)
 8001278:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800127a:	4a0f      	ldr	r2, [pc, #60]	; (80012b8 <HAL_MspInit+0x4c>)
 800127c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001280:	6453      	str	r3, [r2, #68]	; 0x44
 8001282:	4b0d      	ldr	r3, [pc, #52]	; (80012b8 <HAL_MspInit+0x4c>)
 8001284:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001286:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800128a:	607b      	str	r3, [r7, #4]
 800128c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800128e:	2300      	movs	r3, #0
 8001290:	603b      	str	r3, [r7, #0]
 8001292:	4b09      	ldr	r3, [pc, #36]	; (80012b8 <HAL_MspInit+0x4c>)
 8001294:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001296:	4a08      	ldr	r2, [pc, #32]	; (80012b8 <HAL_MspInit+0x4c>)
 8001298:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800129c:	6413      	str	r3, [r2, #64]	; 0x40
 800129e:	4b06      	ldr	r3, [pc, #24]	; (80012b8 <HAL_MspInit+0x4c>)
 80012a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012a6:	603b      	str	r3, [r7, #0]
 80012a8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80012aa:	2007      	movs	r0, #7
 80012ac:	f001 f910 	bl	80024d0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012b0:	bf00      	nop
 80012b2:	3708      	adds	r7, #8
 80012b4:	46bd      	mov	sp, r7
 80012b6:	bd80      	pop	{r7, pc}
 80012b8:	40023800 	.word	0x40023800

080012bc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b08a      	sub	sp, #40	; 0x28
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012c4:	f107 0314 	add.w	r3, r7, #20
 80012c8:	2200      	movs	r2, #0
 80012ca:	601a      	str	r2, [r3, #0]
 80012cc:	605a      	str	r2, [r3, #4]
 80012ce:	609a      	str	r2, [r3, #8]
 80012d0:	60da      	str	r2, [r3, #12]
 80012d2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	4a1b      	ldr	r2, [pc, #108]	; (8001348 <HAL_ADC_MspInit+0x8c>)
 80012da:	4293      	cmp	r3, r2
 80012dc:	d12f      	bne.n	800133e <HAL_ADC_MspInit+0x82>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80012de:	2300      	movs	r3, #0
 80012e0:	613b      	str	r3, [r7, #16]
 80012e2:	4b1a      	ldr	r3, [pc, #104]	; (800134c <HAL_ADC_MspInit+0x90>)
 80012e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012e6:	4a19      	ldr	r2, [pc, #100]	; (800134c <HAL_ADC_MspInit+0x90>)
 80012e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012ec:	6453      	str	r3, [r2, #68]	; 0x44
 80012ee:	4b17      	ldr	r3, [pc, #92]	; (800134c <HAL_ADC_MspInit+0x90>)
 80012f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012f6:	613b      	str	r3, [r7, #16]
 80012f8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80012fa:	2300      	movs	r3, #0
 80012fc:	60fb      	str	r3, [r7, #12]
 80012fe:	4b13      	ldr	r3, [pc, #76]	; (800134c <HAL_ADC_MspInit+0x90>)
 8001300:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001302:	4a12      	ldr	r2, [pc, #72]	; (800134c <HAL_ADC_MspInit+0x90>)
 8001304:	f043 0304 	orr.w	r3, r3, #4
 8001308:	6313      	str	r3, [r2, #48]	; 0x30
 800130a:	4b10      	ldr	r3, [pc, #64]	; (800134c <HAL_ADC_MspInit+0x90>)
 800130c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800130e:	f003 0304 	and.w	r3, r3, #4
 8001312:	60fb      	str	r3, [r7, #12]
 8001314:	68fb      	ldr	r3, [r7, #12]
    PC0     ------> ADC1_IN10
    PC1     ------> ADC1_IN11
    PC2     ------> ADC1_IN12
    PC3     ------> ADC1_IN13
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8001316:	230f      	movs	r3, #15
 8001318:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800131a:	2303      	movs	r3, #3
 800131c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800131e:	2300      	movs	r3, #0
 8001320:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001322:	f107 0314 	add.w	r3, r7, #20
 8001326:	4619      	mov	r1, r3
 8001328:	4809      	ldr	r0, [pc, #36]	; (8001350 <HAL_ADC_MspInit+0x94>)
 800132a:	f001 f913 	bl	8002554 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 1);
 800132e:	2201      	movs	r2, #1
 8001330:	2100      	movs	r1, #0
 8001332:	2012      	movs	r0, #18
 8001334:	f001 f8d7 	bl	80024e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8001338:	2012      	movs	r0, #18
 800133a:	f001 f8f0 	bl	800251e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800133e:	bf00      	nop
 8001340:	3728      	adds	r7, #40	; 0x28
 8001342:	46bd      	mov	sp, r7
 8001344:	bd80      	pop	{r7, pc}
 8001346:	bf00      	nop
 8001348:	40012000 	.word	0x40012000
 800134c:	40023800 	.word	0x40023800
 8001350:	40020800 	.word	0x40020800

08001354 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001354:	b480      	push	{r7}
 8001356:	b085      	sub	sp, #20
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	4a0b      	ldr	r2, [pc, #44]	; (8001390 <HAL_TIM_Base_MspInit+0x3c>)
 8001362:	4293      	cmp	r3, r2
 8001364:	d10d      	bne.n	8001382 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001366:	2300      	movs	r3, #0
 8001368:	60fb      	str	r3, [r7, #12]
 800136a:	4b0a      	ldr	r3, [pc, #40]	; (8001394 <HAL_TIM_Base_MspInit+0x40>)
 800136c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800136e:	4a09      	ldr	r2, [pc, #36]	; (8001394 <HAL_TIM_Base_MspInit+0x40>)
 8001370:	f043 0301 	orr.w	r3, r3, #1
 8001374:	6453      	str	r3, [r2, #68]	; 0x44
 8001376:	4b07      	ldr	r3, [pc, #28]	; (8001394 <HAL_TIM_Base_MspInit+0x40>)
 8001378:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800137a:	f003 0301 	and.w	r3, r3, #1
 800137e:	60fb      	str	r3, [r7, #12]
 8001380:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001382:	bf00      	nop
 8001384:	3714      	adds	r7, #20
 8001386:	46bd      	mov	sp, r7
 8001388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138c:	4770      	bx	lr
 800138e:	bf00      	nop
 8001390:	40010000 	.word	0x40010000
 8001394:	40023800 	.word	0x40023800

08001398 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b08a      	sub	sp, #40	; 0x28
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013a0:	f107 0314 	add.w	r3, r7, #20
 80013a4:	2200      	movs	r2, #0
 80013a6:	601a      	str	r2, [r3, #0]
 80013a8:	605a      	str	r2, [r3, #4]
 80013aa:	609a      	str	r2, [r3, #8]
 80013ac:	60da      	str	r2, [r3, #12]
 80013ae:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM3)
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	4a19      	ldr	r2, [pc, #100]	; (800141c <HAL_TIM_IC_MspInit+0x84>)
 80013b6:	4293      	cmp	r3, r2
 80013b8:	d12b      	bne.n	8001412 <HAL_TIM_IC_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80013ba:	2300      	movs	r3, #0
 80013bc:	613b      	str	r3, [r7, #16]
 80013be:	4b18      	ldr	r3, [pc, #96]	; (8001420 <HAL_TIM_IC_MspInit+0x88>)
 80013c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013c2:	4a17      	ldr	r2, [pc, #92]	; (8001420 <HAL_TIM_IC_MspInit+0x88>)
 80013c4:	f043 0302 	orr.w	r3, r3, #2
 80013c8:	6413      	str	r3, [r2, #64]	; 0x40
 80013ca:	4b15      	ldr	r3, [pc, #84]	; (8001420 <HAL_TIM_IC_MspInit+0x88>)
 80013cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ce:	f003 0302 	and.w	r3, r3, #2
 80013d2:	613b      	str	r3, [r7, #16]
 80013d4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013d6:	2300      	movs	r3, #0
 80013d8:	60fb      	str	r3, [r7, #12]
 80013da:	4b11      	ldr	r3, [pc, #68]	; (8001420 <HAL_TIM_IC_MspInit+0x88>)
 80013dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013de:	4a10      	ldr	r2, [pc, #64]	; (8001420 <HAL_TIM_IC_MspInit+0x88>)
 80013e0:	f043 0301 	orr.w	r3, r3, #1
 80013e4:	6313      	str	r3, [r2, #48]	; 0x30
 80013e6:	4b0e      	ldr	r3, [pc, #56]	; (8001420 <HAL_TIM_IC_MspInit+0x88>)
 80013e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ea:	f003 0301 	and.w	r3, r3, #1
 80013ee:	60fb      	str	r3, [r7, #12]
 80013f0:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80013f2:	2340      	movs	r3, #64	; 0x40
 80013f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013f6:	2302      	movs	r3, #2
 80013f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013fa:	2300      	movs	r3, #0
 80013fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013fe:	2300      	movs	r3, #0
 8001400:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001402:	2302      	movs	r3, #2
 8001404:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001406:	f107 0314 	add.w	r3, r7, #20
 800140a:	4619      	mov	r1, r3
 800140c:	4805      	ldr	r0, [pc, #20]	; (8001424 <HAL_TIM_IC_MspInit+0x8c>)
 800140e:	f001 f8a1 	bl	8002554 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001412:	bf00      	nop
 8001414:	3728      	adds	r7, #40	; 0x28
 8001416:	46bd      	mov	sp, r7
 8001418:	bd80      	pop	{r7, pc}
 800141a:	bf00      	nop
 800141c:	40000400 	.word	0x40000400
 8001420:	40023800 	.word	0x40023800
 8001424:	40020000 	.word	0x40020000

08001428 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b088      	sub	sp, #32
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001430:	f107 030c 	add.w	r3, r7, #12
 8001434:	2200      	movs	r2, #0
 8001436:	601a      	str	r2, [r3, #0]
 8001438:	605a      	str	r2, [r3, #4]
 800143a:	609a      	str	r2, [r3, #8]
 800143c:	60da      	str	r2, [r3, #12]
 800143e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	4a17      	ldr	r2, [pc, #92]	; (80014a4 <HAL_TIM_MspPostInit+0x7c>)
 8001446:	4293      	cmp	r3, r2
 8001448:	d128      	bne.n	800149c <HAL_TIM_MspPostInit+0x74>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800144a:	2300      	movs	r3, #0
 800144c:	60bb      	str	r3, [r7, #8]
 800144e:	4b16      	ldr	r3, [pc, #88]	; (80014a8 <HAL_TIM_MspPostInit+0x80>)
 8001450:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001452:	4a15      	ldr	r2, [pc, #84]	; (80014a8 <HAL_TIM_MspPostInit+0x80>)
 8001454:	f043 0301 	orr.w	r3, r3, #1
 8001458:	6313      	str	r3, [r2, #48]	; 0x30
 800145a:	4b13      	ldr	r3, [pc, #76]	; (80014a8 <HAL_TIM_MspPostInit+0x80>)
 800145c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800145e:	f003 0301 	and.w	r3, r3, #1
 8001462:	60bb      	str	r3, [r7, #8]
 8001464:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001466:	f44f 7380 	mov.w	r3, #256	; 0x100
 800146a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800146c:	2302      	movs	r3, #2
 800146e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001470:	2300      	movs	r3, #0
 8001472:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001474:	2300      	movs	r3, #0
 8001476:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001478:	2301      	movs	r3, #1
 800147a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800147c:	f107 030c 	add.w	r3, r7, #12
 8001480:	4619      	mov	r1, r3
 8001482:	480a      	ldr	r0, [pc, #40]	; (80014ac <HAL_TIM_MspPostInit+0x84>)
 8001484:	f001 f866 	bl	8002554 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM1_MspPostInit 1 */
    HAL_TIM_PWM_Start_IT(htim, TIM_CHANNEL_1);
 8001488:	2100      	movs	r1, #0
 800148a:	6878      	ldr	r0, [r7, #4]
 800148c:	f003 f876 	bl	800457c <HAL_TIM_PWM_Start_IT>
    htim->Instance->CCR1 = htim->Init.Period/2;
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	68da      	ldr	r2, [r3, #12]
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	0852      	lsrs	r2, r2, #1
 800149a:	635a      	str	r2, [r3, #52]	; 0x34
  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800149c:	bf00      	nop
 800149e:	3720      	adds	r7, #32
 80014a0:	46bd      	mov	sp, r7
 80014a2:	bd80      	pop	{r7, pc}
 80014a4:	40010000 	.word	0x40010000
 80014a8:	40023800 	.word	0x40023800
 80014ac:	40020000 	.word	0x40020000

080014b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014b0:	b480      	push	{r7}
 80014b2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80014b4:	bf00      	nop
 80014b6:	46bd      	mov	sp, r7
 80014b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014bc:	4770      	bx	lr

080014be <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014be:	b480      	push	{r7}
 80014c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014c2:	e7fe      	b.n	80014c2 <HardFault_Handler+0x4>

080014c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014c4:	b480      	push	{r7}
 80014c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014c8:	e7fe      	b.n	80014c8 <MemManage_Handler+0x4>

080014ca <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014ca:	b480      	push	{r7}
 80014cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014ce:	e7fe      	b.n	80014ce <BusFault_Handler+0x4>

080014d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014d0:	b480      	push	{r7}
 80014d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014d4:	e7fe      	b.n	80014d4 <UsageFault_Handler+0x4>

080014d6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80014d6:	b480      	push	{r7}
 80014d8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80014da:	bf00      	nop
 80014dc:	46bd      	mov	sp, r7
 80014de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e2:	4770      	bx	lr

080014e4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014e4:	b480      	push	{r7}
 80014e6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014e8:	bf00      	nop
 80014ea:	46bd      	mov	sp, r7
 80014ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f0:	4770      	bx	lr

080014f2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80014f2:	b480      	push	{r7}
 80014f4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80014f6:	bf00      	nop
 80014f8:	46bd      	mov	sp, r7
 80014fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fe:	4770      	bx	lr

08001500 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001504:	f000 f8a8 	bl	8001658 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001508:	bf00      	nop
 800150a:	bd80      	pop	{r7, pc}

0800150c <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001510:	4802      	ldr	r0, [pc, #8]	; (800151c <ADC_IRQHandler+0x10>)
 8001512:	f000 f928 	bl	8001766 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8001516:	bf00      	nop
 8001518:	bd80      	pop	{r7, pc}
 800151a:	bf00      	nop
 800151c:	20002850 	.word	0x20002850

08001520 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001524:	4802      	ldr	r0, [pc, #8]	; (8001530 <OTG_FS_IRQHandler+0x10>)
 8001526:	f001 fb02 	bl	8002b2e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800152a:	bf00      	nop
 800152c:	bd80      	pop	{r7, pc}
 800152e:	bf00      	nop
 8001530:	200035ec 	.word	0x200035ec

08001534 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001534:	b480      	push	{r7}
 8001536:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001538:	4b08      	ldr	r3, [pc, #32]	; (800155c <SystemInit+0x28>)
 800153a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800153e:	4a07      	ldr	r2, [pc, #28]	; (800155c <SystemInit+0x28>)
 8001540:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001544:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001548:	4b04      	ldr	r3, [pc, #16]	; (800155c <SystemInit+0x28>)
 800154a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800154e:	609a      	str	r2, [r3, #8]
#endif
}
 8001550:	bf00      	nop
 8001552:	46bd      	mov	sp, r7
 8001554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001558:	4770      	bx	lr
 800155a:	bf00      	nop
 800155c:	e000ed00 	.word	0xe000ed00

08001560 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001560:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001598 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001564:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001566:	e003      	b.n	8001570 <LoopCopyDataInit>

08001568 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001568:	4b0c      	ldr	r3, [pc, #48]	; (800159c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800156a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800156c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800156e:	3104      	adds	r1, #4

08001570 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001570:	480b      	ldr	r0, [pc, #44]	; (80015a0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001572:	4b0c      	ldr	r3, [pc, #48]	; (80015a4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001574:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001576:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001578:	d3f6      	bcc.n	8001568 <CopyDataInit>
  ldr  r2, =_sbss
 800157a:	4a0b      	ldr	r2, [pc, #44]	; (80015a8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800157c:	e002      	b.n	8001584 <LoopFillZerobss>

0800157e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800157e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001580:	f842 3b04 	str.w	r3, [r2], #4

08001584 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001584:	4b09      	ldr	r3, [pc, #36]	; (80015ac <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001586:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001588:	d3f9      	bcc.n	800157e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800158a:	f7ff ffd3 	bl	8001534 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800158e:	f007 fd3f 	bl	8009010 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001592:	f7ff fbbc 	bl	8000d0e <main>
  bx  lr    
 8001596:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001598:	20018000 	.word	0x20018000
  ldr  r3, =_sidata
 800159c:	080090e8 	.word	0x080090e8
  ldr  r0, =_sdata
 80015a0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80015a4:	20000180 	.word	0x20000180
  ldr  r2, =_sbss
 80015a8:	20000180 	.word	0x20000180
  ldr  r3, = _ebss
 80015ac:	200039f4 	.word	0x200039f4

080015b0 <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80015b0:	e7fe      	b.n	80015b0 <DMA1_Stream0_IRQHandler>
	...

080015b4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80015b8:	4b0e      	ldr	r3, [pc, #56]	; (80015f4 <HAL_Init+0x40>)
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	4a0d      	ldr	r2, [pc, #52]	; (80015f4 <HAL_Init+0x40>)
 80015be:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80015c2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80015c4:	4b0b      	ldr	r3, [pc, #44]	; (80015f4 <HAL_Init+0x40>)
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	4a0a      	ldr	r2, [pc, #40]	; (80015f4 <HAL_Init+0x40>)
 80015ca:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80015ce:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80015d0:	4b08      	ldr	r3, [pc, #32]	; (80015f4 <HAL_Init+0x40>)
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	4a07      	ldr	r2, [pc, #28]	; (80015f4 <HAL_Init+0x40>)
 80015d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015da:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015dc:	2003      	movs	r0, #3
 80015de:	f000 ff77 	bl	80024d0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80015e2:	2000      	movs	r0, #0
 80015e4:	f000 f808 	bl	80015f8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80015e8:	f7ff fe40 	bl	800126c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80015ec:	2300      	movs	r3, #0
}
 80015ee:	4618      	mov	r0, r3
 80015f0:	bd80      	pop	{r7, pc}
 80015f2:	bf00      	nop
 80015f4:	40023c00 	.word	0x40023c00

080015f8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b082      	sub	sp, #8
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001600:	4b12      	ldr	r3, [pc, #72]	; (800164c <HAL_InitTick+0x54>)
 8001602:	681a      	ldr	r2, [r3, #0]
 8001604:	4b12      	ldr	r3, [pc, #72]	; (8001650 <HAL_InitTick+0x58>)
 8001606:	781b      	ldrb	r3, [r3, #0]
 8001608:	4619      	mov	r1, r3
 800160a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800160e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001612:	fbb2 f3f3 	udiv	r3, r2, r3
 8001616:	4618      	mov	r0, r3
 8001618:	f000 ff8f 	bl	800253a <HAL_SYSTICK_Config>
 800161c:	4603      	mov	r3, r0
 800161e:	2b00      	cmp	r3, #0
 8001620:	d001      	beq.n	8001626 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001622:	2301      	movs	r3, #1
 8001624:	e00e      	b.n	8001644 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	2b0f      	cmp	r3, #15
 800162a:	d80a      	bhi.n	8001642 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800162c:	2200      	movs	r2, #0
 800162e:	6879      	ldr	r1, [r7, #4]
 8001630:	f04f 30ff 	mov.w	r0, #4294967295
 8001634:	f000 ff57 	bl	80024e6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001638:	4a06      	ldr	r2, [pc, #24]	; (8001654 <HAL_InitTick+0x5c>)
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800163e:	2300      	movs	r3, #0
 8001640:	e000      	b.n	8001644 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001642:	2301      	movs	r3, #1
}
 8001644:	4618      	mov	r0, r3
 8001646:	3708      	adds	r7, #8
 8001648:	46bd      	mov	sp, r7
 800164a:	bd80      	pop	{r7, pc}
 800164c:	20000000 	.word	0x20000000
 8001650:	20000008 	.word	0x20000008
 8001654:	20000004 	.word	0x20000004

08001658 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001658:	b480      	push	{r7}
 800165a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800165c:	4b06      	ldr	r3, [pc, #24]	; (8001678 <HAL_IncTick+0x20>)
 800165e:	781b      	ldrb	r3, [r3, #0]
 8001660:	461a      	mov	r2, r3
 8001662:	4b06      	ldr	r3, [pc, #24]	; (800167c <HAL_IncTick+0x24>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	4413      	add	r3, r2
 8001668:	4a04      	ldr	r2, [pc, #16]	; (800167c <HAL_IncTick+0x24>)
 800166a:	6013      	str	r3, [r2, #0]
}
 800166c:	bf00      	nop
 800166e:	46bd      	mov	sp, r7
 8001670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001674:	4770      	bx	lr
 8001676:	bf00      	nop
 8001678:	20000008 	.word	0x20000008
 800167c:	200028e4 	.word	0x200028e4

08001680 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001680:	b480      	push	{r7}
 8001682:	af00      	add	r7, sp, #0
  return uwTick;
 8001684:	4b03      	ldr	r3, [pc, #12]	; (8001694 <HAL_GetTick+0x14>)
 8001686:	681b      	ldr	r3, [r3, #0]
}
 8001688:	4618      	mov	r0, r3
 800168a:	46bd      	mov	sp, r7
 800168c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001690:	4770      	bx	lr
 8001692:	bf00      	nop
 8001694:	200028e4 	.word	0x200028e4

08001698 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b084      	sub	sp, #16
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80016a0:	f7ff ffee 	bl	8001680 <HAL_GetTick>
 80016a4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80016b0:	d005      	beq.n	80016be <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80016b2:	4b0a      	ldr	r3, [pc, #40]	; (80016dc <HAL_Delay+0x44>)
 80016b4:	781b      	ldrb	r3, [r3, #0]
 80016b6:	461a      	mov	r2, r3
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	4413      	add	r3, r2
 80016bc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80016be:	bf00      	nop
 80016c0:	f7ff ffde 	bl	8001680 <HAL_GetTick>
 80016c4:	4602      	mov	r2, r0
 80016c6:	68bb      	ldr	r3, [r7, #8]
 80016c8:	1ad3      	subs	r3, r2, r3
 80016ca:	68fa      	ldr	r2, [r7, #12]
 80016cc:	429a      	cmp	r2, r3
 80016ce:	d8f7      	bhi.n	80016c0 <HAL_Delay+0x28>
  {
  }
}
 80016d0:	bf00      	nop
 80016d2:	bf00      	nop
 80016d4:	3710      	adds	r7, #16
 80016d6:	46bd      	mov	sp, r7
 80016d8:	bd80      	pop	{r7, pc}
 80016da:	bf00      	nop
 80016dc:	20000008 	.word	0x20000008

080016e0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b084      	sub	sp, #16
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80016e8:	2300      	movs	r3, #0
 80016ea:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d101      	bne.n	80016f6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80016f2:	2301      	movs	r3, #1
 80016f4:	e033      	b.n	800175e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d109      	bne.n	8001712 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80016fe:	6878      	ldr	r0, [r7, #4]
 8001700:	f7ff fddc 	bl	80012bc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	2200      	movs	r2, #0
 8001708:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	2200      	movs	r2, #0
 800170e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001716:	f003 0310 	and.w	r3, r3, #16
 800171a:	2b00      	cmp	r3, #0
 800171c:	d118      	bne.n	8001750 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001722:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001726:	f023 0302 	bic.w	r3, r3, #2
 800172a:	f043 0202 	orr.w	r2, r3, #2
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001732:	6878      	ldr	r0, [r7, #4]
 8001734:	f000 fa98 	bl	8001c68 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	2200      	movs	r2, #0
 800173c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001742:	f023 0303 	bic.w	r3, r3, #3
 8001746:	f043 0201 	orr.w	r2, r3, #1
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	641a      	str	r2, [r3, #64]	; 0x40
 800174e:	e001      	b.n	8001754 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001750:	2301      	movs	r3, #1
 8001752:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	2200      	movs	r2, #0
 8001758:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800175c:	7bfb      	ldrb	r3, [r7, #15]
}
 800175e:	4618      	mov	r0, r3
 8001760:	3710      	adds	r7, #16
 8001762:	46bd      	mov	sp, r7
 8001764:	bd80      	pop	{r7, pc}

08001766 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8001766:	b580      	push	{r7, lr}
 8001768:	b084      	sub	sp, #16
 800176a:	af00      	add	r7, sp, #0
 800176c:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 800176e:	2300      	movs	r3, #0
 8001770:	60fb      	str	r3, [r7, #12]
 8001772:	2300      	movs	r3, #0
 8001774:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	f003 0302 	and.w	r3, r3, #2
 8001780:	2b02      	cmp	r3, #2
 8001782:	bf0c      	ite	eq
 8001784:	2301      	moveq	r3, #1
 8001786:	2300      	movne	r3, #0
 8001788:	b2db      	uxtb	r3, r3
 800178a:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	685b      	ldr	r3, [r3, #4]
 8001792:	f003 0320 	and.w	r3, r3, #32
 8001796:	2b20      	cmp	r3, #32
 8001798:	bf0c      	ite	eq
 800179a:	2301      	moveq	r3, #1
 800179c:	2300      	movne	r3, #0
 800179e:	b2db      	uxtb	r3, r3
 80017a0:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d049      	beq.n	800183c <HAL_ADC_IRQHandler+0xd6>
 80017a8:	68bb      	ldr	r3, [r7, #8]
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d046      	beq.n	800183c <HAL_ADC_IRQHandler+0xd6>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017b2:	f003 0310 	and.w	r3, r3, #16
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d105      	bne.n	80017c6 <HAL_ADC_IRQHandler+0x60>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017be:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	689b      	ldr	r3, [r3, #8]
 80017cc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d12b      	bne.n	800182c <HAL_ADC_IRQHandler+0xc6>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d127      	bne.n	800182c <HAL_ADC_IRQHandler+0xc6>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017e2:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d006      	beq.n	80017f8 <HAL_ADC_IRQHandler+0x92>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	689b      	ldr	r3, [r3, #8]
 80017f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d119      	bne.n	800182c <HAL_ADC_IRQHandler+0xc6>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	685a      	ldr	r2, [r3, #4]
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f022 0220 	bic.w	r2, r2, #32
 8001806:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800180c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001818:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800181c:	2b00      	cmp	r3, #0
 800181e:	d105      	bne.n	800182c <HAL_ADC_IRQHandler+0xc6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001824:	f043 0201 	orr.w	r2, r3, #1
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800182c:	6878      	ldr	r0, [r7, #4]
 800182e:	f000 f8db 	bl	80019e8 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	f06f 0212 	mvn.w	r2, #18
 800183a:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f003 0304 	and.w	r3, r3, #4
 8001846:	2b04      	cmp	r3, #4
 8001848:	bf0c      	ite	eq
 800184a:	2301      	moveq	r3, #1
 800184c:	2300      	movne	r3, #0
 800184e:	b2db      	uxtb	r3, r3
 8001850:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	685b      	ldr	r3, [r3, #4]
 8001858:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800185c:	2b80      	cmp	r3, #128	; 0x80
 800185e:	bf0c      	ite	eq
 8001860:	2301      	moveq	r3, #1
 8001862:	2300      	movne	r3, #0
 8001864:	b2db      	uxtb	r3, r3
 8001866:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	2b00      	cmp	r3, #0
 800186c:	d057      	beq.n	800191e <HAL_ADC_IRQHandler+0x1b8>
 800186e:	68bb      	ldr	r3, [r7, #8]
 8001870:	2b00      	cmp	r3, #0
 8001872:	d054      	beq.n	800191e <HAL_ADC_IRQHandler+0x1b8>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001878:	f003 0310 	and.w	r3, r3, #16
 800187c:	2b00      	cmp	r3, #0
 800187e:	d105      	bne.n	800188c <HAL_ADC_IRQHandler+0x126>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001884:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	689b      	ldr	r3, [r3, #8]
 8001892:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8001896:	2b00      	cmp	r3, #0
 8001898:	d139      	bne.n	800190e <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80018a0:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d006      	beq.n	80018b6 <HAL_ADC_IRQHandler+0x150>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	689b      	ldr	r3, [r3, #8]
 80018ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d12b      	bne.n	800190e <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	685b      	ldr	r3, [r3, #4]
 80018bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d124      	bne.n	800190e <HAL_ADC_IRQHandler+0x1a8>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	689b      	ldr	r3, [r3, #8]
 80018ca:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d11d      	bne.n	800190e <HAL_ADC_IRQHandler+0x1a8>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d119      	bne.n	800190e <HAL_ADC_IRQHandler+0x1a8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	685a      	ldr	r2, [r3, #4]
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80018e8:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ee:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d105      	bne.n	800190e <HAL_ADC_IRQHandler+0x1a8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001906:	f043 0201 	orr.w	r2, r3, #1
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800190e:	6878      	ldr	r0, [r7, #4]
 8001910:	f7ff fc92 	bl	8001238 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	f06f 020c 	mvn.w	r2, #12
 800191c:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	f003 0301 	and.w	r3, r3, #1
 8001928:	2b01      	cmp	r3, #1
 800192a:	bf0c      	ite	eq
 800192c:	2301      	moveq	r3, #1
 800192e:	2300      	movne	r3, #0
 8001930:	b2db      	uxtb	r3, r3
 8001932:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	685b      	ldr	r3, [r3, #4]
 800193a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800193e:	2b40      	cmp	r3, #64	; 0x40
 8001940:	bf0c      	ite	eq
 8001942:	2301      	moveq	r3, #1
 8001944:	2300      	movne	r3, #0
 8001946:	b2db      	uxtb	r3, r3
 8001948:	60bb      	str	r3, [r7, #8]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	2b00      	cmp	r3, #0
 800194e:	d017      	beq.n	8001980 <HAL_ADC_IRQHandler+0x21a>
 8001950:	68bb      	ldr	r3, [r7, #8]
 8001952:	2b00      	cmp	r3, #0
 8001954:	d014      	beq.n	8001980 <HAL_ADC_IRQHandler+0x21a>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	f003 0301 	and.w	r3, r3, #1
 8001960:	2b01      	cmp	r3, #1
 8001962:	d10d      	bne.n	8001980 <HAL_ADC_IRQHandler+0x21a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001968:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001970:	6878      	ldr	r0, [r7, #4]
 8001972:	f000 f843 	bl	80019fc <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	f06f 0201 	mvn.w	r2, #1
 800197e:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	f003 0320 	and.w	r3, r3, #32
 800198a:	2b20      	cmp	r3, #32
 800198c:	bf0c      	ite	eq
 800198e:	2301      	moveq	r3, #1
 8001990:	2300      	movne	r3, #0
 8001992:	b2db      	uxtb	r3, r3
 8001994:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	685b      	ldr	r3, [r3, #4]
 800199c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80019a0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80019a4:	bf0c      	ite	eq
 80019a6:	2301      	moveq	r3, #1
 80019a8:	2300      	movne	r3, #0
 80019aa:	b2db      	uxtb	r3, r3
 80019ac:	60bb      	str	r3, [r7, #8]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d015      	beq.n	80019e0 <HAL_ADC_IRQHandler+0x27a>
 80019b4:	68bb      	ldr	r3, [r7, #8]
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d012      	beq.n	80019e0 <HAL_ADC_IRQHandler+0x27a>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019be:	f043 0202 	orr.w	r2, r3, #2
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	f06f 0220 	mvn.w	r2, #32
 80019ce:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80019d0:	6878      	ldr	r0, [r7, #4]
 80019d2:	f000 f81d 	bl	8001a10 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f06f 0220 	mvn.w	r2, #32
 80019de:	601a      	str	r2, [r3, #0]
  }
}
 80019e0:	bf00      	nop
 80019e2:	3710      	adds	r7, #16
 80019e4:	46bd      	mov	sp, r7
 80019e6:	bd80      	pop	{r7, pc}

080019e8 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80019e8:	b480      	push	{r7}
 80019ea:	b083      	sub	sp, #12
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 80019f0:	bf00      	nop
 80019f2:	370c      	adds	r7, #12
 80019f4:	46bd      	mov	sp, r7
 80019f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fa:	4770      	bx	lr

080019fc <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 80019fc:	b480      	push	{r7}
 80019fe:	b083      	sub	sp, #12
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8001a04:	bf00      	nop
 8001a06:	370c      	adds	r7, #12
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0e:	4770      	bx	lr

08001a10 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001a10:	b480      	push	{r7}
 8001a12:	b083      	sub	sp, #12
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001a18:	bf00      	nop
 8001a1a:	370c      	adds	r7, #12
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a22:	4770      	bx	lr

08001a24 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001a24:	b480      	push	{r7}
 8001a26:	b085      	sub	sp, #20
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]
 8001a2c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001a2e:	2300      	movs	r3, #0
 8001a30:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001a38:	2b01      	cmp	r3, #1
 8001a3a:	d101      	bne.n	8001a40 <HAL_ADC_ConfigChannel+0x1c>
 8001a3c:	2302      	movs	r3, #2
 8001a3e:	e105      	b.n	8001c4c <HAL_ADC_ConfigChannel+0x228>
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	2201      	movs	r2, #1
 8001a44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001a48:	683b      	ldr	r3, [r7, #0]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	2b09      	cmp	r3, #9
 8001a4e:	d925      	bls.n	8001a9c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	68d9      	ldr	r1, [r3, #12]
 8001a56:	683b      	ldr	r3, [r7, #0]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	b29b      	uxth	r3, r3
 8001a5c:	461a      	mov	r2, r3
 8001a5e:	4613      	mov	r3, r2
 8001a60:	005b      	lsls	r3, r3, #1
 8001a62:	4413      	add	r3, r2
 8001a64:	3b1e      	subs	r3, #30
 8001a66:	2207      	movs	r2, #7
 8001a68:	fa02 f303 	lsl.w	r3, r2, r3
 8001a6c:	43da      	mvns	r2, r3
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	400a      	ands	r2, r1
 8001a74:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	68d9      	ldr	r1, [r3, #12]
 8001a7c:	683b      	ldr	r3, [r7, #0]
 8001a7e:	689a      	ldr	r2, [r3, #8]
 8001a80:	683b      	ldr	r3, [r7, #0]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	b29b      	uxth	r3, r3
 8001a86:	4618      	mov	r0, r3
 8001a88:	4603      	mov	r3, r0
 8001a8a:	005b      	lsls	r3, r3, #1
 8001a8c:	4403      	add	r3, r0
 8001a8e:	3b1e      	subs	r3, #30
 8001a90:	409a      	lsls	r2, r3
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	430a      	orrs	r2, r1
 8001a98:	60da      	str	r2, [r3, #12]
 8001a9a:	e022      	b.n	8001ae2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	6919      	ldr	r1, [r3, #16]
 8001aa2:	683b      	ldr	r3, [r7, #0]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	b29b      	uxth	r3, r3
 8001aa8:	461a      	mov	r2, r3
 8001aaa:	4613      	mov	r3, r2
 8001aac:	005b      	lsls	r3, r3, #1
 8001aae:	4413      	add	r3, r2
 8001ab0:	2207      	movs	r2, #7
 8001ab2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab6:	43da      	mvns	r2, r3
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	400a      	ands	r2, r1
 8001abe:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	6919      	ldr	r1, [r3, #16]
 8001ac6:	683b      	ldr	r3, [r7, #0]
 8001ac8:	689a      	ldr	r2, [r3, #8]
 8001aca:	683b      	ldr	r3, [r7, #0]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	b29b      	uxth	r3, r3
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	005b      	lsls	r3, r3, #1
 8001ad6:	4403      	add	r3, r0
 8001ad8:	409a      	lsls	r2, r3
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	430a      	orrs	r2, r1
 8001ae0:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001ae2:	683b      	ldr	r3, [r7, #0]
 8001ae4:	685b      	ldr	r3, [r3, #4]
 8001ae6:	2b06      	cmp	r3, #6
 8001ae8:	d824      	bhi.n	8001b34 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001af0:	683b      	ldr	r3, [r7, #0]
 8001af2:	685a      	ldr	r2, [r3, #4]
 8001af4:	4613      	mov	r3, r2
 8001af6:	009b      	lsls	r3, r3, #2
 8001af8:	4413      	add	r3, r2
 8001afa:	3b05      	subs	r3, #5
 8001afc:	221f      	movs	r2, #31
 8001afe:	fa02 f303 	lsl.w	r3, r2, r3
 8001b02:	43da      	mvns	r2, r3
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	400a      	ands	r2, r1
 8001b0a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001b12:	683b      	ldr	r3, [r7, #0]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	b29b      	uxth	r3, r3
 8001b18:	4618      	mov	r0, r3
 8001b1a:	683b      	ldr	r3, [r7, #0]
 8001b1c:	685a      	ldr	r2, [r3, #4]
 8001b1e:	4613      	mov	r3, r2
 8001b20:	009b      	lsls	r3, r3, #2
 8001b22:	4413      	add	r3, r2
 8001b24:	3b05      	subs	r3, #5
 8001b26:	fa00 f203 	lsl.w	r2, r0, r3
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	430a      	orrs	r2, r1
 8001b30:	635a      	str	r2, [r3, #52]	; 0x34
 8001b32:	e04c      	b.n	8001bce <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001b34:	683b      	ldr	r3, [r7, #0]
 8001b36:	685b      	ldr	r3, [r3, #4]
 8001b38:	2b0c      	cmp	r3, #12
 8001b3a:	d824      	bhi.n	8001b86 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001b42:	683b      	ldr	r3, [r7, #0]
 8001b44:	685a      	ldr	r2, [r3, #4]
 8001b46:	4613      	mov	r3, r2
 8001b48:	009b      	lsls	r3, r3, #2
 8001b4a:	4413      	add	r3, r2
 8001b4c:	3b23      	subs	r3, #35	; 0x23
 8001b4e:	221f      	movs	r2, #31
 8001b50:	fa02 f303 	lsl.w	r3, r2, r3
 8001b54:	43da      	mvns	r2, r3
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	400a      	ands	r2, r1
 8001b5c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001b64:	683b      	ldr	r3, [r7, #0]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	b29b      	uxth	r3, r3
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	683b      	ldr	r3, [r7, #0]
 8001b6e:	685a      	ldr	r2, [r3, #4]
 8001b70:	4613      	mov	r3, r2
 8001b72:	009b      	lsls	r3, r3, #2
 8001b74:	4413      	add	r3, r2
 8001b76:	3b23      	subs	r3, #35	; 0x23
 8001b78:	fa00 f203 	lsl.w	r2, r0, r3
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	430a      	orrs	r2, r1
 8001b82:	631a      	str	r2, [r3, #48]	; 0x30
 8001b84:	e023      	b.n	8001bce <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001b8c:	683b      	ldr	r3, [r7, #0]
 8001b8e:	685a      	ldr	r2, [r3, #4]
 8001b90:	4613      	mov	r3, r2
 8001b92:	009b      	lsls	r3, r3, #2
 8001b94:	4413      	add	r3, r2
 8001b96:	3b41      	subs	r3, #65	; 0x41
 8001b98:	221f      	movs	r2, #31
 8001b9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b9e:	43da      	mvns	r2, r3
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	400a      	ands	r2, r1
 8001ba6:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001bae:	683b      	ldr	r3, [r7, #0]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	b29b      	uxth	r3, r3
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	683b      	ldr	r3, [r7, #0]
 8001bb8:	685a      	ldr	r2, [r3, #4]
 8001bba:	4613      	mov	r3, r2
 8001bbc:	009b      	lsls	r3, r3, #2
 8001bbe:	4413      	add	r3, r2
 8001bc0:	3b41      	subs	r3, #65	; 0x41
 8001bc2:	fa00 f203 	lsl.w	r2, r0, r3
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	430a      	orrs	r2, r1
 8001bcc:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001bce:	4b22      	ldr	r3, [pc, #136]	; (8001c58 <HAL_ADC_ConfigChannel+0x234>)
 8001bd0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	4a21      	ldr	r2, [pc, #132]	; (8001c5c <HAL_ADC_ConfigChannel+0x238>)
 8001bd8:	4293      	cmp	r3, r2
 8001bda:	d109      	bne.n	8001bf0 <HAL_ADC_ConfigChannel+0x1cc>
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	2b12      	cmp	r3, #18
 8001be2:	d105      	bne.n	8001bf0 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	685b      	ldr	r3, [r3, #4]
 8001be8:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	4a19      	ldr	r2, [pc, #100]	; (8001c5c <HAL_ADC_ConfigChannel+0x238>)
 8001bf6:	4293      	cmp	r3, r2
 8001bf8:	d123      	bne.n	8001c42 <HAL_ADC_ConfigChannel+0x21e>
 8001bfa:	683b      	ldr	r3, [r7, #0]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	2b10      	cmp	r3, #16
 8001c00:	d003      	beq.n	8001c0a <HAL_ADC_ConfigChannel+0x1e6>
 8001c02:	683b      	ldr	r3, [r7, #0]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	2b11      	cmp	r3, #17
 8001c08:	d11b      	bne.n	8001c42 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	685b      	ldr	r3, [r3, #4]
 8001c0e:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001c16:	683b      	ldr	r3, [r7, #0]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	2b10      	cmp	r3, #16
 8001c1c:	d111      	bne.n	8001c42 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001c1e:	4b10      	ldr	r3, [pc, #64]	; (8001c60 <HAL_ADC_ConfigChannel+0x23c>)
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	4a10      	ldr	r2, [pc, #64]	; (8001c64 <HAL_ADC_ConfigChannel+0x240>)
 8001c24:	fba2 2303 	umull	r2, r3, r2, r3
 8001c28:	0c9a      	lsrs	r2, r3, #18
 8001c2a:	4613      	mov	r3, r2
 8001c2c:	009b      	lsls	r3, r3, #2
 8001c2e:	4413      	add	r3, r2
 8001c30:	005b      	lsls	r3, r3, #1
 8001c32:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001c34:	e002      	b.n	8001c3c <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8001c36:	68bb      	ldr	r3, [r7, #8]
 8001c38:	3b01      	subs	r3, #1
 8001c3a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001c3c:	68bb      	ldr	r3, [r7, #8]
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d1f9      	bne.n	8001c36 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	2200      	movs	r2, #0
 8001c46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001c4a:	2300      	movs	r3, #0
}
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	3714      	adds	r7, #20
 8001c50:	46bd      	mov	sp, r7
 8001c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c56:	4770      	bx	lr
 8001c58:	40012300 	.word	0x40012300
 8001c5c:	40012000 	.word	0x40012000
 8001c60:	20000000 	.word	0x20000000
 8001c64:	431bde83 	.word	0x431bde83

08001c68 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	b085      	sub	sp, #20
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001c70:	4b79      	ldr	r3, [pc, #484]	; (8001e58 <ADC_Init+0x1f0>)
 8001c72:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	685b      	ldr	r3, [r3, #4]
 8001c78:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	685a      	ldr	r2, [r3, #4]
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	685b      	ldr	r3, [r3, #4]
 8001c88:	431a      	orrs	r2, r3
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	685a      	ldr	r2, [r3, #4]
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001c9c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	6859      	ldr	r1, [r3, #4]
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	691b      	ldr	r3, [r3, #16]
 8001ca8:	021a      	lsls	r2, r3, #8
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	430a      	orrs	r2, r1
 8001cb0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	685a      	ldr	r2, [r3, #4]
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001cc0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	6859      	ldr	r1, [r3, #4]
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	689a      	ldr	r2, [r3, #8]
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	430a      	orrs	r2, r1
 8001cd2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	689a      	ldr	r2, [r3, #8]
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001ce2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	6899      	ldr	r1, [r3, #8]
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	68da      	ldr	r2, [r3, #12]
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	430a      	orrs	r2, r1
 8001cf4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cfa:	4a58      	ldr	r2, [pc, #352]	; (8001e5c <ADC_Init+0x1f4>)
 8001cfc:	4293      	cmp	r3, r2
 8001cfe:	d022      	beq.n	8001d46 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	689a      	ldr	r2, [r3, #8]
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001d0e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	6899      	ldr	r1, [r3, #8]
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	430a      	orrs	r2, r1
 8001d20:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	689a      	ldr	r2, [r3, #8]
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001d30:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	6899      	ldr	r1, [r3, #8]
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	430a      	orrs	r2, r1
 8001d42:	609a      	str	r2, [r3, #8]
 8001d44:	e00f      	b.n	8001d66 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	689a      	ldr	r2, [r3, #8]
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001d54:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	689a      	ldr	r2, [r3, #8]
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001d64:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	689a      	ldr	r2, [r3, #8]
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f022 0202 	bic.w	r2, r2, #2
 8001d74:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	6899      	ldr	r1, [r3, #8]
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	7e1b      	ldrb	r3, [r3, #24]
 8001d80:	005a      	lsls	r2, r3, #1
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	430a      	orrs	r2, r1
 8001d88:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d01b      	beq.n	8001dcc <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	685a      	ldr	r2, [r3, #4]
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001da2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	685a      	ldr	r2, [r3, #4]
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001db2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	6859      	ldr	r1, [r3, #4]
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dbe:	3b01      	subs	r3, #1
 8001dc0:	035a      	lsls	r2, r3, #13
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	430a      	orrs	r2, r1
 8001dc8:	605a      	str	r2, [r3, #4]
 8001dca:	e007      	b.n	8001ddc <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	685a      	ldr	r2, [r3, #4]
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001dda:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001dea:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	69db      	ldr	r3, [r3, #28]
 8001df6:	3b01      	subs	r3, #1
 8001df8:	051a      	lsls	r2, r3, #20
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	430a      	orrs	r2, r1
 8001e00:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	689a      	ldr	r2, [r3, #8]
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001e10:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	6899      	ldr	r1, [r3, #8]
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001e1e:	025a      	lsls	r2, r3, #9
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	430a      	orrs	r2, r1
 8001e26:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	689a      	ldr	r2, [r3, #8]
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001e36:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	6899      	ldr	r1, [r3, #8]
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	695b      	ldr	r3, [r3, #20]
 8001e42:	029a      	lsls	r2, r3, #10
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	430a      	orrs	r2, r1
 8001e4a:	609a      	str	r2, [r3, #8]
}
 8001e4c:	bf00      	nop
 8001e4e:	3714      	adds	r7, #20
 8001e50:	46bd      	mov	sp, r7
 8001e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e56:	4770      	bx	lr
 8001e58:	40012300 	.word	0x40012300
 8001e5c:	0f000001 	.word	0x0f000001

08001e60 <HAL_ADCEx_InjectedStart_IT>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedStart_IT(ADC_HandleTypeDef* hadc)
{
 8001e60:	b480      	push	{r7}
 8001e62:	b087      	sub	sp, #28
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001e68:	2300      	movs	r3, #0
 8001e6a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	617b      	str	r3, [r7, #20]
 8001e70:	2300      	movs	r3, #0
 8001e72:	613b      	str	r3, [r7, #16]
  ADC_Common_TypeDef *tmpADC_Common;
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001e7a:	2b01      	cmp	r3, #1
 8001e7c:	d101      	bne.n	8001e82 <HAL_ADCEx_InjectedStart_IT+0x22>
 8001e7e:	2302      	movs	r3, #2
 8001e80:	e0b2      	b.n	8001fe8 <HAL_ADCEx_InjectedStart_IT+0x188>
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	2201      	movs	r2, #1
 8001e86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
     Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	689b      	ldr	r3, [r3, #8]
 8001e90:	f003 0301 	and.w	r3, r3, #1
 8001e94:	2b01      	cmp	r3, #1
 8001e96:	d018      	beq.n	8001eca <HAL_ADCEx_InjectedStart_IT+0x6a>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	689a      	ldr	r2, [r3, #8]
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f042 0201 	orr.w	r2, r2, #1
 8001ea6:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001ea8:	4b52      	ldr	r3, [pc, #328]	; (8001ff4 <HAL_ADCEx_InjectedStart_IT+0x194>)
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	4a52      	ldr	r2, [pc, #328]	; (8001ff8 <HAL_ADCEx_InjectedStart_IT+0x198>)
 8001eae:	fba2 2303 	umull	r2, r3, r2, r3
 8001eb2:	0c9a      	lsrs	r2, r3, #18
 8001eb4:	4613      	mov	r3, r2
 8001eb6:	005b      	lsls	r3, r3, #1
 8001eb8:	4413      	add	r3, r2
 8001eba:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001ebc:	e002      	b.n	8001ec4 <HAL_ADCEx_InjectedStart_IT+0x64>
    {
      counter--;
 8001ebe:	68bb      	ldr	r3, [r7, #8]
 8001ec0:	3b01      	subs	r3, #1
 8001ec2:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001ec4:	68bb      	ldr	r3, [r7, #8]
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d1f9      	bne.n	8001ebe <HAL_ADCEx_InjectedStart_IT+0x5e>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	689b      	ldr	r3, [r3, #8]
 8001ed0:	f003 0301 	and.w	r3, r3, #1
 8001ed4:	2b01      	cmp	r3, #1
 8001ed6:	d17a      	bne.n	8001fce <HAL_ADCEx_InjectedStart_IT+0x16e>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to injected group conversion results    */
    /* - Set state bitfield related to injected operation                     */
    ADC_STATE_CLR_SET(hadc->State,
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001edc:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001ee0:	f023 0301 	bic.w	r3, r3, #1
 8001ee4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Check if a regular conversion is ongoing */
    /* Note: On this device, there is no ADC error code fields related to     */
    /*       conversions on group injected only. In case of conversion on     */
    /*       going on group regular, no error code is reset.                  */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ef0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d102      	bne.n	8001efe <HAL_ADCEx_InjectedStart_IT+0x9e>
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	2200      	movs	r2, #0
 8001efc:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	2200      	movs	r2, #0
 8001f02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear injected group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC);
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f06f 0204 	mvn.w	r2, #4
 8001f0e:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for injected channels */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	685a      	ldr	r2, [r3, #4]
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001f1e:	605a      	str	r2, [r3, #4]

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADC and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001f20:	4b36      	ldr	r3, [pc, #216]	; (8001ffc <HAL_ADCEx_InjectedStart_IT+0x19c>)
 8001f22:	60fb      	str	r3, [r7, #12]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	685b      	ldr	r3, [r3, #4]
 8001f28:	f003 031f 	and.w	r3, r3, #31
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d124      	bne.n	8001f7a <HAL_ADCEx_InjectedStart_IT+0x11a>
    {
      tmp1 = HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_JEXTEN);
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	689b      	ldr	r3, [r3, #8]
 8001f36:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	bf0c      	ite	eq
 8001f3e:	2301      	moveq	r3, #1
 8001f40:	2300      	movne	r3, #0
 8001f42:	b2db      	uxtb	r3, r3
 8001f44:	617b      	str	r3, [r7, #20]
      tmp2 = HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO);
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	685b      	ldr	r3, [r3, #4]
 8001f4c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	bf0c      	ite	eq
 8001f54:	2301      	moveq	r3, #1
 8001f56:	2300      	movne	r3, #0
 8001f58:	b2db      	uxtb	r3, r3
 8001f5a:	613b      	str	r3, [r7, #16]
      if(tmp1 && tmp2)
 8001f5c:	697b      	ldr	r3, [r7, #20]
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d041      	beq.n	8001fe6 <HAL_ADCEx_InjectedStart_IT+0x186>
 8001f62:	693b      	ldr	r3, [r7, #16]
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d03e      	beq.n	8001fe6 <HAL_ADCEx_InjectedStart_IT+0x186>
      {
        /* Enable the selected ADC software conversion for injected group */
        hadc->Instance->CR2 |= ADC_CR2_JSWSTART;
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	689a      	ldr	r2, [r3, #8]
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8001f76:	609a      	str	r2, [r3, #8]
 8001f78:	e035      	b.n	8001fe6 <HAL_ADCEx_InjectedStart_IT+0x186>
      }
    }
    else
    {
      tmp1 = HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_JEXTEN);
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	689b      	ldr	r3, [r3, #8]
 8001f80:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	bf0c      	ite	eq
 8001f88:	2301      	moveq	r3, #1
 8001f8a:	2300      	movne	r3, #0
 8001f8c:	b2db      	uxtb	r3, r3
 8001f8e:	617b      	str	r3, [r7, #20]
      tmp2 = HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO);
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	685b      	ldr	r3, [r3, #4]
 8001f96:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	bf0c      	ite	eq
 8001f9e:	2301      	moveq	r3, #1
 8001fa0:	2300      	movne	r3, #0
 8001fa2:	b2db      	uxtb	r3, r3
 8001fa4:	613b      	str	r3, [r7, #16]
      if((hadc->Instance == ADC1) && tmp1 && tmp2)  
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	4a15      	ldr	r2, [pc, #84]	; (8002000 <HAL_ADCEx_InjectedStart_IT+0x1a0>)
 8001fac:	4293      	cmp	r3, r2
 8001fae:	d11a      	bne.n	8001fe6 <HAL_ADCEx_InjectedStart_IT+0x186>
 8001fb0:	697b      	ldr	r3, [r7, #20]
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d017      	beq.n	8001fe6 <HAL_ADCEx_InjectedStart_IT+0x186>
 8001fb6:	693b      	ldr	r3, [r7, #16]
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d014      	beq.n	8001fe6 <HAL_ADCEx_InjectedStart_IT+0x186>
      {
        /* Enable the selected ADC software conversion for injected group */
        hadc->Instance->CR2 |= ADC_CR2_JSWSTART;
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	689a      	ldr	r2, [r3, #8]
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8001fca:	609a      	str	r2, [r3, #8]
 8001fcc:	e00b      	b.n	8001fe6 <HAL_ADCEx_InjectedStart_IT+0x186>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fd2:	f043 0210 	orr.w	r2, r3, #16
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fde:	f043 0201 	orr.w	r2, r3, #1
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001fe6:	2300      	movs	r3, #0
}
 8001fe8:	4618      	mov	r0, r3
 8001fea:	371c      	adds	r7, #28
 8001fec:	46bd      	mov	sp, r7
 8001fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff2:	4770      	bx	lr
 8001ff4:	20000000 	.word	0x20000000
 8001ff8:	431bde83 	.word	0x431bde83
 8001ffc:	40012300 	.word	0x40012300
 8002000:	40012000 	.word	0x40012000

08002004 <HAL_ADCEx_InjectedConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfigInjected ADC configuration structure for injected channel. 
  * @retval None
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedConfigChannel(ADC_HandleTypeDef* hadc, ADC_InjectionConfTypeDef* sConfigInjected)
{
 8002004:	b480      	push	{r7}
 8002006:	b085      	sub	sp, #20
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
 800200c:	6039      	str	r1, [r7, #0]
  {
    assert_param(IS_ADC_EXT_INJEC_TRIG_EDGE(sConfigInjected->ExternalTrigInjecConvEdge));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002014:	2b01      	cmp	r3, #1
 8002016:	d101      	bne.n	800201c <HAL_ADCEx_InjectedConfigChannel+0x18>
 8002018:	2302      	movs	r3, #2
 800201a:	e17d      	b.n	8002318 <HAL_ADCEx_InjectedConfigChannel+0x314>
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	2201      	movs	r2, #1
 8002020:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfigInjected->InjectedChannel > ADC_CHANNEL_9)
 8002024:	683b      	ldr	r3, [r7, #0]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	2b09      	cmp	r3, #9
 800202a:	d925      	bls.n	8002078 <HAL_ADCEx_InjectedConfigChannel+0x74>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfigInjected->InjectedChannel);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	68d9      	ldr	r1, [r3, #12]
 8002032:	683b      	ldr	r3, [r7, #0]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	b29b      	uxth	r3, r3
 8002038:	461a      	mov	r2, r3
 800203a:	4613      	mov	r3, r2
 800203c:	005b      	lsls	r3, r3, #1
 800203e:	4413      	add	r3, r2
 8002040:	3b1e      	subs	r3, #30
 8002042:	2207      	movs	r2, #7
 8002044:	fa02 f303 	lsl.w	r3, r2, r3
 8002048:	43da      	mvns	r2, r3
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	400a      	ands	r2, r1
 8002050:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel);
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	68d9      	ldr	r1, [r3, #12]
 8002058:	683b      	ldr	r3, [r7, #0]
 800205a:	689a      	ldr	r2, [r3, #8]
 800205c:	683b      	ldr	r3, [r7, #0]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	b29b      	uxth	r3, r3
 8002062:	4618      	mov	r0, r3
 8002064:	4603      	mov	r3, r0
 8002066:	005b      	lsls	r3, r3, #1
 8002068:	4403      	add	r3, r0
 800206a:	3b1e      	subs	r3, #30
 800206c:	409a      	lsls	r2, r3
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	430a      	orrs	r2, r1
 8002074:	60da      	str	r2, [r3, #12]
 8002076:	e022      	b.n	80020be <HAL_ADCEx_InjectedConfigChannel+0xba>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfigInjected->InjectedChannel);
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	6919      	ldr	r1, [r3, #16]
 800207e:	683b      	ldr	r3, [r7, #0]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	b29b      	uxth	r3, r3
 8002084:	461a      	mov	r2, r3
 8002086:	4613      	mov	r3, r2
 8002088:	005b      	lsls	r3, r3, #1
 800208a:	4413      	add	r3, r2
 800208c:	2207      	movs	r2, #7
 800208e:	fa02 f303 	lsl.w	r3, r2, r3
 8002092:	43da      	mvns	r2, r3
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	400a      	ands	r2, r1
 800209a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	6919      	ldr	r1, [r3, #16]
 80020a2:	683b      	ldr	r3, [r7, #0]
 80020a4:	689a      	ldr	r2, [r3, #8]
 80020a6:	683b      	ldr	r3, [r7, #0]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	b29b      	uxth	r3, r3
 80020ac:	4618      	mov	r0, r3
 80020ae:	4603      	mov	r3, r0
 80020b0:	005b      	lsls	r3, r3, #1
 80020b2:	4403      	add	r3, r0
 80020b4:	409a      	lsls	r2, r3
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	430a      	orrs	r2, r1
 80020bc:	611a      	str	r2, [r3, #16]
  }
  
  /*---------------------------- ADCx JSQR Configuration -----------------*/
  hadc->Instance->JSQR &= ~(ADC_JSQR_JL);
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 80020cc:	639a      	str	r2, [r3, #56]	; 0x38
  hadc->Instance->JSQR |=  ADC_SQR1(sConfigInjected->InjectedNbrOfConversion);
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80020d4:	683b      	ldr	r3, [r7, #0]
 80020d6:	691b      	ldr	r3, [r3, #16]
 80020d8:	3b01      	subs	r3, #1
 80020da:	051a      	lsls	r2, r3, #20
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	430a      	orrs	r2, r1
 80020e2:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Rank configuration */
  
  /* Clear the old SQx bits for the selected rank */
  hadc->Instance->JSQR &= ~ADC_JSQR(ADC_JSQR_JSQ1, sConfigInjected->InjectedRank,sConfigInjected->InjectedNbrOfConversion);
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80020ea:	683b      	ldr	r3, [r7, #0]
 80020ec:	685b      	ldr	r3, [r3, #4]
 80020ee:	b2da      	uxtb	r2, r3
 80020f0:	683b      	ldr	r3, [r7, #0]
 80020f2:	691b      	ldr	r3, [r3, #16]
 80020f4:	b2db      	uxtb	r3, r3
 80020f6:	1ad3      	subs	r3, r2, r3
 80020f8:	b2db      	uxtb	r3, r3
 80020fa:	3303      	adds	r3, #3
 80020fc:	b2db      	uxtb	r3, r3
 80020fe:	461a      	mov	r2, r3
 8002100:	4613      	mov	r3, r2
 8002102:	009b      	lsls	r3, r3, #2
 8002104:	4413      	add	r3, r2
 8002106:	221f      	movs	r2, #31
 8002108:	fa02 f303 	lsl.w	r3, r2, r3
 800210c:	43da      	mvns	r2, r3
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	400a      	ands	r2, r1
 8002114:	639a      	str	r2, [r3, #56]	; 0x38
   
  /* Set the SQx bits for the selected rank */
  hadc->Instance->JSQR |= ADC_JSQR(sConfigInjected->InjectedChannel, sConfigInjected->InjectedRank,sConfigInjected->InjectedNbrOfConversion);
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	b29b      	uxth	r3, r3
 8002122:	4618      	mov	r0, r3
 8002124:	683b      	ldr	r3, [r7, #0]
 8002126:	685b      	ldr	r3, [r3, #4]
 8002128:	b2da      	uxtb	r2, r3
 800212a:	683b      	ldr	r3, [r7, #0]
 800212c:	691b      	ldr	r3, [r3, #16]
 800212e:	b2db      	uxtb	r3, r3
 8002130:	1ad3      	subs	r3, r2, r3
 8002132:	b2db      	uxtb	r3, r3
 8002134:	3303      	adds	r3, #3
 8002136:	b2db      	uxtb	r3, r3
 8002138:	461a      	mov	r2, r3
 800213a:	4613      	mov	r3, r2
 800213c:	009b      	lsls	r3, r3, #2
 800213e:	4413      	add	r3, r2
 8002140:	fa00 f203 	lsl.w	r2, r0, r3
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	430a      	orrs	r2, r1
 800214a:	639a      	str	r2, [r3, #56]	; 0x38
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */ 
  if(sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 800214c:	683b      	ldr	r3, [r7, #0]
 800214e:	699b      	ldr	r3, [r3, #24]
 8002150:	4a74      	ldr	r2, [pc, #464]	; (8002324 <HAL_ADCEx_InjectedConfigChannel+0x320>)
 8002152:	4293      	cmp	r3, r2
 8002154:	d022      	beq.n	800219c <HAL_ADCEx_InjectedConfigChannel+0x198>
  {  
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTSEL);
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	689a      	ldr	r2, [r3, #8]
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
 8002164:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |=  sConfigInjected->ExternalTrigInjecConv;
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	6899      	ldr	r1, [r3, #8]
 800216c:	683b      	ldr	r3, [r7, #0]
 800216e:	699a      	ldr	r2, [r3, #24]
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	430a      	orrs	r2, r1
 8002176:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTEN);
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	689a      	ldr	r2, [r3, #8]
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8002186:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= sConfigInjected->ExternalTrigInjecConvEdge;
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	6899      	ldr	r1, [r3, #8]
 800218e:	683b      	ldr	r3, [r7, #0]
 8002190:	69da      	ldr	r2, [r3, #28]
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	430a      	orrs	r2, r1
 8002198:	609a      	str	r2, [r3, #8]
 800219a:	e00f      	b.n	80021bc <HAL_ADCEx_InjectedConfigChannel+0x1b8>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTSEL);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	689a      	ldr	r2, [r3, #8]
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
 80021aa:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTEN);  
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	689a      	ldr	r2, [r3, #8]
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 80021ba:	609a      	str	r2, [r3, #8]
  }
  
  if (sConfigInjected->AutoInjectedConv != DISABLE)
 80021bc:	683b      	ldr	r3, [r7, #0]
 80021be:	7d5b      	ldrb	r3, [r3, #21]
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d008      	beq.n	80021d6 <HAL_ADCEx_InjectedConfigChannel+0x1d2>
  {
    /* Enable the selected ADC automatic injected group conversion */
    hadc->Instance->CR1 |= ADC_CR1_JAUTO;
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	685a      	ldr	r2, [r3, #4]
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80021d2:	605a      	str	r2, [r3, #4]
 80021d4:	e007      	b.n	80021e6 <HAL_ADCEx_InjectedConfigChannel+0x1e2>
  }
  else
  {
    /* Disable the selected ADC automatic injected group conversion */
    hadc->Instance->CR1 &= ~(ADC_CR1_JAUTO);
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	685a      	ldr	r2, [r3, #4]
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80021e4:	605a      	str	r2, [r3, #4]
  }
  
  if (sConfigInjected->InjectedDiscontinuousConvMode != DISABLE)
 80021e6:	683b      	ldr	r3, [r7, #0]
 80021e8:	7d1b      	ldrb	r3, [r3, #20]
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d008      	beq.n	8002200 <HAL_ADCEx_InjectedConfigChannel+0x1fc>
  {
    /* Enable the selected ADC injected discontinuous mode */
    hadc->Instance->CR1 |= ADC_CR1_JDISCEN;
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	685a      	ldr	r2, [r3, #4]
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80021fc:	605a      	str	r2, [r3, #4]
 80021fe:	e007      	b.n	8002210 <HAL_ADCEx_InjectedConfigChannel+0x20c>
  }
  else
  {
    /* Disable the selected ADC injected discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_JDISCEN);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	685a      	ldr	r2, [r3, #4]
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800220e:	605a      	str	r2, [r3, #4]
  }
  
  switch(sConfigInjected->InjectedRank)
 8002210:	683b      	ldr	r3, [r7, #0]
 8002212:	685b      	ldr	r3, [r3, #4]
 8002214:	2b03      	cmp	r3, #3
 8002216:	d02e      	beq.n	8002276 <HAL_ADCEx_InjectedConfigChannel+0x272>
 8002218:	2b03      	cmp	r3, #3
 800221a:	d840      	bhi.n	800229e <HAL_ADCEx_InjectedConfigChannel+0x29a>
 800221c:	2b01      	cmp	r3, #1
 800221e:	d002      	beq.n	8002226 <HAL_ADCEx_InjectedConfigChannel+0x222>
 8002220:	2b02      	cmp	r3, #2
 8002222:	d014      	beq.n	800224e <HAL_ADCEx_InjectedConfigChannel+0x24a>
 8002224:	e03b      	b.n	800229e <HAL_ADCEx_InjectedConfigChannel+0x29a>
  {
    case 1U:
      /* Set injected channel 1 offset */
      hadc->Instance->JOFR1 &= ~(ADC_JOFR1_JOFFSET1);
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	695b      	ldr	r3, [r3, #20]
 800222c:	687a      	ldr	r2, [r7, #4]
 800222e:	6812      	ldr	r2, [r2, #0]
 8002230:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8002234:	f023 030f 	bic.w	r3, r3, #15
 8002238:	6153      	str	r3, [r2, #20]
      hadc->Instance->JOFR1 |= sConfigInjected->InjectedOffset;
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	6959      	ldr	r1, [r3, #20]
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	68da      	ldr	r2, [r3, #12]
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	430a      	orrs	r2, r1
 800224a:	615a      	str	r2, [r3, #20]
      break;
 800224c:	e03b      	b.n	80022c6 <HAL_ADCEx_InjectedConfigChannel+0x2c2>
    case 2U:
      /* Set injected channel 2 offset */
      hadc->Instance->JOFR2 &= ~(ADC_JOFR2_JOFFSET2);
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	699b      	ldr	r3, [r3, #24]
 8002254:	687a      	ldr	r2, [r7, #4]
 8002256:	6812      	ldr	r2, [r2, #0]
 8002258:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800225c:	f023 030f 	bic.w	r3, r3, #15
 8002260:	6193      	str	r3, [r2, #24]
      hadc->Instance->JOFR2 |= sConfigInjected->InjectedOffset;
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	6999      	ldr	r1, [r3, #24]
 8002268:	683b      	ldr	r3, [r7, #0]
 800226a:	68da      	ldr	r2, [r3, #12]
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	430a      	orrs	r2, r1
 8002272:	619a      	str	r2, [r3, #24]
      break;
 8002274:	e027      	b.n	80022c6 <HAL_ADCEx_InjectedConfigChannel+0x2c2>
    case 3U:
      /* Set injected channel 3 offset */
      hadc->Instance->JOFR3 &= ~(ADC_JOFR3_JOFFSET3);
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	69db      	ldr	r3, [r3, #28]
 800227c:	687a      	ldr	r2, [r7, #4]
 800227e:	6812      	ldr	r2, [r2, #0]
 8002280:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8002284:	f023 030f 	bic.w	r3, r3, #15
 8002288:	61d3      	str	r3, [r2, #28]
      hadc->Instance->JOFR3 |= sConfigInjected->InjectedOffset;
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	69d9      	ldr	r1, [r3, #28]
 8002290:	683b      	ldr	r3, [r7, #0]
 8002292:	68da      	ldr	r2, [r3, #12]
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	430a      	orrs	r2, r1
 800229a:	61da      	str	r2, [r3, #28]
      break;
 800229c:	e013      	b.n	80022c6 <HAL_ADCEx_InjectedConfigChannel+0x2c2>
    default:
      /* Set injected channel 4 offset */
      hadc->Instance->JOFR4 &= ~(ADC_JOFR4_JOFFSET4);
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	6a1b      	ldr	r3, [r3, #32]
 80022a4:	687a      	ldr	r2, [r7, #4]
 80022a6:	6812      	ldr	r2, [r2, #0]
 80022a8:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80022ac:	f023 030f 	bic.w	r3, r3, #15
 80022b0:	6213      	str	r3, [r2, #32]
      hadc->Instance->JOFR4 |= sConfigInjected->InjectedOffset;
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	6a19      	ldr	r1, [r3, #32]
 80022b8:	683b      	ldr	r3, [r7, #0]
 80022ba:	68da      	ldr	r2, [r3, #12]
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	430a      	orrs	r2, r1
 80022c2:	621a      	str	r2, [r3, #32]
      break;
 80022c4:	bf00      	nop
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADC and 1 common */
  /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80022c6:	4b18      	ldr	r3, [pc, #96]	; (8002328 <HAL_ADCEx_InjectedConfigChannel+0x324>)
 80022c8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT))
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	4a17      	ldr	r2, [pc, #92]	; (800232c <HAL_ADCEx_InjectedConfigChannel+0x328>)
 80022d0:	4293      	cmp	r3, r2
 80022d2:	d109      	bne.n	80022e8 <HAL_ADCEx_InjectedConfigChannel+0x2e4>
 80022d4:	683b      	ldr	r3, [r7, #0]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	2b12      	cmp	r3, #18
 80022da:	d105      	bne.n	80022e8 <HAL_ADCEx_InjectedConfigChannel+0x2e4>
  {
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	685b      	ldr	r3, [r3, #4]
 80022e0:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) || (sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)))
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	4a0f      	ldr	r2, [pc, #60]	; (800232c <HAL_ADCEx_InjectedConfigChannel+0x328>)
 80022ee:	4293      	cmp	r3, r2
 80022f0:	d10d      	bne.n	800230e <HAL_ADCEx_InjectedConfigChannel+0x30a>
 80022f2:	683b      	ldr	r3, [r7, #0]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	2b10      	cmp	r3, #16
 80022f8:	d003      	beq.n	8002302 <HAL_ADCEx_InjectedConfigChannel+0x2fe>
 80022fa:	683b      	ldr	r3, [r7, #0]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	2b11      	cmp	r3, #17
 8002300:	d105      	bne.n	800230e <HAL_ADCEx_InjectedConfigChannel+0x30a>
  {
    /* Enable the TSVREFE channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	685b      	ldr	r3, [r3, #4]
 8002306:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	605a      	str	r2, [r3, #4]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	2200      	movs	r2, #0
 8002312:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002316:	2300      	movs	r3, #0
}
 8002318:	4618      	mov	r0, r3
 800231a:	3714      	adds	r7, #20
 800231c:	46bd      	mov	sp, r7
 800231e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002322:	4770      	bx	lr
 8002324:	000f0001 	.word	0x000f0001
 8002328:	40012300 	.word	0x40012300
 800232c:	40012000 	.word	0x40012000

08002330 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002330:	b480      	push	{r7}
 8002332:	b085      	sub	sp, #20
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	f003 0307 	and.w	r3, r3, #7
 800233e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002340:	4b0c      	ldr	r3, [pc, #48]	; (8002374 <__NVIC_SetPriorityGrouping+0x44>)
 8002342:	68db      	ldr	r3, [r3, #12]
 8002344:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002346:	68ba      	ldr	r2, [r7, #8]
 8002348:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800234c:	4013      	ands	r3, r2
 800234e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002354:	68bb      	ldr	r3, [r7, #8]
 8002356:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002358:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800235c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002360:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002362:	4a04      	ldr	r2, [pc, #16]	; (8002374 <__NVIC_SetPriorityGrouping+0x44>)
 8002364:	68bb      	ldr	r3, [r7, #8]
 8002366:	60d3      	str	r3, [r2, #12]
}
 8002368:	bf00      	nop
 800236a:	3714      	adds	r7, #20
 800236c:	46bd      	mov	sp, r7
 800236e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002372:	4770      	bx	lr
 8002374:	e000ed00 	.word	0xe000ed00

08002378 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002378:	b480      	push	{r7}
 800237a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800237c:	4b04      	ldr	r3, [pc, #16]	; (8002390 <__NVIC_GetPriorityGrouping+0x18>)
 800237e:	68db      	ldr	r3, [r3, #12]
 8002380:	0a1b      	lsrs	r3, r3, #8
 8002382:	f003 0307 	and.w	r3, r3, #7
}
 8002386:	4618      	mov	r0, r3
 8002388:	46bd      	mov	sp, r7
 800238a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238e:	4770      	bx	lr
 8002390:	e000ed00 	.word	0xe000ed00

08002394 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002394:	b480      	push	{r7}
 8002396:	b083      	sub	sp, #12
 8002398:	af00      	add	r7, sp, #0
 800239a:	4603      	mov	r3, r0
 800239c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800239e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	db0b      	blt.n	80023be <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80023a6:	79fb      	ldrb	r3, [r7, #7]
 80023a8:	f003 021f 	and.w	r2, r3, #31
 80023ac:	4907      	ldr	r1, [pc, #28]	; (80023cc <__NVIC_EnableIRQ+0x38>)
 80023ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023b2:	095b      	lsrs	r3, r3, #5
 80023b4:	2001      	movs	r0, #1
 80023b6:	fa00 f202 	lsl.w	r2, r0, r2
 80023ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80023be:	bf00      	nop
 80023c0:	370c      	adds	r7, #12
 80023c2:	46bd      	mov	sp, r7
 80023c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c8:	4770      	bx	lr
 80023ca:	bf00      	nop
 80023cc:	e000e100 	.word	0xe000e100

080023d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80023d0:	b480      	push	{r7}
 80023d2:	b083      	sub	sp, #12
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	4603      	mov	r3, r0
 80023d8:	6039      	str	r1, [r7, #0]
 80023da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	db0a      	blt.n	80023fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023e4:	683b      	ldr	r3, [r7, #0]
 80023e6:	b2da      	uxtb	r2, r3
 80023e8:	490c      	ldr	r1, [pc, #48]	; (800241c <__NVIC_SetPriority+0x4c>)
 80023ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023ee:	0112      	lsls	r2, r2, #4
 80023f0:	b2d2      	uxtb	r2, r2
 80023f2:	440b      	add	r3, r1
 80023f4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80023f8:	e00a      	b.n	8002410 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023fa:	683b      	ldr	r3, [r7, #0]
 80023fc:	b2da      	uxtb	r2, r3
 80023fe:	4908      	ldr	r1, [pc, #32]	; (8002420 <__NVIC_SetPriority+0x50>)
 8002400:	79fb      	ldrb	r3, [r7, #7]
 8002402:	f003 030f 	and.w	r3, r3, #15
 8002406:	3b04      	subs	r3, #4
 8002408:	0112      	lsls	r2, r2, #4
 800240a:	b2d2      	uxtb	r2, r2
 800240c:	440b      	add	r3, r1
 800240e:	761a      	strb	r2, [r3, #24]
}
 8002410:	bf00      	nop
 8002412:	370c      	adds	r7, #12
 8002414:	46bd      	mov	sp, r7
 8002416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241a:	4770      	bx	lr
 800241c:	e000e100 	.word	0xe000e100
 8002420:	e000ed00 	.word	0xe000ed00

08002424 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002424:	b480      	push	{r7}
 8002426:	b089      	sub	sp, #36	; 0x24
 8002428:	af00      	add	r7, sp, #0
 800242a:	60f8      	str	r0, [r7, #12]
 800242c:	60b9      	str	r1, [r7, #8]
 800242e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	f003 0307 	and.w	r3, r3, #7
 8002436:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002438:	69fb      	ldr	r3, [r7, #28]
 800243a:	f1c3 0307 	rsb	r3, r3, #7
 800243e:	2b04      	cmp	r3, #4
 8002440:	bf28      	it	cs
 8002442:	2304      	movcs	r3, #4
 8002444:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002446:	69fb      	ldr	r3, [r7, #28]
 8002448:	3304      	adds	r3, #4
 800244a:	2b06      	cmp	r3, #6
 800244c:	d902      	bls.n	8002454 <NVIC_EncodePriority+0x30>
 800244e:	69fb      	ldr	r3, [r7, #28]
 8002450:	3b03      	subs	r3, #3
 8002452:	e000      	b.n	8002456 <NVIC_EncodePriority+0x32>
 8002454:	2300      	movs	r3, #0
 8002456:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002458:	f04f 32ff 	mov.w	r2, #4294967295
 800245c:	69bb      	ldr	r3, [r7, #24]
 800245e:	fa02 f303 	lsl.w	r3, r2, r3
 8002462:	43da      	mvns	r2, r3
 8002464:	68bb      	ldr	r3, [r7, #8]
 8002466:	401a      	ands	r2, r3
 8002468:	697b      	ldr	r3, [r7, #20]
 800246a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800246c:	f04f 31ff 	mov.w	r1, #4294967295
 8002470:	697b      	ldr	r3, [r7, #20]
 8002472:	fa01 f303 	lsl.w	r3, r1, r3
 8002476:	43d9      	mvns	r1, r3
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800247c:	4313      	orrs	r3, r2
         );
}
 800247e:	4618      	mov	r0, r3
 8002480:	3724      	adds	r7, #36	; 0x24
 8002482:	46bd      	mov	sp, r7
 8002484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002488:	4770      	bx	lr
	...

0800248c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	b082      	sub	sp, #8
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	3b01      	subs	r3, #1
 8002498:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800249c:	d301      	bcc.n	80024a2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800249e:	2301      	movs	r3, #1
 80024a0:	e00f      	b.n	80024c2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80024a2:	4a0a      	ldr	r2, [pc, #40]	; (80024cc <SysTick_Config+0x40>)
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	3b01      	subs	r3, #1
 80024a8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80024aa:	210f      	movs	r1, #15
 80024ac:	f04f 30ff 	mov.w	r0, #4294967295
 80024b0:	f7ff ff8e 	bl	80023d0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80024b4:	4b05      	ldr	r3, [pc, #20]	; (80024cc <SysTick_Config+0x40>)
 80024b6:	2200      	movs	r2, #0
 80024b8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80024ba:	4b04      	ldr	r3, [pc, #16]	; (80024cc <SysTick_Config+0x40>)
 80024bc:	2207      	movs	r2, #7
 80024be:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80024c0:	2300      	movs	r3, #0
}
 80024c2:	4618      	mov	r0, r3
 80024c4:	3708      	adds	r7, #8
 80024c6:	46bd      	mov	sp, r7
 80024c8:	bd80      	pop	{r7, pc}
 80024ca:	bf00      	nop
 80024cc:	e000e010 	.word	0xe000e010

080024d0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	b082      	sub	sp, #8
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80024d8:	6878      	ldr	r0, [r7, #4]
 80024da:	f7ff ff29 	bl	8002330 <__NVIC_SetPriorityGrouping>
}
 80024de:	bf00      	nop
 80024e0:	3708      	adds	r7, #8
 80024e2:	46bd      	mov	sp, r7
 80024e4:	bd80      	pop	{r7, pc}

080024e6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80024e6:	b580      	push	{r7, lr}
 80024e8:	b086      	sub	sp, #24
 80024ea:	af00      	add	r7, sp, #0
 80024ec:	4603      	mov	r3, r0
 80024ee:	60b9      	str	r1, [r7, #8]
 80024f0:	607a      	str	r2, [r7, #4]
 80024f2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80024f4:	2300      	movs	r3, #0
 80024f6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80024f8:	f7ff ff3e 	bl	8002378 <__NVIC_GetPriorityGrouping>
 80024fc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80024fe:	687a      	ldr	r2, [r7, #4]
 8002500:	68b9      	ldr	r1, [r7, #8]
 8002502:	6978      	ldr	r0, [r7, #20]
 8002504:	f7ff ff8e 	bl	8002424 <NVIC_EncodePriority>
 8002508:	4602      	mov	r2, r0
 800250a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800250e:	4611      	mov	r1, r2
 8002510:	4618      	mov	r0, r3
 8002512:	f7ff ff5d 	bl	80023d0 <__NVIC_SetPriority>
}
 8002516:	bf00      	nop
 8002518:	3718      	adds	r7, #24
 800251a:	46bd      	mov	sp, r7
 800251c:	bd80      	pop	{r7, pc}

0800251e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800251e:	b580      	push	{r7, lr}
 8002520:	b082      	sub	sp, #8
 8002522:	af00      	add	r7, sp, #0
 8002524:	4603      	mov	r3, r0
 8002526:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002528:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800252c:	4618      	mov	r0, r3
 800252e:	f7ff ff31 	bl	8002394 <__NVIC_EnableIRQ>
}
 8002532:	bf00      	nop
 8002534:	3708      	adds	r7, #8
 8002536:	46bd      	mov	sp, r7
 8002538:	bd80      	pop	{r7, pc}

0800253a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800253a:	b580      	push	{r7, lr}
 800253c:	b082      	sub	sp, #8
 800253e:	af00      	add	r7, sp, #0
 8002540:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002542:	6878      	ldr	r0, [r7, #4]
 8002544:	f7ff ffa2 	bl	800248c <SysTick_Config>
 8002548:	4603      	mov	r3, r0
}
 800254a:	4618      	mov	r0, r3
 800254c:	3708      	adds	r7, #8
 800254e:	46bd      	mov	sp, r7
 8002550:	bd80      	pop	{r7, pc}
	...

08002554 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002554:	b480      	push	{r7}
 8002556:	b089      	sub	sp, #36	; 0x24
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
 800255c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800255e:	2300      	movs	r3, #0
 8002560:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002562:	2300      	movs	r3, #0
 8002564:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002566:	2300      	movs	r3, #0
 8002568:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800256a:	2300      	movs	r3, #0
 800256c:	61fb      	str	r3, [r7, #28]
 800256e:	e159      	b.n	8002824 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002570:	2201      	movs	r2, #1
 8002572:	69fb      	ldr	r3, [r7, #28]
 8002574:	fa02 f303 	lsl.w	r3, r2, r3
 8002578:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800257a:	683b      	ldr	r3, [r7, #0]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	697a      	ldr	r2, [r7, #20]
 8002580:	4013      	ands	r3, r2
 8002582:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002584:	693a      	ldr	r2, [r7, #16]
 8002586:	697b      	ldr	r3, [r7, #20]
 8002588:	429a      	cmp	r2, r3
 800258a:	f040 8148 	bne.w	800281e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800258e:	683b      	ldr	r3, [r7, #0]
 8002590:	685b      	ldr	r3, [r3, #4]
 8002592:	f003 0303 	and.w	r3, r3, #3
 8002596:	2b01      	cmp	r3, #1
 8002598:	d005      	beq.n	80025a6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800259a:	683b      	ldr	r3, [r7, #0]
 800259c:	685b      	ldr	r3, [r3, #4]
 800259e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80025a2:	2b02      	cmp	r3, #2
 80025a4:	d130      	bne.n	8002608 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	689b      	ldr	r3, [r3, #8]
 80025aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80025ac:	69fb      	ldr	r3, [r7, #28]
 80025ae:	005b      	lsls	r3, r3, #1
 80025b0:	2203      	movs	r2, #3
 80025b2:	fa02 f303 	lsl.w	r3, r2, r3
 80025b6:	43db      	mvns	r3, r3
 80025b8:	69ba      	ldr	r2, [r7, #24]
 80025ba:	4013      	ands	r3, r2
 80025bc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80025be:	683b      	ldr	r3, [r7, #0]
 80025c0:	68da      	ldr	r2, [r3, #12]
 80025c2:	69fb      	ldr	r3, [r7, #28]
 80025c4:	005b      	lsls	r3, r3, #1
 80025c6:	fa02 f303 	lsl.w	r3, r2, r3
 80025ca:	69ba      	ldr	r2, [r7, #24]
 80025cc:	4313      	orrs	r3, r2
 80025ce:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	69ba      	ldr	r2, [r7, #24]
 80025d4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	685b      	ldr	r3, [r3, #4]
 80025da:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80025dc:	2201      	movs	r2, #1
 80025de:	69fb      	ldr	r3, [r7, #28]
 80025e0:	fa02 f303 	lsl.w	r3, r2, r3
 80025e4:	43db      	mvns	r3, r3
 80025e6:	69ba      	ldr	r2, [r7, #24]
 80025e8:	4013      	ands	r3, r2
 80025ea:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80025ec:	683b      	ldr	r3, [r7, #0]
 80025ee:	685b      	ldr	r3, [r3, #4]
 80025f0:	091b      	lsrs	r3, r3, #4
 80025f2:	f003 0201 	and.w	r2, r3, #1
 80025f6:	69fb      	ldr	r3, [r7, #28]
 80025f8:	fa02 f303 	lsl.w	r3, r2, r3
 80025fc:	69ba      	ldr	r2, [r7, #24]
 80025fe:	4313      	orrs	r3, r2
 8002600:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	69ba      	ldr	r2, [r7, #24]
 8002606:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002608:	683b      	ldr	r3, [r7, #0]
 800260a:	685b      	ldr	r3, [r3, #4]
 800260c:	f003 0303 	and.w	r3, r3, #3
 8002610:	2b03      	cmp	r3, #3
 8002612:	d017      	beq.n	8002644 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	68db      	ldr	r3, [r3, #12]
 8002618:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800261a:	69fb      	ldr	r3, [r7, #28]
 800261c:	005b      	lsls	r3, r3, #1
 800261e:	2203      	movs	r2, #3
 8002620:	fa02 f303 	lsl.w	r3, r2, r3
 8002624:	43db      	mvns	r3, r3
 8002626:	69ba      	ldr	r2, [r7, #24]
 8002628:	4013      	ands	r3, r2
 800262a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800262c:	683b      	ldr	r3, [r7, #0]
 800262e:	689a      	ldr	r2, [r3, #8]
 8002630:	69fb      	ldr	r3, [r7, #28]
 8002632:	005b      	lsls	r3, r3, #1
 8002634:	fa02 f303 	lsl.w	r3, r2, r3
 8002638:	69ba      	ldr	r2, [r7, #24]
 800263a:	4313      	orrs	r3, r2
 800263c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	69ba      	ldr	r2, [r7, #24]
 8002642:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002644:	683b      	ldr	r3, [r7, #0]
 8002646:	685b      	ldr	r3, [r3, #4]
 8002648:	f003 0303 	and.w	r3, r3, #3
 800264c:	2b02      	cmp	r3, #2
 800264e:	d123      	bne.n	8002698 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002650:	69fb      	ldr	r3, [r7, #28]
 8002652:	08da      	lsrs	r2, r3, #3
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	3208      	adds	r2, #8
 8002658:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800265c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800265e:	69fb      	ldr	r3, [r7, #28]
 8002660:	f003 0307 	and.w	r3, r3, #7
 8002664:	009b      	lsls	r3, r3, #2
 8002666:	220f      	movs	r2, #15
 8002668:	fa02 f303 	lsl.w	r3, r2, r3
 800266c:	43db      	mvns	r3, r3
 800266e:	69ba      	ldr	r2, [r7, #24]
 8002670:	4013      	ands	r3, r2
 8002672:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	691a      	ldr	r2, [r3, #16]
 8002678:	69fb      	ldr	r3, [r7, #28]
 800267a:	f003 0307 	and.w	r3, r3, #7
 800267e:	009b      	lsls	r3, r3, #2
 8002680:	fa02 f303 	lsl.w	r3, r2, r3
 8002684:	69ba      	ldr	r2, [r7, #24]
 8002686:	4313      	orrs	r3, r2
 8002688:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800268a:	69fb      	ldr	r3, [r7, #28]
 800268c:	08da      	lsrs	r2, r3, #3
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	3208      	adds	r2, #8
 8002692:	69b9      	ldr	r1, [r7, #24]
 8002694:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800269e:	69fb      	ldr	r3, [r7, #28]
 80026a0:	005b      	lsls	r3, r3, #1
 80026a2:	2203      	movs	r2, #3
 80026a4:	fa02 f303 	lsl.w	r3, r2, r3
 80026a8:	43db      	mvns	r3, r3
 80026aa:	69ba      	ldr	r2, [r7, #24]
 80026ac:	4013      	ands	r3, r2
 80026ae:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80026b0:	683b      	ldr	r3, [r7, #0]
 80026b2:	685b      	ldr	r3, [r3, #4]
 80026b4:	f003 0203 	and.w	r2, r3, #3
 80026b8:	69fb      	ldr	r3, [r7, #28]
 80026ba:	005b      	lsls	r3, r3, #1
 80026bc:	fa02 f303 	lsl.w	r3, r2, r3
 80026c0:	69ba      	ldr	r2, [r7, #24]
 80026c2:	4313      	orrs	r3, r2
 80026c4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	69ba      	ldr	r2, [r7, #24]
 80026ca:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	685b      	ldr	r3, [r3, #4]
 80026d0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	f000 80a2 	beq.w	800281e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026da:	2300      	movs	r3, #0
 80026dc:	60fb      	str	r3, [r7, #12]
 80026de:	4b57      	ldr	r3, [pc, #348]	; (800283c <HAL_GPIO_Init+0x2e8>)
 80026e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026e2:	4a56      	ldr	r2, [pc, #344]	; (800283c <HAL_GPIO_Init+0x2e8>)
 80026e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80026e8:	6453      	str	r3, [r2, #68]	; 0x44
 80026ea:	4b54      	ldr	r3, [pc, #336]	; (800283c <HAL_GPIO_Init+0x2e8>)
 80026ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80026f2:	60fb      	str	r3, [r7, #12]
 80026f4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80026f6:	4a52      	ldr	r2, [pc, #328]	; (8002840 <HAL_GPIO_Init+0x2ec>)
 80026f8:	69fb      	ldr	r3, [r7, #28]
 80026fa:	089b      	lsrs	r3, r3, #2
 80026fc:	3302      	adds	r3, #2
 80026fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002702:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002704:	69fb      	ldr	r3, [r7, #28]
 8002706:	f003 0303 	and.w	r3, r3, #3
 800270a:	009b      	lsls	r3, r3, #2
 800270c:	220f      	movs	r2, #15
 800270e:	fa02 f303 	lsl.w	r3, r2, r3
 8002712:	43db      	mvns	r3, r3
 8002714:	69ba      	ldr	r2, [r7, #24]
 8002716:	4013      	ands	r3, r2
 8002718:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	4a49      	ldr	r2, [pc, #292]	; (8002844 <HAL_GPIO_Init+0x2f0>)
 800271e:	4293      	cmp	r3, r2
 8002720:	d019      	beq.n	8002756 <HAL_GPIO_Init+0x202>
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	4a48      	ldr	r2, [pc, #288]	; (8002848 <HAL_GPIO_Init+0x2f4>)
 8002726:	4293      	cmp	r3, r2
 8002728:	d013      	beq.n	8002752 <HAL_GPIO_Init+0x1fe>
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	4a47      	ldr	r2, [pc, #284]	; (800284c <HAL_GPIO_Init+0x2f8>)
 800272e:	4293      	cmp	r3, r2
 8002730:	d00d      	beq.n	800274e <HAL_GPIO_Init+0x1fa>
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	4a46      	ldr	r2, [pc, #280]	; (8002850 <HAL_GPIO_Init+0x2fc>)
 8002736:	4293      	cmp	r3, r2
 8002738:	d007      	beq.n	800274a <HAL_GPIO_Init+0x1f6>
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	4a45      	ldr	r2, [pc, #276]	; (8002854 <HAL_GPIO_Init+0x300>)
 800273e:	4293      	cmp	r3, r2
 8002740:	d101      	bne.n	8002746 <HAL_GPIO_Init+0x1f2>
 8002742:	2304      	movs	r3, #4
 8002744:	e008      	b.n	8002758 <HAL_GPIO_Init+0x204>
 8002746:	2307      	movs	r3, #7
 8002748:	e006      	b.n	8002758 <HAL_GPIO_Init+0x204>
 800274a:	2303      	movs	r3, #3
 800274c:	e004      	b.n	8002758 <HAL_GPIO_Init+0x204>
 800274e:	2302      	movs	r3, #2
 8002750:	e002      	b.n	8002758 <HAL_GPIO_Init+0x204>
 8002752:	2301      	movs	r3, #1
 8002754:	e000      	b.n	8002758 <HAL_GPIO_Init+0x204>
 8002756:	2300      	movs	r3, #0
 8002758:	69fa      	ldr	r2, [r7, #28]
 800275a:	f002 0203 	and.w	r2, r2, #3
 800275e:	0092      	lsls	r2, r2, #2
 8002760:	4093      	lsls	r3, r2
 8002762:	69ba      	ldr	r2, [r7, #24]
 8002764:	4313      	orrs	r3, r2
 8002766:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002768:	4935      	ldr	r1, [pc, #212]	; (8002840 <HAL_GPIO_Init+0x2ec>)
 800276a:	69fb      	ldr	r3, [r7, #28]
 800276c:	089b      	lsrs	r3, r3, #2
 800276e:	3302      	adds	r3, #2
 8002770:	69ba      	ldr	r2, [r7, #24]
 8002772:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002776:	4b38      	ldr	r3, [pc, #224]	; (8002858 <HAL_GPIO_Init+0x304>)
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800277c:	693b      	ldr	r3, [r7, #16]
 800277e:	43db      	mvns	r3, r3
 8002780:	69ba      	ldr	r2, [r7, #24]
 8002782:	4013      	ands	r3, r2
 8002784:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002786:	683b      	ldr	r3, [r7, #0]
 8002788:	685b      	ldr	r3, [r3, #4]
 800278a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800278e:	2b00      	cmp	r3, #0
 8002790:	d003      	beq.n	800279a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002792:	69ba      	ldr	r2, [r7, #24]
 8002794:	693b      	ldr	r3, [r7, #16]
 8002796:	4313      	orrs	r3, r2
 8002798:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800279a:	4a2f      	ldr	r2, [pc, #188]	; (8002858 <HAL_GPIO_Init+0x304>)
 800279c:	69bb      	ldr	r3, [r7, #24]
 800279e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80027a0:	4b2d      	ldr	r3, [pc, #180]	; (8002858 <HAL_GPIO_Init+0x304>)
 80027a2:	685b      	ldr	r3, [r3, #4]
 80027a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027a6:	693b      	ldr	r3, [r7, #16]
 80027a8:	43db      	mvns	r3, r3
 80027aa:	69ba      	ldr	r2, [r7, #24]
 80027ac:	4013      	ands	r3, r2
 80027ae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80027b0:	683b      	ldr	r3, [r7, #0]
 80027b2:	685b      	ldr	r3, [r3, #4]
 80027b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d003      	beq.n	80027c4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80027bc:	69ba      	ldr	r2, [r7, #24]
 80027be:	693b      	ldr	r3, [r7, #16]
 80027c0:	4313      	orrs	r3, r2
 80027c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80027c4:	4a24      	ldr	r2, [pc, #144]	; (8002858 <HAL_GPIO_Init+0x304>)
 80027c6:	69bb      	ldr	r3, [r7, #24]
 80027c8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80027ca:	4b23      	ldr	r3, [pc, #140]	; (8002858 <HAL_GPIO_Init+0x304>)
 80027cc:	689b      	ldr	r3, [r3, #8]
 80027ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027d0:	693b      	ldr	r3, [r7, #16]
 80027d2:	43db      	mvns	r3, r3
 80027d4:	69ba      	ldr	r2, [r7, #24]
 80027d6:	4013      	ands	r3, r2
 80027d8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80027da:	683b      	ldr	r3, [r7, #0]
 80027dc:	685b      	ldr	r3, [r3, #4]
 80027de:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d003      	beq.n	80027ee <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80027e6:	69ba      	ldr	r2, [r7, #24]
 80027e8:	693b      	ldr	r3, [r7, #16]
 80027ea:	4313      	orrs	r3, r2
 80027ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80027ee:	4a1a      	ldr	r2, [pc, #104]	; (8002858 <HAL_GPIO_Init+0x304>)
 80027f0:	69bb      	ldr	r3, [r7, #24]
 80027f2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80027f4:	4b18      	ldr	r3, [pc, #96]	; (8002858 <HAL_GPIO_Init+0x304>)
 80027f6:	68db      	ldr	r3, [r3, #12]
 80027f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027fa:	693b      	ldr	r3, [r7, #16]
 80027fc:	43db      	mvns	r3, r3
 80027fe:	69ba      	ldr	r2, [r7, #24]
 8002800:	4013      	ands	r3, r2
 8002802:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002804:	683b      	ldr	r3, [r7, #0]
 8002806:	685b      	ldr	r3, [r3, #4]
 8002808:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800280c:	2b00      	cmp	r3, #0
 800280e:	d003      	beq.n	8002818 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002810:	69ba      	ldr	r2, [r7, #24]
 8002812:	693b      	ldr	r3, [r7, #16]
 8002814:	4313      	orrs	r3, r2
 8002816:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002818:	4a0f      	ldr	r2, [pc, #60]	; (8002858 <HAL_GPIO_Init+0x304>)
 800281a:	69bb      	ldr	r3, [r7, #24]
 800281c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800281e:	69fb      	ldr	r3, [r7, #28]
 8002820:	3301      	adds	r3, #1
 8002822:	61fb      	str	r3, [r7, #28]
 8002824:	69fb      	ldr	r3, [r7, #28]
 8002826:	2b0f      	cmp	r3, #15
 8002828:	f67f aea2 	bls.w	8002570 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800282c:	bf00      	nop
 800282e:	bf00      	nop
 8002830:	3724      	adds	r7, #36	; 0x24
 8002832:	46bd      	mov	sp, r7
 8002834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002838:	4770      	bx	lr
 800283a:	bf00      	nop
 800283c:	40023800 	.word	0x40023800
 8002840:	40013800 	.word	0x40013800
 8002844:	40020000 	.word	0x40020000
 8002848:	40020400 	.word	0x40020400
 800284c:	40020800 	.word	0x40020800
 8002850:	40020c00 	.word	0x40020c00
 8002854:	40021000 	.word	0x40021000
 8002858:	40013c00 	.word	0x40013c00

0800285c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800285c:	b480      	push	{r7}
 800285e:	b083      	sub	sp, #12
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]
 8002864:	460b      	mov	r3, r1
 8002866:	807b      	strh	r3, [r7, #2]
 8002868:	4613      	mov	r3, r2
 800286a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800286c:	787b      	ldrb	r3, [r7, #1]
 800286e:	2b00      	cmp	r3, #0
 8002870:	d003      	beq.n	800287a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002872:	887a      	ldrh	r2, [r7, #2]
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002878:	e003      	b.n	8002882 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800287a:	887b      	ldrh	r3, [r7, #2]
 800287c:	041a      	lsls	r2, r3, #16
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	619a      	str	r2, [r3, #24]
}
 8002882:	bf00      	nop
 8002884:	370c      	adds	r7, #12
 8002886:	46bd      	mov	sp, r7
 8002888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288c:	4770      	bx	lr

0800288e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800288e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002890:	b08f      	sub	sp, #60	; 0x3c
 8002892:	af0a      	add	r7, sp, #40	; 0x28
 8002894:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	2b00      	cmp	r3, #0
 800289a:	d101      	bne.n	80028a0 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800289c:	2301      	movs	r3, #1
 800289e:	e10f      	b.n	8002ac0 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80028ac:	b2db      	uxtb	r3, r3
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d106      	bne.n	80028c0 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	2200      	movs	r2, #0
 80028b6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80028ba:	6878      	ldr	r0, [r7, #4]
 80028bc:	f006 f894 	bl	80089e8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	2203      	movs	r2, #3
 80028c4:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80028c8:	68bb      	ldr	r3, [r7, #8]
 80028ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d102      	bne.n	80028da <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	2200      	movs	r2, #0
 80028d8:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	4618      	mov	r0, r3
 80028e0:	f002 ff7f 	bl	80057e2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	603b      	str	r3, [r7, #0]
 80028ea:	687e      	ldr	r6, [r7, #4]
 80028ec:	466d      	mov	r5, sp
 80028ee:	f106 0410 	add.w	r4, r6, #16
 80028f2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80028f4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80028f6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80028f8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80028fa:	e894 0003 	ldmia.w	r4, {r0, r1}
 80028fe:	e885 0003 	stmia.w	r5, {r0, r1}
 8002902:	1d33      	adds	r3, r6, #4
 8002904:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002906:	6838      	ldr	r0, [r7, #0]
 8002908:	f002 fe56 	bl	80055b8 <USB_CoreInit>
 800290c:	4603      	mov	r3, r0
 800290e:	2b00      	cmp	r3, #0
 8002910:	d005      	beq.n	800291e <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	2202      	movs	r2, #2
 8002916:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800291a:	2301      	movs	r3, #1
 800291c:	e0d0      	b.n	8002ac0 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	2100      	movs	r1, #0
 8002924:	4618      	mov	r0, r3
 8002926:	f002 ff6d 	bl	8005804 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800292a:	2300      	movs	r3, #0
 800292c:	73fb      	strb	r3, [r7, #15]
 800292e:	e04a      	b.n	80029c6 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002930:	7bfa      	ldrb	r2, [r7, #15]
 8002932:	6879      	ldr	r1, [r7, #4]
 8002934:	4613      	mov	r3, r2
 8002936:	00db      	lsls	r3, r3, #3
 8002938:	1a9b      	subs	r3, r3, r2
 800293a:	009b      	lsls	r3, r3, #2
 800293c:	440b      	add	r3, r1
 800293e:	333d      	adds	r3, #61	; 0x3d
 8002940:	2201      	movs	r2, #1
 8002942:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002944:	7bfa      	ldrb	r2, [r7, #15]
 8002946:	6879      	ldr	r1, [r7, #4]
 8002948:	4613      	mov	r3, r2
 800294a:	00db      	lsls	r3, r3, #3
 800294c:	1a9b      	subs	r3, r3, r2
 800294e:	009b      	lsls	r3, r3, #2
 8002950:	440b      	add	r3, r1
 8002952:	333c      	adds	r3, #60	; 0x3c
 8002954:	7bfa      	ldrb	r2, [r7, #15]
 8002956:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002958:	7bfa      	ldrb	r2, [r7, #15]
 800295a:	7bfb      	ldrb	r3, [r7, #15]
 800295c:	b298      	uxth	r0, r3
 800295e:	6879      	ldr	r1, [r7, #4]
 8002960:	4613      	mov	r3, r2
 8002962:	00db      	lsls	r3, r3, #3
 8002964:	1a9b      	subs	r3, r3, r2
 8002966:	009b      	lsls	r3, r3, #2
 8002968:	440b      	add	r3, r1
 800296a:	3342      	adds	r3, #66	; 0x42
 800296c:	4602      	mov	r2, r0
 800296e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002970:	7bfa      	ldrb	r2, [r7, #15]
 8002972:	6879      	ldr	r1, [r7, #4]
 8002974:	4613      	mov	r3, r2
 8002976:	00db      	lsls	r3, r3, #3
 8002978:	1a9b      	subs	r3, r3, r2
 800297a:	009b      	lsls	r3, r3, #2
 800297c:	440b      	add	r3, r1
 800297e:	333f      	adds	r3, #63	; 0x3f
 8002980:	2200      	movs	r2, #0
 8002982:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002984:	7bfa      	ldrb	r2, [r7, #15]
 8002986:	6879      	ldr	r1, [r7, #4]
 8002988:	4613      	mov	r3, r2
 800298a:	00db      	lsls	r3, r3, #3
 800298c:	1a9b      	subs	r3, r3, r2
 800298e:	009b      	lsls	r3, r3, #2
 8002990:	440b      	add	r3, r1
 8002992:	3344      	adds	r3, #68	; 0x44
 8002994:	2200      	movs	r2, #0
 8002996:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002998:	7bfa      	ldrb	r2, [r7, #15]
 800299a:	6879      	ldr	r1, [r7, #4]
 800299c:	4613      	mov	r3, r2
 800299e:	00db      	lsls	r3, r3, #3
 80029a0:	1a9b      	subs	r3, r3, r2
 80029a2:	009b      	lsls	r3, r3, #2
 80029a4:	440b      	add	r3, r1
 80029a6:	3348      	adds	r3, #72	; 0x48
 80029a8:	2200      	movs	r2, #0
 80029aa:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80029ac:	7bfa      	ldrb	r2, [r7, #15]
 80029ae:	6879      	ldr	r1, [r7, #4]
 80029b0:	4613      	mov	r3, r2
 80029b2:	00db      	lsls	r3, r3, #3
 80029b4:	1a9b      	subs	r3, r3, r2
 80029b6:	009b      	lsls	r3, r3, #2
 80029b8:	440b      	add	r3, r1
 80029ba:	3350      	adds	r3, #80	; 0x50
 80029bc:	2200      	movs	r2, #0
 80029be:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80029c0:	7bfb      	ldrb	r3, [r7, #15]
 80029c2:	3301      	adds	r3, #1
 80029c4:	73fb      	strb	r3, [r7, #15]
 80029c6:	7bfa      	ldrb	r2, [r7, #15]
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	685b      	ldr	r3, [r3, #4]
 80029cc:	429a      	cmp	r2, r3
 80029ce:	d3af      	bcc.n	8002930 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80029d0:	2300      	movs	r3, #0
 80029d2:	73fb      	strb	r3, [r7, #15]
 80029d4:	e044      	b.n	8002a60 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80029d6:	7bfa      	ldrb	r2, [r7, #15]
 80029d8:	6879      	ldr	r1, [r7, #4]
 80029da:	4613      	mov	r3, r2
 80029dc:	00db      	lsls	r3, r3, #3
 80029de:	1a9b      	subs	r3, r3, r2
 80029e0:	009b      	lsls	r3, r3, #2
 80029e2:	440b      	add	r3, r1
 80029e4:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 80029e8:	2200      	movs	r2, #0
 80029ea:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80029ec:	7bfa      	ldrb	r2, [r7, #15]
 80029ee:	6879      	ldr	r1, [r7, #4]
 80029f0:	4613      	mov	r3, r2
 80029f2:	00db      	lsls	r3, r3, #3
 80029f4:	1a9b      	subs	r3, r3, r2
 80029f6:	009b      	lsls	r3, r3, #2
 80029f8:	440b      	add	r3, r1
 80029fa:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 80029fe:	7bfa      	ldrb	r2, [r7, #15]
 8002a00:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002a02:	7bfa      	ldrb	r2, [r7, #15]
 8002a04:	6879      	ldr	r1, [r7, #4]
 8002a06:	4613      	mov	r3, r2
 8002a08:	00db      	lsls	r3, r3, #3
 8002a0a:	1a9b      	subs	r3, r3, r2
 8002a0c:	009b      	lsls	r3, r3, #2
 8002a0e:	440b      	add	r3, r1
 8002a10:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8002a14:	2200      	movs	r2, #0
 8002a16:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002a18:	7bfa      	ldrb	r2, [r7, #15]
 8002a1a:	6879      	ldr	r1, [r7, #4]
 8002a1c:	4613      	mov	r3, r2
 8002a1e:	00db      	lsls	r3, r3, #3
 8002a20:	1a9b      	subs	r3, r3, r2
 8002a22:	009b      	lsls	r3, r3, #2
 8002a24:	440b      	add	r3, r1
 8002a26:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002a2e:	7bfa      	ldrb	r2, [r7, #15]
 8002a30:	6879      	ldr	r1, [r7, #4]
 8002a32:	4613      	mov	r3, r2
 8002a34:	00db      	lsls	r3, r3, #3
 8002a36:	1a9b      	subs	r3, r3, r2
 8002a38:	009b      	lsls	r3, r3, #2
 8002a3a:	440b      	add	r3, r1
 8002a3c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002a40:	2200      	movs	r2, #0
 8002a42:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002a44:	7bfa      	ldrb	r2, [r7, #15]
 8002a46:	6879      	ldr	r1, [r7, #4]
 8002a48:	4613      	mov	r3, r2
 8002a4a:	00db      	lsls	r3, r3, #3
 8002a4c:	1a9b      	subs	r3, r3, r2
 8002a4e:	009b      	lsls	r3, r3, #2
 8002a50:	440b      	add	r3, r1
 8002a52:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002a56:	2200      	movs	r2, #0
 8002a58:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002a5a:	7bfb      	ldrb	r3, [r7, #15]
 8002a5c:	3301      	adds	r3, #1
 8002a5e:	73fb      	strb	r3, [r7, #15]
 8002a60:	7bfa      	ldrb	r2, [r7, #15]
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	685b      	ldr	r3, [r3, #4]
 8002a66:	429a      	cmp	r2, r3
 8002a68:	d3b5      	bcc.n	80029d6 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	603b      	str	r3, [r7, #0]
 8002a70:	687e      	ldr	r6, [r7, #4]
 8002a72:	466d      	mov	r5, sp
 8002a74:	f106 0410 	add.w	r4, r6, #16
 8002a78:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002a7a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002a7c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002a7e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002a80:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002a84:	e885 0003 	stmia.w	r5, {r0, r1}
 8002a88:	1d33      	adds	r3, r6, #4
 8002a8a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002a8c:	6838      	ldr	r0, [r7, #0]
 8002a8e:	f002 ff05 	bl	800589c <USB_DevInit>
 8002a92:	4603      	mov	r3, r0
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d005      	beq.n	8002aa4 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	2202      	movs	r2, #2
 8002a9c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002aa0:	2301      	movs	r3, #1
 8002aa2:	e00d      	b.n	8002ac0 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	2201      	movs	r2, #1
 8002ab0:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	4618      	mov	r0, r3
 8002aba:	f003 ff81 	bl	80069c0 <USB_DevDisconnect>

  return HAL_OK;
 8002abe:	2300      	movs	r3, #0
}
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	3714      	adds	r7, #20
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002ac8 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	b084      	sub	sp, #16
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002adc:	2b01      	cmp	r3, #1
 8002ade:	d101      	bne.n	8002ae4 <HAL_PCD_Start+0x1c>
 8002ae0:	2302      	movs	r3, #2
 8002ae2:	e020      	b.n	8002b26 <HAL_PCD_Start+0x5e>
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	2201      	movs	r2, #1
 8002ae8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002af0:	2b01      	cmp	r3, #1
 8002af2:	d109      	bne.n	8002b08 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002af8:	2b01      	cmp	r3, #1
 8002afa:	d005      	beq.n	8002b08 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b00:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	f002 fe57 	bl	80057c0 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	4618      	mov	r0, r3
 8002b18:	f003 ff31 	bl	800697e <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	2200      	movs	r2, #0
 8002b20:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002b24:	2300      	movs	r3, #0
}
 8002b26:	4618      	mov	r0, r3
 8002b28:	3710      	adds	r7, #16
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	bd80      	pop	{r7, pc}

08002b2e <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002b2e:	b590      	push	{r4, r7, lr}
 8002b30:	b08d      	sub	sp, #52	; 0x34
 8002b32:	af00      	add	r7, sp, #0
 8002b34:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002b3c:	6a3b      	ldr	r3, [r7, #32]
 8002b3e:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t temp;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	4618      	mov	r0, r3
 8002b46:	f003 ffef 	bl	8006b28 <USB_GetMode>
 8002b4a:	4603      	mov	r3, r0
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	f040 839d 	bne.w	800328c <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	4618      	mov	r0, r3
 8002b58:	f003 ff53 	bl	8006a02 <USB_ReadInterrupts>
 8002b5c:	4603      	mov	r3, r0
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	f000 8393 	beq.w	800328a <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	4618      	mov	r0, r3
 8002b6a:	f003 ff4a 	bl	8006a02 <USB_ReadInterrupts>
 8002b6e:	4603      	mov	r3, r0
 8002b70:	f003 0302 	and.w	r3, r3, #2
 8002b74:	2b02      	cmp	r3, #2
 8002b76:	d107      	bne.n	8002b88 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	695a      	ldr	r2, [r3, #20]
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f002 0202 	and.w	r2, r2, #2
 8002b86:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	f003 ff38 	bl	8006a02 <USB_ReadInterrupts>
 8002b92:	4603      	mov	r3, r0
 8002b94:	f003 0310 	and.w	r3, r3, #16
 8002b98:	2b10      	cmp	r3, #16
 8002b9a:	d161      	bne.n	8002c60 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	699a      	ldr	r2, [r3, #24]
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f022 0210 	bic.w	r2, r2, #16
 8002baa:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8002bac:	6a3b      	ldr	r3, [r7, #32]
 8002bae:	6a1b      	ldr	r3, [r3, #32]
 8002bb0:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8002bb2:	69bb      	ldr	r3, [r7, #24]
 8002bb4:	f003 020f 	and.w	r2, r3, #15
 8002bb8:	4613      	mov	r3, r2
 8002bba:	00db      	lsls	r3, r3, #3
 8002bbc:	1a9b      	subs	r3, r3, r2
 8002bbe:	009b      	lsls	r3, r3, #2
 8002bc0:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002bc4:	687a      	ldr	r2, [r7, #4]
 8002bc6:	4413      	add	r3, r2
 8002bc8:	3304      	adds	r3, #4
 8002bca:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002bcc:	69bb      	ldr	r3, [r7, #24]
 8002bce:	0c5b      	lsrs	r3, r3, #17
 8002bd0:	f003 030f 	and.w	r3, r3, #15
 8002bd4:	2b02      	cmp	r3, #2
 8002bd6:	d124      	bne.n	8002c22 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002bd8:	69ba      	ldr	r2, [r7, #24]
 8002bda:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8002bde:	4013      	ands	r3, r2
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d035      	beq.n	8002c50 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002be4:	697b      	ldr	r3, [r7, #20]
 8002be6:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002be8:	69bb      	ldr	r3, [r7, #24]
 8002bea:	091b      	lsrs	r3, r3, #4
 8002bec:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002bee:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002bf2:	b29b      	uxth	r3, r3
 8002bf4:	461a      	mov	r2, r3
 8002bf6:	6a38      	ldr	r0, [r7, #32]
 8002bf8:	f003 fd6f 	bl	80066da <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002bfc:	697b      	ldr	r3, [r7, #20]
 8002bfe:	68da      	ldr	r2, [r3, #12]
 8002c00:	69bb      	ldr	r3, [r7, #24]
 8002c02:	091b      	lsrs	r3, r3, #4
 8002c04:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002c08:	441a      	add	r2, r3
 8002c0a:	697b      	ldr	r3, [r7, #20]
 8002c0c:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002c0e:	697b      	ldr	r3, [r7, #20]
 8002c10:	699a      	ldr	r2, [r3, #24]
 8002c12:	69bb      	ldr	r3, [r7, #24]
 8002c14:	091b      	lsrs	r3, r3, #4
 8002c16:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002c1a:	441a      	add	r2, r3
 8002c1c:	697b      	ldr	r3, [r7, #20]
 8002c1e:	619a      	str	r2, [r3, #24]
 8002c20:	e016      	b.n	8002c50 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8002c22:	69bb      	ldr	r3, [r7, #24]
 8002c24:	0c5b      	lsrs	r3, r3, #17
 8002c26:	f003 030f 	and.w	r3, r3, #15
 8002c2a:	2b06      	cmp	r3, #6
 8002c2c:	d110      	bne.n	8002c50 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002c34:	2208      	movs	r2, #8
 8002c36:	4619      	mov	r1, r3
 8002c38:	6a38      	ldr	r0, [r7, #32]
 8002c3a:	f003 fd4e 	bl	80066da <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002c3e:	697b      	ldr	r3, [r7, #20]
 8002c40:	699a      	ldr	r2, [r3, #24]
 8002c42:	69bb      	ldr	r3, [r7, #24]
 8002c44:	091b      	lsrs	r3, r3, #4
 8002c46:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002c4a:	441a      	add	r2, r3
 8002c4c:	697b      	ldr	r3, [r7, #20]
 8002c4e:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	699a      	ldr	r2, [r3, #24]
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f042 0210 	orr.w	r2, r2, #16
 8002c5e:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	4618      	mov	r0, r3
 8002c66:	f003 fecc 	bl	8006a02 <USB_ReadInterrupts>
 8002c6a:	4603      	mov	r3, r0
 8002c6c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002c70:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002c74:	d16e      	bne.n	8002d54 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8002c76:	2300      	movs	r3, #0
 8002c78:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	4618      	mov	r0, r3
 8002c80:	f003 fed2 	bl	8006a28 <USB_ReadDevAllOutEpInterrupt>
 8002c84:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8002c86:	e062      	b.n	8002d4e <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002c88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c8a:	f003 0301 	and.w	r3, r3, #1
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d057      	beq.n	8002d42 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c98:	b2d2      	uxtb	r2, r2
 8002c9a:	4611      	mov	r1, r2
 8002c9c:	4618      	mov	r0, r3
 8002c9e:	f003 fef7 	bl	8006a90 <USB_ReadDevOutEPInterrupt>
 8002ca2:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002ca4:	693b      	ldr	r3, [r7, #16]
 8002ca6:	f003 0301 	and.w	r3, r3, #1
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d00c      	beq.n	8002cc8 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002cae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cb0:	015a      	lsls	r2, r3, #5
 8002cb2:	69fb      	ldr	r3, [r7, #28]
 8002cb4:	4413      	add	r3, r2
 8002cb6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002cba:	461a      	mov	r2, r3
 8002cbc:	2301      	movs	r3, #1
 8002cbe:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002cc0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002cc2:	6878      	ldr	r0, [r7, #4]
 8002cc4:	f000 fdb0 	bl	8003828 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002cc8:	693b      	ldr	r3, [r7, #16]
 8002cca:	f003 0308 	and.w	r3, r3, #8
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d00c      	beq.n	8002cec <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002cd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cd4:	015a      	lsls	r2, r3, #5
 8002cd6:	69fb      	ldr	r3, [r7, #28]
 8002cd8:	4413      	add	r3, r2
 8002cda:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002cde:	461a      	mov	r2, r3
 8002ce0:	2308      	movs	r3, #8
 8002ce2:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002ce4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002ce6:	6878      	ldr	r0, [r7, #4]
 8002ce8:	f000 feaa 	bl	8003a40 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002cec:	693b      	ldr	r3, [r7, #16]
 8002cee:	f003 0310 	and.w	r3, r3, #16
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d008      	beq.n	8002d08 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002cf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cf8:	015a      	lsls	r2, r3, #5
 8002cfa:	69fb      	ldr	r3, [r7, #28]
 8002cfc:	4413      	add	r3, r2
 8002cfe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002d02:	461a      	mov	r2, r3
 8002d04:	2310      	movs	r3, #16
 8002d06:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002d08:	693b      	ldr	r3, [r7, #16]
 8002d0a:	f003 0320 	and.w	r3, r3, #32
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d008      	beq.n	8002d24 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002d12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d14:	015a      	lsls	r2, r3, #5
 8002d16:	69fb      	ldr	r3, [r7, #28]
 8002d18:	4413      	add	r3, r2
 8002d1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002d1e:	461a      	mov	r2, r3
 8002d20:	2320      	movs	r3, #32
 8002d22:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002d24:	693b      	ldr	r3, [r7, #16]
 8002d26:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d009      	beq.n	8002d42 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002d2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d30:	015a      	lsls	r2, r3, #5
 8002d32:	69fb      	ldr	r3, [r7, #28]
 8002d34:	4413      	add	r3, r2
 8002d36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002d3a:	461a      	mov	r2, r3
 8002d3c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002d40:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002d42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d44:	3301      	adds	r3, #1
 8002d46:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002d48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d4a:	085b      	lsrs	r3, r3, #1
 8002d4c:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002d4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d199      	bne.n	8002c88 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	4618      	mov	r0, r3
 8002d5a:	f003 fe52 	bl	8006a02 <USB_ReadInterrupts>
 8002d5e:	4603      	mov	r3, r0
 8002d60:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002d64:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002d68:	f040 80c0 	bne.w	8002eec <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	4618      	mov	r0, r3
 8002d72:	f003 fe73 	bl	8006a5c <USB_ReadDevAllInEpInterrupt>
 8002d76:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8002d78:	2300      	movs	r3, #0
 8002d7a:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8002d7c:	e0b2      	b.n	8002ee4 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002d7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d80:	f003 0301 	and.w	r3, r3, #1
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	f000 80a7 	beq.w	8002ed8 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d90:	b2d2      	uxtb	r2, r2
 8002d92:	4611      	mov	r1, r2
 8002d94:	4618      	mov	r0, r3
 8002d96:	f003 fe99 	bl	8006acc <USB_ReadDevInEPInterrupt>
 8002d9a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002d9c:	693b      	ldr	r3, [r7, #16]
 8002d9e:	f003 0301 	and.w	r3, r3, #1
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d057      	beq.n	8002e56 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002da6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002da8:	f003 030f 	and.w	r3, r3, #15
 8002dac:	2201      	movs	r2, #1
 8002dae:	fa02 f303 	lsl.w	r3, r2, r3
 8002db2:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002db4:	69fb      	ldr	r3, [r7, #28]
 8002db6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002dba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	43db      	mvns	r3, r3
 8002dc0:	69f9      	ldr	r1, [r7, #28]
 8002dc2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002dc6:	4013      	ands	r3, r2
 8002dc8:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002dca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dcc:	015a      	lsls	r2, r3, #5
 8002dce:	69fb      	ldr	r3, [r7, #28]
 8002dd0:	4413      	add	r3, r2
 8002dd2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002dd6:	461a      	mov	r2, r3
 8002dd8:	2301      	movs	r3, #1
 8002dda:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	691b      	ldr	r3, [r3, #16]
 8002de0:	2b01      	cmp	r3, #1
 8002de2:	d132      	bne.n	8002e4a <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002de4:	6879      	ldr	r1, [r7, #4]
 8002de6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002de8:	4613      	mov	r3, r2
 8002dea:	00db      	lsls	r3, r3, #3
 8002dec:	1a9b      	subs	r3, r3, r2
 8002dee:	009b      	lsls	r3, r3, #2
 8002df0:	440b      	add	r3, r1
 8002df2:	3348      	adds	r3, #72	; 0x48
 8002df4:	6819      	ldr	r1, [r3, #0]
 8002df6:	6878      	ldr	r0, [r7, #4]
 8002df8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002dfa:	4613      	mov	r3, r2
 8002dfc:	00db      	lsls	r3, r3, #3
 8002dfe:	1a9b      	subs	r3, r3, r2
 8002e00:	009b      	lsls	r3, r3, #2
 8002e02:	4403      	add	r3, r0
 8002e04:	3344      	adds	r3, #68	; 0x44
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	4419      	add	r1, r3
 8002e0a:	6878      	ldr	r0, [r7, #4]
 8002e0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e0e:	4613      	mov	r3, r2
 8002e10:	00db      	lsls	r3, r3, #3
 8002e12:	1a9b      	subs	r3, r3, r2
 8002e14:	009b      	lsls	r3, r3, #2
 8002e16:	4403      	add	r3, r0
 8002e18:	3348      	adds	r3, #72	; 0x48
 8002e1a:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002e1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d113      	bne.n	8002e4a <HAL_PCD_IRQHandler+0x31c>
 8002e22:	6879      	ldr	r1, [r7, #4]
 8002e24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e26:	4613      	mov	r3, r2
 8002e28:	00db      	lsls	r3, r3, #3
 8002e2a:	1a9b      	subs	r3, r3, r2
 8002e2c:	009b      	lsls	r3, r3, #2
 8002e2e:	440b      	add	r3, r1
 8002e30:	3350      	adds	r3, #80	; 0x50
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d108      	bne.n	8002e4a <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	6818      	ldr	r0, [r3, #0]
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002e42:	461a      	mov	r2, r3
 8002e44:	2101      	movs	r1, #1
 8002e46:	f003 fea1 	bl	8006b8c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002e4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e4c:	b2db      	uxtb	r3, r3
 8002e4e:	4619      	mov	r1, r3
 8002e50:	6878      	ldr	r0, [r7, #4]
 8002e52:	f005 fe4a 	bl	8008aea <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002e56:	693b      	ldr	r3, [r7, #16]
 8002e58:	f003 0308 	and.w	r3, r3, #8
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d008      	beq.n	8002e72 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002e60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e62:	015a      	lsls	r2, r3, #5
 8002e64:	69fb      	ldr	r3, [r7, #28]
 8002e66:	4413      	add	r3, r2
 8002e68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002e6c:	461a      	mov	r2, r3
 8002e6e:	2308      	movs	r3, #8
 8002e70:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002e72:	693b      	ldr	r3, [r7, #16]
 8002e74:	f003 0310 	and.w	r3, r3, #16
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d008      	beq.n	8002e8e <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002e7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e7e:	015a      	lsls	r2, r3, #5
 8002e80:	69fb      	ldr	r3, [r7, #28]
 8002e82:	4413      	add	r3, r2
 8002e84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002e88:	461a      	mov	r2, r3
 8002e8a:	2310      	movs	r3, #16
 8002e8c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002e8e:	693b      	ldr	r3, [r7, #16]
 8002e90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d008      	beq.n	8002eaa <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002e98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e9a:	015a      	lsls	r2, r3, #5
 8002e9c:	69fb      	ldr	r3, [r7, #28]
 8002e9e:	4413      	add	r3, r2
 8002ea0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002ea4:	461a      	mov	r2, r3
 8002ea6:	2340      	movs	r3, #64	; 0x40
 8002ea8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002eaa:	693b      	ldr	r3, [r7, #16]
 8002eac:	f003 0302 	and.w	r3, r3, #2
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d008      	beq.n	8002ec6 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002eb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eb6:	015a      	lsls	r2, r3, #5
 8002eb8:	69fb      	ldr	r3, [r7, #28]
 8002eba:	4413      	add	r3, r2
 8002ebc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002ec0:	461a      	mov	r2, r3
 8002ec2:	2302      	movs	r3, #2
 8002ec4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002ec6:	693b      	ldr	r3, [r7, #16]
 8002ec8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d003      	beq.n	8002ed8 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002ed0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002ed2:	6878      	ldr	r0, [r7, #4]
 8002ed4:	f000 fc1b 	bl	800370e <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002ed8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eda:	3301      	adds	r3, #1
 8002edc:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002ede:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ee0:	085b      	lsrs	r3, r3, #1
 8002ee2:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002ee4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	f47f af49 	bne.w	8002d7e <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	4618      	mov	r0, r3
 8002ef2:	f003 fd86 	bl	8006a02 <USB_ReadInterrupts>
 8002ef6:	4603      	mov	r3, r0
 8002ef8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002efc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002f00:	d122      	bne.n	8002f48 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002f02:	69fb      	ldr	r3, [r7, #28]
 8002f04:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002f08:	685b      	ldr	r3, [r3, #4]
 8002f0a:	69fa      	ldr	r2, [r7, #28]
 8002f0c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002f10:	f023 0301 	bic.w	r3, r3, #1
 8002f14:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8002f1c:	2b01      	cmp	r3, #1
 8002f1e:	d108      	bne.n	8002f32 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	2200      	movs	r2, #0
 8002f24:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002f28:	2100      	movs	r1, #0
 8002f2a:	6878      	ldr	r0, [r7, #4]
 8002f2c:	f000 fe26 	bl	8003b7c <HAL_PCDEx_LPM_Callback>
 8002f30:	e002      	b.n	8002f38 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002f32:	6878      	ldr	r0, [r7, #4]
 8002f34:	f005 fe50 	bl	8008bd8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	695a      	ldr	r2, [r3, #20]
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8002f46:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	4618      	mov	r0, r3
 8002f4e:	f003 fd58 	bl	8006a02 <USB_ReadInterrupts>
 8002f52:	4603      	mov	r3, r0
 8002f54:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002f58:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002f5c:	d112      	bne.n	8002f84 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002f5e:	69fb      	ldr	r3, [r7, #28]
 8002f60:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002f64:	689b      	ldr	r3, [r3, #8]
 8002f66:	f003 0301 	and.w	r3, r3, #1
 8002f6a:	2b01      	cmp	r3, #1
 8002f6c:	d102      	bne.n	8002f74 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002f6e:	6878      	ldr	r0, [r7, #4]
 8002f70:	f005 fe0c 	bl	8008b8c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	695a      	ldr	r2, [r3, #20]
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8002f82:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	4618      	mov	r0, r3
 8002f8a:	f003 fd3a 	bl	8006a02 <USB_ReadInterrupts>
 8002f8e:	4603      	mov	r3, r0
 8002f90:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002f94:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f98:	f040 80c7 	bne.w	800312a <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002f9c:	69fb      	ldr	r3, [r7, #28]
 8002f9e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002fa2:	685b      	ldr	r3, [r3, #4]
 8002fa4:	69fa      	ldr	r2, [r7, #28]
 8002fa6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002faa:	f023 0301 	bic.w	r3, r3, #1
 8002fae:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	2110      	movs	r1, #16
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	f002 fdd4 	bl	8005b64 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002fbc:	2300      	movs	r3, #0
 8002fbe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002fc0:	e056      	b.n	8003070 <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002fc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fc4:	015a      	lsls	r2, r3, #5
 8002fc6:	69fb      	ldr	r3, [r7, #28]
 8002fc8:	4413      	add	r3, r2
 8002fca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002fce:	461a      	mov	r2, r3
 8002fd0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002fd4:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002fd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fd8:	015a      	lsls	r2, r3, #5
 8002fda:	69fb      	ldr	r3, [r7, #28]
 8002fdc:	4413      	add	r3, r2
 8002fde:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002fe6:	0151      	lsls	r1, r2, #5
 8002fe8:	69fa      	ldr	r2, [r7, #28]
 8002fea:	440a      	add	r2, r1
 8002fec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002ff0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002ff4:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8002ff6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ff8:	015a      	lsls	r2, r3, #5
 8002ffa:	69fb      	ldr	r3, [r7, #28]
 8002ffc:	4413      	add	r3, r2
 8002ffe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003006:	0151      	lsls	r1, r2, #5
 8003008:	69fa      	ldr	r2, [r7, #28]
 800300a:	440a      	add	r2, r1
 800300c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003010:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003014:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003016:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003018:	015a      	lsls	r2, r3, #5
 800301a:	69fb      	ldr	r3, [r7, #28]
 800301c:	4413      	add	r3, r2
 800301e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003022:	461a      	mov	r2, r3
 8003024:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003028:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800302a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800302c:	015a      	lsls	r2, r3, #5
 800302e:	69fb      	ldr	r3, [r7, #28]
 8003030:	4413      	add	r3, r2
 8003032:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800303a:	0151      	lsls	r1, r2, #5
 800303c:	69fa      	ldr	r2, [r7, #28]
 800303e:	440a      	add	r2, r1
 8003040:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003044:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003048:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800304a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800304c:	015a      	lsls	r2, r3, #5
 800304e:	69fb      	ldr	r3, [r7, #28]
 8003050:	4413      	add	r3, r2
 8003052:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800305a:	0151      	lsls	r1, r2, #5
 800305c:	69fa      	ldr	r2, [r7, #28]
 800305e:	440a      	add	r2, r1
 8003060:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003064:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003068:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800306a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800306c:	3301      	adds	r3, #1
 800306e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	685b      	ldr	r3, [r3, #4]
 8003074:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003076:	429a      	cmp	r2, r3
 8003078:	d3a3      	bcc.n	8002fc2 <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800307a:	69fb      	ldr	r3, [r7, #28]
 800307c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003080:	69db      	ldr	r3, [r3, #28]
 8003082:	69fa      	ldr	r2, [r7, #28]
 8003084:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003088:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800308c:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003092:	2b00      	cmp	r3, #0
 8003094:	d016      	beq.n	80030c4 <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8003096:	69fb      	ldr	r3, [r7, #28]
 8003098:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800309c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80030a0:	69fa      	ldr	r2, [r7, #28]
 80030a2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80030a6:	f043 030b 	orr.w	r3, r3, #11
 80030aa:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80030ae:	69fb      	ldr	r3, [r7, #28]
 80030b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80030b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030b6:	69fa      	ldr	r2, [r7, #28]
 80030b8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80030bc:	f043 030b 	orr.w	r3, r3, #11
 80030c0:	6453      	str	r3, [r2, #68]	; 0x44
 80030c2:	e015      	b.n	80030f0 <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80030c4:	69fb      	ldr	r3, [r7, #28]
 80030c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80030ca:	695b      	ldr	r3, [r3, #20]
 80030cc:	69fa      	ldr	r2, [r7, #28]
 80030ce:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80030d2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80030d6:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80030da:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80030dc:	69fb      	ldr	r3, [r7, #28]
 80030de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80030e2:	691b      	ldr	r3, [r3, #16]
 80030e4:	69fa      	ldr	r2, [r7, #28]
 80030e6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80030ea:	f043 030b 	orr.w	r3, r3, #11
 80030ee:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80030f0:	69fb      	ldr	r3, [r7, #28]
 80030f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	69fa      	ldr	r2, [r7, #28]
 80030fa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80030fe:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8003102:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	6818      	ldr	r0, [r3, #0]
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	691b      	ldr	r3, [r3, #16]
 800310c:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003114:	461a      	mov	r2, r3
 8003116:	f003 fd39 	bl	8006b8c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	695a      	ldr	r2, [r3, #20]
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8003128:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	4618      	mov	r0, r3
 8003130:	f003 fc67 	bl	8006a02 <USB_ReadInterrupts>
 8003134:	4603      	mov	r3, r0
 8003136:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800313a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800313e:	d124      	bne.n	800318a <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	4618      	mov	r0, r3
 8003146:	f003 fcfd 	bl	8006b44 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	4618      	mov	r0, r3
 8003150:	f002 fd65 	bl	8005c1e <USB_GetDevSpeed>
 8003154:	4603      	mov	r3, r0
 8003156:	461a      	mov	r2, r3
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681c      	ldr	r4, [r3, #0]
 8003160:	f001 f958 	bl	8004414 <HAL_RCC_GetHCLKFreq>
 8003164:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800316a:	b2db      	uxtb	r3, r3
 800316c:	461a      	mov	r2, r3
 800316e:	4620      	mov	r0, r4
 8003170:	f002 fa84 	bl	800567c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003174:	6878      	ldr	r0, [r7, #4]
 8003176:	f005 fce0 	bl	8008b3a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	695a      	ldr	r2, [r3, #20]
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8003188:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	4618      	mov	r0, r3
 8003190:	f003 fc37 	bl	8006a02 <USB_ReadInterrupts>
 8003194:	4603      	mov	r3, r0
 8003196:	f003 0308 	and.w	r3, r3, #8
 800319a:	2b08      	cmp	r3, #8
 800319c:	d10a      	bne.n	80031b4 <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800319e:	6878      	ldr	r0, [r7, #4]
 80031a0:	f005 fcbd 	bl	8008b1e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	695a      	ldr	r2, [r3, #20]
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f002 0208 	and.w	r2, r2, #8
 80031b2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	4618      	mov	r0, r3
 80031ba:	f003 fc22 	bl	8006a02 <USB_ReadInterrupts>
 80031be:	4603      	mov	r3, r0
 80031c0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80031c4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80031c8:	d10f      	bne.n	80031ea <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80031ca:	2300      	movs	r3, #0
 80031cc:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80031ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031d0:	b2db      	uxtb	r3, r3
 80031d2:	4619      	mov	r1, r3
 80031d4:	6878      	ldr	r0, [r7, #4]
 80031d6:	f005 fd1f 	bl	8008c18 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	695a      	ldr	r2, [r3, #20]
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80031e8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	4618      	mov	r0, r3
 80031f0:	f003 fc07 	bl	8006a02 <USB_ReadInterrupts>
 80031f4:	4603      	mov	r3, r0
 80031f6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80031fa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80031fe:	d10f      	bne.n	8003220 <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8003200:	2300      	movs	r3, #0
 8003202:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8003204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003206:	b2db      	uxtb	r3, r3
 8003208:	4619      	mov	r1, r3
 800320a:	6878      	ldr	r0, [r7, #4]
 800320c:	f005 fcf2 	bl	8008bf4 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	695a      	ldr	r2, [r3, #20]
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800321e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	4618      	mov	r0, r3
 8003226:	f003 fbec 	bl	8006a02 <USB_ReadInterrupts>
 800322a:	4603      	mov	r3, r0
 800322c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003230:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003234:	d10a      	bne.n	800324c <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003236:	6878      	ldr	r0, [r7, #4]
 8003238:	f005 fd00 	bl	8008c3c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	695a      	ldr	r2, [r3, #20]
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800324a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	4618      	mov	r0, r3
 8003252:	f003 fbd6 	bl	8006a02 <USB_ReadInterrupts>
 8003256:	4603      	mov	r3, r0
 8003258:	f003 0304 	and.w	r3, r3, #4
 800325c:	2b04      	cmp	r3, #4
 800325e:	d115      	bne.n	800328c <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	685b      	ldr	r3, [r3, #4]
 8003266:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003268:	69bb      	ldr	r3, [r7, #24]
 800326a:	f003 0304 	and.w	r3, r3, #4
 800326e:	2b00      	cmp	r3, #0
 8003270:	d002      	beq.n	8003278 <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003272:	6878      	ldr	r0, [r7, #4]
 8003274:	f005 fcf0 	bl	8008c58 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	6859      	ldr	r1, [r3, #4]
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	69ba      	ldr	r2, [r7, #24]
 8003284:	430a      	orrs	r2, r1
 8003286:	605a      	str	r2, [r3, #4]
 8003288:	e000      	b.n	800328c <HAL_PCD_IRQHandler+0x75e>
      return;
 800328a:	bf00      	nop
    }
  }
}
 800328c:	3734      	adds	r7, #52	; 0x34
 800328e:	46bd      	mov	sp, r7
 8003290:	bd90      	pop	{r4, r7, pc}

08003292 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003292:	b580      	push	{r7, lr}
 8003294:	b082      	sub	sp, #8
 8003296:	af00      	add	r7, sp, #0
 8003298:	6078      	str	r0, [r7, #4]
 800329a:	460b      	mov	r3, r1
 800329c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80032a4:	2b01      	cmp	r3, #1
 80032a6:	d101      	bne.n	80032ac <HAL_PCD_SetAddress+0x1a>
 80032a8:	2302      	movs	r3, #2
 80032aa:	e013      	b.n	80032d4 <HAL_PCD_SetAddress+0x42>
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	2201      	movs	r2, #1
 80032b0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	78fa      	ldrb	r2, [r7, #3]
 80032b8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	78fa      	ldrb	r2, [r7, #3]
 80032c2:	4611      	mov	r1, r2
 80032c4:	4618      	mov	r0, r3
 80032c6:	f003 fb34 	bl	8006932 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	2200      	movs	r2, #0
 80032ce:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80032d2:	2300      	movs	r3, #0
}
 80032d4:	4618      	mov	r0, r3
 80032d6:	3708      	adds	r7, #8
 80032d8:	46bd      	mov	sp, r7
 80032da:	bd80      	pop	{r7, pc}

080032dc <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80032dc:	b580      	push	{r7, lr}
 80032de:	b084      	sub	sp, #16
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	6078      	str	r0, [r7, #4]
 80032e4:	4608      	mov	r0, r1
 80032e6:	4611      	mov	r1, r2
 80032e8:	461a      	mov	r2, r3
 80032ea:	4603      	mov	r3, r0
 80032ec:	70fb      	strb	r3, [r7, #3]
 80032ee:	460b      	mov	r3, r1
 80032f0:	803b      	strh	r3, [r7, #0]
 80032f2:	4613      	mov	r3, r2
 80032f4:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80032f6:	2300      	movs	r3, #0
 80032f8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80032fa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80032fe:	2b00      	cmp	r3, #0
 8003300:	da0f      	bge.n	8003322 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003302:	78fb      	ldrb	r3, [r7, #3]
 8003304:	f003 020f 	and.w	r2, r3, #15
 8003308:	4613      	mov	r3, r2
 800330a:	00db      	lsls	r3, r3, #3
 800330c:	1a9b      	subs	r3, r3, r2
 800330e:	009b      	lsls	r3, r3, #2
 8003310:	3338      	adds	r3, #56	; 0x38
 8003312:	687a      	ldr	r2, [r7, #4]
 8003314:	4413      	add	r3, r2
 8003316:	3304      	adds	r3, #4
 8003318:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	2201      	movs	r2, #1
 800331e:	705a      	strb	r2, [r3, #1]
 8003320:	e00f      	b.n	8003342 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003322:	78fb      	ldrb	r3, [r7, #3]
 8003324:	f003 020f 	and.w	r2, r3, #15
 8003328:	4613      	mov	r3, r2
 800332a:	00db      	lsls	r3, r3, #3
 800332c:	1a9b      	subs	r3, r3, r2
 800332e:	009b      	lsls	r3, r3, #2
 8003330:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003334:	687a      	ldr	r2, [r7, #4]
 8003336:	4413      	add	r3, r2
 8003338:	3304      	adds	r3, #4
 800333a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	2200      	movs	r2, #0
 8003340:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003342:	78fb      	ldrb	r3, [r7, #3]
 8003344:	f003 030f 	and.w	r3, r3, #15
 8003348:	b2da      	uxtb	r2, r3
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800334e:	883a      	ldrh	r2, [r7, #0]
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	78ba      	ldrb	r2, [r7, #2]
 8003358:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	785b      	ldrb	r3, [r3, #1]
 800335e:	2b00      	cmp	r3, #0
 8003360:	d004      	beq.n	800336c <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	781b      	ldrb	r3, [r3, #0]
 8003366:	b29a      	uxth	r2, r3
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800336c:	78bb      	ldrb	r3, [r7, #2]
 800336e:	2b02      	cmp	r3, #2
 8003370:	d102      	bne.n	8003378 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	2200      	movs	r2, #0
 8003376:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800337e:	2b01      	cmp	r3, #1
 8003380:	d101      	bne.n	8003386 <HAL_PCD_EP_Open+0xaa>
 8003382:	2302      	movs	r3, #2
 8003384:	e00e      	b.n	80033a4 <HAL_PCD_EP_Open+0xc8>
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	2201      	movs	r2, #1
 800338a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	68f9      	ldr	r1, [r7, #12]
 8003394:	4618      	mov	r0, r3
 8003396:	f002 fc67 	bl	8005c68 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	2200      	movs	r2, #0
 800339e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 80033a2:	7afb      	ldrb	r3, [r7, #11]
}
 80033a4:	4618      	mov	r0, r3
 80033a6:	3710      	adds	r7, #16
 80033a8:	46bd      	mov	sp, r7
 80033aa:	bd80      	pop	{r7, pc}

080033ac <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80033ac:	b580      	push	{r7, lr}
 80033ae:	b084      	sub	sp, #16
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	6078      	str	r0, [r7, #4]
 80033b4:	460b      	mov	r3, r1
 80033b6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80033b8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80033bc:	2b00      	cmp	r3, #0
 80033be:	da0f      	bge.n	80033e0 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80033c0:	78fb      	ldrb	r3, [r7, #3]
 80033c2:	f003 020f 	and.w	r2, r3, #15
 80033c6:	4613      	mov	r3, r2
 80033c8:	00db      	lsls	r3, r3, #3
 80033ca:	1a9b      	subs	r3, r3, r2
 80033cc:	009b      	lsls	r3, r3, #2
 80033ce:	3338      	adds	r3, #56	; 0x38
 80033d0:	687a      	ldr	r2, [r7, #4]
 80033d2:	4413      	add	r3, r2
 80033d4:	3304      	adds	r3, #4
 80033d6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	2201      	movs	r2, #1
 80033dc:	705a      	strb	r2, [r3, #1]
 80033de:	e00f      	b.n	8003400 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80033e0:	78fb      	ldrb	r3, [r7, #3]
 80033e2:	f003 020f 	and.w	r2, r3, #15
 80033e6:	4613      	mov	r3, r2
 80033e8:	00db      	lsls	r3, r3, #3
 80033ea:	1a9b      	subs	r3, r3, r2
 80033ec:	009b      	lsls	r3, r3, #2
 80033ee:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80033f2:	687a      	ldr	r2, [r7, #4]
 80033f4:	4413      	add	r3, r2
 80033f6:	3304      	adds	r3, #4
 80033f8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	2200      	movs	r2, #0
 80033fe:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8003400:	78fb      	ldrb	r3, [r7, #3]
 8003402:	f003 030f 	and.w	r3, r3, #15
 8003406:	b2da      	uxtb	r2, r3
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003412:	2b01      	cmp	r3, #1
 8003414:	d101      	bne.n	800341a <HAL_PCD_EP_Close+0x6e>
 8003416:	2302      	movs	r3, #2
 8003418:	e00e      	b.n	8003438 <HAL_PCD_EP_Close+0x8c>
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	2201      	movs	r2, #1
 800341e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	68f9      	ldr	r1, [r7, #12]
 8003428:	4618      	mov	r0, r3
 800342a:	f002 fca5 	bl	8005d78 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	2200      	movs	r2, #0
 8003432:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8003436:	2300      	movs	r3, #0
}
 8003438:	4618      	mov	r0, r3
 800343a:	3710      	adds	r7, #16
 800343c:	46bd      	mov	sp, r7
 800343e:	bd80      	pop	{r7, pc}

08003440 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003440:	b580      	push	{r7, lr}
 8003442:	b086      	sub	sp, #24
 8003444:	af00      	add	r7, sp, #0
 8003446:	60f8      	str	r0, [r7, #12]
 8003448:	607a      	str	r2, [r7, #4]
 800344a:	603b      	str	r3, [r7, #0]
 800344c:	460b      	mov	r3, r1
 800344e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003450:	7afb      	ldrb	r3, [r7, #11]
 8003452:	f003 020f 	and.w	r2, r3, #15
 8003456:	4613      	mov	r3, r2
 8003458:	00db      	lsls	r3, r3, #3
 800345a:	1a9b      	subs	r3, r3, r2
 800345c:	009b      	lsls	r3, r3, #2
 800345e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003462:	68fa      	ldr	r2, [r7, #12]
 8003464:	4413      	add	r3, r2
 8003466:	3304      	adds	r3, #4
 8003468:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800346a:	697b      	ldr	r3, [r7, #20]
 800346c:	687a      	ldr	r2, [r7, #4]
 800346e:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003470:	697b      	ldr	r3, [r7, #20]
 8003472:	683a      	ldr	r2, [r7, #0]
 8003474:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8003476:	697b      	ldr	r3, [r7, #20]
 8003478:	2200      	movs	r2, #0
 800347a:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 800347c:	697b      	ldr	r3, [r7, #20]
 800347e:	2200      	movs	r2, #0
 8003480:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003482:	7afb      	ldrb	r3, [r7, #11]
 8003484:	f003 030f 	and.w	r3, r3, #15
 8003488:	b2da      	uxtb	r2, r3
 800348a:	697b      	ldr	r3, [r7, #20]
 800348c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	691b      	ldr	r3, [r3, #16]
 8003492:	2b01      	cmp	r3, #1
 8003494:	d102      	bne.n	800349c <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003496:	687a      	ldr	r2, [r7, #4]
 8003498:	697b      	ldr	r3, [r7, #20]
 800349a:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800349c:	7afb      	ldrb	r3, [r7, #11]
 800349e:	f003 030f 	and.w	r3, r3, #15
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d109      	bne.n	80034ba <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	6818      	ldr	r0, [r3, #0]
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	691b      	ldr	r3, [r3, #16]
 80034ae:	b2db      	uxtb	r3, r3
 80034b0:	461a      	mov	r2, r3
 80034b2:	6979      	ldr	r1, [r7, #20]
 80034b4:	f002 ff80 	bl	80063b8 <USB_EP0StartXfer>
 80034b8:	e008      	b.n	80034cc <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	6818      	ldr	r0, [r3, #0]
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	691b      	ldr	r3, [r3, #16]
 80034c2:	b2db      	uxtb	r3, r3
 80034c4:	461a      	mov	r2, r3
 80034c6:	6979      	ldr	r1, [r7, #20]
 80034c8:	f002 fd32 	bl	8005f30 <USB_EPStartXfer>
  }

  return HAL_OK;
 80034cc:	2300      	movs	r3, #0
}
 80034ce:	4618      	mov	r0, r3
 80034d0:	3718      	adds	r7, #24
 80034d2:	46bd      	mov	sp, r7
 80034d4:	bd80      	pop	{r7, pc}

080034d6 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80034d6:	b480      	push	{r7}
 80034d8:	b083      	sub	sp, #12
 80034da:	af00      	add	r7, sp, #0
 80034dc:	6078      	str	r0, [r7, #4]
 80034de:	460b      	mov	r3, r1
 80034e0:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80034e2:	78fb      	ldrb	r3, [r7, #3]
 80034e4:	f003 020f 	and.w	r2, r3, #15
 80034e8:	6879      	ldr	r1, [r7, #4]
 80034ea:	4613      	mov	r3, r2
 80034ec:	00db      	lsls	r3, r3, #3
 80034ee:	1a9b      	subs	r3, r3, r2
 80034f0:	009b      	lsls	r3, r3, #2
 80034f2:	440b      	add	r3, r1
 80034f4:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80034f8:	681b      	ldr	r3, [r3, #0]
}
 80034fa:	4618      	mov	r0, r3
 80034fc:	370c      	adds	r7, #12
 80034fe:	46bd      	mov	sp, r7
 8003500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003504:	4770      	bx	lr

08003506 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003506:	b580      	push	{r7, lr}
 8003508:	b086      	sub	sp, #24
 800350a:	af00      	add	r7, sp, #0
 800350c:	60f8      	str	r0, [r7, #12]
 800350e:	607a      	str	r2, [r7, #4]
 8003510:	603b      	str	r3, [r7, #0]
 8003512:	460b      	mov	r3, r1
 8003514:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003516:	7afb      	ldrb	r3, [r7, #11]
 8003518:	f003 020f 	and.w	r2, r3, #15
 800351c:	4613      	mov	r3, r2
 800351e:	00db      	lsls	r3, r3, #3
 8003520:	1a9b      	subs	r3, r3, r2
 8003522:	009b      	lsls	r3, r3, #2
 8003524:	3338      	adds	r3, #56	; 0x38
 8003526:	68fa      	ldr	r2, [r7, #12]
 8003528:	4413      	add	r3, r2
 800352a:	3304      	adds	r3, #4
 800352c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800352e:	697b      	ldr	r3, [r7, #20]
 8003530:	687a      	ldr	r2, [r7, #4]
 8003532:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003534:	697b      	ldr	r3, [r7, #20]
 8003536:	683a      	ldr	r2, [r7, #0]
 8003538:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800353a:	697b      	ldr	r3, [r7, #20]
 800353c:	2200      	movs	r2, #0
 800353e:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8003540:	697b      	ldr	r3, [r7, #20]
 8003542:	2201      	movs	r2, #1
 8003544:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003546:	7afb      	ldrb	r3, [r7, #11]
 8003548:	f003 030f 	and.w	r3, r3, #15
 800354c:	b2da      	uxtb	r2, r3
 800354e:	697b      	ldr	r3, [r7, #20]
 8003550:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	691b      	ldr	r3, [r3, #16]
 8003556:	2b01      	cmp	r3, #1
 8003558:	d102      	bne.n	8003560 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800355a:	687a      	ldr	r2, [r7, #4]
 800355c:	697b      	ldr	r3, [r7, #20]
 800355e:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003560:	7afb      	ldrb	r3, [r7, #11]
 8003562:	f003 030f 	and.w	r3, r3, #15
 8003566:	2b00      	cmp	r3, #0
 8003568:	d109      	bne.n	800357e <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	6818      	ldr	r0, [r3, #0]
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	691b      	ldr	r3, [r3, #16]
 8003572:	b2db      	uxtb	r3, r3
 8003574:	461a      	mov	r2, r3
 8003576:	6979      	ldr	r1, [r7, #20]
 8003578:	f002 ff1e 	bl	80063b8 <USB_EP0StartXfer>
 800357c:	e008      	b.n	8003590 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	6818      	ldr	r0, [r3, #0]
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	691b      	ldr	r3, [r3, #16]
 8003586:	b2db      	uxtb	r3, r3
 8003588:	461a      	mov	r2, r3
 800358a:	6979      	ldr	r1, [r7, #20]
 800358c:	f002 fcd0 	bl	8005f30 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003590:	2300      	movs	r3, #0
}
 8003592:	4618      	mov	r0, r3
 8003594:	3718      	adds	r7, #24
 8003596:	46bd      	mov	sp, r7
 8003598:	bd80      	pop	{r7, pc}

0800359a <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800359a:	b580      	push	{r7, lr}
 800359c:	b084      	sub	sp, #16
 800359e:	af00      	add	r7, sp, #0
 80035a0:	6078      	str	r0, [r7, #4]
 80035a2:	460b      	mov	r3, r1
 80035a4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80035a6:	78fb      	ldrb	r3, [r7, #3]
 80035a8:	f003 020f 	and.w	r2, r3, #15
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	685b      	ldr	r3, [r3, #4]
 80035b0:	429a      	cmp	r2, r3
 80035b2:	d901      	bls.n	80035b8 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80035b4:	2301      	movs	r3, #1
 80035b6:	e050      	b.n	800365a <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80035b8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80035bc:	2b00      	cmp	r3, #0
 80035be:	da0f      	bge.n	80035e0 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80035c0:	78fb      	ldrb	r3, [r7, #3]
 80035c2:	f003 020f 	and.w	r2, r3, #15
 80035c6:	4613      	mov	r3, r2
 80035c8:	00db      	lsls	r3, r3, #3
 80035ca:	1a9b      	subs	r3, r3, r2
 80035cc:	009b      	lsls	r3, r3, #2
 80035ce:	3338      	adds	r3, #56	; 0x38
 80035d0:	687a      	ldr	r2, [r7, #4]
 80035d2:	4413      	add	r3, r2
 80035d4:	3304      	adds	r3, #4
 80035d6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	2201      	movs	r2, #1
 80035dc:	705a      	strb	r2, [r3, #1]
 80035de:	e00d      	b.n	80035fc <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80035e0:	78fa      	ldrb	r2, [r7, #3]
 80035e2:	4613      	mov	r3, r2
 80035e4:	00db      	lsls	r3, r3, #3
 80035e6:	1a9b      	subs	r3, r3, r2
 80035e8:	009b      	lsls	r3, r3, #2
 80035ea:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80035ee:	687a      	ldr	r2, [r7, #4]
 80035f0:	4413      	add	r3, r2
 80035f2:	3304      	adds	r3, #4
 80035f4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	2200      	movs	r2, #0
 80035fa:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	2201      	movs	r2, #1
 8003600:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003602:	78fb      	ldrb	r3, [r7, #3]
 8003604:	f003 030f 	and.w	r3, r3, #15
 8003608:	b2da      	uxtb	r2, r3
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003614:	2b01      	cmp	r3, #1
 8003616:	d101      	bne.n	800361c <HAL_PCD_EP_SetStall+0x82>
 8003618:	2302      	movs	r3, #2
 800361a:	e01e      	b.n	800365a <HAL_PCD_EP_SetStall+0xc0>
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	2201      	movs	r2, #1
 8003620:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	68f9      	ldr	r1, [r7, #12]
 800362a:	4618      	mov	r0, r3
 800362c:	f003 f8ad 	bl	800678a <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003630:	78fb      	ldrb	r3, [r7, #3]
 8003632:	f003 030f 	and.w	r3, r3, #15
 8003636:	2b00      	cmp	r3, #0
 8003638:	d10a      	bne.n	8003650 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	6818      	ldr	r0, [r3, #0]
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	691b      	ldr	r3, [r3, #16]
 8003642:	b2d9      	uxtb	r1, r3
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800364a:	461a      	mov	r2, r3
 800364c:	f003 fa9e 	bl	8006b8c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	2200      	movs	r2, #0
 8003654:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003658:	2300      	movs	r3, #0
}
 800365a:	4618      	mov	r0, r3
 800365c:	3710      	adds	r7, #16
 800365e:	46bd      	mov	sp, r7
 8003660:	bd80      	pop	{r7, pc}

08003662 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003662:	b580      	push	{r7, lr}
 8003664:	b084      	sub	sp, #16
 8003666:	af00      	add	r7, sp, #0
 8003668:	6078      	str	r0, [r7, #4]
 800366a:	460b      	mov	r3, r1
 800366c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800366e:	78fb      	ldrb	r3, [r7, #3]
 8003670:	f003 020f 	and.w	r2, r3, #15
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	685b      	ldr	r3, [r3, #4]
 8003678:	429a      	cmp	r2, r3
 800367a:	d901      	bls.n	8003680 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800367c:	2301      	movs	r3, #1
 800367e:	e042      	b.n	8003706 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003680:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003684:	2b00      	cmp	r3, #0
 8003686:	da0f      	bge.n	80036a8 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003688:	78fb      	ldrb	r3, [r7, #3]
 800368a:	f003 020f 	and.w	r2, r3, #15
 800368e:	4613      	mov	r3, r2
 8003690:	00db      	lsls	r3, r3, #3
 8003692:	1a9b      	subs	r3, r3, r2
 8003694:	009b      	lsls	r3, r3, #2
 8003696:	3338      	adds	r3, #56	; 0x38
 8003698:	687a      	ldr	r2, [r7, #4]
 800369a:	4413      	add	r3, r2
 800369c:	3304      	adds	r3, #4
 800369e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	2201      	movs	r2, #1
 80036a4:	705a      	strb	r2, [r3, #1]
 80036a6:	e00f      	b.n	80036c8 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80036a8:	78fb      	ldrb	r3, [r7, #3]
 80036aa:	f003 020f 	and.w	r2, r3, #15
 80036ae:	4613      	mov	r3, r2
 80036b0:	00db      	lsls	r3, r3, #3
 80036b2:	1a9b      	subs	r3, r3, r2
 80036b4:	009b      	lsls	r3, r3, #2
 80036b6:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80036ba:	687a      	ldr	r2, [r7, #4]
 80036bc:	4413      	add	r3, r2
 80036be:	3304      	adds	r3, #4
 80036c0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	2200      	movs	r2, #0
 80036c6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	2200      	movs	r2, #0
 80036cc:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80036ce:	78fb      	ldrb	r3, [r7, #3]
 80036d0:	f003 030f 	and.w	r3, r3, #15
 80036d4:	b2da      	uxtb	r2, r3
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80036e0:	2b01      	cmp	r3, #1
 80036e2:	d101      	bne.n	80036e8 <HAL_PCD_EP_ClrStall+0x86>
 80036e4:	2302      	movs	r3, #2
 80036e6:	e00e      	b.n	8003706 <HAL_PCD_EP_ClrStall+0xa4>
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	2201      	movs	r2, #1
 80036ec:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	68f9      	ldr	r1, [r7, #12]
 80036f6:	4618      	mov	r0, r3
 80036f8:	f003 f8b5 	bl	8006866 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	2200      	movs	r2, #0
 8003700:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003704:	2300      	movs	r3, #0
}
 8003706:	4618      	mov	r0, r3
 8003708:	3710      	adds	r7, #16
 800370a:	46bd      	mov	sp, r7
 800370c:	bd80      	pop	{r7, pc}

0800370e <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800370e:	b580      	push	{r7, lr}
 8003710:	b08a      	sub	sp, #40	; 0x28
 8003712:	af02      	add	r7, sp, #8
 8003714:	6078      	str	r0, [r7, #4]
 8003716:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800371e:	697b      	ldr	r3, [r7, #20]
 8003720:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003722:	683a      	ldr	r2, [r7, #0]
 8003724:	4613      	mov	r3, r2
 8003726:	00db      	lsls	r3, r3, #3
 8003728:	1a9b      	subs	r3, r3, r2
 800372a:	009b      	lsls	r3, r3, #2
 800372c:	3338      	adds	r3, #56	; 0x38
 800372e:	687a      	ldr	r2, [r7, #4]
 8003730:	4413      	add	r3, r2
 8003732:	3304      	adds	r3, #4
 8003734:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	699a      	ldr	r2, [r3, #24]
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	695b      	ldr	r3, [r3, #20]
 800373e:	429a      	cmp	r2, r3
 8003740:	d901      	bls.n	8003746 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003742:	2301      	movs	r3, #1
 8003744:	e06c      	b.n	8003820 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	695a      	ldr	r2, [r3, #20]
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	699b      	ldr	r3, [r3, #24]
 800374e:	1ad3      	subs	r3, r2, r3
 8003750:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	689b      	ldr	r3, [r3, #8]
 8003756:	69fa      	ldr	r2, [r7, #28]
 8003758:	429a      	cmp	r2, r3
 800375a:	d902      	bls.n	8003762 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	689b      	ldr	r3, [r3, #8]
 8003760:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003762:	69fb      	ldr	r3, [r7, #28]
 8003764:	3303      	adds	r3, #3
 8003766:	089b      	lsrs	r3, r3, #2
 8003768:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800376a:	e02b      	b.n	80037c4 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	695a      	ldr	r2, [r3, #20]
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	699b      	ldr	r3, [r3, #24]
 8003774:	1ad3      	subs	r3, r2, r3
 8003776:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	689b      	ldr	r3, [r3, #8]
 800377c:	69fa      	ldr	r2, [r7, #28]
 800377e:	429a      	cmp	r2, r3
 8003780:	d902      	bls.n	8003788 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	689b      	ldr	r3, [r3, #8]
 8003786:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003788:	69fb      	ldr	r3, [r7, #28]
 800378a:	3303      	adds	r3, #3
 800378c:	089b      	lsrs	r3, r3, #2
 800378e:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	68d9      	ldr	r1, [r3, #12]
 8003794:	683b      	ldr	r3, [r7, #0]
 8003796:	b2da      	uxtb	r2, r3
 8003798:	69fb      	ldr	r3, [r7, #28]
 800379a:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80037a0:	b2db      	uxtb	r3, r3
 80037a2:	9300      	str	r3, [sp, #0]
 80037a4:	4603      	mov	r3, r0
 80037a6:	6978      	ldr	r0, [r7, #20]
 80037a8:	f002 ff59 	bl	800665e <USB_WritePacket>

    ep->xfer_buff  += len;
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	68da      	ldr	r2, [r3, #12]
 80037b0:	69fb      	ldr	r3, [r7, #28]
 80037b2:	441a      	add	r2, r3
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	699a      	ldr	r2, [r3, #24]
 80037bc:	69fb      	ldr	r3, [r7, #28]
 80037be:	441a      	add	r2, r3
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80037c4:	683b      	ldr	r3, [r7, #0]
 80037c6:	015a      	lsls	r2, r3, #5
 80037c8:	693b      	ldr	r3, [r7, #16]
 80037ca:	4413      	add	r3, r2
 80037cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80037d0:	699b      	ldr	r3, [r3, #24]
 80037d2:	b29b      	uxth	r3, r3
 80037d4:	69ba      	ldr	r2, [r7, #24]
 80037d6:	429a      	cmp	r2, r3
 80037d8:	d809      	bhi.n	80037ee <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	699a      	ldr	r2, [r3, #24]
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80037e2:	429a      	cmp	r2, r3
 80037e4:	d203      	bcs.n	80037ee <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	695b      	ldr	r3, [r3, #20]
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d1be      	bne.n	800376c <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	695a      	ldr	r2, [r3, #20]
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	699b      	ldr	r3, [r3, #24]
 80037f6:	429a      	cmp	r2, r3
 80037f8:	d811      	bhi.n	800381e <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80037fa:	683b      	ldr	r3, [r7, #0]
 80037fc:	f003 030f 	and.w	r3, r3, #15
 8003800:	2201      	movs	r2, #1
 8003802:	fa02 f303 	lsl.w	r3, r2, r3
 8003806:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003808:	693b      	ldr	r3, [r7, #16]
 800380a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800380e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003810:	68bb      	ldr	r3, [r7, #8]
 8003812:	43db      	mvns	r3, r3
 8003814:	6939      	ldr	r1, [r7, #16]
 8003816:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800381a:	4013      	ands	r3, r2
 800381c:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800381e:	2300      	movs	r3, #0
}
 8003820:	4618      	mov	r0, r3
 8003822:	3720      	adds	r7, #32
 8003824:	46bd      	mov	sp, r7
 8003826:	bd80      	pop	{r7, pc}

08003828 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003828:	b580      	push	{r7, lr}
 800382a:	b086      	sub	sp, #24
 800382c:	af00      	add	r7, sp, #0
 800382e:	6078      	str	r0, [r7, #4]
 8003830:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003838:	697b      	ldr	r3, [r7, #20]
 800383a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800383c:	697b      	ldr	r3, [r7, #20]
 800383e:	333c      	adds	r3, #60	; 0x3c
 8003840:	3304      	adds	r3, #4
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003846:	683b      	ldr	r3, [r7, #0]
 8003848:	015a      	lsls	r2, r3, #5
 800384a:	693b      	ldr	r3, [r7, #16]
 800384c:	4413      	add	r3, r2
 800384e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003852:	689b      	ldr	r3, [r3, #8]
 8003854:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	691b      	ldr	r3, [r3, #16]
 800385a:	2b01      	cmp	r3, #1
 800385c:	f040 80a0 	bne.w	80039a0 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003860:	68bb      	ldr	r3, [r7, #8]
 8003862:	f003 0308 	and.w	r3, r3, #8
 8003866:	2b00      	cmp	r3, #0
 8003868:	d015      	beq.n	8003896 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	4a72      	ldr	r2, [pc, #456]	; (8003a38 <PCD_EP_OutXfrComplete_int+0x210>)
 800386e:	4293      	cmp	r3, r2
 8003870:	f240 80dd 	bls.w	8003a2e <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003874:	68bb      	ldr	r3, [r7, #8]
 8003876:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800387a:	2b00      	cmp	r3, #0
 800387c:	f000 80d7 	beq.w	8003a2e <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003880:	683b      	ldr	r3, [r7, #0]
 8003882:	015a      	lsls	r2, r3, #5
 8003884:	693b      	ldr	r3, [r7, #16]
 8003886:	4413      	add	r3, r2
 8003888:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800388c:	461a      	mov	r2, r3
 800388e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003892:	6093      	str	r3, [r2, #8]
 8003894:	e0cb      	b.n	8003a2e <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003896:	68bb      	ldr	r3, [r7, #8]
 8003898:	f003 0320 	and.w	r3, r3, #32
 800389c:	2b00      	cmp	r3, #0
 800389e:	d009      	beq.n	80038b4 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80038a0:	683b      	ldr	r3, [r7, #0]
 80038a2:	015a      	lsls	r2, r3, #5
 80038a4:	693b      	ldr	r3, [r7, #16]
 80038a6:	4413      	add	r3, r2
 80038a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80038ac:	461a      	mov	r2, r3
 80038ae:	2320      	movs	r3, #32
 80038b0:	6093      	str	r3, [r2, #8]
 80038b2:	e0bc      	b.n	8003a2e <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80038b4:	68bb      	ldr	r3, [r7, #8]
 80038b6:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	f040 80b7 	bne.w	8003a2e <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	4a5d      	ldr	r2, [pc, #372]	; (8003a38 <PCD_EP_OutXfrComplete_int+0x210>)
 80038c4:	4293      	cmp	r3, r2
 80038c6:	d90f      	bls.n	80038e8 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80038c8:	68bb      	ldr	r3, [r7, #8]
 80038ca:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d00a      	beq.n	80038e8 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80038d2:	683b      	ldr	r3, [r7, #0]
 80038d4:	015a      	lsls	r2, r3, #5
 80038d6:	693b      	ldr	r3, [r7, #16]
 80038d8:	4413      	add	r3, r2
 80038da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80038de:	461a      	mov	r2, r3
 80038e0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80038e4:	6093      	str	r3, [r2, #8]
 80038e6:	e0a2      	b.n	8003a2e <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 80038e8:	6879      	ldr	r1, [r7, #4]
 80038ea:	683a      	ldr	r2, [r7, #0]
 80038ec:	4613      	mov	r3, r2
 80038ee:	00db      	lsls	r3, r3, #3
 80038f0:	1a9b      	subs	r3, r3, r2
 80038f2:	009b      	lsls	r3, r3, #2
 80038f4:	440b      	add	r3, r1
 80038f6:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80038fa:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80038fc:	683b      	ldr	r3, [r7, #0]
 80038fe:	0159      	lsls	r1, r3, #5
 8003900:	693b      	ldr	r3, [r7, #16]
 8003902:	440b      	add	r3, r1
 8003904:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003908:	691b      	ldr	r3, [r3, #16]
 800390a:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 800390e:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8003910:	6878      	ldr	r0, [r7, #4]
 8003912:	683a      	ldr	r2, [r7, #0]
 8003914:	4613      	mov	r3, r2
 8003916:	00db      	lsls	r3, r3, #3
 8003918:	1a9b      	subs	r3, r3, r2
 800391a:	009b      	lsls	r3, r3, #2
 800391c:	4403      	add	r3, r0
 800391e:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8003922:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8003924:	6879      	ldr	r1, [r7, #4]
 8003926:	683a      	ldr	r2, [r7, #0]
 8003928:	4613      	mov	r3, r2
 800392a:	00db      	lsls	r3, r3, #3
 800392c:	1a9b      	subs	r3, r3, r2
 800392e:	009b      	lsls	r3, r3, #2
 8003930:	440b      	add	r3, r1
 8003932:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003936:	6819      	ldr	r1, [r3, #0]
 8003938:	6878      	ldr	r0, [r7, #4]
 800393a:	683a      	ldr	r2, [r7, #0]
 800393c:	4613      	mov	r3, r2
 800393e:	00db      	lsls	r3, r3, #3
 8003940:	1a9b      	subs	r3, r3, r2
 8003942:	009b      	lsls	r3, r3, #2
 8003944:	4403      	add	r3, r0
 8003946:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	4419      	add	r1, r3
 800394e:	6878      	ldr	r0, [r7, #4]
 8003950:	683a      	ldr	r2, [r7, #0]
 8003952:	4613      	mov	r3, r2
 8003954:	00db      	lsls	r3, r3, #3
 8003956:	1a9b      	subs	r3, r3, r2
 8003958:	009b      	lsls	r3, r3, #2
 800395a:	4403      	add	r3, r0
 800395c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003960:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003962:	683b      	ldr	r3, [r7, #0]
 8003964:	2b00      	cmp	r3, #0
 8003966:	d114      	bne.n	8003992 <PCD_EP_OutXfrComplete_int+0x16a>
 8003968:	6879      	ldr	r1, [r7, #4]
 800396a:	683a      	ldr	r2, [r7, #0]
 800396c:	4613      	mov	r3, r2
 800396e:	00db      	lsls	r3, r3, #3
 8003970:	1a9b      	subs	r3, r3, r2
 8003972:	009b      	lsls	r3, r3, #2
 8003974:	440b      	add	r3, r1
 8003976:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	2b00      	cmp	r3, #0
 800397e:	d108      	bne.n	8003992 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	6818      	ldr	r0, [r3, #0]
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800398a:	461a      	mov	r2, r3
 800398c:	2101      	movs	r1, #1
 800398e:	f003 f8fd 	bl	8006b8c <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003992:	683b      	ldr	r3, [r7, #0]
 8003994:	b2db      	uxtb	r3, r3
 8003996:	4619      	mov	r1, r3
 8003998:	6878      	ldr	r0, [r7, #4]
 800399a:	f005 f88b 	bl	8008ab4 <HAL_PCD_DataOutStageCallback>
 800399e:	e046      	b.n	8003a2e <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	4a26      	ldr	r2, [pc, #152]	; (8003a3c <PCD_EP_OutXfrComplete_int+0x214>)
 80039a4:	4293      	cmp	r3, r2
 80039a6:	d124      	bne.n	80039f2 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80039a8:	68bb      	ldr	r3, [r7, #8]
 80039aa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d00a      	beq.n	80039c8 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80039b2:	683b      	ldr	r3, [r7, #0]
 80039b4:	015a      	lsls	r2, r3, #5
 80039b6:	693b      	ldr	r3, [r7, #16]
 80039b8:	4413      	add	r3, r2
 80039ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80039be:	461a      	mov	r2, r3
 80039c0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80039c4:	6093      	str	r3, [r2, #8]
 80039c6:	e032      	b.n	8003a2e <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80039c8:	68bb      	ldr	r3, [r7, #8]
 80039ca:	f003 0320 	and.w	r3, r3, #32
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d008      	beq.n	80039e4 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80039d2:	683b      	ldr	r3, [r7, #0]
 80039d4:	015a      	lsls	r2, r3, #5
 80039d6:	693b      	ldr	r3, [r7, #16]
 80039d8:	4413      	add	r3, r2
 80039da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80039de:	461a      	mov	r2, r3
 80039e0:	2320      	movs	r3, #32
 80039e2:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80039e4:	683b      	ldr	r3, [r7, #0]
 80039e6:	b2db      	uxtb	r3, r3
 80039e8:	4619      	mov	r1, r3
 80039ea:	6878      	ldr	r0, [r7, #4]
 80039ec:	f005 f862 	bl	8008ab4 <HAL_PCD_DataOutStageCallback>
 80039f0:	e01d      	b.n	8003a2e <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80039f2:	683b      	ldr	r3, [r7, #0]
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d114      	bne.n	8003a22 <PCD_EP_OutXfrComplete_int+0x1fa>
 80039f8:	6879      	ldr	r1, [r7, #4]
 80039fa:	683a      	ldr	r2, [r7, #0]
 80039fc:	4613      	mov	r3, r2
 80039fe:	00db      	lsls	r3, r3, #3
 8003a00:	1a9b      	subs	r3, r3, r2
 8003a02:	009b      	lsls	r3, r3, #2
 8003a04:	440b      	add	r3, r1
 8003a06:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d108      	bne.n	8003a22 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	6818      	ldr	r0, [r3, #0]
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003a1a:	461a      	mov	r2, r3
 8003a1c:	2100      	movs	r1, #0
 8003a1e:	f003 f8b5 	bl	8006b8c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003a22:	683b      	ldr	r3, [r7, #0]
 8003a24:	b2db      	uxtb	r3, r3
 8003a26:	4619      	mov	r1, r3
 8003a28:	6878      	ldr	r0, [r7, #4]
 8003a2a:	f005 f843 	bl	8008ab4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003a2e:	2300      	movs	r3, #0
}
 8003a30:	4618      	mov	r0, r3
 8003a32:	3718      	adds	r7, #24
 8003a34:	46bd      	mov	sp, r7
 8003a36:	bd80      	pop	{r7, pc}
 8003a38:	4f54300a 	.word	0x4f54300a
 8003a3c:	4f54310a 	.word	0x4f54310a

08003a40 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003a40:	b580      	push	{r7, lr}
 8003a42:	b086      	sub	sp, #24
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	6078      	str	r0, [r7, #4]
 8003a48:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003a50:	697b      	ldr	r3, [r7, #20]
 8003a52:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003a54:	697b      	ldr	r3, [r7, #20]
 8003a56:	333c      	adds	r3, #60	; 0x3c
 8003a58:	3304      	adds	r3, #4
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003a5e:	683b      	ldr	r3, [r7, #0]
 8003a60:	015a      	lsls	r2, r3, #5
 8003a62:	693b      	ldr	r3, [r7, #16]
 8003a64:	4413      	add	r3, r2
 8003a66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a6a:	689b      	ldr	r3, [r3, #8]
 8003a6c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	4a15      	ldr	r2, [pc, #84]	; (8003ac8 <PCD_EP_OutSetupPacket_int+0x88>)
 8003a72:	4293      	cmp	r3, r2
 8003a74:	d90e      	bls.n	8003a94 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003a76:	68bb      	ldr	r3, [r7, #8]
 8003a78:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d009      	beq.n	8003a94 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003a80:	683b      	ldr	r3, [r7, #0]
 8003a82:	015a      	lsls	r2, r3, #5
 8003a84:	693b      	ldr	r3, [r7, #16]
 8003a86:	4413      	add	r3, r2
 8003a88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a8c:	461a      	mov	r2, r3
 8003a8e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003a92:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003a94:	6878      	ldr	r0, [r7, #4]
 8003a96:	f004 fffb 	bl	8008a90 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	4a0a      	ldr	r2, [pc, #40]	; (8003ac8 <PCD_EP_OutSetupPacket_int+0x88>)
 8003a9e:	4293      	cmp	r3, r2
 8003aa0:	d90c      	bls.n	8003abc <PCD_EP_OutSetupPacket_int+0x7c>
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	691b      	ldr	r3, [r3, #16]
 8003aa6:	2b01      	cmp	r3, #1
 8003aa8:	d108      	bne.n	8003abc <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	6818      	ldr	r0, [r3, #0]
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003ab4:	461a      	mov	r2, r3
 8003ab6:	2101      	movs	r1, #1
 8003ab8:	f003 f868 	bl	8006b8c <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003abc:	2300      	movs	r3, #0
}
 8003abe:	4618      	mov	r0, r3
 8003ac0:	3718      	adds	r7, #24
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	bd80      	pop	{r7, pc}
 8003ac6:	bf00      	nop
 8003ac8:	4f54300a 	.word	0x4f54300a

08003acc <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003acc:	b480      	push	{r7}
 8003ace:	b085      	sub	sp, #20
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	6078      	str	r0, [r7, #4]
 8003ad4:	460b      	mov	r3, r1
 8003ad6:	70fb      	strb	r3, [r7, #3]
 8003ad8:	4613      	mov	r3, r2
 8003ada:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ae2:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003ae4:	78fb      	ldrb	r3, [r7, #3]
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d107      	bne.n	8003afa <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003aea:	883b      	ldrh	r3, [r7, #0]
 8003aec:	0419      	lsls	r1, r3, #16
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	68ba      	ldr	r2, [r7, #8]
 8003af4:	430a      	orrs	r2, r1
 8003af6:	629a      	str	r2, [r3, #40]	; 0x28
 8003af8:	e028      	b.n	8003b4c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b00:	0c1b      	lsrs	r3, r3, #16
 8003b02:	68ba      	ldr	r2, [r7, #8]
 8003b04:	4413      	add	r3, r2
 8003b06:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003b08:	2300      	movs	r3, #0
 8003b0a:	73fb      	strb	r3, [r7, #15]
 8003b0c:	e00d      	b.n	8003b2a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681a      	ldr	r2, [r3, #0]
 8003b12:	7bfb      	ldrb	r3, [r7, #15]
 8003b14:	3340      	adds	r3, #64	; 0x40
 8003b16:	009b      	lsls	r3, r3, #2
 8003b18:	4413      	add	r3, r2
 8003b1a:	685b      	ldr	r3, [r3, #4]
 8003b1c:	0c1b      	lsrs	r3, r3, #16
 8003b1e:	68ba      	ldr	r2, [r7, #8]
 8003b20:	4413      	add	r3, r2
 8003b22:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003b24:	7bfb      	ldrb	r3, [r7, #15]
 8003b26:	3301      	adds	r3, #1
 8003b28:	73fb      	strb	r3, [r7, #15]
 8003b2a:	7bfa      	ldrb	r2, [r7, #15]
 8003b2c:	78fb      	ldrb	r3, [r7, #3]
 8003b2e:	3b01      	subs	r3, #1
 8003b30:	429a      	cmp	r2, r3
 8003b32:	d3ec      	bcc.n	8003b0e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003b34:	883b      	ldrh	r3, [r7, #0]
 8003b36:	0418      	lsls	r0, r3, #16
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	6819      	ldr	r1, [r3, #0]
 8003b3c:	78fb      	ldrb	r3, [r7, #3]
 8003b3e:	3b01      	subs	r3, #1
 8003b40:	68ba      	ldr	r2, [r7, #8]
 8003b42:	4302      	orrs	r2, r0
 8003b44:	3340      	adds	r3, #64	; 0x40
 8003b46:	009b      	lsls	r3, r3, #2
 8003b48:	440b      	add	r3, r1
 8003b4a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003b4c:	2300      	movs	r3, #0
}
 8003b4e:	4618      	mov	r0, r3
 8003b50:	3714      	adds	r7, #20
 8003b52:	46bd      	mov	sp, r7
 8003b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b58:	4770      	bx	lr

08003b5a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8003b5a:	b480      	push	{r7}
 8003b5c:	b083      	sub	sp, #12
 8003b5e:	af00      	add	r7, sp, #0
 8003b60:	6078      	str	r0, [r7, #4]
 8003b62:	460b      	mov	r3, r1
 8003b64:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	887a      	ldrh	r2, [r7, #2]
 8003b6c:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003b6e:	2300      	movs	r3, #0
}
 8003b70:	4618      	mov	r0, r3
 8003b72:	370c      	adds	r7, #12
 8003b74:	46bd      	mov	sp, r7
 8003b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7a:	4770      	bx	lr

08003b7c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003b7c:	b480      	push	{r7}
 8003b7e:	b083      	sub	sp, #12
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	6078      	str	r0, [r7, #4]
 8003b84:	460b      	mov	r3, r1
 8003b86:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003b88:	bf00      	nop
 8003b8a:	370c      	adds	r7, #12
 8003b8c:	46bd      	mov	sp, r7
 8003b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b92:	4770      	bx	lr

08003b94 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003b94:	b580      	push	{r7, lr}
 8003b96:	b086      	sub	sp, #24
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d101      	bne.n	8003ba6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003ba2:	2301      	movs	r3, #1
 8003ba4:	e264      	b.n	8004070 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f003 0301 	and.w	r3, r3, #1
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d075      	beq.n	8003c9e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003bb2:	4ba3      	ldr	r3, [pc, #652]	; (8003e40 <HAL_RCC_OscConfig+0x2ac>)
 8003bb4:	689b      	ldr	r3, [r3, #8]
 8003bb6:	f003 030c 	and.w	r3, r3, #12
 8003bba:	2b04      	cmp	r3, #4
 8003bbc:	d00c      	beq.n	8003bd8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003bbe:	4ba0      	ldr	r3, [pc, #640]	; (8003e40 <HAL_RCC_OscConfig+0x2ac>)
 8003bc0:	689b      	ldr	r3, [r3, #8]
 8003bc2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003bc6:	2b08      	cmp	r3, #8
 8003bc8:	d112      	bne.n	8003bf0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003bca:	4b9d      	ldr	r3, [pc, #628]	; (8003e40 <HAL_RCC_OscConfig+0x2ac>)
 8003bcc:	685b      	ldr	r3, [r3, #4]
 8003bce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003bd2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003bd6:	d10b      	bne.n	8003bf0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003bd8:	4b99      	ldr	r3, [pc, #612]	; (8003e40 <HAL_RCC_OscConfig+0x2ac>)
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d05b      	beq.n	8003c9c <HAL_RCC_OscConfig+0x108>
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	685b      	ldr	r3, [r3, #4]
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d157      	bne.n	8003c9c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003bec:	2301      	movs	r3, #1
 8003bee:	e23f      	b.n	8004070 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	685b      	ldr	r3, [r3, #4]
 8003bf4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003bf8:	d106      	bne.n	8003c08 <HAL_RCC_OscConfig+0x74>
 8003bfa:	4b91      	ldr	r3, [pc, #580]	; (8003e40 <HAL_RCC_OscConfig+0x2ac>)
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	4a90      	ldr	r2, [pc, #576]	; (8003e40 <HAL_RCC_OscConfig+0x2ac>)
 8003c00:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c04:	6013      	str	r3, [r2, #0]
 8003c06:	e01d      	b.n	8003c44 <HAL_RCC_OscConfig+0xb0>
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	685b      	ldr	r3, [r3, #4]
 8003c0c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003c10:	d10c      	bne.n	8003c2c <HAL_RCC_OscConfig+0x98>
 8003c12:	4b8b      	ldr	r3, [pc, #556]	; (8003e40 <HAL_RCC_OscConfig+0x2ac>)
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	4a8a      	ldr	r2, [pc, #552]	; (8003e40 <HAL_RCC_OscConfig+0x2ac>)
 8003c18:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003c1c:	6013      	str	r3, [r2, #0]
 8003c1e:	4b88      	ldr	r3, [pc, #544]	; (8003e40 <HAL_RCC_OscConfig+0x2ac>)
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	4a87      	ldr	r2, [pc, #540]	; (8003e40 <HAL_RCC_OscConfig+0x2ac>)
 8003c24:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c28:	6013      	str	r3, [r2, #0]
 8003c2a:	e00b      	b.n	8003c44 <HAL_RCC_OscConfig+0xb0>
 8003c2c:	4b84      	ldr	r3, [pc, #528]	; (8003e40 <HAL_RCC_OscConfig+0x2ac>)
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	4a83      	ldr	r2, [pc, #524]	; (8003e40 <HAL_RCC_OscConfig+0x2ac>)
 8003c32:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c36:	6013      	str	r3, [r2, #0]
 8003c38:	4b81      	ldr	r3, [pc, #516]	; (8003e40 <HAL_RCC_OscConfig+0x2ac>)
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	4a80      	ldr	r2, [pc, #512]	; (8003e40 <HAL_RCC_OscConfig+0x2ac>)
 8003c3e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003c42:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	685b      	ldr	r3, [r3, #4]
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d013      	beq.n	8003c74 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c4c:	f7fd fd18 	bl	8001680 <HAL_GetTick>
 8003c50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c52:	e008      	b.n	8003c66 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003c54:	f7fd fd14 	bl	8001680 <HAL_GetTick>
 8003c58:	4602      	mov	r2, r0
 8003c5a:	693b      	ldr	r3, [r7, #16]
 8003c5c:	1ad3      	subs	r3, r2, r3
 8003c5e:	2b64      	cmp	r3, #100	; 0x64
 8003c60:	d901      	bls.n	8003c66 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003c62:	2303      	movs	r3, #3
 8003c64:	e204      	b.n	8004070 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c66:	4b76      	ldr	r3, [pc, #472]	; (8003e40 <HAL_RCC_OscConfig+0x2ac>)
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d0f0      	beq.n	8003c54 <HAL_RCC_OscConfig+0xc0>
 8003c72:	e014      	b.n	8003c9e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c74:	f7fd fd04 	bl	8001680 <HAL_GetTick>
 8003c78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c7a:	e008      	b.n	8003c8e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003c7c:	f7fd fd00 	bl	8001680 <HAL_GetTick>
 8003c80:	4602      	mov	r2, r0
 8003c82:	693b      	ldr	r3, [r7, #16]
 8003c84:	1ad3      	subs	r3, r2, r3
 8003c86:	2b64      	cmp	r3, #100	; 0x64
 8003c88:	d901      	bls.n	8003c8e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003c8a:	2303      	movs	r3, #3
 8003c8c:	e1f0      	b.n	8004070 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c8e:	4b6c      	ldr	r3, [pc, #432]	; (8003e40 <HAL_RCC_OscConfig+0x2ac>)
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d1f0      	bne.n	8003c7c <HAL_RCC_OscConfig+0xe8>
 8003c9a:	e000      	b.n	8003c9e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c9c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f003 0302 	and.w	r3, r3, #2
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d063      	beq.n	8003d72 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003caa:	4b65      	ldr	r3, [pc, #404]	; (8003e40 <HAL_RCC_OscConfig+0x2ac>)
 8003cac:	689b      	ldr	r3, [r3, #8]
 8003cae:	f003 030c 	and.w	r3, r3, #12
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d00b      	beq.n	8003cce <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003cb6:	4b62      	ldr	r3, [pc, #392]	; (8003e40 <HAL_RCC_OscConfig+0x2ac>)
 8003cb8:	689b      	ldr	r3, [r3, #8]
 8003cba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003cbe:	2b08      	cmp	r3, #8
 8003cc0:	d11c      	bne.n	8003cfc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003cc2:	4b5f      	ldr	r3, [pc, #380]	; (8003e40 <HAL_RCC_OscConfig+0x2ac>)
 8003cc4:	685b      	ldr	r3, [r3, #4]
 8003cc6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d116      	bne.n	8003cfc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003cce:	4b5c      	ldr	r3, [pc, #368]	; (8003e40 <HAL_RCC_OscConfig+0x2ac>)
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f003 0302 	and.w	r3, r3, #2
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d005      	beq.n	8003ce6 <HAL_RCC_OscConfig+0x152>
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	68db      	ldr	r3, [r3, #12]
 8003cde:	2b01      	cmp	r3, #1
 8003ce0:	d001      	beq.n	8003ce6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003ce2:	2301      	movs	r3, #1
 8003ce4:	e1c4      	b.n	8004070 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ce6:	4b56      	ldr	r3, [pc, #344]	; (8003e40 <HAL_RCC_OscConfig+0x2ac>)
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	691b      	ldr	r3, [r3, #16]
 8003cf2:	00db      	lsls	r3, r3, #3
 8003cf4:	4952      	ldr	r1, [pc, #328]	; (8003e40 <HAL_RCC_OscConfig+0x2ac>)
 8003cf6:	4313      	orrs	r3, r2
 8003cf8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003cfa:	e03a      	b.n	8003d72 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	68db      	ldr	r3, [r3, #12]
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d020      	beq.n	8003d46 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003d04:	4b4f      	ldr	r3, [pc, #316]	; (8003e44 <HAL_RCC_OscConfig+0x2b0>)
 8003d06:	2201      	movs	r2, #1
 8003d08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d0a:	f7fd fcb9 	bl	8001680 <HAL_GetTick>
 8003d0e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d10:	e008      	b.n	8003d24 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003d12:	f7fd fcb5 	bl	8001680 <HAL_GetTick>
 8003d16:	4602      	mov	r2, r0
 8003d18:	693b      	ldr	r3, [r7, #16]
 8003d1a:	1ad3      	subs	r3, r2, r3
 8003d1c:	2b02      	cmp	r3, #2
 8003d1e:	d901      	bls.n	8003d24 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003d20:	2303      	movs	r3, #3
 8003d22:	e1a5      	b.n	8004070 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d24:	4b46      	ldr	r3, [pc, #280]	; (8003e40 <HAL_RCC_OscConfig+0x2ac>)
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	f003 0302 	and.w	r3, r3, #2
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d0f0      	beq.n	8003d12 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d30:	4b43      	ldr	r3, [pc, #268]	; (8003e40 <HAL_RCC_OscConfig+0x2ac>)
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	691b      	ldr	r3, [r3, #16]
 8003d3c:	00db      	lsls	r3, r3, #3
 8003d3e:	4940      	ldr	r1, [pc, #256]	; (8003e40 <HAL_RCC_OscConfig+0x2ac>)
 8003d40:	4313      	orrs	r3, r2
 8003d42:	600b      	str	r3, [r1, #0]
 8003d44:	e015      	b.n	8003d72 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003d46:	4b3f      	ldr	r3, [pc, #252]	; (8003e44 <HAL_RCC_OscConfig+0x2b0>)
 8003d48:	2200      	movs	r2, #0
 8003d4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d4c:	f7fd fc98 	bl	8001680 <HAL_GetTick>
 8003d50:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d52:	e008      	b.n	8003d66 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003d54:	f7fd fc94 	bl	8001680 <HAL_GetTick>
 8003d58:	4602      	mov	r2, r0
 8003d5a:	693b      	ldr	r3, [r7, #16]
 8003d5c:	1ad3      	subs	r3, r2, r3
 8003d5e:	2b02      	cmp	r3, #2
 8003d60:	d901      	bls.n	8003d66 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003d62:	2303      	movs	r3, #3
 8003d64:	e184      	b.n	8004070 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d66:	4b36      	ldr	r3, [pc, #216]	; (8003e40 <HAL_RCC_OscConfig+0x2ac>)
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f003 0302 	and.w	r3, r3, #2
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d1f0      	bne.n	8003d54 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f003 0308 	and.w	r3, r3, #8
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d030      	beq.n	8003de0 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	695b      	ldr	r3, [r3, #20]
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d016      	beq.n	8003db4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003d86:	4b30      	ldr	r3, [pc, #192]	; (8003e48 <HAL_RCC_OscConfig+0x2b4>)
 8003d88:	2201      	movs	r2, #1
 8003d8a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d8c:	f7fd fc78 	bl	8001680 <HAL_GetTick>
 8003d90:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d92:	e008      	b.n	8003da6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003d94:	f7fd fc74 	bl	8001680 <HAL_GetTick>
 8003d98:	4602      	mov	r2, r0
 8003d9a:	693b      	ldr	r3, [r7, #16]
 8003d9c:	1ad3      	subs	r3, r2, r3
 8003d9e:	2b02      	cmp	r3, #2
 8003da0:	d901      	bls.n	8003da6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003da2:	2303      	movs	r3, #3
 8003da4:	e164      	b.n	8004070 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003da6:	4b26      	ldr	r3, [pc, #152]	; (8003e40 <HAL_RCC_OscConfig+0x2ac>)
 8003da8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003daa:	f003 0302 	and.w	r3, r3, #2
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d0f0      	beq.n	8003d94 <HAL_RCC_OscConfig+0x200>
 8003db2:	e015      	b.n	8003de0 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003db4:	4b24      	ldr	r3, [pc, #144]	; (8003e48 <HAL_RCC_OscConfig+0x2b4>)
 8003db6:	2200      	movs	r2, #0
 8003db8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003dba:	f7fd fc61 	bl	8001680 <HAL_GetTick>
 8003dbe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003dc0:	e008      	b.n	8003dd4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003dc2:	f7fd fc5d 	bl	8001680 <HAL_GetTick>
 8003dc6:	4602      	mov	r2, r0
 8003dc8:	693b      	ldr	r3, [r7, #16]
 8003dca:	1ad3      	subs	r3, r2, r3
 8003dcc:	2b02      	cmp	r3, #2
 8003dce:	d901      	bls.n	8003dd4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003dd0:	2303      	movs	r3, #3
 8003dd2:	e14d      	b.n	8004070 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003dd4:	4b1a      	ldr	r3, [pc, #104]	; (8003e40 <HAL_RCC_OscConfig+0x2ac>)
 8003dd6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003dd8:	f003 0302 	and.w	r3, r3, #2
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d1f0      	bne.n	8003dc2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f003 0304 	and.w	r3, r3, #4
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	f000 80a0 	beq.w	8003f2e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003dee:	2300      	movs	r3, #0
 8003df0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003df2:	4b13      	ldr	r3, [pc, #76]	; (8003e40 <HAL_RCC_OscConfig+0x2ac>)
 8003df4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003df6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d10f      	bne.n	8003e1e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003dfe:	2300      	movs	r3, #0
 8003e00:	60bb      	str	r3, [r7, #8]
 8003e02:	4b0f      	ldr	r3, [pc, #60]	; (8003e40 <HAL_RCC_OscConfig+0x2ac>)
 8003e04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e06:	4a0e      	ldr	r2, [pc, #56]	; (8003e40 <HAL_RCC_OscConfig+0x2ac>)
 8003e08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e0c:	6413      	str	r3, [r2, #64]	; 0x40
 8003e0e:	4b0c      	ldr	r3, [pc, #48]	; (8003e40 <HAL_RCC_OscConfig+0x2ac>)
 8003e10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e16:	60bb      	str	r3, [r7, #8]
 8003e18:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003e1a:	2301      	movs	r3, #1
 8003e1c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e1e:	4b0b      	ldr	r3, [pc, #44]	; (8003e4c <HAL_RCC_OscConfig+0x2b8>)
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d121      	bne.n	8003e6e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003e2a:	4b08      	ldr	r3, [pc, #32]	; (8003e4c <HAL_RCC_OscConfig+0x2b8>)
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	4a07      	ldr	r2, [pc, #28]	; (8003e4c <HAL_RCC_OscConfig+0x2b8>)
 8003e30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e34:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003e36:	f7fd fc23 	bl	8001680 <HAL_GetTick>
 8003e3a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e3c:	e011      	b.n	8003e62 <HAL_RCC_OscConfig+0x2ce>
 8003e3e:	bf00      	nop
 8003e40:	40023800 	.word	0x40023800
 8003e44:	42470000 	.word	0x42470000
 8003e48:	42470e80 	.word	0x42470e80
 8003e4c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e50:	f7fd fc16 	bl	8001680 <HAL_GetTick>
 8003e54:	4602      	mov	r2, r0
 8003e56:	693b      	ldr	r3, [r7, #16]
 8003e58:	1ad3      	subs	r3, r2, r3
 8003e5a:	2b02      	cmp	r3, #2
 8003e5c:	d901      	bls.n	8003e62 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003e5e:	2303      	movs	r3, #3
 8003e60:	e106      	b.n	8004070 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e62:	4b85      	ldr	r3, [pc, #532]	; (8004078 <HAL_RCC_OscConfig+0x4e4>)
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d0f0      	beq.n	8003e50 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	689b      	ldr	r3, [r3, #8]
 8003e72:	2b01      	cmp	r3, #1
 8003e74:	d106      	bne.n	8003e84 <HAL_RCC_OscConfig+0x2f0>
 8003e76:	4b81      	ldr	r3, [pc, #516]	; (800407c <HAL_RCC_OscConfig+0x4e8>)
 8003e78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e7a:	4a80      	ldr	r2, [pc, #512]	; (800407c <HAL_RCC_OscConfig+0x4e8>)
 8003e7c:	f043 0301 	orr.w	r3, r3, #1
 8003e80:	6713      	str	r3, [r2, #112]	; 0x70
 8003e82:	e01c      	b.n	8003ebe <HAL_RCC_OscConfig+0x32a>
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	689b      	ldr	r3, [r3, #8]
 8003e88:	2b05      	cmp	r3, #5
 8003e8a:	d10c      	bne.n	8003ea6 <HAL_RCC_OscConfig+0x312>
 8003e8c:	4b7b      	ldr	r3, [pc, #492]	; (800407c <HAL_RCC_OscConfig+0x4e8>)
 8003e8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e90:	4a7a      	ldr	r2, [pc, #488]	; (800407c <HAL_RCC_OscConfig+0x4e8>)
 8003e92:	f043 0304 	orr.w	r3, r3, #4
 8003e96:	6713      	str	r3, [r2, #112]	; 0x70
 8003e98:	4b78      	ldr	r3, [pc, #480]	; (800407c <HAL_RCC_OscConfig+0x4e8>)
 8003e9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e9c:	4a77      	ldr	r2, [pc, #476]	; (800407c <HAL_RCC_OscConfig+0x4e8>)
 8003e9e:	f043 0301 	orr.w	r3, r3, #1
 8003ea2:	6713      	str	r3, [r2, #112]	; 0x70
 8003ea4:	e00b      	b.n	8003ebe <HAL_RCC_OscConfig+0x32a>
 8003ea6:	4b75      	ldr	r3, [pc, #468]	; (800407c <HAL_RCC_OscConfig+0x4e8>)
 8003ea8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003eaa:	4a74      	ldr	r2, [pc, #464]	; (800407c <HAL_RCC_OscConfig+0x4e8>)
 8003eac:	f023 0301 	bic.w	r3, r3, #1
 8003eb0:	6713      	str	r3, [r2, #112]	; 0x70
 8003eb2:	4b72      	ldr	r3, [pc, #456]	; (800407c <HAL_RCC_OscConfig+0x4e8>)
 8003eb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003eb6:	4a71      	ldr	r2, [pc, #452]	; (800407c <HAL_RCC_OscConfig+0x4e8>)
 8003eb8:	f023 0304 	bic.w	r3, r3, #4
 8003ebc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	689b      	ldr	r3, [r3, #8]
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d015      	beq.n	8003ef2 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ec6:	f7fd fbdb 	bl	8001680 <HAL_GetTick>
 8003eca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ecc:	e00a      	b.n	8003ee4 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003ece:	f7fd fbd7 	bl	8001680 <HAL_GetTick>
 8003ed2:	4602      	mov	r2, r0
 8003ed4:	693b      	ldr	r3, [r7, #16]
 8003ed6:	1ad3      	subs	r3, r2, r3
 8003ed8:	f241 3288 	movw	r2, #5000	; 0x1388
 8003edc:	4293      	cmp	r3, r2
 8003ede:	d901      	bls.n	8003ee4 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003ee0:	2303      	movs	r3, #3
 8003ee2:	e0c5      	b.n	8004070 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ee4:	4b65      	ldr	r3, [pc, #404]	; (800407c <HAL_RCC_OscConfig+0x4e8>)
 8003ee6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ee8:	f003 0302 	and.w	r3, r3, #2
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d0ee      	beq.n	8003ece <HAL_RCC_OscConfig+0x33a>
 8003ef0:	e014      	b.n	8003f1c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ef2:	f7fd fbc5 	bl	8001680 <HAL_GetTick>
 8003ef6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ef8:	e00a      	b.n	8003f10 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003efa:	f7fd fbc1 	bl	8001680 <HAL_GetTick>
 8003efe:	4602      	mov	r2, r0
 8003f00:	693b      	ldr	r3, [r7, #16]
 8003f02:	1ad3      	subs	r3, r2, r3
 8003f04:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f08:	4293      	cmp	r3, r2
 8003f0a:	d901      	bls.n	8003f10 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003f0c:	2303      	movs	r3, #3
 8003f0e:	e0af      	b.n	8004070 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f10:	4b5a      	ldr	r3, [pc, #360]	; (800407c <HAL_RCC_OscConfig+0x4e8>)
 8003f12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f14:	f003 0302 	and.w	r3, r3, #2
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d1ee      	bne.n	8003efa <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003f1c:	7dfb      	ldrb	r3, [r7, #23]
 8003f1e:	2b01      	cmp	r3, #1
 8003f20:	d105      	bne.n	8003f2e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f22:	4b56      	ldr	r3, [pc, #344]	; (800407c <HAL_RCC_OscConfig+0x4e8>)
 8003f24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f26:	4a55      	ldr	r2, [pc, #340]	; (800407c <HAL_RCC_OscConfig+0x4e8>)
 8003f28:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f2c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	699b      	ldr	r3, [r3, #24]
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	f000 809b 	beq.w	800406e <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003f38:	4b50      	ldr	r3, [pc, #320]	; (800407c <HAL_RCC_OscConfig+0x4e8>)
 8003f3a:	689b      	ldr	r3, [r3, #8]
 8003f3c:	f003 030c 	and.w	r3, r3, #12
 8003f40:	2b08      	cmp	r3, #8
 8003f42:	d05c      	beq.n	8003ffe <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	699b      	ldr	r3, [r3, #24]
 8003f48:	2b02      	cmp	r3, #2
 8003f4a:	d141      	bne.n	8003fd0 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f4c:	4b4c      	ldr	r3, [pc, #304]	; (8004080 <HAL_RCC_OscConfig+0x4ec>)
 8003f4e:	2200      	movs	r2, #0
 8003f50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f52:	f7fd fb95 	bl	8001680 <HAL_GetTick>
 8003f56:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f58:	e008      	b.n	8003f6c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f5a:	f7fd fb91 	bl	8001680 <HAL_GetTick>
 8003f5e:	4602      	mov	r2, r0
 8003f60:	693b      	ldr	r3, [r7, #16]
 8003f62:	1ad3      	subs	r3, r2, r3
 8003f64:	2b02      	cmp	r3, #2
 8003f66:	d901      	bls.n	8003f6c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003f68:	2303      	movs	r3, #3
 8003f6a:	e081      	b.n	8004070 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f6c:	4b43      	ldr	r3, [pc, #268]	; (800407c <HAL_RCC_OscConfig+0x4e8>)
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d1f0      	bne.n	8003f5a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	69da      	ldr	r2, [r3, #28]
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	6a1b      	ldr	r3, [r3, #32]
 8003f80:	431a      	orrs	r2, r3
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f86:	019b      	lsls	r3, r3, #6
 8003f88:	431a      	orrs	r2, r3
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f8e:	085b      	lsrs	r3, r3, #1
 8003f90:	3b01      	subs	r3, #1
 8003f92:	041b      	lsls	r3, r3, #16
 8003f94:	431a      	orrs	r2, r3
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f9a:	061b      	lsls	r3, r3, #24
 8003f9c:	4937      	ldr	r1, [pc, #220]	; (800407c <HAL_RCC_OscConfig+0x4e8>)
 8003f9e:	4313      	orrs	r3, r2
 8003fa0:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003fa2:	4b37      	ldr	r3, [pc, #220]	; (8004080 <HAL_RCC_OscConfig+0x4ec>)
 8003fa4:	2201      	movs	r2, #1
 8003fa6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fa8:	f7fd fb6a 	bl	8001680 <HAL_GetTick>
 8003fac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003fae:	e008      	b.n	8003fc2 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003fb0:	f7fd fb66 	bl	8001680 <HAL_GetTick>
 8003fb4:	4602      	mov	r2, r0
 8003fb6:	693b      	ldr	r3, [r7, #16]
 8003fb8:	1ad3      	subs	r3, r2, r3
 8003fba:	2b02      	cmp	r3, #2
 8003fbc:	d901      	bls.n	8003fc2 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003fbe:	2303      	movs	r3, #3
 8003fc0:	e056      	b.n	8004070 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003fc2:	4b2e      	ldr	r3, [pc, #184]	; (800407c <HAL_RCC_OscConfig+0x4e8>)
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d0f0      	beq.n	8003fb0 <HAL_RCC_OscConfig+0x41c>
 8003fce:	e04e      	b.n	800406e <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003fd0:	4b2b      	ldr	r3, [pc, #172]	; (8004080 <HAL_RCC_OscConfig+0x4ec>)
 8003fd2:	2200      	movs	r2, #0
 8003fd4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fd6:	f7fd fb53 	bl	8001680 <HAL_GetTick>
 8003fda:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003fdc:	e008      	b.n	8003ff0 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003fde:	f7fd fb4f 	bl	8001680 <HAL_GetTick>
 8003fe2:	4602      	mov	r2, r0
 8003fe4:	693b      	ldr	r3, [r7, #16]
 8003fe6:	1ad3      	subs	r3, r2, r3
 8003fe8:	2b02      	cmp	r3, #2
 8003fea:	d901      	bls.n	8003ff0 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003fec:	2303      	movs	r3, #3
 8003fee:	e03f      	b.n	8004070 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ff0:	4b22      	ldr	r3, [pc, #136]	; (800407c <HAL_RCC_OscConfig+0x4e8>)
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d1f0      	bne.n	8003fde <HAL_RCC_OscConfig+0x44a>
 8003ffc:	e037      	b.n	800406e <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	699b      	ldr	r3, [r3, #24]
 8004002:	2b01      	cmp	r3, #1
 8004004:	d101      	bne.n	800400a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8004006:	2301      	movs	r3, #1
 8004008:	e032      	b.n	8004070 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800400a:	4b1c      	ldr	r3, [pc, #112]	; (800407c <HAL_RCC_OscConfig+0x4e8>)
 800400c:	685b      	ldr	r3, [r3, #4]
 800400e:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	699b      	ldr	r3, [r3, #24]
 8004014:	2b01      	cmp	r3, #1
 8004016:	d028      	beq.n	800406a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004022:	429a      	cmp	r2, r3
 8004024:	d121      	bne.n	800406a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004030:	429a      	cmp	r2, r3
 8004032:	d11a      	bne.n	800406a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004034:	68fa      	ldr	r2, [r7, #12]
 8004036:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800403a:	4013      	ands	r3, r2
 800403c:	687a      	ldr	r2, [r7, #4]
 800403e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004040:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004042:	4293      	cmp	r3, r2
 8004044:	d111      	bne.n	800406a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004050:	085b      	lsrs	r3, r3, #1
 8004052:	3b01      	subs	r3, #1
 8004054:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004056:	429a      	cmp	r2, r3
 8004058:	d107      	bne.n	800406a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004064:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004066:	429a      	cmp	r2, r3
 8004068:	d001      	beq.n	800406e <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800406a:	2301      	movs	r3, #1
 800406c:	e000      	b.n	8004070 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800406e:	2300      	movs	r3, #0
}
 8004070:	4618      	mov	r0, r3
 8004072:	3718      	adds	r7, #24
 8004074:	46bd      	mov	sp, r7
 8004076:	bd80      	pop	{r7, pc}
 8004078:	40007000 	.word	0x40007000
 800407c:	40023800 	.word	0x40023800
 8004080:	42470060 	.word	0x42470060

08004084 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004084:	b580      	push	{r7, lr}
 8004086:	b084      	sub	sp, #16
 8004088:	af00      	add	r7, sp, #0
 800408a:	6078      	str	r0, [r7, #4]
 800408c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	2b00      	cmp	r3, #0
 8004092:	d101      	bne.n	8004098 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004094:	2301      	movs	r3, #1
 8004096:	e0cc      	b.n	8004232 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004098:	4b68      	ldr	r3, [pc, #416]	; (800423c <HAL_RCC_ClockConfig+0x1b8>)
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f003 0307 	and.w	r3, r3, #7
 80040a0:	683a      	ldr	r2, [r7, #0]
 80040a2:	429a      	cmp	r2, r3
 80040a4:	d90c      	bls.n	80040c0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040a6:	4b65      	ldr	r3, [pc, #404]	; (800423c <HAL_RCC_ClockConfig+0x1b8>)
 80040a8:	683a      	ldr	r2, [r7, #0]
 80040aa:	b2d2      	uxtb	r2, r2
 80040ac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80040ae:	4b63      	ldr	r3, [pc, #396]	; (800423c <HAL_RCC_ClockConfig+0x1b8>)
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f003 0307 	and.w	r3, r3, #7
 80040b6:	683a      	ldr	r2, [r7, #0]
 80040b8:	429a      	cmp	r2, r3
 80040ba:	d001      	beq.n	80040c0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80040bc:	2301      	movs	r3, #1
 80040be:	e0b8      	b.n	8004232 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	f003 0302 	and.w	r3, r3, #2
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d020      	beq.n	800410e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	f003 0304 	and.w	r3, r3, #4
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d005      	beq.n	80040e4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80040d8:	4b59      	ldr	r3, [pc, #356]	; (8004240 <HAL_RCC_ClockConfig+0x1bc>)
 80040da:	689b      	ldr	r3, [r3, #8]
 80040dc:	4a58      	ldr	r2, [pc, #352]	; (8004240 <HAL_RCC_ClockConfig+0x1bc>)
 80040de:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80040e2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f003 0308 	and.w	r3, r3, #8
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d005      	beq.n	80040fc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80040f0:	4b53      	ldr	r3, [pc, #332]	; (8004240 <HAL_RCC_ClockConfig+0x1bc>)
 80040f2:	689b      	ldr	r3, [r3, #8]
 80040f4:	4a52      	ldr	r2, [pc, #328]	; (8004240 <HAL_RCC_ClockConfig+0x1bc>)
 80040f6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80040fa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80040fc:	4b50      	ldr	r3, [pc, #320]	; (8004240 <HAL_RCC_ClockConfig+0x1bc>)
 80040fe:	689b      	ldr	r3, [r3, #8]
 8004100:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	689b      	ldr	r3, [r3, #8]
 8004108:	494d      	ldr	r1, [pc, #308]	; (8004240 <HAL_RCC_ClockConfig+0x1bc>)
 800410a:	4313      	orrs	r3, r2
 800410c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	f003 0301 	and.w	r3, r3, #1
 8004116:	2b00      	cmp	r3, #0
 8004118:	d044      	beq.n	80041a4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	685b      	ldr	r3, [r3, #4]
 800411e:	2b01      	cmp	r3, #1
 8004120:	d107      	bne.n	8004132 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004122:	4b47      	ldr	r3, [pc, #284]	; (8004240 <HAL_RCC_ClockConfig+0x1bc>)
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800412a:	2b00      	cmp	r3, #0
 800412c:	d119      	bne.n	8004162 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800412e:	2301      	movs	r3, #1
 8004130:	e07f      	b.n	8004232 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	685b      	ldr	r3, [r3, #4]
 8004136:	2b02      	cmp	r3, #2
 8004138:	d003      	beq.n	8004142 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800413e:	2b03      	cmp	r3, #3
 8004140:	d107      	bne.n	8004152 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004142:	4b3f      	ldr	r3, [pc, #252]	; (8004240 <HAL_RCC_ClockConfig+0x1bc>)
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800414a:	2b00      	cmp	r3, #0
 800414c:	d109      	bne.n	8004162 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800414e:	2301      	movs	r3, #1
 8004150:	e06f      	b.n	8004232 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004152:	4b3b      	ldr	r3, [pc, #236]	; (8004240 <HAL_RCC_ClockConfig+0x1bc>)
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f003 0302 	and.w	r3, r3, #2
 800415a:	2b00      	cmp	r3, #0
 800415c:	d101      	bne.n	8004162 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800415e:	2301      	movs	r3, #1
 8004160:	e067      	b.n	8004232 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004162:	4b37      	ldr	r3, [pc, #220]	; (8004240 <HAL_RCC_ClockConfig+0x1bc>)
 8004164:	689b      	ldr	r3, [r3, #8]
 8004166:	f023 0203 	bic.w	r2, r3, #3
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	685b      	ldr	r3, [r3, #4]
 800416e:	4934      	ldr	r1, [pc, #208]	; (8004240 <HAL_RCC_ClockConfig+0x1bc>)
 8004170:	4313      	orrs	r3, r2
 8004172:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004174:	f7fd fa84 	bl	8001680 <HAL_GetTick>
 8004178:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800417a:	e00a      	b.n	8004192 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800417c:	f7fd fa80 	bl	8001680 <HAL_GetTick>
 8004180:	4602      	mov	r2, r0
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	1ad3      	subs	r3, r2, r3
 8004186:	f241 3288 	movw	r2, #5000	; 0x1388
 800418a:	4293      	cmp	r3, r2
 800418c:	d901      	bls.n	8004192 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800418e:	2303      	movs	r3, #3
 8004190:	e04f      	b.n	8004232 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004192:	4b2b      	ldr	r3, [pc, #172]	; (8004240 <HAL_RCC_ClockConfig+0x1bc>)
 8004194:	689b      	ldr	r3, [r3, #8]
 8004196:	f003 020c 	and.w	r2, r3, #12
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	685b      	ldr	r3, [r3, #4]
 800419e:	009b      	lsls	r3, r3, #2
 80041a0:	429a      	cmp	r2, r3
 80041a2:	d1eb      	bne.n	800417c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80041a4:	4b25      	ldr	r3, [pc, #148]	; (800423c <HAL_RCC_ClockConfig+0x1b8>)
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f003 0307 	and.w	r3, r3, #7
 80041ac:	683a      	ldr	r2, [r7, #0]
 80041ae:	429a      	cmp	r2, r3
 80041b0:	d20c      	bcs.n	80041cc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80041b2:	4b22      	ldr	r3, [pc, #136]	; (800423c <HAL_RCC_ClockConfig+0x1b8>)
 80041b4:	683a      	ldr	r2, [r7, #0]
 80041b6:	b2d2      	uxtb	r2, r2
 80041b8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80041ba:	4b20      	ldr	r3, [pc, #128]	; (800423c <HAL_RCC_ClockConfig+0x1b8>)
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f003 0307 	and.w	r3, r3, #7
 80041c2:	683a      	ldr	r2, [r7, #0]
 80041c4:	429a      	cmp	r2, r3
 80041c6:	d001      	beq.n	80041cc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80041c8:	2301      	movs	r3, #1
 80041ca:	e032      	b.n	8004232 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f003 0304 	and.w	r3, r3, #4
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d008      	beq.n	80041ea <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80041d8:	4b19      	ldr	r3, [pc, #100]	; (8004240 <HAL_RCC_ClockConfig+0x1bc>)
 80041da:	689b      	ldr	r3, [r3, #8]
 80041dc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	68db      	ldr	r3, [r3, #12]
 80041e4:	4916      	ldr	r1, [pc, #88]	; (8004240 <HAL_RCC_ClockConfig+0x1bc>)
 80041e6:	4313      	orrs	r3, r2
 80041e8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f003 0308 	and.w	r3, r3, #8
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d009      	beq.n	800420a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80041f6:	4b12      	ldr	r3, [pc, #72]	; (8004240 <HAL_RCC_ClockConfig+0x1bc>)
 80041f8:	689b      	ldr	r3, [r3, #8]
 80041fa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	691b      	ldr	r3, [r3, #16]
 8004202:	00db      	lsls	r3, r3, #3
 8004204:	490e      	ldr	r1, [pc, #56]	; (8004240 <HAL_RCC_ClockConfig+0x1bc>)
 8004206:	4313      	orrs	r3, r2
 8004208:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800420a:	f000 f821 	bl	8004250 <HAL_RCC_GetSysClockFreq>
 800420e:	4602      	mov	r2, r0
 8004210:	4b0b      	ldr	r3, [pc, #44]	; (8004240 <HAL_RCC_ClockConfig+0x1bc>)
 8004212:	689b      	ldr	r3, [r3, #8]
 8004214:	091b      	lsrs	r3, r3, #4
 8004216:	f003 030f 	and.w	r3, r3, #15
 800421a:	490a      	ldr	r1, [pc, #40]	; (8004244 <HAL_RCC_ClockConfig+0x1c0>)
 800421c:	5ccb      	ldrb	r3, [r1, r3]
 800421e:	fa22 f303 	lsr.w	r3, r2, r3
 8004222:	4a09      	ldr	r2, [pc, #36]	; (8004248 <HAL_RCC_ClockConfig+0x1c4>)
 8004224:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004226:	4b09      	ldr	r3, [pc, #36]	; (800424c <HAL_RCC_ClockConfig+0x1c8>)
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	4618      	mov	r0, r3
 800422c:	f7fd f9e4 	bl	80015f8 <HAL_InitTick>

  return HAL_OK;
 8004230:	2300      	movs	r3, #0
}
 8004232:	4618      	mov	r0, r3
 8004234:	3710      	adds	r7, #16
 8004236:	46bd      	mov	sp, r7
 8004238:	bd80      	pop	{r7, pc}
 800423a:	bf00      	nop
 800423c:	40023c00 	.word	0x40023c00
 8004240:	40023800 	.word	0x40023800
 8004244:	080090c8 	.word	0x080090c8
 8004248:	20000000 	.word	0x20000000
 800424c:	20000004 	.word	0x20000004

08004250 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004250:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8004254:	b084      	sub	sp, #16
 8004256:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004258:	2300      	movs	r3, #0
 800425a:	607b      	str	r3, [r7, #4]
 800425c:	2300      	movs	r3, #0
 800425e:	60fb      	str	r3, [r7, #12]
 8004260:	2300      	movs	r3, #0
 8004262:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004264:	2300      	movs	r3, #0
 8004266:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004268:	4b67      	ldr	r3, [pc, #412]	; (8004408 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800426a:	689b      	ldr	r3, [r3, #8]
 800426c:	f003 030c 	and.w	r3, r3, #12
 8004270:	2b08      	cmp	r3, #8
 8004272:	d00d      	beq.n	8004290 <HAL_RCC_GetSysClockFreq+0x40>
 8004274:	2b08      	cmp	r3, #8
 8004276:	f200 80bd 	bhi.w	80043f4 <HAL_RCC_GetSysClockFreq+0x1a4>
 800427a:	2b00      	cmp	r3, #0
 800427c:	d002      	beq.n	8004284 <HAL_RCC_GetSysClockFreq+0x34>
 800427e:	2b04      	cmp	r3, #4
 8004280:	d003      	beq.n	800428a <HAL_RCC_GetSysClockFreq+0x3a>
 8004282:	e0b7      	b.n	80043f4 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004284:	4b61      	ldr	r3, [pc, #388]	; (800440c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8004286:	60bb      	str	r3, [r7, #8]
       break;
 8004288:	e0b7      	b.n	80043fa <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800428a:	4b61      	ldr	r3, [pc, #388]	; (8004410 <HAL_RCC_GetSysClockFreq+0x1c0>)
 800428c:	60bb      	str	r3, [r7, #8]
      break;
 800428e:	e0b4      	b.n	80043fa <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004290:	4b5d      	ldr	r3, [pc, #372]	; (8004408 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004292:	685b      	ldr	r3, [r3, #4]
 8004294:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004298:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800429a:	4b5b      	ldr	r3, [pc, #364]	; (8004408 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800429c:	685b      	ldr	r3, [r3, #4]
 800429e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d04d      	beq.n	8004342 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80042a6:	4b58      	ldr	r3, [pc, #352]	; (8004408 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80042a8:	685b      	ldr	r3, [r3, #4]
 80042aa:	099b      	lsrs	r3, r3, #6
 80042ac:	461a      	mov	r2, r3
 80042ae:	f04f 0300 	mov.w	r3, #0
 80042b2:	f240 10ff 	movw	r0, #511	; 0x1ff
 80042b6:	f04f 0100 	mov.w	r1, #0
 80042ba:	ea02 0800 	and.w	r8, r2, r0
 80042be:	ea03 0901 	and.w	r9, r3, r1
 80042c2:	4640      	mov	r0, r8
 80042c4:	4649      	mov	r1, r9
 80042c6:	f04f 0200 	mov.w	r2, #0
 80042ca:	f04f 0300 	mov.w	r3, #0
 80042ce:	014b      	lsls	r3, r1, #5
 80042d0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80042d4:	0142      	lsls	r2, r0, #5
 80042d6:	4610      	mov	r0, r2
 80042d8:	4619      	mov	r1, r3
 80042da:	ebb0 0008 	subs.w	r0, r0, r8
 80042de:	eb61 0109 	sbc.w	r1, r1, r9
 80042e2:	f04f 0200 	mov.w	r2, #0
 80042e6:	f04f 0300 	mov.w	r3, #0
 80042ea:	018b      	lsls	r3, r1, #6
 80042ec:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80042f0:	0182      	lsls	r2, r0, #6
 80042f2:	1a12      	subs	r2, r2, r0
 80042f4:	eb63 0301 	sbc.w	r3, r3, r1
 80042f8:	f04f 0000 	mov.w	r0, #0
 80042fc:	f04f 0100 	mov.w	r1, #0
 8004300:	00d9      	lsls	r1, r3, #3
 8004302:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004306:	00d0      	lsls	r0, r2, #3
 8004308:	4602      	mov	r2, r0
 800430a:	460b      	mov	r3, r1
 800430c:	eb12 0208 	adds.w	r2, r2, r8
 8004310:	eb43 0309 	adc.w	r3, r3, r9
 8004314:	f04f 0000 	mov.w	r0, #0
 8004318:	f04f 0100 	mov.w	r1, #0
 800431c:	0259      	lsls	r1, r3, #9
 800431e:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8004322:	0250      	lsls	r0, r2, #9
 8004324:	4602      	mov	r2, r0
 8004326:	460b      	mov	r3, r1
 8004328:	4610      	mov	r0, r2
 800432a:	4619      	mov	r1, r3
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	461a      	mov	r2, r3
 8004330:	f04f 0300 	mov.w	r3, #0
 8004334:	f7fb ff4e 	bl	80001d4 <__aeabi_uldivmod>
 8004338:	4602      	mov	r2, r0
 800433a:	460b      	mov	r3, r1
 800433c:	4613      	mov	r3, r2
 800433e:	60fb      	str	r3, [r7, #12]
 8004340:	e04a      	b.n	80043d8 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004342:	4b31      	ldr	r3, [pc, #196]	; (8004408 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004344:	685b      	ldr	r3, [r3, #4]
 8004346:	099b      	lsrs	r3, r3, #6
 8004348:	461a      	mov	r2, r3
 800434a:	f04f 0300 	mov.w	r3, #0
 800434e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004352:	f04f 0100 	mov.w	r1, #0
 8004356:	ea02 0400 	and.w	r4, r2, r0
 800435a:	ea03 0501 	and.w	r5, r3, r1
 800435e:	4620      	mov	r0, r4
 8004360:	4629      	mov	r1, r5
 8004362:	f04f 0200 	mov.w	r2, #0
 8004366:	f04f 0300 	mov.w	r3, #0
 800436a:	014b      	lsls	r3, r1, #5
 800436c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004370:	0142      	lsls	r2, r0, #5
 8004372:	4610      	mov	r0, r2
 8004374:	4619      	mov	r1, r3
 8004376:	1b00      	subs	r0, r0, r4
 8004378:	eb61 0105 	sbc.w	r1, r1, r5
 800437c:	f04f 0200 	mov.w	r2, #0
 8004380:	f04f 0300 	mov.w	r3, #0
 8004384:	018b      	lsls	r3, r1, #6
 8004386:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800438a:	0182      	lsls	r2, r0, #6
 800438c:	1a12      	subs	r2, r2, r0
 800438e:	eb63 0301 	sbc.w	r3, r3, r1
 8004392:	f04f 0000 	mov.w	r0, #0
 8004396:	f04f 0100 	mov.w	r1, #0
 800439a:	00d9      	lsls	r1, r3, #3
 800439c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80043a0:	00d0      	lsls	r0, r2, #3
 80043a2:	4602      	mov	r2, r0
 80043a4:	460b      	mov	r3, r1
 80043a6:	1912      	adds	r2, r2, r4
 80043a8:	eb45 0303 	adc.w	r3, r5, r3
 80043ac:	f04f 0000 	mov.w	r0, #0
 80043b0:	f04f 0100 	mov.w	r1, #0
 80043b4:	0299      	lsls	r1, r3, #10
 80043b6:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80043ba:	0290      	lsls	r0, r2, #10
 80043bc:	4602      	mov	r2, r0
 80043be:	460b      	mov	r3, r1
 80043c0:	4610      	mov	r0, r2
 80043c2:	4619      	mov	r1, r3
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	461a      	mov	r2, r3
 80043c8:	f04f 0300 	mov.w	r3, #0
 80043cc:	f7fb ff02 	bl	80001d4 <__aeabi_uldivmod>
 80043d0:	4602      	mov	r2, r0
 80043d2:	460b      	mov	r3, r1
 80043d4:	4613      	mov	r3, r2
 80043d6:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80043d8:	4b0b      	ldr	r3, [pc, #44]	; (8004408 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80043da:	685b      	ldr	r3, [r3, #4]
 80043dc:	0c1b      	lsrs	r3, r3, #16
 80043de:	f003 0303 	and.w	r3, r3, #3
 80043e2:	3301      	adds	r3, #1
 80043e4:	005b      	lsls	r3, r3, #1
 80043e6:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80043e8:	68fa      	ldr	r2, [r7, #12]
 80043ea:	683b      	ldr	r3, [r7, #0]
 80043ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80043f0:	60bb      	str	r3, [r7, #8]
      break;
 80043f2:	e002      	b.n	80043fa <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80043f4:	4b05      	ldr	r3, [pc, #20]	; (800440c <HAL_RCC_GetSysClockFreq+0x1bc>)
 80043f6:	60bb      	str	r3, [r7, #8]
      break;
 80043f8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80043fa:	68bb      	ldr	r3, [r7, #8]
}
 80043fc:	4618      	mov	r0, r3
 80043fe:	3710      	adds	r7, #16
 8004400:	46bd      	mov	sp, r7
 8004402:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8004406:	bf00      	nop
 8004408:	40023800 	.word	0x40023800
 800440c:	00f42400 	.word	0x00f42400
 8004410:	007a1200 	.word	0x007a1200

08004414 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004414:	b480      	push	{r7}
 8004416:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004418:	4b03      	ldr	r3, [pc, #12]	; (8004428 <HAL_RCC_GetHCLKFreq+0x14>)
 800441a:	681b      	ldr	r3, [r3, #0]
}
 800441c:	4618      	mov	r0, r3
 800441e:	46bd      	mov	sp, r7
 8004420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004424:	4770      	bx	lr
 8004426:	bf00      	nop
 8004428:	20000000 	.word	0x20000000

0800442c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800442c:	b580      	push	{r7, lr}
 800442e:	b082      	sub	sp, #8
 8004430:	af00      	add	r7, sp, #0
 8004432:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	2b00      	cmp	r3, #0
 8004438:	d101      	bne.n	800443e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800443a:	2301      	movs	r3, #1
 800443c:	e041      	b.n	80044c2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004444:	b2db      	uxtb	r3, r3
 8004446:	2b00      	cmp	r3, #0
 8004448:	d106      	bne.n	8004458 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	2200      	movs	r2, #0
 800444e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004452:	6878      	ldr	r0, [r7, #4]
 8004454:	f7fc ff7e 	bl	8001354 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	2202      	movs	r2, #2
 800445c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681a      	ldr	r2, [r3, #0]
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	3304      	adds	r3, #4
 8004468:	4619      	mov	r1, r3
 800446a:	4610      	mov	r0, r2
 800446c:	f000 fbfa 	bl	8004c64 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	2201      	movs	r2, #1
 8004474:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	2201      	movs	r2, #1
 800447c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	2201      	movs	r2, #1
 8004484:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	2201      	movs	r2, #1
 800448c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	2201      	movs	r2, #1
 8004494:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	2201      	movs	r2, #1
 800449c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	2201      	movs	r2, #1
 80044a4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	2201      	movs	r2, #1
 80044ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	2201      	movs	r2, #1
 80044b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	2201      	movs	r2, #1
 80044bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80044c0:	2300      	movs	r3, #0
}
 80044c2:	4618      	mov	r0, r3
 80044c4:	3708      	adds	r7, #8
 80044c6:	46bd      	mov	sp, r7
 80044c8:	bd80      	pop	{r7, pc}

080044ca <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80044ca:	b580      	push	{r7, lr}
 80044cc:	b082      	sub	sp, #8
 80044ce:	af00      	add	r7, sp, #0
 80044d0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d101      	bne.n	80044dc <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80044d8:	2301      	movs	r3, #1
 80044da:	e041      	b.n	8004560 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044e2:	b2db      	uxtb	r3, r3
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d106      	bne.n	80044f6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	2200      	movs	r2, #0
 80044ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80044f0:	6878      	ldr	r0, [r7, #4]
 80044f2:	f000 f839 	bl	8004568 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	2202      	movs	r2, #2
 80044fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681a      	ldr	r2, [r3, #0]
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	3304      	adds	r3, #4
 8004506:	4619      	mov	r1, r3
 8004508:	4610      	mov	r0, r2
 800450a:	f000 fbab 	bl	8004c64 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	2201      	movs	r2, #1
 8004512:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	2201      	movs	r2, #1
 800451a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	2201      	movs	r2, #1
 8004522:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	2201      	movs	r2, #1
 800452a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	2201      	movs	r2, #1
 8004532:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	2201      	movs	r2, #1
 800453a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	2201      	movs	r2, #1
 8004542:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	2201      	movs	r2, #1
 800454a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	2201      	movs	r2, #1
 8004552:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	2201      	movs	r2, #1
 800455a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800455e:	2300      	movs	r3, #0
}
 8004560:	4618      	mov	r0, r3
 8004562:	3708      	adds	r7, #8
 8004564:	46bd      	mov	sp, r7
 8004566:	bd80      	pop	{r7, pc}

08004568 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004568:	b480      	push	{r7}
 800456a:	b083      	sub	sp, #12
 800456c:	af00      	add	r7, sp, #0
 800456e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004570:	bf00      	nop
 8004572:	370c      	adds	r7, #12
 8004574:	46bd      	mov	sp, r7
 8004576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800457a:	4770      	bx	lr

0800457c <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800457c:	b580      	push	{r7, lr}
 800457e:	b084      	sub	sp, #16
 8004580:	af00      	add	r7, sp, #0
 8004582:	6078      	str	r0, [r7, #4]
 8004584:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004586:	2300      	movs	r3, #0
 8004588:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800458a:	683b      	ldr	r3, [r7, #0]
 800458c:	2b00      	cmp	r3, #0
 800458e:	d109      	bne.n	80045a4 <HAL_TIM_PWM_Start_IT+0x28>
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004596:	b2db      	uxtb	r3, r3
 8004598:	2b01      	cmp	r3, #1
 800459a:	bf14      	ite	ne
 800459c:	2301      	movne	r3, #1
 800459e:	2300      	moveq	r3, #0
 80045a0:	b2db      	uxtb	r3, r3
 80045a2:	e022      	b.n	80045ea <HAL_TIM_PWM_Start_IT+0x6e>
 80045a4:	683b      	ldr	r3, [r7, #0]
 80045a6:	2b04      	cmp	r3, #4
 80045a8:	d109      	bne.n	80045be <HAL_TIM_PWM_Start_IT+0x42>
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80045b0:	b2db      	uxtb	r3, r3
 80045b2:	2b01      	cmp	r3, #1
 80045b4:	bf14      	ite	ne
 80045b6:	2301      	movne	r3, #1
 80045b8:	2300      	moveq	r3, #0
 80045ba:	b2db      	uxtb	r3, r3
 80045bc:	e015      	b.n	80045ea <HAL_TIM_PWM_Start_IT+0x6e>
 80045be:	683b      	ldr	r3, [r7, #0]
 80045c0:	2b08      	cmp	r3, #8
 80045c2:	d109      	bne.n	80045d8 <HAL_TIM_PWM_Start_IT+0x5c>
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80045ca:	b2db      	uxtb	r3, r3
 80045cc:	2b01      	cmp	r3, #1
 80045ce:	bf14      	ite	ne
 80045d0:	2301      	movne	r3, #1
 80045d2:	2300      	moveq	r3, #0
 80045d4:	b2db      	uxtb	r3, r3
 80045d6:	e008      	b.n	80045ea <HAL_TIM_PWM_Start_IT+0x6e>
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80045de:	b2db      	uxtb	r3, r3
 80045e0:	2b01      	cmp	r3, #1
 80045e2:	bf14      	ite	ne
 80045e4:	2301      	movne	r3, #1
 80045e6:	2300      	moveq	r3, #0
 80045e8:	b2db      	uxtb	r3, r3
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d001      	beq.n	80045f2 <HAL_TIM_PWM_Start_IT+0x76>
  {
    return HAL_ERROR;
 80045ee:	2301      	movs	r3, #1
 80045f0:	e0b3      	b.n	800475a <HAL_TIM_PWM_Start_IT+0x1de>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80045f2:	683b      	ldr	r3, [r7, #0]
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d104      	bne.n	8004602 <HAL_TIM_PWM_Start_IT+0x86>
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	2202      	movs	r2, #2
 80045fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004600:	e013      	b.n	800462a <HAL_TIM_PWM_Start_IT+0xae>
 8004602:	683b      	ldr	r3, [r7, #0]
 8004604:	2b04      	cmp	r3, #4
 8004606:	d104      	bne.n	8004612 <HAL_TIM_PWM_Start_IT+0x96>
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	2202      	movs	r2, #2
 800460c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004610:	e00b      	b.n	800462a <HAL_TIM_PWM_Start_IT+0xae>
 8004612:	683b      	ldr	r3, [r7, #0]
 8004614:	2b08      	cmp	r3, #8
 8004616:	d104      	bne.n	8004622 <HAL_TIM_PWM_Start_IT+0xa6>
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	2202      	movs	r2, #2
 800461c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004620:	e003      	b.n	800462a <HAL_TIM_PWM_Start_IT+0xae>
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	2202      	movs	r2, #2
 8004626:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800462a:	683b      	ldr	r3, [r7, #0]
 800462c:	2b0c      	cmp	r3, #12
 800462e:	d841      	bhi.n	80046b4 <HAL_TIM_PWM_Start_IT+0x138>
 8004630:	a201      	add	r2, pc, #4	; (adr r2, 8004638 <HAL_TIM_PWM_Start_IT+0xbc>)
 8004632:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004636:	bf00      	nop
 8004638:	0800466d 	.word	0x0800466d
 800463c:	080046b5 	.word	0x080046b5
 8004640:	080046b5 	.word	0x080046b5
 8004644:	080046b5 	.word	0x080046b5
 8004648:	0800467f 	.word	0x0800467f
 800464c:	080046b5 	.word	0x080046b5
 8004650:	080046b5 	.word	0x080046b5
 8004654:	080046b5 	.word	0x080046b5
 8004658:	08004691 	.word	0x08004691
 800465c:	080046b5 	.word	0x080046b5
 8004660:	080046b5 	.word	0x080046b5
 8004664:	080046b5 	.word	0x080046b5
 8004668:	080046a3 	.word	0x080046a3
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	68da      	ldr	r2, [r3, #12]
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	f042 0202 	orr.w	r2, r2, #2
 800467a:	60da      	str	r2, [r3, #12]
      break;
 800467c:	e01d      	b.n	80046ba <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	68da      	ldr	r2, [r3, #12]
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	f042 0204 	orr.w	r2, r2, #4
 800468c:	60da      	str	r2, [r3, #12]
      break;
 800468e:	e014      	b.n	80046ba <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	68da      	ldr	r2, [r3, #12]
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	f042 0208 	orr.w	r2, r2, #8
 800469e:	60da      	str	r2, [r3, #12]
      break;
 80046a0:	e00b      	b.n	80046ba <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	68da      	ldr	r2, [r3, #12]
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	f042 0210 	orr.w	r2, r2, #16
 80046b0:	60da      	str	r2, [r3, #12]
      break;
 80046b2:	e002      	b.n	80046ba <HAL_TIM_PWM_Start_IT+0x13e>
    }

    default:
      status = HAL_ERROR;
 80046b4:	2301      	movs	r3, #1
 80046b6:	73fb      	strb	r3, [r7, #15]
      break;
 80046b8:	bf00      	nop
  }

  if (status == HAL_OK)
 80046ba:	7bfb      	ldrb	r3, [r7, #15]
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d14b      	bne.n	8004758 <HAL_TIM_PWM_Start_IT+0x1dc>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	2201      	movs	r2, #1
 80046c6:	6839      	ldr	r1, [r7, #0]
 80046c8:	4618      	mov	r0, r3
 80046ca:	f000 fe8f 	bl	80053ec <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	4a24      	ldr	r2, [pc, #144]	; (8004764 <HAL_TIM_PWM_Start_IT+0x1e8>)
 80046d4:	4293      	cmp	r3, r2
 80046d6:	d107      	bne.n	80046e8 <HAL_TIM_PWM_Start_IT+0x16c>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80046e6:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	4a1d      	ldr	r2, [pc, #116]	; (8004764 <HAL_TIM_PWM_Start_IT+0x1e8>)
 80046ee:	4293      	cmp	r3, r2
 80046f0:	d018      	beq.n	8004724 <HAL_TIM_PWM_Start_IT+0x1a8>
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80046fa:	d013      	beq.n	8004724 <HAL_TIM_PWM_Start_IT+0x1a8>
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	4a19      	ldr	r2, [pc, #100]	; (8004768 <HAL_TIM_PWM_Start_IT+0x1ec>)
 8004702:	4293      	cmp	r3, r2
 8004704:	d00e      	beq.n	8004724 <HAL_TIM_PWM_Start_IT+0x1a8>
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	4a18      	ldr	r2, [pc, #96]	; (800476c <HAL_TIM_PWM_Start_IT+0x1f0>)
 800470c:	4293      	cmp	r3, r2
 800470e:	d009      	beq.n	8004724 <HAL_TIM_PWM_Start_IT+0x1a8>
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	4a16      	ldr	r2, [pc, #88]	; (8004770 <HAL_TIM_PWM_Start_IT+0x1f4>)
 8004716:	4293      	cmp	r3, r2
 8004718:	d004      	beq.n	8004724 <HAL_TIM_PWM_Start_IT+0x1a8>
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	4a15      	ldr	r2, [pc, #84]	; (8004774 <HAL_TIM_PWM_Start_IT+0x1f8>)
 8004720:	4293      	cmp	r3, r2
 8004722:	d111      	bne.n	8004748 <HAL_TIM_PWM_Start_IT+0x1cc>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	689b      	ldr	r3, [r3, #8]
 800472a:	f003 0307 	and.w	r3, r3, #7
 800472e:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004730:	68bb      	ldr	r3, [r7, #8]
 8004732:	2b06      	cmp	r3, #6
 8004734:	d010      	beq.n	8004758 <HAL_TIM_PWM_Start_IT+0x1dc>
      {
        __HAL_TIM_ENABLE(htim);
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	681a      	ldr	r2, [r3, #0]
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	f042 0201 	orr.w	r2, r2, #1
 8004744:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004746:	e007      	b.n	8004758 <HAL_TIM_PWM_Start_IT+0x1dc>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	681a      	ldr	r2, [r3, #0]
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	f042 0201 	orr.w	r2, r2, #1
 8004756:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8004758:	7bfb      	ldrb	r3, [r7, #15]
}
 800475a:	4618      	mov	r0, r3
 800475c:	3710      	adds	r7, #16
 800475e:	46bd      	mov	sp, r7
 8004760:	bd80      	pop	{r7, pc}
 8004762:	bf00      	nop
 8004764:	40010000 	.word	0x40010000
 8004768:	40000400 	.word	0x40000400
 800476c:	40000800 	.word	0x40000800
 8004770:	40000c00 	.word	0x40000c00
 8004774:	40014000 	.word	0x40014000

08004778 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8004778:	b580      	push	{r7, lr}
 800477a:	b082      	sub	sp, #8
 800477c:	af00      	add	r7, sp, #0
 800477e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	2b00      	cmp	r3, #0
 8004784:	d101      	bne.n	800478a <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8004786:	2301      	movs	r3, #1
 8004788:	e041      	b.n	800480e <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004790:	b2db      	uxtb	r3, r3
 8004792:	2b00      	cmp	r3, #0
 8004794:	d106      	bne.n	80047a4 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	2200      	movs	r2, #0
 800479a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800479e:	6878      	ldr	r0, [r7, #4]
 80047a0:	f7fc fdfa 	bl	8001398 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	2202      	movs	r2, #2
 80047a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681a      	ldr	r2, [r3, #0]
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	3304      	adds	r3, #4
 80047b4:	4619      	mov	r1, r3
 80047b6:	4610      	mov	r0, r2
 80047b8:	f000 fa54 	bl	8004c64 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	2201      	movs	r2, #1
 80047c0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	2201      	movs	r2, #1
 80047c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	2201      	movs	r2, #1
 80047d0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	2201      	movs	r2, #1
 80047d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	2201      	movs	r2, #1
 80047e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	2201      	movs	r2, #1
 80047e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	2201      	movs	r2, #1
 80047f0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	2201      	movs	r2, #1
 80047f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	2201      	movs	r2, #1
 8004800:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	2201      	movs	r2, #1
 8004808:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800480c:	2300      	movs	r3, #0
}
 800480e:	4618      	mov	r0, r3
 8004810:	3708      	adds	r7, #8
 8004812:	46bd      	mov	sp, r7
 8004814:	bd80      	pop	{r7, pc}

08004816 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8004816:	b580      	push	{r7, lr}
 8004818:	b086      	sub	sp, #24
 800481a:	af00      	add	r7, sp, #0
 800481c:	60f8      	str	r0, [r7, #12]
 800481e:	60b9      	str	r1, [r7, #8]
 8004820:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004822:	2300      	movs	r3, #0
 8004824:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800482c:	2b01      	cmp	r3, #1
 800482e:	d101      	bne.n	8004834 <HAL_TIM_IC_ConfigChannel+0x1e>
 8004830:	2302      	movs	r3, #2
 8004832:	e088      	b.n	8004946 <HAL_TIM_IC_ConfigChannel+0x130>
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	2201      	movs	r2, #1
 8004838:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	2b00      	cmp	r3, #0
 8004840:	d11b      	bne.n	800487a <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	6818      	ldr	r0, [r3, #0]
 8004846:	68bb      	ldr	r3, [r7, #8]
 8004848:	6819      	ldr	r1, [r3, #0]
 800484a:	68bb      	ldr	r3, [r7, #8]
 800484c:	685a      	ldr	r2, [r3, #4]
 800484e:	68bb      	ldr	r3, [r7, #8]
 8004850:	68db      	ldr	r3, [r3, #12]
 8004852:	f000 fc13 	bl	800507c <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	699a      	ldr	r2, [r3, #24]
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	f022 020c 	bic.w	r2, r2, #12
 8004864:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	6999      	ldr	r1, [r3, #24]
 800486c:	68bb      	ldr	r3, [r7, #8]
 800486e:	689a      	ldr	r2, [r3, #8]
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	430a      	orrs	r2, r1
 8004876:	619a      	str	r2, [r3, #24]
 8004878:	e060      	b.n	800493c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	2b04      	cmp	r3, #4
 800487e:	d11c      	bne.n	80048ba <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	6818      	ldr	r0, [r3, #0]
 8004884:	68bb      	ldr	r3, [r7, #8]
 8004886:	6819      	ldr	r1, [r3, #0]
 8004888:	68bb      	ldr	r3, [r7, #8]
 800488a:	685a      	ldr	r2, [r3, #4]
 800488c:	68bb      	ldr	r3, [r7, #8]
 800488e:	68db      	ldr	r3, [r3, #12]
 8004890:	f000 fc8b 	bl	80051aa <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	699a      	ldr	r2, [r3, #24]
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80048a2:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	6999      	ldr	r1, [r3, #24]
 80048aa:	68bb      	ldr	r3, [r7, #8]
 80048ac:	689b      	ldr	r3, [r3, #8]
 80048ae:	021a      	lsls	r2, r3, #8
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	430a      	orrs	r2, r1
 80048b6:	619a      	str	r2, [r3, #24]
 80048b8:	e040      	b.n	800493c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	2b08      	cmp	r3, #8
 80048be:	d11b      	bne.n	80048f8 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	6818      	ldr	r0, [r3, #0]
 80048c4:	68bb      	ldr	r3, [r7, #8]
 80048c6:	6819      	ldr	r1, [r3, #0]
 80048c8:	68bb      	ldr	r3, [r7, #8]
 80048ca:	685a      	ldr	r2, [r3, #4]
 80048cc:	68bb      	ldr	r3, [r7, #8]
 80048ce:	68db      	ldr	r3, [r3, #12]
 80048d0:	f000 fcd8 	bl	8005284 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	69da      	ldr	r2, [r3, #28]
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	f022 020c 	bic.w	r2, r2, #12
 80048e2:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	69d9      	ldr	r1, [r3, #28]
 80048ea:	68bb      	ldr	r3, [r7, #8]
 80048ec:	689a      	ldr	r2, [r3, #8]
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	430a      	orrs	r2, r1
 80048f4:	61da      	str	r2, [r3, #28]
 80048f6:	e021      	b.n	800493c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	2b0c      	cmp	r3, #12
 80048fc:	d11c      	bne.n	8004938 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	6818      	ldr	r0, [r3, #0]
 8004902:	68bb      	ldr	r3, [r7, #8]
 8004904:	6819      	ldr	r1, [r3, #0]
 8004906:	68bb      	ldr	r3, [r7, #8]
 8004908:	685a      	ldr	r2, [r3, #4]
 800490a:	68bb      	ldr	r3, [r7, #8]
 800490c:	68db      	ldr	r3, [r3, #12]
 800490e:	f000 fcf5 	bl	80052fc <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	69da      	ldr	r2, [r3, #28]
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004920:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	69d9      	ldr	r1, [r3, #28]
 8004928:	68bb      	ldr	r3, [r7, #8]
 800492a:	689b      	ldr	r3, [r3, #8]
 800492c:	021a      	lsls	r2, r3, #8
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	430a      	orrs	r2, r1
 8004934:	61da      	str	r2, [r3, #28]
 8004936:	e001      	b.n	800493c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8004938:	2301      	movs	r3, #1
 800493a:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	2200      	movs	r2, #0
 8004940:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004944:	7dfb      	ldrb	r3, [r7, #23]
}
 8004946:	4618      	mov	r0, r3
 8004948:	3718      	adds	r7, #24
 800494a:	46bd      	mov	sp, r7
 800494c:	bd80      	pop	{r7, pc}
	...

08004950 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004950:	b580      	push	{r7, lr}
 8004952:	b086      	sub	sp, #24
 8004954:	af00      	add	r7, sp, #0
 8004956:	60f8      	str	r0, [r7, #12]
 8004958:	60b9      	str	r1, [r7, #8]
 800495a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800495c:	2300      	movs	r3, #0
 800495e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004966:	2b01      	cmp	r3, #1
 8004968:	d101      	bne.n	800496e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800496a:	2302      	movs	r3, #2
 800496c:	e0ae      	b.n	8004acc <HAL_TIM_PWM_ConfigChannel+0x17c>
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	2201      	movs	r2, #1
 8004972:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	2b0c      	cmp	r3, #12
 800497a:	f200 809f 	bhi.w	8004abc <HAL_TIM_PWM_ConfigChannel+0x16c>
 800497e:	a201      	add	r2, pc, #4	; (adr r2, 8004984 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004980:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004984:	080049b9 	.word	0x080049b9
 8004988:	08004abd 	.word	0x08004abd
 800498c:	08004abd 	.word	0x08004abd
 8004990:	08004abd 	.word	0x08004abd
 8004994:	080049f9 	.word	0x080049f9
 8004998:	08004abd 	.word	0x08004abd
 800499c:	08004abd 	.word	0x08004abd
 80049a0:	08004abd 	.word	0x08004abd
 80049a4:	08004a3b 	.word	0x08004a3b
 80049a8:	08004abd 	.word	0x08004abd
 80049ac:	08004abd 	.word	0x08004abd
 80049b0:	08004abd 	.word	0x08004abd
 80049b4:	08004a7b 	.word	0x08004a7b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	68b9      	ldr	r1, [r7, #8]
 80049be:	4618      	mov	r0, r3
 80049c0:	f000 f9d0 	bl	8004d64 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	699a      	ldr	r2, [r3, #24]
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	f042 0208 	orr.w	r2, r2, #8
 80049d2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	699a      	ldr	r2, [r3, #24]
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	f022 0204 	bic.w	r2, r2, #4
 80049e2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	6999      	ldr	r1, [r3, #24]
 80049ea:	68bb      	ldr	r3, [r7, #8]
 80049ec:	691a      	ldr	r2, [r3, #16]
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	430a      	orrs	r2, r1
 80049f4:	619a      	str	r2, [r3, #24]
      break;
 80049f6:	e064      	b.n	8004ac2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	68b9      	ldr	r1, [r7, #8]
 80049fe:	4618      	mov	r0, r3
 8004a00:	f000 fa16 	bl	8004e30 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	699a      	ldr	r2, [r3, #24]
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004a12:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	699a      	ldr	r2, [r3, #24]
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004a22:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	6999      	ldr	r1, [r3, #24]
 8004a2a:	68bb      	ldr	r3, [r7, #8]
 8004a2c:	691b      	ldr	r3, [r3, #16]
 8004a2e:	021a      	lsls	r2, r3, #8
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	430a      	orrs	r2, r1
 8004a36:	619a      	str	r2, [r3, #24]
      break;
 8004a38:	e043      	b.n	8004ac2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	68b9      	ldr	r1, [r7, #8]
 8004a40:	4618      	mov	r0, r3
 8004a42:	f000 fa61 	bl	8004f08 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	69da      	ldr	r2, [r3, #28]
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	f042 0208 	orr.w	r2, r2, #8
 8004a54:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	69da      	ldr	r2, [r3, #28]
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	f022 0204 	bic.w	r2, r2, #4
 8004a64:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	69d9      	ldr	r1, [r3, #28]
 8004a6c:	68bb      	ldr	r3, [r7, #8]
 8004a6e:	691a      	ldr	r2, [r3, #16]
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	430a      	orrs	r2, r1
 8004a76:	61da      	str	r2, [r3, #28]
      break;
 8004a78:	e023      	b.n	8004ac2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	68b9      	ldr	r1, [r7, #8]
 8004a80:	4618      	mov	r0, r3
 8004a82:	f000 faab 	bl	8004fdc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	69da      	ldr	r2, [r3, #28]
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004a94:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	69da      	ldr	r2, [r3, #28]
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004aa4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	69d9      	ldr	r1, [r3, #28]
 8004aac:	68bb      	ldr	r3, [r7, #8]
 8004aae:	691b      	ldr	r3, [r3, #16]
 8004ab0:	021a      	lsls	r2, r3, #8
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	430a      	orrs	r2, r1
 8004ab8:	61da      	str	r2, [r3, #28]
      break;
 8004aba:	e002      	b.n	8004ac2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004abc:	2301      	movs	r3, #1
 8004abe:	75fb      	strb	r3, [r7, #23]
      break;
 8004ac0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	2200      	movs	r2, #0
 8004ac6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004aca:	7dfb      	ldrb	r3, [r7, #23]
}
 8004acc:	4618      	mov	r0, r3
 8004ace:	3718      	adds	r7, #24
 8004ad0:	46bd      	mov	sp, r7
 8004ad2:	bd80      	pop	{r7, pc}

08004ad4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004ad4:	b580      	push	{r7, lr}
 8004ad6:	b084      	sub	sp, #16
 8004ad8:	af00      	add	r7, sp, #0
 8004ada:	6078      	str	r0, [r7, #4]
 8004adc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004ade:	2300      	movs	r3, #0
 8004ae0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ae8:	2b01      	cmp	r3, #1
 8004aea:	d101      	bne.n	8004af0 <HAL_TIM_ConfigClockSource+0x1c>
 8004aec:	2302      	movs	r3, #2
 8004aee:	e0b4      	b.n	8004c5a <HAL_TIM_ConfigClockSource+0x186>
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	2201      	movs	r2, #1
 8004af4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	2202      	movs	r2, #2
 8004afc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	689b      	ldr	r3, [r3, #8]
 8004b06:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004b08:	68bb      	ldr	r3, [r7, #8]
 8004b0a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004b0e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004b10:	68bb      	ldr	r3, [r7, #8]
 8004b12:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004b16:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	68ba      	ldr	r2, [r7, #8]
 8004b1e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004b20:	683b      	ldr	r3, [r7, #0]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004b28:	d03e      	beq.n	8004ba8 <HAL_TIM_ConfigClockSource+0xd4>
 8004b2a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004b2e:	f200 8087 	bhi.w	8004c40 <HAL_TIM_ConfigClockSource+0x16c>
 8004b32:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b36:	f000 8086 	beq.w	8004c46 <HAL_TIM_ConfigClockSource+0x172>
 8004b3a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b3e:	d87f      	bhi.n	8004c40 <HAL_TIM_ConfigClockSource+0x16c>
 8004b40:	2b70      	cmp	r3, #112	; 0x70
 8004b42:	d01a      	beq.n	8004b7a <HAL_TIM_ConfigClockSource+0xa6>
 8004b44:	2b70      	cmp	r3, #112	; 0x70
 8004b46:	d87b      	bhi.n	8004c40 <HAL_TIM_ConfigClockSource+0x16c>
 8004b48:	2b60      	cmp	r3, #96	; 0x60
 8004b4a:	d050      	beq.n	8004bee <HAL_TIM_ConfigClockSource+0x11a>
 8004b4c:	2b60      	cmp	r3, #96	; 0x60
 8004b4e:	d877      	bhi.n	8004c40 <HAL_TIM_ConfigClockSource+0x16c>
 8004b50:	2b50      	cmp	r3, #80	; 0x50
 8004b52:	d03c      	beq.n	8004bce <HAL_TIM_ConfigClockSource+0xfa>
 8004b54:	2b50      	cmp	r3, #80	; 0x50
 8004b56:	d873      	bhi.n	8004c40 <HAL_TIM_ConfigClockSource+0x16c>
 8004b58:	2b40      	cmp	r3, #64	; 0x40
 8004b5a:	d058      	beq.n	8004c0e <HAL_TIM_ConfigClockSource+0x13a>
 8004b5c:	2b40      	cmp	r3, #64	; 0x40
 8004b5e:	d86f      	bhi.n	8004c40 <HAL_TIM_ConfigClockSource+0x16c>
 8004b60:	2b30      	cmp	r3, #48	; 0x30
 8004b62:	d064      	beq.n	8004c2e <HAL_TIM_ConfigClockSource+0x15a>
 8004b64:	2b30      	cmp	r3, #48	; 0x30
 8004b66:	d86b      	bhi.n	8004c40 <HAL_TIM_ConfigClockSource+0x16c>
 8004b68:	2b20      	cmp	r3, #32
 8004b6a:	d060      	beq.n	8004c2e <HAL_TIM_ConfigClockSource+0x15a>
 8004b6c:	2b20      	cmp	r3, #32
 8004b6e:	d867      	bhi.n	8004c40 <HAL_TIM_ConfigClockSource+0x16c>
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d05c      	beq.n	8004c2e <HAL_TIM_ConfigClockSource+0x15a>
 8004b74:	2b10      	cmp	r3, #16
 8004b76:	d05a      	beq.n	8004c2e <HAL_TIM_ConfigClockSource+0x15a>
 8004b78:	e062      	b.n	8004c40 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	6818      	ldr	r0, [r3, #0]
 8004b7e:	683b      	ldr	r3, [r7, #0]
 8004b80:	6899      	ldr	r1, [r3, #8]
 8004b82:	683b      	ldr	r3, [r7, #0]
 8004b84:	685a      	ldr	r2, [r3, #4]
 8004b86:	683b      	ldr	r3, [r7, #0]
 8004b88:	68db      	ldr	r3, [r3, #12]
 8004b8a:	f000 fc0f 	bl	80053ac <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	689b      	ldr	r3, [r3, #8]
 8004b94:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004b96:	68bb      	ldr	r3, [r7, #8]
 8004b98:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004b9c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	68ba      	ldr	r2, [r7, #8]
 8004ba4:	609a      	str	r2, [r3, #8]
      break;
 8004ba6:	e04f      	b.n	8004c48 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	6818      	ldr	r0, [r3, #0]
 8004bac:	683b      	ldr	r3, [r7, #0]
 8004bae:	6899      	ldr	r1, [r3, #8]
 8004bb0:	683b      	ldr	r3, [r7, #0]
 8004bb2:	685a      	ldr	r2, [r3, #4]
 8004bb4:	683b      	ldr	r3, [r7, #0]
 8004bb6:	68db      	ldr	r3, [r3, #12]
 8004bb8:	f000 fbf8 	bl	80053ac <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	689a      	ldr	r2, [r3, #8]
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004bca:	609a      	str	r2, [r3, #8]
      break;
 8004bcc:	e03c      	b.n	8004c48 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	6818      	ldr	r0, [r3, #0]
 8004bd2:	683b      	ldr	r3, [r7, #0]
 8004bd4:	6859      	ldr	r1, [r3, #4]
 8004bd6:	683b      	ldr	r3, [r7, #0]
 8004bd8:	68db      	ldr	r3, [r3, #12]
 8004bda:	461a      	mov	r2, r3
 8004bdc:	f000 fab6 	bl	800514c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	2150      	movs	r1, #80	; 0x50
 8004be6:	4618      	mov	r0, r3
 8004be8:	f000 fbc5 	bl	8005376 <TIM_ITRx_SetConfig>
      break;
 8004bec:	e02c      	b.n	8004c48 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	6818      	ldr	r0, [r3, #0]
 8004bf2:	683b      	ldr	r3, [r7, #0]
 8004bf4:	6859      	ldr	r1, [r3, #4]
 8004bf6:	683b      	ldr	r3, [r7, #0]
 8004bf8:	68db      	ldr	r3, [r3, #12]
 8004bfa:	461a      	mov	r2, r3
 8004bfc:	f000 fb12 	bl	8005224 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	2160      	movs	r1, #96	; 0x60
 8004c06:	4618      	mov	r0, r3
 8004c08:	f000 fbb5 	bl	8005376 <TIM_ITRx_SetConfig>
      break;
 8004c0c:	e01c      	b.n	8004c48 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	6818      	ldr	r0, [r3, #0]
 8004c12:	683b      	ldr	r3, [r7, #0]
 8004c14:	6859      	ldr	r1, [r3, #4]
 8004c16:	683b      	ldr	r3, [r7, #0]
 8004c18:	68db      	ldr	r3, [r3, #12]
 8004c1a:	461a      	mov	r2, r3
 8004c1c:	f000 fa96 	bl	800514c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	2140      	movs	r1, #64	; 0x40
 8004c26:	4618      	mov	r0, r3
 8004c28:	f000 fba5 	bl	8005376 <TIM_ITRx_SetConfig>
      break;
 8004c2c:	e00c      	b.n	8004c48 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681a      	ldr	r2, [r3, #0]
 8004c32:	683b      	ldr	r3, [r7, #0]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	4619      	mov	r1, r3
 8004c38:	4610      	mov	r0, r2
 8004c3a:	f000 fb9c 	bl	8005376 <TIM_ITRx_SetConfig>
      break;
 8004c3e:	e003      	b.n	8004c48 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004c40:	2301      	movs	r3, #1
 8004c42:	73fb      	strb	r3, [r7, #15]
      break;
 8004c44:	e000      	b.n	8004c48 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004c46:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	2201      	movs	r2, #1
 8004c4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	2200      	movs	r2, #0
 8004c54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004c58:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c5a:	4618      	mov	r0, r3
 8004c5c:	3710      	adds	r7, #16
 8004c5e:	46bd      	mov	sp, r7
 8004c60:	bd80      	pop	{r7, pc}
	...

08004c64 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004c64:	b480      	push	{r7}
 8004c66:	b085      	sub	sp, #20
 8004c68:	af00      	add	r7, sp, #0
 8004c6a:	6078      	str	r0, [r7, #4]
 8004c6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	4a34      	ldr	r2, [pc, #208]	; (8004d48 <TIM_Base_SetConfig+0xe4>)
 8004c78:	4293      	cmp	r3, r2
 8004c7a:	d00f      	beq.n	8004c9c <TIM_Base_SetConfig+0x38>
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c82:	d00b      	beq.n	8004c9c <TIM_Base_SetConfig+0x38>
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	4a31      	ldr	r2, [pc, #196]	; (8004d4c <TIM_Base_SetConfig+0xe8>)
 8004c88:	4293      	cmp	r3, r2
 8004c8a:	d007      	beq.n	8004c9c <TIM_Base_SetConfig+0x38>
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	4a30      	ldr	r2, [pc, #192]	; (8004d50 <TIM_Base_SetConfig+0xec>)
 8004c90:	4293      	cmp	r3, r2
 8004c92:	d003      	beq.n	8004c9c <TIM_Base_SetConfig+0x38>
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	4a2f      	ldr	r2, [pc, #188]	; (8004d54 <TIM_Base_SetConfig+0xf0>)
 8004c98:	4293      	cmp	r3, r2
 8004c9a:	d108      	bne.n	8004cae <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ca2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004ca4:	683b      	ldr	r3, [r7, #0]
 8004ca6:	685b      	ldr	r3, [r3, #4]
 8004ca8:	68fa      	ldr	r2, [r7, #12]
 8004caa:	4313      	orrs	r3, r2
 8004cac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	4a25      	ldr	r2, [pc, #148]	; (8004d48 <TIM_Base_SetConfig+0xe4>)
 8004cb2:	4293      	cmp	r3, r2
 8004cb4:	d01b      	beq.n	8004cee <TIM_Base_SetConfig+0x8a>
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004cbc:	d017      	beq.n	8004cee <TIM_Base_SetConfig+0x8a>
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	4a22      	ldr	r2, [pc, #136]	; (8004d4c <TIM_Base_SetConfig+0xe8>)
 8004cc2:	4293      	cmp	r3, r2
 8004cc4:	d013      	beq.n	8004cee <TIM_Base_SetConfig+0x8a>
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	4a21      	ldr	r2, [pc, #132]	; (8004d50 <TIM_Base_SetConfig+0xec>)
 8004cca:	4293      	cmp	r3, r2
 8004ccc:	d00f      	beq.n	8004cee <TIM_Base_SetConfig+0x8a>
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	4a20      	ldr	r2, [pc, #128]	; (8004d54 <TIM_Base_SetConfig+0xf0>)
 8004cd2:	4293      	cmp	r3, r2
 8004cd4:	d00b      	beq.n	8004cee <TIM_Base_SetConfig+0x8a>
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	4a1f      	ldr	r2, [pc, #124]	; (8004d58 <TIM_Base_SetConfig+0xf4>)
 8004cda:	4293      	cmp	r3, r2
 8004cdc:	d007      	beq.n	8004cee <TIM_Base_SetConfig+0x8a>
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	4a1e      	ldr	r2, [pc, #120]	; (8004d5c <TIM_Base_SetConfig+0xf8>)
 8004ce2:	4293      	cmp	r3, r2
 8004ce4:	d003      	beq.n	8004cee <TIM_Base_SetConfig+0x8a>
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	4a1d      	ldr	r2, [pc, #116]	; (8004d60 <TIM_Base_SetConfig+0xfc>)
 8004cea:	4293      	cmp	r3, r2
 8004cec:	d108      	bne.n	8004d00 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004cf4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004cf6:	683b      	ldr	r3, [r7, #0]
 8004cf8:	68db      	ldr	r3, [r3, #12]
 8004cfa:	68fa      	ldr	r2, [r7, #12]
 8004cfc:	4313      	orrs	r3, r2
 8004cfe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004d06:	683b      	ldr	r3, [r7, #0]
 8004d08:	695b      	ldr	r3, [r3, #20]
 8004d0a:	4313      	orrs	r3, r2
 8004d0c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	68fa      	ldr	r2, [r7, #12]
 8004d12:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004d14:	683b      	ldr	r3, [r7, #0]
 8004d16:	689a      	ldr	r2, [r3, #8]
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004d1c:	683b      	ldr	r3, [r7, #0]
 8004d1e:	681a      	ldr	r2, [r3, #0]
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	4a08      	ldr	r2, [pc, #32]	; (8004d48 <TIM_Base_SetConfig+0xe4>)
 8004d28:	4293      	cmp	r3, r2
 8004d2a:	d103      	bne.n	8004d34 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004d2c:	683b      	ldr	r3, [r7, #0]
 8004d2e:	691a      	ldr	r2, [r3, #16]
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	2201      	movs	r2, #1
 8004d38:	615a      	str	r2, [r3, #20]
}
 8004d3a:	bf00      	nop
 8004d3c:	3714      	adds	r7, #20
 8004d3e:	46bd      	mov	sp, r7
 8004d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d44:	4770      	bx	lr
 8004d46:	bf00      	nop
 8004d48:	40010000 	.word	0x40010000
 8004d4c:	40000400 	.word	0x40000400
 8004d50:	40000800 	.word	0x40000800
 8004d54:	40000c00 	.word	0x40000c00
 8004d58:	40014000 	.word	0x40014000
 8004d5c:	40014400 	.word	0x40014400
 8004d60:	40014800 	.word	0x40014800

08004d64 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004d64:	b480      	push	{r7}
 8004d66:	b087      	sub	sp, #28
 8004d68:	af00      	add	r7, sp, #0
 8004d6a:	6078      	str	r0, [r7, #4]
 8004d6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	6a1b      	ldr	r3, [r3, #32]
 8004d72:	f023 0201 	bic.w	r2, r3, #1
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	6a1b      	ldr	r3, [r3, #32]
 8004d7e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	685b      	ldr	r3, [r3, #4]
 8004d84:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	699b      	ldr	r3, [r3, #24]
 8004d8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d92:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	f023 0303 	bic.w	r3, r3, #3
 8004d9a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004d9c:	683b      	ldr	r3, [r7, #0]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	68fa      	ldr	r2, [r7, #12]
 8004da2:	4313      	orrs	r3, r2
 8004da4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004da6:	697b      	ldr	r3, [r7, #20]
 8004da8:	f023 0302 	bic.w	r3, r3, #2
 8004dac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004dae:	683b      	ldr	r3, [r7, #0]
 8004db0:	689b      	ldr	r3, [r3, #8]
 8004db2:	697a      	ldr	r2, [r7, #20]
 8004db4:	4313      	orrs	r3, r2
 8004db6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	4a1c      	ldr	r2, [pc, #112]	; (8004e2c <TIM_OC1_SetConfig+0xc8>)
 8004dbc:	4293      	cmp	r3, r2
 8004dbe:	d10c      	bne.n	8004dda <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004dc0:	697b      	ldr	r3, [r7, #20]
 8004dc2:	f023 0308 	bic.w	r3, r3, #8
 8004dc6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004dc8:	683b      	ldr	r3, [r7, #0]
 8004dca:	68db      	ldr	r3, [r3, #12]
 8004dcc:	697a      	ldr	r2, [r7, #20]
 8004dce:	4313      	orrs	r3, r2
 8004dd0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004dd2:	697b      	ldr	r3, [r7, #20]
 8004dd4:	f023 0304 	bic.w	r3, r3, #4
 8004dd8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	4a13      	ldr	r2, [pc, #76]	; (8004e2c <TIM_OC1_SetConfig+0xc8>)
 8004dde:	4293      	cmp	r3, r2
 8004de0:	d111      	bne.n	8004e06 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004de2:	693b      	ldr	r3, [r7, #16]
 8004de4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004de8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004dea:	693b      	ldr	r3, [r7, #16]
 8004dec:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004df0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004df2:	683b      	ldr	r3, [r7, #0]
 8004df4:	695b      	ldr	r3, [r3, #20]
 8004df6:	693a      	ldr	r2, [r7, #16]
 8004df8:	4313      	orrs	r3, r2
 8004dfa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004dfc:	683b      	ldr	r3, [r7, #0]
 8004dfe:	699b      	ldr	r3, [r3, #24]
 8004e00:	693a      	ldr	r2, [r7, #16]
 8004e02:	4313      	orrs	r3, r2
 8004e04:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	693a      	ldr	r2, [r7, #16]
 8004e0a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	68fa      	ldr	r2, [r7, #12]
 8004e10:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004e12:	683b      	ldr	r3, [r7, #0]
 8004e14:	685a      	ldr	r2, [r3, #4]
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	697a      	ldr	r2, [r7, #20]
 8004e1e:	621a      	str	r2, [r3, #32]
}
 8004e20:	bf00      	nop
 8004e22:	371c      	adds	r7, #28
 8004e24:	46bd      	mov	sp, r7
 8004e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e2a:	4770      	bx	lr
 8004e2c:	40010000 	.word	0x40010000

08004e30 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004e30:	b480      	push	{r7}
 8004e32:	b087      	sub	sp, #28
 8004e34:	af00      	add	r7, sp, #0
 8004e36:	6078      	str	r0, [r7, #4]
 8004e38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	6a1b      	ldr	r3, [r3, #32]
 8004e3e:	f023 0210 	bic.w	r2, r3, #16
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	6a1b      	ldr	r3, [r3, #32]
 8004e4a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	685b      	ldr	r3, [r3, #4]
 8004e50:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	699b      	ldr	r3, [r3, #24]
 8004e56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e5e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e66:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004e68:	683b      	ldr	r3, [r7, #0]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	021b      	lsls	r3, r3, #8
 8004e6e:	68fa      	ldr	r2, [r7, #12]
 8004e70:	4313      	orrs	r3, r2
 8004e72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004e74:	697b      	ldr	r3, [r7, #20]
 8004e76:	f023 0320 	bic.w	r3, r3, #32
 8004e7a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004e7c:	683b      	ldr	r3, [r7, #0]
 8004e7e:	689b      	ldr	r3, [r3, #8]
 8004e80:	011b      	lsls	r3, r3, #4
 8004e82:	697a      	ldr	r2, [r7, #20]
 8004e84:	4313      	orrs	r3, r2
 8004e86:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	4a1e      	ldr	r2, [pc, #120]	; (8004f04 <TIM_OC2_SetConfig+0xd4>)
 8004e8c:	4293      	cmp	r3, r2
 8004e8e:	d10d      	bne.n	8004eac <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004e90:	697b      	ldr	r3, [r7, #20]
 8004e92:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004e96:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004e98:	683b      	ldr	r3, [r7, #0]
 8004e9a:	68db      	ldr	r3, [r3, #12]
 8004e9c:	011b      	lsls	r3, r3, #4
 8004e9e:	697a      	ldr	r2, [r7, #20]
 8004ea0:	4313      	orrs	r3, r2
 8004ea2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004ea4:	697b      	ldr	r3, [r7, #20]
 8004ea6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004eaa:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	4a15      	ldr	r2, [pc, #84]	; (8004f04 <TIM_OC2_SetConfig+0xd4>)
 8004eb0:	4293      	cmp	r3, r2
 8004eb2:	d113      	bne.n	8004edc <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004eb4:	693b      	ldr	r3, [r7, #16]
 8004eb6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004eba:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004ebc:	693b      	ldr	r3, [r7, #16]
 8004ebe:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004ec2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004ec4:	683b      	ldr	r3, [r7, #0]
 8004ec6:	695b      	ldr	r3, [r3, #20]
 8004ec8:	009b      	lsls	r3, r3, #2
 8004eca:	693a      	ldr	r2, [r7, #16]
 8004ecc:	4313      	orrs	r3, r2
 8004ece:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004ed0:	683b      	ldr	r3, [r7, #0]
 8004ed2:	699b      	ldr	r3, [r3, #24]
 8004ed4:	009b      	lsls	r3, r3, #2
 8004ed6:	693a      	ldr	r2, [r7, #16]
 8004ed8:	4313      	orrs	r3, r2
 8004eda:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	693a      	ldr	r2, [r7, #16]
 8004ee0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	68fa      	ldr	r2, [r7, #12]
 8004ee6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004ee8:	683b      	ldr	r3, [r7, #0]
 8004eea:	685a      	ldr	r2, [r3, #4]
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	697a      	ldr	r2, [r7, #20]
 8004ef4:	621a      	str	r2, [r3, #32]
}
 8004ef6:	bf00      	nop
 8004ef8:	371c      	adds	r7, #28
 8004efa:	46bd      	mov	sp, r7
 8004efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f00:	4770      	bx	lr
 8004f02:	bf00      	nop
 8004f04:	40010000 	.word	0x40010000

08004f08 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004f08:	b480      	push	{r7}
 8004f0a:	b087      	sub	sp, #28
 8004f0c:	af00      	add	r7, sp, #0
 8004f0e:	6078      	str	r0, [r7, #4]
 8004f10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	6a1b      	ldr	r3, [r3, #32]
 8004f16:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	6a1b      	ldr	r3, [r3, #32]
 8004f22:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	685b      	ldr	r3, [r3, #4]
 8004f28:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	69db      	ldr	r3, [r3, #28]
 8004f2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f36:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	f023 0303 	bic.w	r3, r3, #3
 8004f3e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004f40:	683b      	ldr	r3, [r7, #0]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	68fa      	ldr	r2, [r7, #12]
 8004f46:	4313      	orrs	r3, r2
 8004f48:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004f4a:	697b      	ldr	r3, [r7, #20]
 8004f4c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004f50:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004f52:	683b      	ldr	r3, [r7, #0]
 8004f54:	689b      	ldr	r3, [r3, #8]
 8004f56:	021b      	lsls	r3, r3, #8
 8004f58:	697a      	ldr	r2, [r7, #20]
 8004f5a:	4313      	orrs	r3, r2
 8004f5c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	4a1d      	ldr	r2, [pc, #116]	; (8004fd8 <TIM_OC3_SetConfig+0xd0>)
 8004f62:	4293      	cmp	r3, r2
 8004f64:	d10d      	bne.n	8004f82 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004f66:	697b      	ldr	r3, [r7, #20]
 8004f68:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004f6c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004f6e:	683b      	ldr	r3, [r7, #0]
 8004f70:	68db      	ldr	r3, [r3, #12]
 8004f72:	021b      	lsls	r3, r3, #8
 8004f74:	697a      	ldr	r2, [r7, #20]
 8004f76:	4313      	orrs	r3, r2
 8004f78:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004f7a:	697b      	ldr	r3, [r7, #20]
 8004f7c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004f80:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	4a14      	ldr	r2, [pc, #80]	; (8004fd8 <TIM_OC3_SetConfig+0xd0>)
 8004f86:	4293      	cmp	r3, r2
 8004f88:	d113      	bne.n	8004fb2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004f8a:	693b      	ldr	r3, [r7, #16]
 8004f8c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004f90:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004f92:	693b      	ldr	r3, [r7, #16]
 8004f94:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004f98:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004f9a:	683b      	ldr	r3, [r7, #0]
 8004f9c:	695b      	ldr	r3, [r3, #20]
 8004f9e:	011b      	lsls	r3, r3, #4
 8004fa0:	693a      	ldr	r2, [r7, #16]
 8004fa2:	4313      	orrs	r3, r2
 8004fa4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004fa6:	683b      	ldr	r3, [r7, #0]
 8004fa8:	699b      	ldr	r3, [r3, #24]
 8004faa:	011b      	lsls	r3, r3, #4
 8004fac:	693a      	ldr	r2, [r7, #16]
 8004fae:	4313      	orrs	r3, r2
 8004fb0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	693a      	ldr	r2, [r7, #16]
 8004fb6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	68fa      	ldr	r2, [r7, #12]
 8004fbc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004fbe:	683b      	ldr	r3, [r7, #0]
 8004fc0:	685a      	ldr	r2, [r3, #4]
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	697a      	ldr	r2, [r7, #20]
 8004fca:	621a      	str	r2, [r3, #32]
}
 8004fcc:	bf00      	nop
 8004fce:	371c      	adds	r7, #28
 8004fd0:	46bd      	mov	sp, r7
 8004fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd6:	4770      	bx	lr
 8004fd8:	40010000 	.word	0x40010000

08004fdc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004fdc:	b480      	push	{r7}
 8004fde:	b087      	sub	sp, #28
 8004fe0:	af00      	add	r7, sp, #0
 8004fe2:	6078      	str	r0, [r7, #4]
 8004fe4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	6a1b      	ldr	r3, [r3, #32]
 8004fea:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	6a1b      	ldr	r3, [r3, #32]
 8004ff6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	685b      	ldr	r3, [r3, #4]
 8004ffc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	69db      	ldr	r3, [r3, #28]
 8005002:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800500a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005012:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005014:	683b      	ldr	r3, [r7, #0]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	021b      	lsls	r3, r3, #8
 800501a:	68fa      	ldr	r2, [r7, #12]
 800501c:	4313      	orrs	r3, r2
 800501e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005020:	693b      	ldr	r3, [r7, #16]
 8005022:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005026:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005028:	683b      	ldr	r3, [r7, #0]
 800502a:	689b      	ldr	r3, [r3, #8]
 800502c:	031b      	lsls	r3, r3, #12
 800502e:	693a      	ldr	r2, [r7, #16]
 8005030:	4313      	orrs	r3, r2
 8005032:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	4a10      	ldr	r2, [pc, #64]	; (8005078 <TIM_OC4_SetConfig+0x9c>)
 8005038:	4293      	cmp	r3, r2
 800503a:	d109      	bne.n	8005050 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800503c:	697b      	ldr	r3, [r7, #20]
 800503e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005042:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005044:	683b      	ldr	r3, [r7, #0]
 8005046:	695b      	ldr	r3, [r3, #20]
 8005048:	019b      	lsls	r3, r3, #6
 800504a:	697a      	ldr	r2, [r7, #20]
 800504c:	4313      	orrs	r3, r2
 800504e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	697a      	ldr	r2, [r7, #20]
 8005054:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	68fa      	ldr	r2, [r7, #12]
 800505a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800505c:	683b      	ldr	r3, [r7, #0]
 800505e:	685a      	ldr	r2, [r3, #4]
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	693a      	ldr	r2, [r7, #16]
 8005068:	621a      	str	r2, [r3, #32]
}
 800506a:	bf00      	nop
 800506c:	371c      	adds	r7, #28
 800506e:	46bd      	mov	sp, r7
 8005070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005074:	4770      	bx	lr
 8005076:	bf00      	nop
 8005078:	40010000 	.word	0x40010000

0800507c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800507c:	b480      	push	{r7}
 800507e:	b087      	sub	sp, #28
 8005080:	af00      	add	r7, sp, #0
 8005082:	60f8      	str	r0, [r7, #12]
 8005084:	60b9      	str	r1, [r7, #8]
 8005086:	607a      	str	r2, [r7, #4]
 8005088:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	6a1b      	ldr	r3, [r3, #32]
 800508e:	f023 0201 	bic.w	r2, r3, #1
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	699b      	ldr	r3, [r3, #24]
 800509a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	6a1b      	ldr	r3, [r3, #32]
 80050a0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	4a24      	ldr	r2, [pc, #144]	; (8005138 <TIM_TI1_SetConfig+0xbc>)
 80050a6:	4293      	cmp	r3, r2
 80050a8:	d013      	beq.n	80050d2 <TIM_TI1_SetConfig+0x56>
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80050b0:	d00f      	beq.n	80050d2 <TIM_TI1_SetConfig+0x56>
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	4a21      	ldr	r2, [pc, #132]	; (800513c <TIM_TI1_SetConfig+0xc0>)
 80050b6:	4293      	cmp	r3, r2
 80050b8:	d00b      	beq.n	80050d2 <TIM_TI1_SetConfig+0x56>
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	4a20      	ldr	r2, [pc, #128]	; (8005140 <TIM_TI1_SetConfig+0xc4>)
 80050be:	4293      	cmp	r3, r2
 80050c0:	d007      	beq.n	80050d2 <TIM_TI1_SetConfig+0x56>
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	4a1f      	ldr	r2, [pc, #124]	; (8005144 <TIM_TI1_SetConfig+0xc8>)
 80050c6:	4293      	cmp	r3, r2
 80050c8:	d003      	beq.n	80050d2 <TIM_TI1_SetConfig+0x56>
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	4a1e      	ldr	r2, [pc, #120]	; (8005148 <TIM_TI1_SetConfig+0xcc>)
 80050ce:	4293      	cmp	r3, r2
 80050d0:	d101      	bne.n	80050d6 <TIM_TI1_SetConfig+0x5a>
 80050d2:	2301      	movs	r3, #1
 80050d4:	e000      	b.n	80050d8 <TIM_TI1_SetConfig+0x5c>
 80050d6:	2300      	movs	r3, #0
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d008      	beq.n	80050ee <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80050dc:	697b      	ldr	r3, [r7, #20]
 80050de:	f023 0303 	bic.w	r3, r3, #3
 80050e2:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80050e4:	697a      	ldr	r2, [r7, #20]
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	4313      	orrs	r3, r2
 80050ea:	617b      	str	r3, [r7, #20]
 80050ec:	e003      	b.n	80050f6 <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80050ee:	697b      	ldr	r3, [r7, #20]
 80050f0:	f043 0301 	orr.w	r3, r3, #1
 80050f4:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80050f6:	697b      	ldr	r3, [r7, #20]
 80050f8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80050fc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80050fe:	683b      	ldr	r3, [r7, #0]
 8005100:	011b      	lsls	r3, r3, #4
 8005102:	b2db      	uxtb	r3, r3
 8005104:	697a      	ldr	r2, [r7, #20]
 8005106:	4313      	orrs	r3, r2
 8005108:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800510a:	693b      	ldr	r3, [r7, #16]
 800510c:	f023 030a 	bic.w	r3, r3, #10
 8005110:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8005112:	68bb      	ldr	r3, [r7, #8]
 8005114:	f003 030a 	and.w	r3, r3, #10
 8005118:	693a      	ldr	r2, [r7, #16]
 800511a:	4313      	orrs	r3, r2
 800511c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	697a      	ldr	r2, [r7, #20]
 8005122:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	693a      	ldr	r2, [r7, #16]
 8005128:	621a      	str	r2, [r3, #32]
}
 800512a:	bf00      	nop
 800512c:	371c      	adds	r7, #28
 800512e:	46bd      	mov	sp, r7
 8005130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005134:	4770      	bx	lr
 8005136:	bf00      	nop
 8005138:	40010000 	.word	0x40010000
 800513c:	40000400 	.word	0x40000400
 8005140:	40000800 	.word	0x40000800
 8005144:	40000c00 	.word	0x40000c00
 8005148:	40014000 	.word	0x40014000

0800514c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800514c:	b480      	push	{r7}
 800514e:	b087      	sub	sp, #28
 8005150:	af00      	add	r7, sp, #0
 8005152:	60f8      	str	r0, [r7, #12]
 8005154:	60b9      	str	r1, [r7, #8]
 8005156:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	6a1b      	ldr	r3, [r3, #32]
 800515c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	6a1b      	ldr	r3, [r3, #32]
 8005162:	f023 0201 	bic.w	r2, r3, #1
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	699b      	ldr	r3, [r3, #24]
 800516e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005170:	693b      	ldr	r3, [r7, #16]
 8005172:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005176:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	011b      	lsls	r3, r3, #4
 800517c:	693a      	ldr	r2, [r7, #16]
 800517e:	4313      	orrs	r3, r2
 8005180:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005182:	697b      	ldr	r3, [r7, #20]
 8005184:	f023 030a 	bic.w	r3, r3, #10
 8005188:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800518a:	697a      	ldr	r2, [r7, #20]
 800518c:	68bb      	ldr	r3, [r7, #8]
 800518e:	4313      	orrs	r3, r2
 8005190:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	693a      	ldr	r2, [r7, #16]
 8005196:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	697a      	ldr	r2, [r7, #20]
 800519c:	621a      	str	r2, [r3, #32]
}
 800519e:	bf00      	nop
 80051a0:	371c      	adds	r7, #28
 80051a2:	46bd      	mov	sp, r7
 80051a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a8:	4770      	bx	lr

080051aa <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80051aa:	b480      	push	{r7}
 80051ac:	b087      	sub	sp, #28
 80051ae:	af00      	add	r7, sp, #0
 80051b0:	60f8      	str	r0, [r7, #12]
 80051b2:	60b9      	str	r1, [r7, #8]
 80051b4:	607a      	str	r2, [r7, #4]
 80051b6:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	6a1b      	ldr	r3, [r3, #32]
 80051bc:	f023 0210 	bic.w	r2, r3, #16
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	699b      	ldr	r3, [r3, #24]
 80051c8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	6a1b      	ldr	r3, [r3, #32]
 80051ce:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80051d0:	697b      	ldr	r3, [r7, #20]
 80051d2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80051d6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	021b      	lsls	r3, r3, #8
 80051dc:	697a      	ldr	r2, [r7, #20]
 80051de:	4313      	orrs	r3, r2
 80051e0:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80051e2:	697b      	ldr	r3, [r7, #20]
 80051e4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80051e8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80051ea:	683b      	ldr	r3, [r7, #0]
 80051ec:	031b      	lsls	r3, r3, #12
 80051ee:	b29b      	uxth	r3, r3
 80051f0:	697a      	ldr	r2, [r7, #20]
 80051f2:	4313      	orrs	r3, r2
 80051f4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80051f6:	693b      	ldr	r3, [r7, #16]
 80051f8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80051fc:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80051fe:	68bb      	ldr	r3, [r7, #8]
 8005200:	011b      	lsls	r3, r3, #4
 8005202:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8005206:	693a      	ldr	r2, [r7, #16]
 8005208:	4313      	orrs	r3, r2
 800520a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	697a      	ldr	r2, [r7, #20]
 8005210:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	693a      	ldr	r2, [r7, #16]
 8005216:	621a      	str	r2, [r3, #32]
}
 8005218:	bf00      	nop
 800521a:	371c      	adds	r7, #28
 800521c:	46bd      	mov	sp, r7
 800521e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005222:	4770      	bx	lr

08005224 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005224:	b480      	push	{r7}
 8005226:	b087      	sub	sp, #28
 8005228:	af00      	add	r7, sp, #0
 800522a:	60f8      	str	r0, [r7, #12]
 800522c:	60b9      	str	r1, [r7, #8]
 800522e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	6a1b      	ldr	r3, [r3, #32]
 8005234:	f023 0210 	bic.w	r2, r3, #16
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	699b      	ldr	r3, [r3, #24]
 8005240:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	6a1b      	ldr	r3, [r3, #32]
 8005246:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005248:	697b      	ldr	r3, [r7, #20]
 800524a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800524e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	031b      	lsls	r3, r3, #12
 8005254:	697a      	ldr	r2, [r7, #20]
 8005256:	4313      	orrs	r3, r2
 8005258:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800525a:	693b      	ldr	r3, [r7, #16]
 800525c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005260:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005262:	68bb      	ldr	r3, [r7, #8]
 8005264:	011b      	lsls	r3, r3, #4
 8005266:	693a      	ldr	r2, [r7, #16]
 8005268:	4313      	orrs	r3, r2
 800526a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	697a      	ldr	r2, [r7, #20]
 8005270:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	693a      	ldr	r2, [r7, #16]
 8005276:	621a      	str	r2, [r3, #32]
}
 8005278:	bf00      	nop
 800527a:	371c      	adds	r7, #28
 800527c:	46bd      	mov	sp, r7
 800527e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005282:	4770      	bx	lr

08005284 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005284:	b480      	push	{r7}
 8005286:	b087      	sub	sp, #28
 8005288:	af00      	add	r7, sp, #0
 800528a:	60f8      	str	r0, [r7, #12]
 800528c:	60b9      	str	r1, [r7, #8]
 800528e:	607a      	str	r2, [r7, #4]
 8005290:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	6a1b      	ldr	r3, [r3, #32]
 8005296:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	69db      	ldr	r3, [r3, #28]
 80052a2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	6a1b      	ldr	r3, [r3, #32]
 80052a8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80052aa:	697b      	ldr	r3, [r7, #20]
 80052ac:	f023 0303 	bic.w	r3, r3, #3
 80052b0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 80052b2:	697a      	ldr	r2, [r7, #20]
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	4313      	orrs	r3, r2
 80052b8:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80052ba:	697b      	ldr	r3, [r7, #20]
 80052bc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80052c0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80052c2:	683b      	ldr	r3, [r7, #0]
 80052c4:	011b      	lsls	r3, r3, #4
 80052c6:	b2db      	uxtb	r3, r3
 80052c8:	697a      	ldr	r2, [r7, #20]
 80052ca:	4313      	orrs	r3, r2
 80052cc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80052ce:	693b      	ldr	r3, [r7, #16]
 80052d0:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 80052d4:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80052d6:	68bb      	ldr	r3, [r7, #8]
 80052d8:	021b      	lsls	r3, r3, #8
 80052da:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 80052de:	693a      	ldr	r2, [r7, #16]
 80052e0:	4313      	orrs	r3, r2
 80052e2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	697a      	ldr	r2, [r7, #20]
 80052e8:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	693a      	ldr	r2, [r7, #16]
 80052ee:	621a      	str	r2, [r3, #32]
}
 80052f0:	bf00      	nop
 80052f2:	371c      	adds	r7, #28
 80052f4:	46bd      	mov	sp, r7
 80052f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052fa:	4770      	bx	lr

080052fc <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80052fc:	b480      	push	{r7}
 80052fe:	b087      	sub	sp, #28
 8005300:	af00      	add	r7, sp, #0
 8005302:	60f8      	str	r0, [r7, #12]
 8005304:	60b9      	str	r1, [r7, #8]
 8005306:	607a      	str	r2, [r7, #4]
 8005308:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	6a1b      	ldr	r3, [r3, #32]
 800530e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	69db      	ldr	r3, [r3, #28]
 800531a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	6a1b      	ldr	r3, [r3, #32]
 8005320:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8005322:	697b      	ldr	r3, [r7, #20]
 8005324:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005328:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	021b      	lsls	r3, r3, #8
 800532e:	697a      	ldr	r2, [r7, #20]
 8005330:	4313      	orrs	r3, r2
 8005332:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8005334:	697b      	ldr	r3, [r7, #20]
 8005336:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800533a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800533c:	683b      	ldr	r3, [r7, #0]
 800533e:	031b      	lsls	r3, r3, #12
 8005340:	b29b      	uxth	r3, r3
 8005342:	697a      	ldr	r2, [r7, #20]
 8005344:	4313      	orrs	r3, r2
 8005346:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8005348:	693b      	ldr	r3, [r7, #16]
 800534a:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800534e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8005350:	68bb      	ldr	r3, [r7, #8]
 8005352:	031b      	lsls	r3, r3, #12
 8005354:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8005358:	693a      	ldr	r2, [r7, #16]
 800535a:	4313      	orrs	r3, r2
 800535c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	697a      	ldr	r2, [r7, #20]
 8005362:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	693a      	ldr	r2, [r7, #16]
 8005368:	621a      	str	r2, [r3, #32]
}
 800536a:	bf00      	nop
 800536c:	371c      	adds	r7, #28
 800536e:	46bd      	mov	sp, r7
 8005370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005374:	4770      	bx	lr

08005376 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005376:	b480      	push	{r7}
 8005378:	b085      	sub	sp, #20
 800537a:	af00      	add	r7, sp, #0
 800537c:	6078      	str	r0, [r7, #4]
 800537e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	689b      	ldr	r3, [r3, #8]
 8005384:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800538c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800538e:	683a      	ldr	r2, [r7, #0]
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	4313      	orrs	r3, r2
 8005394:	f043 0307 	orr.w	r3, r3, #7
 8005398:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	68fa      	ldr	r2, [r7, #12]
 800539e:	609a      	str	r2, [r3, #8]
}
 80053a0:	bf00      	nop
 80053a2:	3714      	adds	r7, #20
 80053a4:	46bd      	mov	sp, r7
 80053a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053aa:	4770      	bx	lr

080053ac <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80053ac:	b480      	push	{r7}
 80053ae:	b087      	sub	sp, #28
 80053b0:	af00      	add	r7, sp, #0
 80053b2:	60f8      	str	r0, [r7, #12]
 80053b4:	60b9      	str	r1, [r7, #8]
 80053b6:	607a      	str	r2, [r7, #4]
 80053b8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	689b      	ldr	r3, [r3, #8]
 80053be:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80053c0:	697b      	ldr	r3, [r7, #20]
 80053c2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80053c6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80053c8:	683b      	ldr	r3, [r7, #0]
 80053ca:	021a      	lsls	r2, r3, #8
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	431a      	orrs	r2, r3
 80053d0:	68bb      	ldr	r3, [r7, #8]
 80053d2:	4313      	orrs	r3, r2
 80053d4:	697a      	ldr	r2, [r7, #20]
 80053d6:	4313      	orrs	r3, r2
 80053d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	697a      	ldr	r2, [r7, #20]
 80053de:	609a      	str	r2, [r3, #8]
}
 80053e0:	bf00      	nop
 80053e2:	371c      	adds	r7, #28
 80053e4:	46bd      	mov	sp, r7
 80053e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ea:	4770      	bx	lr

080053ec <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80053ec:	b480      	push	{r7}
 80053ee:	b087      	sub	sp, #28
 80053f0:	af00      	add	r7, sp, #0
 80053f2:	60f8      	str	r0, [r7, #12]
 80053f4:	60b9      	str	r1, [r7, #8]
 80053f6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80053f8:	68bb      	ldr	r3, [r7, #8]
 80053fa:	f003 031f 	and.w	r3, r3, #31
 80053fe:	2201      	movs	r2, #1
 8005400:	fa02 f303 	lsl.w	r3, r2, r3
 8005404:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	6a1a      	ldr	r2, [r3, #32]
 800540a:	697b      	ldr	r3, [r7, #20]
 800540c:	43db      	mvns	r3, r3
 800540e:	401a      	ands	r2, r3
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	6a1a      	ldr	r2, [r3, #32]
 8005418:	68bb      	ldr	r3, [r7, #8]
 800541a:	f003 031f 	and.w	r3, r3, #31
 800541e:	6879      	ldr	r1, [r7, #4]
 8005420:	fa01 f303 	lsl.w	r3, r1, r3
 8005424:	431a      	orrs	r2, r3
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	621a      	str	r2, [r3, #32]
}
 800542a:	bf00      	nop
 800542c:	371c      	adds	r7, #28
 800542e:	46bd      	mov	sp, r7
 8005430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005434:	4770      	bx	lr
	...

08005438 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005438:	b480      	push	{r7}
 800543a:	b085      	sub	sp, #20
 800543c:	af00      	add	r7, sp, #0
 800543e:	6078      	str	r0, [r7, #4]
 8005440:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005448:	2b01      	cmp	r3, #1
 800544a:	d101      	bne.n	8005450 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800544c:	2302      	movs	r3, #2
 800544e:	e050      	b.n	80054f2 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	2201      	movs	r2, #1
 8005454:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	2202      	movs	r2, #2
 800545c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	685b      	ldr	r3, [r3, #4]
 8005466:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	689b      	ldr	r3, [r3, #8]
 800546e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005476:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005478:	683b      	ldr	r3, [r7, #0]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	68fa      	ldr	r2, [r7, #12]
 800547e:	4313      	orrs	r3, r2
 8005480:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	68fa      	ldr	r2, [r7, #12]
 8005488:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	4a1c      	ldr	r2, [pc, #112]	; (8005500 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005490:	4293      	cmp	r3, r2
 8005492:	d018      	beq.n	80054c6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800549c:	d013      	beq.n	80054c6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	4a18      	ldr	r2, [pc, #96]	; (8005504 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80054a4:	4293      	cmp	r3, r2
 80054a6:	d00e      	beq.n	80054c6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	4a16      	ldr	r2, [pc, #88]	; (8005508 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80054ae:	4293      	cmp	r3, r2
 80054b0:	d009      	beq.n	80054c6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	4a15      	ldr	r2, [pc, #84]	; (800550c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80054b8:	4293      	cmp	r3, r2
 80054ba:	d004      	beq.n	80054c6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	4a13      	ldr	r2, [pc, #76]	; (8005510 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80054c2:	4293      	cmp	r3, r2
 80054c4:	d10c      	bne.n	80054e0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80054c6:	68bb      	ldr	r3, [r7, #8]
 80054c8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80054cc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80054ce:	683b      	ldr	r3, [r7, #0]
 80054d0:	685b      	ldr	r3, [r3, #4]
 80054d2:	68ba      	ldr	r2, [r7, #8]
 80054d4:	4313      	orrs	r3, r2
 80054d6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	68ba      	ldr	r2, [r7, #8]
 80054de:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	2201      	movs	r2, #1
 80054e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	2200      	movs	r2, #0
 80054ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80054f0:	2300      	movs	r3, #0
}
 80054f2:	4618      	mov	r0, r3
 80054f4:	3714      	adds	r7, #20
 80054f6:	46bd      	mov	sp, r7
 80054f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054fc:	4770      	bx	lr
 80054fe:	bf00      	nop
 8005500:	40010000 	.word	0x40010000
 8005504:	40000400 	.word	0x40000400
 8005508:	40000800 	.word	0x40000800
 800550c:	40000c00 	.word	0x40000c00
 8005510:	40014000 	.word	0x40014000

08005514 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005514:	b480      	push	{r7}
 8005516:	b085      	sub	sp, #20
 8005518:	af00      	add	r7, sp, #0
 800551a:	6078      	str	r0, [r7, #4]
 800551c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800551e:	2300      	movs	r3, #0
 8005520:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005528:	2b01      	cmp	r3, #1
 800552a:	d101      	bne.n	8005530 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800552c:	2302      	movs	r3, #2
 800552e:	e03d      	b.n	80055ac <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	2201      	movs	r2, #1
 8005534:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800553e:	683b      	ldr	r3, [r7, #0]
 8005540:	68db      	ldr	r3, [r3, #12]
 8005542:	4313      	orrs	r3, r2
 8005544:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800554c:	683b      	ldr	r3, [r7, #0]
 800554e:	689b      	ldr	r3, [r3, #8]
 8005550:	4313      	orrs	r3, r2
 8005552:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800555a:	683b      	ldr	r3, [r7, #0]
 800555c:	685b      	ldr	r3, [r3, #4]
 800555e:	4313      	orrs	r3, r2
 8005560:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005568:	683b      	ldr	r3, [r7, #0]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	4313      	orrs	r3, r2
 800556e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005576:	683b      	ldr	r3, [r7, #0]
 8005578:	691b      	ldr	r3, [r3, #16]
 800557a:	4313      	orrs	r3, r2
 800557c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005584:	683b      	ldr	r3, [r7, #0]
 8005586:	695b      	ldr	r3, [r3, #20]
 8005588:	4313      	orrs	r3, r2
 800558a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005592:	683b      	ldr	r3, [r7, #0]
 8005594:	69db      	ldr	r3, [r3, #28]
 8005596:	4313      	orrs	r3, r2
 8005598:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	68fa      	ldr	r2, [r7, #12]
 80055a0:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	2200      	movs	r2, #0
 80055a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80055aa:	2300      	movs	r3, #0
}
 80055ac:	4618      	mov	r0, r3
 80055ae:	3714      	adds	r7, #20
 80055b0:	46bd      	mov	sp, r7
 80055b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b6:	4770      	bx	lr

080055b8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80055b8:	b084      	sub	sp, #16
 80055ba:	b580      	push	{r7, lr}
 80055bc:	b084      	sub	sp, #16
 80055be:	af00      	add	r7, sp, #0
 80055c0:	6078      	str	r0, [r7, #4]
 80055c2:	f107 001c 	add.w	r0, r7, #28
 80055c6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80055ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055cc:	2b01      	cmp	r3, #1
 80055ce:	d122      	bne.n	8005616 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055d4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	68db      	ldr	r3, [r3, #12]
 80055e0:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80055e4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80055e8:	687a      	ldr	r2, [r7, #4]
 80055ea:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	68db      	ldr	r3, [r3, #12]
 80055f0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80055f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80055fa:	2b01      	cmp	r3, #1
 80055fc:	d105      	bne.n	800560a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	68db      	ldr	r3, [r3, #12]
 8005602:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800560a:	6878      	ldr	r0, [r7, #4]
 800560c:	f001 fb1c 	bl	8006c48 <USB_CoreReset>
 8005610:	4603      	mov	r3, r0
 8005612:	73fb      	strb	r3, [r7, #15]
 8005614:	e01a      	b.n	800564c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	68db      	ldr	r3, [r3, #12]
 800561a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005622:	6878      	ldr	r0, [r7, #4]
 8005624:	f001 fb10 	bl	8006c48 <USB_CoreReset>
 8005628:	4603      	mov	r3, r0
 800562a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800562c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800562e:	2b00      	cmp	r3, #0
 8005630:	d106      	bne.n	8005640 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005636:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	639a      	str	r2, [r3, #56]	; 0x38
 800563e:	e005      	b.n	800564c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005644:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800564c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800564e:	2b01      	cmp	r3, #1
 8005650:	d10b      	bne.n	800566a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	689b      	ldr	r3, [r3, #8]
 8005656:	f043 0206 	orr.w	r2, r3, #6
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	689b      	ldr	r3, [r3, #8]
 8005662:	f043 0220 	orr.w	r2, r3, #32
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800566a:	7bfb      	ldrb	r3, [r7, #15]
}
 800566c:	4618      	mov	r0, r3
 800566e:	3710      	adds	r7, #16
 8005670:	46bd      	mov	sp, r7
 8005672:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005676:	b004      	add	sp, #16
 8005678:	4770      	bx	lr
	...

0800567c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800567c:	b480      	push	{r7}
 800567e:	b087      	sub	sp, #28
 8005680:	af00      	add	r7, sp, #0
 8005682:	60f8      	str	r0, [r7, #12]
 8005684:	60b9      	str	r1, [r7, #8]
 8005686:	4613      	mov	r3, r2
 8005688:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800568a:	79fb      	ldrb	r3, [r7, #7]
 800568c:	2b02      	cmp	r3, #2
 800568e:	d165      	bne.n	800575c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8005690:	68bb      	ldr	r3, [r7, #8]
 8005692:	4a41      	ldr	r2, [pc, #260]	; (8005798 <USB_SetTurnaroundTime+0x11c>)
 8005694:	4293      	cmp	r3, r2
 8005696:	d906      	bls.n	80056a6 <USB_SetTurnaroundTime+0x2a>
 8005698:	68bb      	ldr	r3, [r7, #8]
 800569a:	4a40      	ldr	r2, [pc, #256]	; (800579c <USB_SetTurnaroundTime+0x120>)
 800569c:	4293      	cmp	r3, r2
 800569e:	d202      	bcs.n	80056a6 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80056a0:	230f      	movs	r3, #15
 80056a2:	617b      	str	r3, [r7, #20]
 80056a4:	e062      	b.n	800576c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80056a6:	68bb      	ldr	r3, [r7, #8]
 80056a8:	4a3c      	ldr	r2, [pc, #240]	; (800579c <USB_SetTurnaroundTime+0x120>)
 80056aa:	4293      	cmp	r3, r2
 80056ac:	d306      	bcc.n	80056bc <USB_SetTurnaroundTime+0x40>
 80056ae:	68bb      	ldr	r3, [r7, #8]
 80056b0:	4a3b      	ldr	r2, [pc, #236]	; (80057a0 <USB_SetTurnaroundTime+0x124>)
 80056b2:	4293      	cmp	r3, r2
 80056b4:	d202      	bcs.n	80056bc <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80056b6:	230e      	movs	r3, #14
 80056b8:	617b      	str	r3, [r7, #20]
 80056ba:	e057      	b.n	800576c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80056bc:	68bb      	ldr	r3, [r7, #8]
 80056be:	4a38      	ldr	r2, [pc, #224]	; (80057a0 <USB_SetTurnaroundTime+0x124>)
 80056c0:	4293      	cmp	r3, r2
 80056c2:	d306      	bcc.n	80056d2 <USB_SetTurnaroundTime+0x56>
 80056c4:	68bb      	ldr	r3, [r7, #8]
 80056c6:	4a37      	ldr	r2, [pc, #220]	; (80057a4 <USB_SetTurnaroundTime+0x128>)
 80056c8:	4293      	cmp	r3, r2
 80056ca:	d202      	bcs.n	80056d2 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80056cc:	230d      	movs	r3, #13
 80056ce:	617b      	str	r3, [r7, #20]
 80056d0:	e04c      	b.n	800576c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80056d2:	68bb      	ldr	r3, [r7, #8]
 80056d4:	4a33      	ldr	r2, [pc, #204]	; (80057a4 <USB_SetTurnaroundTime+0x128>)
 80056d6:	4293      	cmp	r3, r2
 80056d8:	d306      	bcc.n	80056e8 <USB_SetTurnaroundTime+0x6c>
 80056da:	68bb      	ldr	r3, [r7, #8]
 80056dc:	4a32      	ldr	r2, [pc, #200]	; (80057a8 <USB_SetTurnaroundTime+0x12c>)
 80056de:	4293      	cmp	r3, r2
 80056e0:	d802      	bhi.n	80056e8 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80056e2:	230c      	movs	r3, #12
 80056e4:	617b      	str	r3, [r7, #20]
 80056e6:	e041      	b.n	800576c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80056e8:	68bb      	ldr	r3, [r7, #8]
 80056ea:	4a2f      	ldr	r2, [pc, #188]	; (80057a8 <USB_SetTurnaroundTime+0x12c>)
 80056ec:	4293      	cmp	r3, r2
 80056ee:	d906      	bls.n	80056fe <USB_SetTurnaroundTime+0x82>
 80056f0:	68bb      	ldr	r3, [r7, #8]
 80056f2:	4a2e      	ldr	r2, [pc, #184]	; (80057ac <USB_SetTurnaroundTime+0x130>)
 80056f4:	4293      	cmp	r3, r2
 80056f6:	d802      	bhi.n	80056fe <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80056f8:	230b      	movs	r3, #11
 80056fa:	617b      	str	r3, [r7, #20]
 80056fc:	e036      	b.n	800576c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80056fe:	68bb      	ldr	r3, [r7, #8]
 8005700:	4a2a      	ldr	r2, [pc, #168]	; (80057ac <USB_SetTurnaroundTime+0x130>)
 8005702:	4293      	cmp	r3, r2
 8005704:	d906      	bls.n	8005714 <USB_SetTurnaroundTime+0x98>
 8005706:	68bb      	ldr	r3, [r7, #8]
 8005708:	4a29      	ldr	r2, [pc, #164]	; (80057b0 <USB_SetTurnaroundTime+0x134>)
 800570a:	4293      	cmp	r3, r2
 800570c:	d802      	bhi.n	8005714 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800570e:	230a      	movs	r3, #10
 8005710:	617b      	str	r3, [r7, #20]
 8005712:	e02b      	b.n	800576c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8005714:	68bb      	ldr	r3, [r7, #8]
 8005716:	4a26      	ldr	r2, [pc, #152]	; (80057b0 <USB_SetTurnaroundTime+0x134>)
 8005718:	4293      	cmp	r3, r2
 800571a:	d906      	bls.n	800572a <USB_SetTurnaroundTime+0xae>
 800571c:	68bb      	ldr	r3, [r7, #8]
 800571e:	4a25      	ldr	r2, [pc, #148]	; (80057b4 <USB_SetTurnaroundTime+0x138>)
 8005720:	4293      	cmp	r3, r2
 8005722:	d202      	bcs.n	800572a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8005724:	2309      	movs	r3, #9
 8005726:	617b      	str	r3, [r7, #20]
 8005728:	e020      	b.n	800576c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800572a:	68bb      	ldr	r3, [r7, #8]
 800572c:	4a21      	ldr	r2, [pc, #132]	; (80057b4 <USB_SetTurnaroundTime+0x138>)
 800572e:	4293      	cmp	r3, r2
 8005730:	d306      	bcc.n	8005740 <USB_SetTurnaroundTime+0xc4>
 8005732:	68bb      	ldr	r3, [r7, #8]
 8005734:	4a20      	ldr	r2, [pc, #128]	; (80057b8 <USB_SetTurnaroundTime+0x13c>)
 8005736:	4293      	cmp	r3, r2
 8005738:	d802      	bhi.n	8005740 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800573a:	2308      	movs	r3, #8
 800573c:	617b      	str	r3, [r7, #20]
 800573e:	e015      	b.n	800576c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8005740:	68bb      	ldr	r3, [r7, #8]
 8005742:	4a1d      	ldr	r2, [pc, #116]	; (80057b8 <USB_SetTurnaroundTime+0x13c>)
 8005744:	4293      	cmp	r3, r2
 8005746:	d906      	bls.n	8005756 <USB_SetTurnaroundTime+0xda>
 8005748:	68bb      	ldr	r3, [r7, #8]
 800574a:	4a1c      	ldr	r2, [pc, #112]	; (80057bc <USB_SetTurnaroundTime+0x140>)
 800574c:	4293      	cmp	r3, r2
 800574e:	d202      	bcs.n	8005756 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8005750:	2307      	movs	r3, #7
 8005752:	617b      	str	r3, [r7, #20]
 8005754:	e00a      	b.n	800576c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8005756:	2306      	movs	r3, #6
 8005758:	617b      	str	r3, [r7, #20]
 800575a:	e007      	b.n	800576c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800575c:	79fb      	ldrb	r3, [r7, #7]
 800575e:	2b00      	cmp	r3, #0
 8005760:	d102      	bne.n	8005768 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8005762:	2309      	movs	r3, #9
 8005764:	617b      	str	r3, [r7, #20]
 8005766:	e001      	b.n	800576c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8005768:	2309      	movs	r3, #9
 800576a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	68db      	ldr	r3, [r3, #12]
 8005770:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	68da      	ldr	r2, [r3, #12]
 800577c:	697b      	ldr	r3, [r7, #20]
 800577e:	029b      	lsls	r3, r3, #10
 8005780:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8005784:	431a      	orrs	r2, r3
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800578a:	2300      	movs	r3, #0
}
 800578c:	4618      	mov	r0, r3
 800578e:	371c      	adds	r7, #28
 8005790:	46bd      	mov	sp, r7
 8005792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005796:	4770      	bx	lr
 8005798:	00d8acbf 	.word	0x00d8acbf
 800579c:	00e4e1c0 	.word	0x00e4e1c0
 80057a0:	00f42400 	.word	0x00f42400
 80057a4:	01067380 	.word	0x01067380
 80057a8:	011a499f 	.word	0x011a499f
 80057ac:	01312cff 	.word	0x01312cff
 80057b0:	014ca43f 	.word	0x014ca43f
 80057b4:	016e3600 	.word	0x016e3600
 80057b8:	01a6ab1f 	.word	0x01a6ab1f
 80057bc:	01e84800 	.word	0x01e84800

080057c0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80057c0:	b480      	push	{r7}
 80057c2:	b083      	sub	sp, #12
 80057c4:	af00      	add	r7, sp, #0
 80057c6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	689b      	ldr	r3, [r3, #8]
 80057cc:	f043 0201 	orr.w	r2, r3, #1
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80057d4:	2300      	movs	r3, #0
}
 80057d6:	4618      	mov	r0, r3
 80057d8:	370c      	adds	r7, #12
 80057da:	46bd      	mov	sp, r7
 80057dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e0:	4770      	bx	lr

080057e2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80057e2:	b480      	push	{r7}
 80057e4:	b083      	sub	sp, #12
 80057e6:	af00      	add	r7, sp, #0
 80057e8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	689b      	ldr	r3, [r3, #8]
 80057ee:	f023 0201 	bic.w	r2, r3, #1
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80057f6:	2300      	movs	r3, #0
}
 80057f8:	4618      	mov	r0, r3
 80057fa:	370c      	adds	r7, #12
 80057fc:	46bd      	mov	sp, r7
 80057fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005802:	4770      	bx	lr

08005804 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005804:	b580      	push	{r7, lr}
 8005806:	b084      	sub	sp, #16
 8005808:	af00      	add	r7, sp, #0
 800580a:	6078      	str	r0, [r7, #4]
 800580c:	460b      	mov	r3, r1
 800580e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005810:	2300      	movs	r3, #0
 8005812:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	68db      	ldr	r3, [r3, #12]
 8005818:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005820:	78fb      	ldrb	r3, [r7, #3]
 8005822:	2b01      	cmp	r3, #1
 8005824:	d115      	bne.n	8005852 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	68db      	ldr	r3, [r3, #12]
 800582a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005832:	2001      	movs	r0, #1
 8005834:	f7fb ff30 	bl	8001698 <HAL_Delay>
      ms++;
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	3301      	adds	r3, #1
 800583c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800583e:	6878      	ldr	r0, [r7, #4]
 8005840:	f001 f972 	bl	8006b28 <USB_GetMode>
 8005844:	4603      	mov	r3, r0
 8005846:	2b01      	cmp	r3, #1
 8005848:	d01e      	beq.n	8005888 <USB_SetCurrentMode+0x84>
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	2b31      	cmp	r3, #49	; 0x31
 800584e:	d9f0      	bls.n	8005832 <USB_SetCurrentMode+0x2e>
 8005850:	e01a      	b.n	8005888 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005852:	78fb      	ldrb	r3, [r7, #3]
 8005854:	2b00      	cmp	r3, #0
 8005856:	d115      	bne.n	8005884 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	68db      	ldr	r3, [r3, #12]
 800585c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005864:	2001      	movs	r0, #1
 8005866:	f7fb ff17 	bl	8001698 <HAL_Delay>
      ms++;
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	3301      	adds	r3, #1
 800586e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8005870:	6878      	ldr	r0, [r7, #4]
 8005872:	f001 f959 	bl	8006b28 <USB_GetMode>
 8005876:	4603      	mov	r3, r0
 8005878:	2b00      	cmp	r3, #0
 800587a:	d005      	beq.n	8005888 <USB_SetCurrentMode+0x84>
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	2b31      	cmp	r3, #49	; 0x31
 8005880:	d9f0      	bls.n	8005864 <USB_SetCurrentMode+0x60>
 8005882:	e001      	b.n	8005888 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005884:	2301      	movs	r3, #1
 8005886:	e005      	b.n	8005894 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	2b32      	cmp	r3, #50	; 0x32
 800588c:	d101      	bne.n	8005892 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800588e:	2301      	movs	r3, #1
 8005890:	e000      	b.n	8005894 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005892:	2300      	movs	r3, #0
}
 8005894:	4618      	mov	r0, r3
 8005896:	3710      	adds	r7, #16
 8005898:	46bd      	mov	sp, r7
 800589a:	bd80      	pop	{r7, pc}

0800589c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800589c:	b084      	sub	sp, #16
 800589e:	b580      	push	{r7, lr}
 80058a0:	b086      	sub	sp, #24
 80058a2:	af00      	add	r7, sp, #0
 80058a4:	6078      	str	r0, [r7, #4]
 80058a6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80058aa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80058ae:	2300      	movs	r3, #0
 80058b0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80058b6:	2300      	movs	r3, #0
 80058b8:	613b      	str	r3, [r7, #16]
 80058ba:	e009      	b.n	80058d0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80058bc:	687a      	ldr	r2, [r7, #4]
 80058be:	693b      	ldr	r3, [r7, #16]
 80058c0:	3340      	adds	r3, #64	; 0x40
 80058c2:	009b      	lsls	r3, r3, #2
 80058c4:	4413      	add	r3, r2
 80058c6:	2200      	movs	r2, #0
 80058c8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80058ca:	693b      	ldr	r3, [r7, #16]
 80058cc:	3301      	adds	r3, #1
 80058ce:	613b      	str	r3, [r7, #16]
 80058d0:	693b      	ldr	r3, [r7, #16]
 80058d2:	2b0e      	cmp	r3, #14
 80058d4:	d9f2      	bls.n	80058bc <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80058d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d11c      	bne.n	8005916 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058e2:	685b      	ldr	r3, [r3, #4]
 80058e4:	68fa      	ldr	r2, [r7, #12]
 80058e6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80058ea:	f043 0302 	orr.w	r3, r3, #2
 80058ee:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058f4:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005900:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800590c:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	639a      	str	r2, [r3, #56]	; 0x38
 8005914:	e00b      	b.n	800592e <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800591a:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005926:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005934:	461a      	mov	r2, r3
 8005936:	2300      	movs	r3, #0
 8005938:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005940:	4619      	mov	r1, r3
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005948:	461a      	mov	r2, r3
 800594a:	680b      	ldr	r3, [r1, #0]
 800594c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800594e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005950:	2b01      	cmp	r3, #1
 8005952:	d10c      	bne.n	800596e <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005954:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005956:	2b00      	cmp	r3, #0
 8005958:	d104      	bne.n	8005964 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800595a:	2100      	movs	r1, #0
 800595c:	6878      	ldr	r0, [r7, #4]
 800595e:	f000 f945 	bl	8005bec <USB_SetDevSpeed>
 8005962:	e008      	b.n	8005976 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005964:	2101      	movs	r1, #1
 8005966:	6878      	ldr	r0, [r7, #4]
 8005968:	f000 f940 	bl	8005bec <USB_SetDevSpeed>
 800596c:	e003      	b.n	8005976 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800596e:	2103      	movs	r1, #3
 8005970:	6878      	ldr	r0, [r7, #4]
 8005972:	f000 f93b 	bl	8005bec <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005976:	2110      	movs	r1, #16
 8005978:	6878      	ldr	r0, [r7, #4]
 800597a:	f000 f8f3 	bl	8005b64 <USB_FlushTxFifo>
 800597e:	4603      	mov	r3, r0
 8005980:	2b00      	cmp	r3, #0
 8005982:	d001      	beq.n	8005988 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8005984:	2301      	movs	r3, #1
 8005986:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005988:	6878      	ldr	r0, [r7, #4]
 800598a:	f000 f90f 	bl	8005bac <USB_FlushRxFifo>
 800598e:	4603      	mov	r3, r0
 8005990:	2b00      	cmp	r3, #0
 8005992:	d001      	beq.n	8005998 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8005994:	2301      	movs	r3, #1
 8005996:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800599e:	461a      	mov	r2, r3
 80059a0:	2300      	movs	r3, #0
 80059a2:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80059aa:	461a      	mov	r2, r3
 80059ac:	2300      	movs	r3, #0
 80059ae:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80059b6:	461a      	mov	r2, r3
 80059b8:	2300      	movs	r3, #0
 80059ba:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80059bc:	2300      	movs	r3, #0
 80059be:	613b      	str	r3, [r7, #16]
 80059c0:	e043      	b.n	8005a4a <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80059c2:	693b      	ldr	r3, [r7, #16]
 80059c4:	015a      	lsls	r2, r3, #5
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	4413      	add	r3, r2
 80059ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80059d4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80059d8:	d118      	bne.n	8005a0c <USB_DevInit+0x170>
    {
      if (i == 0U)
 80059da:	693b      	ldr	r3, [r7, #16]
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d10a      	bne.n	80059f6 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80059e0:	693b      	ldr	r3, [r7, #16]
 80059e2:	015a      	lsls	r2, r3, #5
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	4413      	add	r3, r2
 80059e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059ec:	461a      	mov	r2, r3
 80059ee:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80059f2:	6013      	str	r3, [r2, #0]
 80059f4:	e013      	b.n	8005a1e <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80059f6:	693b      	ldr	r3, [r7, #16]
 80059f8:	015a      	lsls	r2, r3, #5
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	4413      	add	r3, r2
 80059fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a02:	461a      	mov	r2, r3
 8005a04:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005a08:	6013      	str	r3, [r2, #0]
 8005a0a:	e008      	b.n	8005a1e <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005a0c:	693b      	ldr	r3, [r7, #16]
 8005a0e:	015a      	lsls	r2, r3, #5
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	4413      	add	r3, r2
 8005a14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a18:	461a      	mov	r2, r3
 8005a1a:	2300      	movs	r3, #0
 8005a1c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005a1e:	693b      	ldr	r3, [r7, #16]
 8005a20:	015a      	lsls	r2, r3, #5
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	4413      	add	r3, r2
 8005a26:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a2a:	461a      	mov	r2, r3
 8005a2c:	2300      	movs	r3, #0
 8005a2e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005a30:	693b      	ldr	r3, [r7, #16]
 8005a32:	015a      	lsls	r2, r3, #5
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	4413      	add	r3, r2
 8005a38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a3c:	461a      	mov	r2, r3
 8005a3e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005a42:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005a44:	693b      	ldr	r3, [r7, #16]
 8005a46:	3301      	adds	r3, #1
 8005a48:	613b      	str	r3, [r7, #16]
 8005a4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a4c:	693a      	ldr	r2, [r7, #16]
 8005a4e:	429a      	cmp	r2, r3
 8005a50:	d3b7      	bcc.n	80059c2 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005a52:	2300      	movs	r3, #0
 8005a54:	613b      	str	r3, [r7, #16]
 8005a56:	e043      	b.n	8005ae0 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005a58:	693b      	ldr	r3, [r7, #16]
 8005a5a:	015a      	lsls	r2, r3, #5
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	4413      	add	r3, r2
 8005a60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005a6a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005a6e:	d118      	bne.n	8005aa2 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8005a70:	693b      	ldr	r3, [r7, #16]
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d10a      	bne.n	8005a8c <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005a76:	693b      	ldr	r3, [r7, #16]
 8005a78:	015a      	lsls	r2, r3, #5
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	4413      	add	r3, r2
 8005a7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a82:	461a      	mov	r2, r3
 8005a84:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005a88:	6013      	str	r3, [r2, #0]
 8005a8a:	e013      	b.n	8005ab4 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005a8c:	693b      	ldr	r3, [r7, #16]
 8005a8e:	015a      	lsls	r2, r3, #5
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	4413      	add	r3, r2
 8005a94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a98:	461a      	mov	r2, r3
 8005a9a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005a9e:	6013      	str	r3, [r2, #0]
 8005aa0:	e008      	b.n	8005ab4 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005aa2:	693b      	ldr	r3, [r7, #16]
 8005aa4:	015a      	lsls	r2, r3, #5
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	4413      	add	r3, r2
 8005aaa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005aae:	461a      	mov	r2, r3
 8005ab0:	2300      	movs	r3, #0
 8005ab2:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005ab4:	693b      	ldr	r3, [r7, #16]
 8005ab6:	015a      	lsls	r2, r3, #5
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	4413      	add	r3, r2
 8005abc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ac0:	461a      	mov	r2, r3
 8005ac2:	2300      	movs	r3, #0
 8005ac4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005ac6:	693b      	ldr	r3, [r7, #16]
 8005ac8:	015a      	lsls	r2, r3, #5
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	4413      	add	r3, r2
 8005ace:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ad2:	461a      	mov	r2, r3
 8005ad4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005ad8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005ada:	693b      	ldr	r3, [r7, #16]
 8005adc:	3301      	adds	r3, #1
 8005ade:	613b      	str	r3, [r7, #16]
 8005ae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ae2:	693a      	ldr	r2, [r7, #16]
 8005ae4:	429a      	cmp	r2, r3
 8005ae6:	d3b7      	bcc.n	8005a58 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005aee:	691b      	ldr	r3, [r3, #16]
 8005af0:	68fa      	ldr	r2, [r7, #12]
 8005af2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005af6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005afa:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	2200      	movs	r2, #0
 8005b00:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005b08:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005b0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d105      	bne.n	8005b1c <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	699b      	ldr	r3, [r3, #24]
 8005b14:	f043 0210 	orr.w	r2, r3, #16
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	699a      	ldr	r2, [r3, #24]
 8005b20:	4b0f      	ldr	r3, [pc, #60]	; (8005b60 <USB_DevInit+0x2c4>)
 8005b22:	4313      	orrs	r3, r2
 8005b24:	687a      	ldr	r2, [r7, #4]
 8005b26:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005b28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d005      	beq.n	8005b3a <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	699b      	ldr	r3, [r3, #24]
 8005b32:	f043 0208 	orr.w	r2, r3, #8
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005b3a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005b3c:	2b01      	cmp	r3, #1
 8005b3e:	d107      	bne.n	8005b50 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	699b      	ldr	r3, [r3, #24]
 8005b44:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005b48:	f043 0304 	orr.w	r3, r3, #4
 8005b4c:	687a      	ldr	r2, [r7, #4]
 8005b4e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005b50:	7dfb      	ldrb	r3, [r7, #23]
}
 8005b52:	4618      	mov	r0, r3
 8005b54:	3718      	adds	r7, #24
 8005b56:	46bd      	mov	sp, r7
 8005b58:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005b5c:	b004      	add	sp, #16
 8005b5e:	4770      	bx	lr
 8005b60:	803c3800 	.word	0x803c3800

08005b64 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005b64:	b480      	push	{r7}
 8005b66:	b085      	sub	sp, #20
 8005b68:	af00      	add	r7, sp, #0
 8005b6a:	6078      	str	r0, [r7, #4]
 8005b6c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005b6e:	2300      	movs	r3, #0
 8005b70:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005b72:	683b      	ldr	r3, [r7, #0]
 8005b74:	019b      	lsls	r3, r3, #6
 8005b76:	f043 0220 	orr.w	r2, r3, #32
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	3301      	adds	r3, #1
 8005b82:	60fb      	str	r3, [r7, #12]
 8005b84:	4a08      	ldr	r2, [pc, #32]	; (8005ba8 <USB_FlushTxFifo+0x44>)
 8005b86:	4293      	cmp	r3, r2
 8005b88:	d901      	bls.n	8005b8e <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 8005b8a:	2303      	movs	r3, #3
 8005b8c:	e006      	b.n	8005b9c <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	691b      	ldr	r3, [r3, #16]
 8005b92:	f003 0320 	and.w	r3, r3, #32
 8005b96:	2b20      	cmp	r3, #32
 8005b98:	d0f1      	beq.n	8005b7e <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8005b9a:	2300      	movs	r3, #0
}
 8005b9c:	4618      	mov	r0, r3
 8005b9e:	3714      	adds	r7, #20
 8005ba0:	46bd      	mov	sp, r7
 8005ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba6:	4770      	bx	lr
 8005ba8:	00030d40 	.word	0x00030d40

08005bac <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005bac:	b480      	push	{r7}
 8005bae:	b085      	sub	sp, #20
 8005bb0:	af00      	add	r7, sp, #0
 8005bb2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005bb4:	2300      	movs	r3, #0
 8005bb6:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	2210      	movs	r2, #16
 8005bbc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	3301      	adds	r3, #1
 8005bc2:	60fb      	str	r3, [r7, #12]
 8005bc4:	4a08      	ldr	r2, [pc, #32]	; (8005be8 <USB_FlushRxFifo+0x3c>)
 8005bc6:	4293      	cmp	r3, r2
 8005bc8:	d901      	bls.n	8005bce <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 8005bca:	2303      	movs	r3, #3
 8005bcc:	e006      	b.n	8005bdc <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	691b      	ldr	r3, [r3, #16]
 8005bd2:	f003 0310 	and.w	r3, r3, #16
 8005bd6:	2b10      	cmp	r3, #16
 8005bd8:	d0f1      	beq.n	8005bbe <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8005bda:	2300      	movs	r3, #0
}
 8005bdc:	4618      	mov	r0, r3
 8005bde:	3714      	adds	r7, #20
 8005be0:	46bd      	mov	sp, r7
 8005be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be6:	4770      	bx	lr
 8005be8:	00030d40 	.word	0x00030d40

08005bec <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005bec:	b480      	push	{r7}
 8005bee:	b085      	sub	sp, #20
 8005bf0:	af00      	add	r7, sp, #0
 8005bf2:	6078      	str	r0, [r7, #4]
 8005bf4:	460b      	mov	r3, r1
 8005bf6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c02:	681a      	ldr	r2, [r3, #0]
 8005c04:	78fb      	ldrb	r3, [r7, #3]
 8005c06:	68f9      	ldr	r1, [r7, #12]
 8005c08:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005c0c:	4313      	orrs	r3, r2
 8005c0e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005c10:	2300      	movs	r3, #0
}
 8005c12:	4618      	mov	r0, r3
 8005c14:	3714      	adds	r7, #20
 8005c16:	46bd      	mov	sp, r7
 8005c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c1c:	4770      	bx	lr

08005c1e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8005c1e:	b480      	push	{r7}
 8005c20:	b087      	sub	sp, #28
 8005c22:	af00      	add	r7, sp, #0
 8005c24:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8005c2a:	693b      	ldr	r3, [r7, #16]
 8005c2c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c30:	689b      	ldr	r3, [r3, #8]
 8005c32:	f003 0306 	and.w	r3, r3, #6
 8005c36:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d102      	bne.n	8005c44 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8005c3e:	2300      	movs	r3, #0
 8005c40:	75fb      	strb	r3, [r7, #23]
 8005c42:	e00a      	b.n	8005c5a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	2b02      	cmp	r3, #2
 8005c48:	d002      	beq.n	8005c50 <USB_GetDevSpeed+0x32>
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	2b06      	cmp	r3, #6
 8005c4e:	d102      	bne.n	8005c56 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8005c50:	2302      	movs	r3, #2
 8005c52:	75fb      	strb	r3, [r7, #23]
 8005c54:	e001      	b.n	8005c5a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8005c56:	230f      	movs	r3, #15
 8005c58:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8005c5a:	7dfb      	ldrb	r3, [r7, #23]
}
 8005c5c:	4618      	mov	r0, r3
 8005c5e:	371c      	adds	r7, #28
 8005c60:	46bd      	mov	sp, r7
 8005c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c66:	4770      	bx	lr

08005c68 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005c68:	b480      	push	{r7}
 8005c6a:	b085      	sub	sp, #20
 8005c6c:	af00      	add	r7, sp, #0
 8005c6e:	6078      	str	r0, [r7, #4]
 8005c70:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005c76:	683b      	ldr	r3, [r7, #0]
 8005c78:	781b      	ldrb	r3, [r3, #0]
 8005c7a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005c7c:	683b      	ldr	r3, [r7, #0]
 8005c7e:	785b      	ldrb	r3, [r3, #1]
 8005c80:	2b01      	cmp	r3, #1
 8005c82:	d13a      	bne.n	8005cfa <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c8a:	69da      	ldr	r2, [r3, #28]
 8005c8c:	683b      	ldr	r3, [r7, #0]
 8005c8e:	781b      	ldrb	r3, [r3, #0]
 8005c90:	f003 030f 	and.w	r3, r3, #15
 8005c94:	2101      	movs	r1, #1
 8005c96:	fa01 f303 	lsl.w	r3, r1, r3
 8005c9a:	b29b      	uxth	r3, r3
 8005c9c:	68f9      	ldr	r1, [r7, #12]
 8005c9e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005ca2:	4313      	orrs	r3, r2
 8005ca4:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8005ca6:	68bb      	ldr	r3, [r7, #8]
 8005ca8:	015a      	lsls	r2, r3, #5
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	4413      	add	r3, r2
 8005cae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d155      	bne.n	8005d68 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005cbc:	68bb      	ldr	r3, [r7, #8]
 8005cbe:	015a      	lsls	r2, r3, #5
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	4413      	add	r3, r2
 8005cc4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005cc8:	681a      	ldr	r2, [r3, #0]
 8005cca:	683b      	ldr	r3, [r7, #0]
 8005ccc:	689b      	ldr	r3, [r3, #8]
 8005cce:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005cd2:	683b      	ldr	r3, [r7, #0]
 8005cd4:	78db      	ldrb	r3, [r3, #3]
 8005cd6:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005cd8:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005cda:	68bb      	ldr	r3, [r7, #8]
 8005cdc:	059b      	lsls	r3, r3, #22
 8005cde:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005ce0:	4313      	orrs	r3, r2
 8005ce2:	68ba      	ldr	r2, [r7, #8]
 8005ce4:	0151      	lsls	r1, r2, #5
 8005ce6:	68fa      	ldr	r2, [r7, #12]
 8005ce8:	440a      	add	r2, r1
 8005cea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005cee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005cf2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005cf6:	6013      	str	r3, [r2, #0]
 8005cf8:	e036      	b.n	8005d68 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d00:	69da      	ldr	r2, [r3, #28]
 8005d02:	683b      	ldr	r3, [r7, #0]
 8005d04:	781b      	ldrb	r3, [r3, #0]
 8005d06:	f003 030f 	and.w	r3, r3, #15
 8005d0a:	2101      	movs	r1, #1
 8005d0c:	fa01 f303 	lsl.w	r3, r1, r3
 8005d10:	041b      	lsls	r3, r3, #16
 8005d12:	68f9      	ldr	r1, [r7, #12]
 8005d14:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005d18:	4313      	orrs	r3, r2
 8005d1a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8005d1c:	68bb      	ldr	r3, [r7, #8]
 8005d1e:	015a      	lsls	r2, r3, #5
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	4413      	add	r3, r2
 8005d24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d11a      	bne.n	8005d68 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005d32:	68bb      	ldr	r3, [r7, #8]
 8005d34:	015a      	lsls	r2, r3, #5
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	4413      	add	r3, r2
 8005d3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d3e:	681a      	ldr	r2, [r3, #0]
 8005d40:	683b      	ldr	r3, [r7, #0]
 8005d42:	689b      	ldr	r3, [r3, #8]
 8005d44:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8005d48:	683b      	ldr	r3, [r7, #0]
 8005d4a:	78db      	ldrb	r3, [r3, #3]
 8005d4c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005d4e:	430b      	orrs	r3, r1
 8005d50:	4313      	orrs	r3, r2
 8005d52:	68ba      	ldr	r2, [r7, #8]
 8005d54:	0151      	lsls	r1, r2, #5
 8005d56:	68fa      	ldr	r2, [r7, #12]
 8005d58:	440a      	add	r2, r1
 8005d5a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005d5e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005d62:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005d66:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8005d68:	2300      	movs	r3, #0
}
 8005d6a:	4618      	mov	r0, r3
 8005d6c:	3714      	adds	r7, #20
 8005d6e:	46bd      	mov	sp, r7
 8005d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d74:	4770      	bx	lr
	...

08005d78 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005d78:	b480      	push	{r7}
 8005d7a:	b085      	sub	sp, #20
 8005d7c:	af00      	add	r7, sp, #0
 8005d7e:	6078      	str	r0, [r7, #4]
 8005d80:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005d86:	683b      	ldr	r3, [r7, #0]
 8005d88:	781b      	ldrb	r3, [r3, #0]
 8005d8a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8005d8c:	683b      	ldr	r3, [r7, #0]
 8005d8e:	785b      	ldrb	r3, [r3, #1]
 8005d90:	2b01      	cmp	r3, #1
 8005d92:	d161      	bne.n	8005e58 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005d94:	68bb      	ldr	r3, [r7, #8]
 8005d96:	015a      	lsls	r2, r3, #5
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	4413      	add	r3, r2
 8005d9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005da6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005daa:	d11f      	bne.n	8005dec <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8005dac:	68bb      	ldr	r3, [r7, #8]
 8005dae:	015a      	lsls	r2, r3, #5
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	4413      	add	r3, r2
 8005db4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	68ba      	ldr	r2, [r7, #8]
 8005dbc:	0151      	lsls	r1, r2, #5
 8005dbe:	68fa      	ldr	r2, [r7, #12]
 8005dc0:	440a      	add	r2, r1
 8005dc2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005dc6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005dca:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8005dcc:	68bb      	ldr	r3, [r7, #8]
 8005dce:	015a      	lsls	r2, r3, #5
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	4413      	add	r3, r2
 8005dd4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	68ba      	ldr	r2, [r7, #8]
 8005ddc:	0151      	lsls	r1, r2, #5
 8005dde:	68fa      	ldr	r2, [r7, #12]
 8005de0:	440a      	add	r2, r1
 8005de2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005de6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005dea:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005df2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005df4:	683b      	ldr	r3, [r7, #0]
 8005df6:	781b      	ldrb	r3, [r3, #0]
 8005df8:	f003 030f 	and.w	r3, r3, #15
 8005dfc:	2101      	movs	r1, #1
 8005dfe:	fa01 f303 	lsl.w	r3, r1, r3
 8005e02:	b29b      	uxth	r3, r3
 8005e04:	43db      	mvns	r3, r3
 8005e06:	68f9      	ldr	r1, [r7, #12]
 8005e08:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005e0c:	4013      	ands	r3, r2
 8005e0e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e16:	69da      	ldr	r2, [r3, #28]
 8005e18:	683b      	ldr	r3, [r7, #0]
 8005e1a:	781b      	ldrb	r3, [r3, #0]
 8005e1c:	f003 030f 	and.w	r3, r3, #15
 8005e20:	2101      	movs	r1, #1
 8005e22:	fa01 f303 	lsl.w	r3, r1, r3
 8005e26:	b29b      	uxth	r3, r3
 8005e28:	43db      	mvns	r3, r3
 8005e2a:	68f9      	ldr	r1, [r7, #12]
 8005e2c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005e30:	4013      	ands	r3, r2
 8005e32:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8005e34:	68bb      	ldr	r3, [r7, #8]
 8005e36:	015a      	lsls	r2, r3, #5
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	4413      	add	r3, r2
 8005e3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e40:	681a      	ldr	r2, [r3, #0]
 8005e42:	68bb      	ldr	r3, [r7, #8]
 8005e44:	0159      	lsls	r1, r3, #5
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	440b      	add	r3, r1
 8005e4a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e4e:	4619      	mov	r1, r3
 8005e50:	4b35      	ldr	r3, [pc, #212]	; (8005f28 <USB_DeactivateEndpoint+0x1b0>)
 8005e52:	4013      	ands	r3, r2
 8005e54:	600b      	str	r3, [r1, #0]
 8005e56:	e060      	b.n	8005f1a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005e58:	68bb      	ldr	r3, [r7, #8]
 8005e5a:	015a      	lsls	r2, r3, #5
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	4413      	add	r3, r2
 8005e60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005e6a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005e6e:	d11f      	bne.n	8005eb0 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005e70:	68bb      	ldr	r3, [r7, #8]
 8005e72:	015a      	lsls	r2, r3, #5
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	4413      	add	r3, r2
 8005e78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	68ba      	ldr	r2, [r7, #8]
 8005e80:	0151      	lsls	r1, r2, #5
 8005e82:	68fa      	ldr	r2, [r7, #12]
 8005e84:	440a      	add	r2, r1
 8005e86:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005e8a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005e8e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8005e90:	68bb      	ldr	r3, [r7, #8]
 8005e92:	015a      	lsls	r2, r3, #5
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	4413      	add	r3, r2
 8005e98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	68ba      	ldr	r2, [r7, #8]
 8005ea0:	0151      	lsls	r1, r2, #5
 8005ea2:	68fa      	ldr	r2, [r7, #12]
 8005ea4:	440a      	add	r2, r1
 8005ea6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005eaa:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005eae:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005eb6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005eb8:	683b      	ldr	r3, [r7, #0]
 8005eba:	781b      	ldrb	r3, [r3, #0]
 8005ebc:	f003 030f 	and.w	r3, r3, #15
 8005ec0:	2101      	movs	r1, #1
 8005ec2:	fa01 f303 	lsl.w	r3, r1, r3
 8005ec6:	041b      	lsls	r3, r3, #16
 8005ec8:	43db      	mvns	r3, r3
 8005eca:	68f9      	ldr	r1, [r7, #12]
 8005ecc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005ed0:	4013      	ands	r3, r2
 8005ed2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005eda:	69da      	ldr	r2, [r3, #28]
 8005edc:	683b      	ldr	r3, [r7, #0]
 8005ede:	781b      	ldrb	r3, [r3, #0]
 8005ee0:	f003 030f 	and.w	r3, r3, #15
 8005ee4:	2101      	movs	r1, #1
 8005ee6:	fa01 f303 	lsl.w	r3, r1, r3
 8005eea:	041b      	lsls	r3, r3, #16
 8005eec:	43db      	mvns	r3, r3
 8005eee:	68f9      	ldr	r1, [r7, #12]
 8005ef0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005ef4:	4013      	ands	r3, r2
 8005ef6:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8005ef8:	68bb      	ldr	r3, [r7, #8]
 8005efa:	015a      	lsls	r2, r3, #5
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	4413      	add	r3, r2
 8005f00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f04:	681a      	ldr	r2, [r3, #0]
 8005f06:	68bb      	ldr	r3, [r7, #8]
 8005f08:	0159      	lsls	r1, r3, #5
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	440b      	add	r3, r1
 8005f0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f12:	4619      	mov	r1, r3
 8005f14:	4b05      	ldr	r3, [pc, #20]	; (8005f2c <USB_DeactivateEndpoint+0x1b4>)
 8005f16:	4013      	ands	r3, r2
 8005f18:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8005f1a:	2300      	movs	r3, #0
}
 8005f1c:	4618      	mov	r0, r3
 8005f1e:	3714      	adds	r7, #20
 8005f20:	46bd      	mov	sp, r7
 8005f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f26:	4770      	bx	lr
 8005f28:	ec337800 	.word	0xec337800
 8005f2c:	eff37800 	.word	0xeff37800

08005f30 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005f30:	b580      	push	{r7, lr}
 8005f32:	b08a      	sub	sp, #40	; 0x28
 8005f34:	af02      	add	r7, sp, #8
 8005f36:	60f8      	str	r0, [r7, #12]
 8005f38:	60b9      	str	r1, [r7, #8]
 8005f3a:	4613      	mov	r3, r2
 8005f3c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8005f42:	68bb      	ldr	r3, [r7, #8]
 8005f44:	781b      	ldrb	r3, [r3, #0]
 8005f46:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005f48:	68bb      	ldr	r3, [r7, #8]
 8005f4a:	785b      	ldrb	r3, [r3, #1]
 8005f4c:	2b01      	cmp	r3, #1
 8005f4e:	f040 815c 	bne.w	800620a <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005f52:	68bb      	ldr	r3, [r7, #8]
 8005f54:	695b      	ldr	r3, [r3, #20]
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d132      	bne.n	8005fc0 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005f5a:	69bb      	ldr	r3, [r7, #24]
 8005f5c:	015a      	lsls	r2, r3, #5
 8005f5e:	69fb      	ldr	r3, [r7, #28]
 8005f60:	4413      	add	r3, r2
 8005f62:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f66:	691b      	ldr	r3, [r3, #16]
 8005f68:	69ba      	ldr	r2, [r7, #24]
 8005f6a:	0151      	lsls	r1, r2, #5
 8005f6c:	69fa      	ldr	r2, [r7, #28]
 8005f6e:	440a      	add	r2, r1
 8005f70:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f74:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005f78:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005f7c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005f7e:	69bb      	ldr	r3, [r7, #24]
 8005f80:	015a      	lsls	r2, r3, #5
 8005f82:	69fb      	ldr	r3, [r7, #28]
 8005f84:	4413      	add	r3, r2
 8005f86:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f8a:	691b      	ldr	r3, [r3, #16]
 8005f8c:	69ba      	ldr	r2, [r7, #24]
 8005f8e:	0151      	lsls	r1, r2, #5
 8005f90:	69fa      	ldr	r2, [r7, #28]
 8005f92:	440a      	add	r2, r1
 8005f94:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f98:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005f9c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005f9e:	69bb      	ldr	r3, [r7, #24]
 8005fa0:	015a      	lsls	r2, r3, #5
 8005fa2:	69fb      	ldr	r3, [r7, #28]
 8005fa4:	4413      	add	r3, r2
 8005fa6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005faa:	691b      	ldr	r3, [r3, #16]
 8005fac:	69ba      	ldr	r2, [r7, #24]
 8005fae:	0151      	lsls	r1, r2, #5
 8005fb0:	69fa      	ldr	r2, [r7, #28]
 8005fb2:	440a      	add	r2, r1
 8005fb4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005fb8:	0cdb      	lsrs	r3, r3, #19
 8005fba:	04db      	lsls	r3, r3, #19
 8005fbc:	6113      	str	r3, [r2, #16]
 8005fbe:	e074      	b.n	80060aa <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005fc0:	69bb      	ldr	r3, [r7, #24]
 8005fc2:	015a      	lsls	r2, r3, #5
 8005fc4:	69fb      	ldr	r3, [r7, #28]
 8005fc6:	4413      	add	r3, r2
 8005fc8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005fcc:	691b      	ldr	r3, [r3, #16]
 8005fce:	69ba      	ldr	r2, [r7, #24]
 8005fd0:	0151      	lsls	r1, r2, #5
 8005fd2:	69fa      	ldr	r2, [r7, #28]
 8005fd4:	440a      	add	r2, r1
 8005fd6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005fda:	0cdb      	lsrs	r3, r3, #19
 8005fdc:	04db      	lsls	r3, r3, #19
 8005fde:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005fe0:	69bb      	ldr	r3, [r7, #24]
 8005fe2:	015a      	lsls	r2, r3, #5
 8005fe4:	69fb      	ldr	r3, [r7, #28]
 8005fe6:	4413      	add	r3, r2
 8005fe8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005fec:	691b      	ldr	r3, [r3, #16]
 8005fee:	69ba      	ldr	r2, [r7, #24]
 8005ff0:	0151      	lsls	r1, r2, #5
 8005ff2:	69fa      	ldr	r2, [r7, #28]
 8005ff4:	440a      	add	r2, r1
 8005ff6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ffa:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005ffe:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006002:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8006004:	69bb      	ldr	r3, [r7, #24]
 8006006:	015a      	lsls	r2, r3, #5
 8006008:	69fb      	ldr	r3, [r7, #28]
 800600a:	4413      	add	r3, r2
 800600c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006010:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8006012:	68bb      	ldr	r3, [r7, #8]
 8006014:	6959      	ldr	r1, [r3, #20]
 8006016:	68bb      	ldr	r3, [r7, #8]
 8006018:	689b      	ldr	r3, [r3, #8]
 800601a:	440b      	add	r3, r1
 800601c:	1e59      	subs	r1, r3, #1
 800601e:	68bb      	ldr	r3, [r7, #8]
 8006020:	689b      	ldr	r3, [r3, #8]
 8006022:	fbb1 f3f3 	udiv	r3, r1, r3
 8006026:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8006028:	4b9d      	ldr	r3, [pc, #628]	; (80062a0 <USB_EPStartXfer+0x370>)
 800602a:	400b      	ands	r3, r1
 800602c:	69b9      	ldr	r1, [r7, #24]
 800602e:	0148      	lsls	r0, r1, #5
 8006030:	69f9      	ldr	r1, [r7, #28]
 8006032:	4401      	add	r1, r0
 8006034:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006038:	4313      	orrs	r3, r2
 800603a:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800603c:	69bb      	ldr	r3, [r7, #24]
 800603e:	015a      	lsls	r2, r3, #5
 8006040:	69fb      	ldr	r3, [r7, #28]
 8006042:	4413      	add	r3, r2
 8006044:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006048:	691a      	ldr	r2, [r3, #16]
 800604a:	68bb      	ldr	r3, [r7, #8]
 800604c:	695b      	ldr	r3, [r3, #20]
 800604e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006052:	69b9      	ldr	r1, [r7, #24]
 8006054:	0148      	lsls	r0, r1, #5
 8006056:	69f9      	ldr	r1, [r7, #28]
 8006058:	4401      	add	r1, r0
 800605a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800605e:	4313      	orrs	r3, r2
 8006060:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8006062:	68bb      	ldr	r3, [r7, #8]
 8006064:	78db      	ldrb	r3, [r3, #3]
 8006066:	2b01      	cmp	r3, #1
 8006068:	d11f      	bne.n	80060aa <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800606a:	69bb      	ldr	r3, [r7, #24]
 800606c:	015a      	lsls	r2, r3, #5
 800606e:	69fb      	ldr	r3, [r7, #28]
 8006070:	4413      	add	r3, r2
 8006072:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006076:	691b      	ldr	r3, [r3, #16]
 8006078:	69ba      	ldr	r2, [r7, #24]
 800607a:	0151      	lsls	r1, r2, #5
 800607c:	69fa      	ldr	r2, [r7, #28]
 800607e:	440a      	add	r2, r1
 8006080:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006084:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8006088:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800608a:	69bb      	ldr	r3, [r7, #24]
 800608c:	015a      	lsls	r2, r3, #5
 800608e:	69fb      	ldr	r3, [r7, #28]
 8006090:	4413      	add	r3, r2
 8006092:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006096:	691b      	ldr	r3, [r3, #16]
 8006098:	69ba      	ldr	r2, [r7, #24]
 800609a:	0151      	lsls	r1, r2, #5
 800609c:	69fa      	ldr	r2, [r7, #28]
 800609e:	440a      	add	r2, r1
 80060a0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80060a4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80060a8:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80060aa:	79fb      	ldrb	r3, [r7, #7]
 80060ac:	2b01      	cmp	r3, #1
 80060ae:	d14b      	bne.n	8006148 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80060b0:	68bb      	ldr	r3, [r7, #8]
 80060b2:	691b      	ldr	r3, [r3, #16]
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d009      	beq.n	80060cc <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80060b8:	69bb      	ldr	r3, [r7, #24]
 80060ba:	015a      	lsls	r2, r3, #5
 80060bc:	69fb      	ldr	r3, [r7, #28]
 80060be:	4413      	add	r3, r2
 80060c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060c4:	461a      	mov	r2, r3
 80060c6:	68bb      	ldr	r3, [r7, #8]
 80060c8:	691b      	ldr	r3, [r3, #16]
 80060ca:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80060cc:	68bb      	ldr	r3, [r7, #8]
 80060ce:	78db      	ldrb	r3, [r3, #3]
 80060d0:	2b01      	cmp	r3, #1
 80060d2:	d128      	bne.n	8006126 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80060d4:	69fb      	ldr	r3, [r7, #28]
 80060d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80060da:	689b      	ldr	r3, [r3, #8]
 80060dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d110      	bne.n	8006106 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80060e4:	69bb      	ldr	r3, [r7, #24]
 80060e6:	015a      	lsls	r2, r3, #5
 80060e8:	69fb      	ldr	r3, [r7, #28]
 80060ea:	4413      	add	r3, r2
 80060ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	69ba      	ldr	r2, [r7, #24]
 80060f4:	0151      	lsls	r1, r2, #5
 80060f6:	69fa      	ldr	r2, [r7, #28]
 80060f8:	440a      	add	r2, r1
 80060fa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80060fe:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006102:	6013      	str	r3, [r2, #0]
 8006104:	e00f      	b.n	8006126 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006106:	69bb      	ldr	r3, [r7, #24]
 8006108:	015a      	lsls	r2, r3, #5
 800610a:	69fb      	ldr	r3, [r7, #28]
 800610c:	4413      	add	r3, r2
 800610e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	69ba      	ldr	r2, [r7, #24]
 8006116:	0151      	lsls	r1, r2, #5
 8006118:	69fa      	ldr	r2, [r7, #28]
 800611a:	440a      	add	r2, r1
 800611c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006120:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006124:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006126:	69bb      	ldr	r3, [r7, #24]
 8006128:	015a      	lsls	r2, r3, #5
 800612a:	69fb      	ldr	r3, [r7, #28]
 800612c:	4413      	add	r3, r2
 800612e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	69ba      	ldr	r2, [r7, #24]
 8006136:	0151      	lsls	r1, r2, #5
 8006138:	69fa      	ldr	r2, [r7, #28]
 800613a:	440a      	add	r2, r1
 800613c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006140:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006144:	6013      	str	r3, [r2, #0]
 8006146:	e12f      	b.n	80063a8 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006148:	69bb      	ldr	r3, [r7, #24]
 800614a:	015a      	lsls	r2, r3, #5
 800614c:	69fb      	ldr	r3, [r7, #28]
 800614e:	4413      	add	r3, r2
 8006150:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	69ba      	ldr	r2, [r7, #24]
 8006158:	0151      	lsls	r1, r2, #5
 800615a:	69fa      	ldr	r2, [r7, #28]
 800615c:	440a      	add	r2, r1
 800615e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006162:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006166:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006168:	68bb      	ldr	r3, [r7, #8]
 800616a:	78db      	ldrb	r3, [r3, #3]
 800616c:	2b01      	cmp	r3, #1
 800616e:	d015      	beq.n	800619c <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8006170:	68bb      	ldr	r3, [r7, #8]
 8006172:	695b      	ldr	r3, [r3, #20]
 8006174:	2b00      	cmp	r3, #0
 8006176:	f000 8117 	beq.w	80063a8 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800617a:	69fb      	ldr	r3, [r7, #28]
 800617c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006180:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006182:	68bb      	ldr	r3, [r7, #8]
 8006184:	781b      	ldrb	r3, [r3, #0]
 8006186:	f003 030f 	and.w	r3, r3, #15
 800618a:	2101      	movs	r1, #1
 800618c:	fa01 f303 	lsl.w	r3, r1, r3
 8006190:	69f9      	ldr	r1, [r7, #28]
 8006192:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006196:	4313      	orrs	r3, r2
 8006198:	634b      	str	r3, [r1, #52]	; 0x34
 800619a:	e105      	b.n	80063a8 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800619c:	69fb      	ldr	r3, [r7, #28]
 800619e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80061a2:	689b      	ldr	r3, [r3, #8]
 80061a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d110      	bne.n	80061ce <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80061ac:	69bb      	ldr	r3, [r7, #24]
 80061ae:	015a      	lsls	r2, r3, #5
 80061b0:	69fb      	ldr	r3, [r7, #28]
 80061b2:	4413      	add	r3, r2
 80061b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	69ba      	ldr	r2, [r7, #24]
 80061bc:	0151      	lsls	r1, r2, #5
 80061be:	69fa      	ldr	r2, [r7, #28]
 80061c0:	440a      	add	r2, r1
 80061c2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80061c6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80061ca:	6013      	str	r3, [r2, #0]
 80061cc:	e00f      	b.n	80061ee <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80061ce:	69bb      	ldr	r3, [r7, #24]
 80061d0:	015a      	lsls	r2, r3, #5
 80061d2:	69fb      	ldr	r3, [r7, #28]
 80061d4:	4413      	add	r3, r2
 80061d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	69ba      	ldr	r2, [r7, #24]
 80061de:	0151      	lsls	r1, r2, #5
 80061e0:	69fa      	ldr	r2, [r7, #28]
 80061e2:	440a      	add	r2, r1
 80061e4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80061e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80061ec:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80061ee:	68bb      	ldr	r3, [r7, #8]
 80061f0:	68d9      	ldr	r1, [r3, #12]
 80061f2:	68bb      	ldr	r3, [r7, #8]
 80061f4:	781a      	ldrb	r2, [r3, #0]
 80061f6:	68bb      	ldr	r3, [r7, #8]
 80061f8:	695b      	ldr	r3, [r3, #20]
 80061fa:	b298      	uxth	r0, r3
 80061fc:	79fb      	ldrb	r3, [r7, #7]
 80061fe:	9300      	str	r3, [sp, #0]
 8006200:	4603      	mov	r3, r0
 8006202:	68f8      	ldr	r0, [r7, #12]
 8006204:	f000 fa2b 	bl	800665e <USB_WritePacket>
 8006208:	e0ce      	b.n	80063a8 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800620a:	69bb      	ldr	r3, [r7, #24]
 800620c:	015a      	lsls	r2, r3, #5
 800620e:	69fb      	ldr	r3, [r7, #28]
 8006210:	4413      	add	r3, r2
 8006212:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006216:	691b      	ldr	r3, [r3, #16]
 8006218:	69ba      	ldr	r2, [r7, #24]
 800621a:	0151      	lsls	r1, r2, #5
 800621c:	69fa      	ldr	r2, [r7, #28]
 800621e:	440a      	add	r2, r1
 8006220:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006224:	0cdb      	lsrs	r3, r3, #19
 8006226:	04db      	lsls	r3, r3, #19
 8006228:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800622a:	69bb      	ldr	r3, [r7, #24]
 800622c:	015a      	lsls	r2, r3, #5
 800622e:	69fb      	ldr	r3, [r7, #28]
 8006230:	4413      	add	r3, r2
 8006232:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006236:	691b      	ldr	r3, [r3, #16]
 8006238:	69ba      	ldr	r2, [r7, #24]
 800623a:	0151      	lsls	r1, r2, #5
 800623c:	69fa      	ldr	r2, [r7, #28]
 800623e:	440a      	add	r2, r1
 8006240:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006244:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006248:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800624c:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800624e:	68bb      	ldr	r3, [r7, #8]
 8006250:	695b      	ldr	r3, [r3, #20]
 8006252:	2b00      	cmp	r3, #0
 8006254:	d126      	bne.n	80062a4 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8006256:	69bb      	ldr	r3, [r7, #24]
 8006258:	015a      	lsls	r2, r3, #5
 800625a:	69fb      	ldr	r3, [r7, #28]
 800625c:	4413      	add	r3, r2
 800625e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006262:	691a      	ldr	r2, [r3, #16]
 8006264:	68bb      	ldr	r3, [r7, #8]
 8006266:	689b      	ldr	r3, [r3, #8]
 8006268:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800626c:	69b9      	ldr	r1, [r7, #24]
 800626e:	0148      	lsls	r0, r1, #5
 8006270:	69f9      	ldr	r1, [r7, #28]
 8006272:	4401      	add	r1, r0
 8006274:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006278:	4313      	orrs	r3, r2
 800627a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800627c:	69bb      	ldr	r3, [r7, #24]
 800627e:	015a      	lsls	r2, r3, #5
 8006280:	69fb      	ldr	r3, [r7, #28]
 8006282:	4413      	add	r3, r2
 8006284:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006288:	691b      	ldr	r3, [r3, #16]
 800628a:	69ba      	ldr	r2, [r7, #24]
 800628c:	0151      	lsls	r1, r2, #5
 800628e:	69fa      	ldr	r2, [r7, #28]
 8006290:	440a      	add	r2, r1
 8006292:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006296:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800629a:	6113      	str	r3, [r2, #16]
 800629c:	e036      	b.n	800630c <USB_EPStartXfer+0x3dc>
 800629e:	bf00      	nop
 80062a0:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80062a4:	68bb      	ldr	r3, [r7, #8]
 80062a6:	695a      	ldr	r2, [r3, #20]
 80062a8:	68bb      	ldr	r3, [r7, #8]
 80062aa:	689b      	ldr	r3, [r3, #8]
 80062ac:	4413      	add	r3, r2
 80062ae:	1e5a      	subs	r2, r3, #1
 80062b0:	68bb      	ldr	r3, [r7, #8]
 80062b2:	689b      	ldr	r3, [r3, #8]
 80062b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80062b8:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80062ba:	69bb      	ldr	r3, [r7, #24]
 80062bc:	015a      	lsls	r2, r3, #5
 80062be:	69fb      	ldr	r3, [r7, #28]
 80062c0:	4413      	add	r3, r2
 80062c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062c6:	691a      	ldr	r2, [r3, #16]
 80062c8:	8afb      	ldrh	r3, [r7, #22]
 80062ca:	04d9      	lsls	r1, r3, #19
 80062cc:	4b39      	ldr	r3, [pc, #228]	; (80063b4 <USB_EPStartXfer+0x484>)
 80062ce:	400b      	ands	r3, r1
 80062d0:	69b9      	ldr	r1, [r7, #24]
 80062d2:	0148      	lsls	r0, r1, #5
 80062d4:	69f9      	ldr	r1, [r7, #28]
 80062d6:	4401      	add	r1, r0
 80062d8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80062dc:	4313      	orrs	r3, r2
 80062de:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 80062e0:	69bb      	ldr	r3, [r7, #24]
 80062e2:	015a      	lsls	r2, r3, #5
 80062e4:	69fb      	ldr	r3, [r7, #28]
 80062e6:	4413      	add	r3, r2
 80062e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062ec:	691a      	ldr	r2, [r3, #16]
 80062ee:	68bb      	ldr	r3, [r7, #8]
 80062f0:	689b      	ldr	r3, [r3, #8]
 80062f2:	8af9      	ldrh	r1, [r7, #22]
 80062f4:	fb01 f303 	mul.w	r3, r1, r3
 80062f8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80062fc:	69b9      	ldr	r1, [r7, #24]
 80062fe:	0148      	lsls	r0, r1, #5
 8006300:	69f9      	ldr	r1, [r7, #28]
 8006302:	4401      	add	r1, r0
 8006304:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006308:	4313      	orrs	r3, r2
 800630a:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800630c:	79fb      	ldrb	r3, [r7, #7]
 800630e:	2b01      	cmp	r3, #1
 8006310:	d10d      	bne.n	800632e <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8006312:	68bb      	ldr	r3, [r7, #8]
 8006314:	68db      	ldr	r3, [r3, #12]
 8006316:	2b00      	cmp	r3, #0
 8006318:	d009      	beq.n	800632e <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800631a:	68bb      	ldr	r3, [r7, #8]
 800631c:	68d9      	ldr	r1, [r3, #12]
 800631e:	69bb      	ldr	r3, [r7, #24]
 8006320:	015a      	lsls	r2, r3, #5
 8006322:	69fb      	ldr	r3, [r7, #28]
 8006324:	4413      	add	r3, r2
 8006326:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800632a:	460a      	mov	r2, r1
 800632c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800632e:	68bb      	ldr	r3, [r7, #8]
 8006330:	78db      	ldrb	r3, [r3, #3]
 8006332:	2b01      	cmp	r3, #1
 8006334:	d128      	bne.n	8006388 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006336:	69fb      	ldr	r3, [r7, #28]
 8006338:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800633c:	689b      	ldr	r3, [r3, #8]
 800633e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006342:	2b00      	cmp	r3, #0
 8006344:	d110      	bne.n	8006368 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8006346:	69bb      	ldr	r3, [r7, #24]
 8006348:	015a      	lsls	r2, r3, #5
 800634a:	69fb      	ldr	r3, [r7, #28]
 800634c:	4413      	add	r3, r2
 800634e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	69ba      	ldr	r2, [r7, #24]
 8006356:	0151      	lsls	r1, r2, #5
 8006358:	69fa      	ldr	r2, [r7, #28]
 800635a:	440a      	add	r2, r1
 800635c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006360:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006364:	6013      	str	r3, [r2, #0]
 8006366:	e00f      	b.n	8006388 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8006368:	69bb      	ldr	r3, [r7, #24]
 800636a:	015a      	lsls	r2, r3, #5
 800636c:	69fb      	ldr	r3, [r7, #28]
 800636e:	4413      	add	r3, r2
 8006370:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	69ba      	ldr	r2, [r7, #24]
 8006378:	0151      	lsls	r1, r2, #5
 800637a:	69fa      	ldr	r2, [r7, #28]
 800637c:	440a      	add	r2, r1
 800637e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006382:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006386:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006388:	69bb      	ldr	r3, [r7, #24]
 800638a:	015a      	lsls	r2, r3, #5
 800638c:	69fb      	ldr	r3, [r7, #28]
 800638e:	4413      	add	r3, r2
 8006390:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	69ba      	ldr	r2, [r7, #24]
 8006398:	0151      	lsls	r1, r2, #5
 800639a:	69fa      	ldr	r2, [r7, #28]
 800639c:	440a      	add	r2, r1
 800639e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80063a2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80063a6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80063a8:	2300      	movs	r3, #0
}
 80063aa:	4618      	mov	r0, r3
 80063ac:	3720      	adds	r7, #32
 80063ae:	46bd      	mov	sp, r7
 80063b0:	bd80      	pop	{r7, pc}
 80063b2:	bf00      	nop
 80063b4:	1ff80000 	.word	0x1ff80000

080063b8 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80063b8:	b480      	push	{r7}
 80063ba:	b087      	sub	sp, #28
 80063bc:	af00      	add	r7, sp, #0
 80063be:	60f8      	str	r0, [r7, #12]
 80063c0:	60b9      	str	r1, [r7, #8]
 80063c2:	4613      	mov	r3, r2
 80063c4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 80063ca:	68bb      	ldr	r3, [r7, #8]
 80063cc:	781b      	ldrb	r3, [r3, #0]
 80063ce:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80063d0:	68bb      	ldr	r3, [r7, #8]
 80063d2:	785b      	ldrb	r3, [r3, #1]
 80063d4:	2b01      	cmp	r3, #1
 80063d6:	f040 80cd 	bne.w	8006574 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80063da:	68bb      	ldr	r3, [r7, #8]
 80063dc:	695b      	ldr	r3, [r3, #20]
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d132      	bne.n	8006448 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80063e2:	693b      	ldr	r3, [r7, #16]
 80063e4:	015a      	lsls	r2, r3, #5
 80063e6:	697b      	ldr	r3, [r7, #20]
 80063e8:	4413      	add	r3, r2
 80063ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063ee:	691b      	ldr	r3, [r3, #16]
 80063f0:	693a      	ldr	r2, [r7, #16]
 80063f2:	0151      	lsls	r1, r2, #5
 80063f4:	697a      	ldr	r2, [r7, #20]
 80063f6:	440a      	add	r2, r1
 80063f8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80063fc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006400:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006404:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006406:	693b      	ldr	r3, [r7, #16]
 8006408:	015a      	lsls	r2, r3, #5
 800640a:	697b      	ldr	r3, [r7, #20]
 800640c:	4413      	add	r3, r2
 800640e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006412:	691b      	ldr	r3, [r3, #16]
 8006414:	693a      	ldr	r2, [r7, #16]
 8006416:	0151      	lsls	r1, r2, #5
 8006418:	697a      	ldr	r2, [r7, #20]
 800641a:	440a      	add	r2, r1
 800641c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006420:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006424:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006426:	693b      	ldr	r3, [r7, #16]
 8006428:	015a      	lsls	r2, r3, #5
 800642a:	697b      	ldr	r3, [r7, #20]
 800642c:	4413      	add	r3, r2
 800642e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006432:	691b      	ldr	r3, [r3, #16]
 8006434:	693a      	ldr	r2, [r7, #16]
 8006436:	0151      	lsls	r1, r2, #5
 8006438:	697a      	ldr	r2, [r7, #20]
 800643a:	440a      	add	r2, r1
 800643c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006440:	0cdb      	lsrs	r3, r3, #19
 8006442:	04db      	lsls	r3, r3, #19
 8006444:	6113      	str	r3, [r2, #16]
 8006446:	e04e      	b.n	80064e6 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006448:	693b      	ldr	r3, [r7, #16]
 800644a:	015a      	lsls	r2, r3, #5
 800644c:	697b      	ldr	r3, [r7, #20]
 800644e:	4413      	add	r3, r2
 8006450:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006454:	691b      	ldr	r3, [r3, #16]
 8006456:	693a      	ldr	r2, [r7, #16]
 8006458:	0151      	lsls	r1, r2, #5
 800645a:	697a      	ldr	r2, [r7, #20]
 800645c:	440a      	add	r2, r1
 800645e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006462:	0cdb      	lsrs	r3, r3, #19
 8006464:	04db      	lsls	r3, r3, #19
 8006466:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006468:	693b      	ldr	r3, [r7, #16]
 800646a:	015a      	lsls	r2, r3, #5
 800646c:	697b      	ldr	r3, [r7, #20]
 800646e:	4413      	add	r3, r2
 8006470:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006474:	691b      	ldr	r3, [r3, #16]
 8006476:	693a      	ldr	r2, [r7, #16]
 8006478:	0151      	lsls	r1, r2, #5
 800647a:	697a      	ldr	r2, [r7, #20]
 800647c:	440a      	add	r2, r1
 800647e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006482:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006486:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800648a:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800648c:	68bb      	ldr	r3, [r7, #8]
 800648e:	695a      	ldr	r2, [r3, #20]
 8006490:	68bb      	ldr	r3, [r7, #8]
 8006492:	689b      	ldr	r3, [r3, #8]
 8006494:	429a      	cmp	r2, r3
 8006496:	d903      	bls.n	80064a0 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8006498:	68bb      	ldr	r3, [r7, #8]
 800649a:	689a      	ldr	r2, [r3, #8]
 800649c:	68bb      	ldr	r3, [r7, #8]
 800649e:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80064a0:	693b      	ldr	r3, [r7, #16]
 80064a2:	015a      	lsls	r2, r3, #5
 80064a4:	697b      	ldr	r3, [r7, #20]
 80064a6:	4413      	add	r3, r2
 80064a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80064ac:	691b      	ldr	r3, [r3, #16]
 80064ae:	693a      	ldr	r2, [r7, #16]
 80064b0:	0151      	lsls	r1, r2, #5
 80064b2:	697a      	ldr	r2, [r7, #20]
 80064b4:	440a      	add	r2, r1
 80064b6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80064ba:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80064be:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80064c0:	693b      	ldr	r3, [r7, #16]
 80064c2:	015a      	lsls	r2, r3, #5
 80064c4:	697b      	ldr	r3, [r7, #20]
 80064c6:	4413      	add	r3, r2
 80064c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80064cc:	691a      	ldr	r2, [r3, #16]
 80064ce:	68bb      	ldr	r3, [r7, #8]
 80064d0:	695b      	ldr	r3, [r3, #20]
 80064d2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80064d6:	6939      	ldr	r1, [r7, #16]
 80064d8:	0148      	lsls	r0, r1, #5
 80064da:	6979      	ldr	r1, [r7, #20]
 80064dc:	4401      	add	r1, r0
 80064de:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80064e2:	4313      	orrs	r3, r2
 80064e4:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80064e6:	79fb      	ldrb	r3, [r7, #7]
 80064e8:	2b01      	cmp	r3, #1
 80064ea:	d11e      	bne.n	800652a <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80064ec:	68bb      	ldr	r3, [r7, #8]
 80064ee:	691b      	ldr	r3, [r3, #16]
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d009      	beq.n	8006508 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80064f4:	693b      	ldr	r3, [r7, #16]
 80064f6:	015a      	lsls	r2, r3, #5
 80064f8:	697b      	ldr	r3, [r7, #20]
 80064fa:	4413      	add	r3, r2
 80064fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006500:	461a      	mov	r2, r3
 8006502:	68bb      	ldr	r3, [r7, #8]
 8006504:	691b      	ldr	r3, [r3, #16]
 8006506:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006508:	693b      	ldr	r3, [r7, #16]
 800650a:	015a      	lsls	r2, r3, #5
 800650c:	697b      	ldr	r3, [r7, #20]
 800650e:	4413      	add	r3, r2
 8006510:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	693a      	ldr	r2, [r7, #16]
 8006518:	0151      	lsls	r1, r2, #5
 800651a:	697a      	ldr	r2, [r7, #20]
 800651c:	440a      	add	r2, r1
 800651e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006522:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006526:	6013      	str	r3, [r2, #0]
 8006528:	e092      	b.n	8006650 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800652a:	693b      	ldr	r3, [r7, #16]
 800652c:	015a      	lsls	r2, r3, #5
 800652e:	697b      	ldr	r3, [r7, #20]
 8006530:	4413      	add	r3, r2
 8006532:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	693a      	ldr	r2, [r7, #16]
 800653a:	0151      	lsls	r1, r2, #5
 800653c:	697a      	ldr	r2, [r7, #20]
 800653e:	440a      	add	r2, r1
 8006540:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006544:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006548:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800654a:	68bb      	ldr	r3, [r7, #8]
 800654c:	695b      	ldr	r3, [r3, #20]
 800654e:	2b00      	cmp	r3, #0
 8006550:	d07e      	beq.n	8006650 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8006552:	697b      	ldr	r3, [r7, #20]
 8006554:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006558:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800655a:	68bb      	ldr	r3, [r7, #8]
 800655c:	781b      	ldrb	r3, [r3, #0]
 800655e:	f003 030f 	and.w	r3, r3, #15
 8006562:	2101      	movs	r1, #1
 8006564:	fa01 f303 	lsl.w	r3, r1, r3
 8006568:	6979      	ldr	r1, [r7, #20]
 800656a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800656e:	4313      	orrs	r3, r2
 8006570:	634b      	str	r3, [r1, #52]	; 0x34
 8006572:	e06d      	b.n	8006650 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8006574:	693b      	ldr	r3, [r7, #16]
 8006576:	015a      	lsls	r2, r3, #5
 8006578:	697b      	ldr	r3, [r7, #20]
 800657a:	4413      	add	r3, r2
 800657c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006580:	691b      	ldr	r3, [r3, #16]
 8006582:	693a      	ldr	r2, [r7, #16]
 8006584:	0151      	lsls	r1, r2, #5
 8006586:	697a      	ldr	r2, [r7, #20]
 8006588:	440a      	add	r2, r1
 800658a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800658e:	0cdb      	lsrs	r3, r3, #19
 8006590:	04db      	lsls	r3, r3, #19
 8006592:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8006594:	693b      	ldr	r3, [r7, #16]
 8006596:	015a      	lsls	r2, r3, #5
 8006598:	697b      	ldr	r3, [r7, #20]
 800659a:	4413      	add	r3, r2
 800659c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065a0:	691b      	ldr	r3, [r3, #16]
 80065a2:	693a      	ldr	r2, [r7, #16]
 80065a4:	0151      	lsls	r1, r2, #5
 80065a6:	697a      	ldr	r2, [r7, #20]
 80065a8:	440a      	add	r2, r1
 80065aa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80065ae:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80065b2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80065b6:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 80065b8:	68bb      	ldr	r3, [r7, #8]
 80065ba:	695b      	ldr	r3, [r3, #20]
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d003      	beq.n	80065c8 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 80065c0:	68bb      	ldr	r3, [r7, #8]
 80065c2:	689a      	ldr	r2, [r3, #8]
 80065c4:	68bb      	ldr	r3, [r7, #8]
 80065c6:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80065c8:	693b      	ldr	r3, [r7, #16]
 80065ca:	015a      	lsls	r2, r3, #5
 80065cc:	697b      	ldr	r3, [r7, #20]
 80065ce:	4413      	add	r3, r2
 80065d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065d4:	691b      	ldr	r3, [r3, #16]
 80065d6:	693a      	ldr	r2, [r7, #16]
 80065d8:	0151      	lsls	r1, r2, #5
 80065da:	697a      	ldr	r2, [r7, #20]
 80065dc:	440a      	add	r2, r1
 80065de:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80065e2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80065e6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 80065e8:	693b      	ldr	r3, [r7, #16]
 80065ea:	015a      	lsls	r2, r3, #5
 80065ec:	697b      	ldr	r3, [r7, #20]
 80065ee:	4413      	add	r3, r2
 80065f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065f4:	691a      	ldr	r2, [r3, #16]
 80065f6:	68bb      	ldr	r3, [r7, #8]
 80065f8:	689b      	ldr	r3, [r3, #8]
 80065fa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80065fe:	6939      	ldr	r1, [r7, #16]
 8006600:	0148      	lsls	r0, r1, #5
 8006602:	6979      	ldr	r1, [r7, #20]
 8006604:	4401      	add	r1, r0
 8006606:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800660a:	4313      	orrs	r3, r2
 800660c:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800660e:	79fb      	ldrb	r3, [r7, #7]
 8006610:	2b01      	cmp	r3, #1
 8006612:	d10d      	bne.n	8006630 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8006614:	68bb      	ldr	r3, [r7, #8]
 8006616:	68db      	ldr	r3, [r3, #12]
 8006618:	2b00      	cmp	r3, #0
 800661a:	d009      	beq.n	8006630 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800661c:	68bb      	ldr	r3, [r7, #8]
 800661e:	68d9      	ldr	r1, [r3, #12]
 8006620:	693b      	ldr	r3, [r7, #16]
 8006622:	015a      	lsls	r2, r3, #5
 8006624:	697b      	ldr	r3, [r7, #20]
 8006626:	4413      	add	r3, r2
 8006628:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800662c:	460a      	mov	r2, r1
 800662e:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006630:	693b      	ldr	r3, [r7, #16]
 8006632:	015a      	lsls	r2, r3, #5
 8006634:	697b      	ldr	r3, [r7, #20]
 8006636:	4413      	add	r3, r2
 8006638:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	693a      	ldr	r2, [r7, #16]
 8006640:	0151      	lsls	r1, r2, #5
 8006642:	697a      	ldr	r2, [r7, #20]
 8006644:	440a      	add	r2, r1
 8006646:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800664a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800664e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006650:	2300      	movs	r3, #0
}
 8006652:	4618      	mov	r0, r3
 8006654:	371c      	adds	r7, #28
 8006656:	46bd      	mov	sp, r7
 8006658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800665c:	4770      	bx	lr

0800665e <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800665e:	b480      	push	{r7}
 8006660:	b089      	sub	sp, #36	; 0x24
 8006662:	af00      	add	r7, sp, #0
 8006664:	60f8      	str	r0, [r7, #12]
 8006666:	60b9      	str	r1, [r7, #8]
 8006668:	4611      	mov	r1, r2
 800666a:	461a      	mov	r2, r3
 800666c:	460b      	mov	r3, r1
 800666e:	71fb      	strb	r3, [r7, #7]
 8006670:	4613      	mov	r3, r2
 8006672:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8006678:	68bb      	ldr	r3, [r7, #8]
 800667a:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800667c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006680:	2b00      	cmp	r3, #0
 8006682:	d123      	bne.n	80066cc <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8006684:	88bb      	ldrh	r3, [r7, #4]
 8006686:	3303      	adds	r3, #3
 8006688:	089b      	lsrs	r3, r3, #2
 800668a:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800668c:	2300      	movs	r3, #0
 800668e:	61bb      	str	r3, [r7, #24]
 8006690:	e018      	b.n	80066c4 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006692:	79fb      	ldrb	r3, [r7, #7]
 8006694:	031a      	lsls	r2, r3, #12
 8006696:	697b      	ldr	r3, [r7, #20]
 8006698:	4413      	add	r3, r2
 800669a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800669e:	461a      	mov	r2, r3
 80066a0:	69fb      	ldr	r3, [r7, #28]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	6013      	str	r3, [r2, #0]
      pSrc++;
 80066a6:	69fb      	ldr	r3, [r7, #28]
 80066a8:	3301      	adds	r3, #1
 80066aa:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80066ac:	69fb      	ldr	r3, [r7, #28]
 80066ae:	3301      	adds	r3, #1
 80066b0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80066b2:	69fb      	ldr	r3, [r7, #28]
 80066b4:	3301      	adds	r3, #1
 80066b6:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80066b8:	69fb      	ldr	r3, [r7, #28]
 80066ba:	3301      	adds	r3, #1
 80066bc:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80066be:	69bb      	ldr	r3, [r7, #24]
 80066c0:	3301      	adds	r3, #1
 80066c2:	61bb      	str	r3, [r7, #24]
 80066c4:	69ba      	ldr	r2, [r7, #24]
 80066c6:	693b      	ldr	r3, [r7, #16]
 80066c8:	429a      	cmp	r2, r3
 80066ca:	d3e2      	bcc.n	8006692 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80066cc:	2300      	movs	r3, #0
}
 80066ce:	4618      	mov	r0, r3
 80066d0:	3724      	adds	r7, #36	; 0x24
 80066d2:	46bd      	mov	sp, r7
 80066d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d8:	4770      	bx	lr

080066da <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80066da:	b480      	push	{r7}
 80066dc:	b08b      	sub	sp, #44	; 0x2c
 80066de:	af00      	add	r7, sp, #0
 80066e0:	60f8      	str	r0, [r7, #12]
 80066e2:	60b9      	str	r1, [r7, #8]
 80066e4:	4613      	mov	r3, r2
 80066e6:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80066ec:	68bb      	ldr	r3, [r7, #8]
 80066ee:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80066f0:	88fb      	ldrh	r3, [r7, #6]
 80066f2:	089b      	lsrs	r3, r3, #2
 80066f4:	b29b      	uxth	r3, r3
 80066f6:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80066f8:	88fb      	ldrh	r3, [r7, #6]
 80066fa:	f003 0303 	and.w	r3, r3, #3
 80066fe:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8006700:	2300      	movs	r3, #0
 8006702:	623b      	str	r3, [r7, #32]
 8006704:	e014      	b.n	8006730 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006706:	69bb      	ldr	r3, [r7, #24]
 8006708:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800670c:	681a      	ldr	r2, [r3, #0]
 800670e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006710:	601a      	str	r2, [r3, #0]
    pDest++;
 8006712:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006714:	3301      	adds	r3, #1
 8006716:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800671a:	3301      	adds	r3, #1
 800671c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800671e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006720:	3301      	adds	r3, #1
 8006722:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006724:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006726:	3301      	adds	r3, #1
 8006728:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800672a:	6a3b      	ldr	r3, [r7, #32]
 800672c:	3301      	adds	r3, #1
 800672e:	623b      	str	r3, [r7, #32]
 8006730:	6a3a      	ldr	r2, [r7, #32]
 8006732:	697b      	ldr	r3, [r7, #20]
 8006734:	429a      	cmp	r2, r3
 8006736:	d3e6      	bcc.n	8006706 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8006738:	8bfb      	ldrh	r3, [r7, #30]
 800673a:	2b00      	cmp	r3, #0
 800673c:	d01e      	beq.n	800677c <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800673e:	2300      	movs	r3, #0
 8006740:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8006742:	69bb      	ldr	r3, [r7, #24]
 8006744:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006748:	461a      	mov	r2, r3
 800674a:	f107 0310 	add.w	r3, r7, #16
 800674e:	6812      	ldr	r2, [r2, #0]
 8006750:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8006752:	693a      	ldr	r2, [r7, #16]
 8006754:	6a3b      	ldr	r3, [r7, #32]
 8006756:	b2db      	uxtb	r3, r3
 8006758:	00db      	lsls	r3, r3, #3
 800675a:	fa22 f303 	lsr.w	r3, r2, r3
 800675e:	b2da      	uxtb	r2, r3
 8006760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006762:	701a      	strb	r2, [r3, #0]
      i++;
 8006764:	6a3b      	ldr	r3, [r7, #32]
 8006766:	3301      	adds	r3, #1
 8006768:	623b      	str	r3, [r7, #32]
      pDest++;
 800676a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800676c:	3301      	adds	r3, #1
 800676e:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8006770:	8bfb      	ldrh	r3, [r7, #30]
 8006772:	3b01      	subs	r3, #1
 8006774:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8006776:	8bfb      	ldrh	r3, [r7, #30]
 8006778:	2b00      	cmp	r3, #0
 800677a:	d1ea      	bne.n	8006752 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800677c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800677e:	4618      	mov	r0, r3
 8006780:	372c      	adds	r7, #44	; 0x2c
 8006782:	46bd      	mov	sp, r7
 8006784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006788:	4770      	bx	lr

0800678a <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800678a:	b480      	push	{r7}
 800678c:	b085      	sub	sp, #20
 800678e:	af00      	add	r7, sp, #0
 8006790:	6078      	str	r0, [r7, #4]
 8006792:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006798:	683b      	ldr	r3, [r7, #0]
 800679a:	781b      	ldrb	r3, [r3, #0]
 800679c:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800679e:	683b      	ldr	r3, [r7, #0]
 80067a0:	785b      	ldrb	r3, [r3, #1]
 80067a2:	2b01      	cmp	r3, #1
 80067a4:	d12c      	bne.n	8006800 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80067a6:	68bb      	ldr	r3, [r7, #8]
 80067a8:	015a      	lsls	r2, r3, #5
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	4413      	add	r3, r2
 80067ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	db12      	blt.n	80067de <USB_EPSetStall+0x54>
 80067b8:	68bb      	ldr	r3, [r7, #8]
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d00f      	beq.n	80067de <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80067be:	68bb      	ldr	r3, [r7, #8]
 80067c0:	015a      	lsls	r2, r3, #5
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	4413      	add	r3, r2
 80067c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	68ba      	ldr	r2, [r7, #8]
 80067ce:	0151      	lsls	r1, r2, #5
 80067d0:	68fa      	ldr	r2, [r7, #12]
 80067d2:	440a      	add	r2, r1
 80067d4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80067d8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80067dc:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80067de:	68bb      	ldr	r3, [r7, #8]
 80067e0:	015a      	lsls	r2, r3, #5
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	4413      	add	r3, r2
 80067e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	68ba      	ldr	r2, [r7, #8]
 80067ee:	0151      	lsls	r1, r2, #5
 80067f0:	68fa      	ldr	r2, [r7, #12]
 80067f2:	440a      	add	r2, r1
 80067f4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80067f8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80067fc:	6013      	str	r3, [r2, #0]
 80067fe:	e02b      	b.n	8006858 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006800:	68bb      	ldr	r3, [r7, #8]
 8006802:	015a      	lsls	r2, r3, #5
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	4413      	add	r3, r2
 8006808:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	2b00      	cmp	r3, #0
 8006810:	db12      	blt.n	8006838 <USB_EPSetStall+0xae>
 8006812:	68bb      	ldr	r3, [r7, #8]
 8006814:	2b00      	cmp	r3, #0
 8006816:	d00f      	beq.n	8006838 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8006818:	68bb      	ldr	r3, [r7, #8]
 800681a:	015a      	lsls	r2, r3, #5
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	4413      	add	r3, r2
 8006820:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	68ba      	ldr	r2, [r7, #8]
 8006828:	0151      	lsls	r1, r2, #5
 800682a:	68fa      	ldr	r2, [r7, #12]
 800682c:	440a      	add	r2, r1
 800682e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006832:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006836:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8006838:	68bb      	ldr	r3, [r7, #8]
 800683a:	015a      	lsls	r2, r3, #5
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	4413      	add	r3, r2
 8006840:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	68ba      	ldr	r2, [r7, #8]
 8006848:	0151      	lsls	r1, r2, #5
 800684a:	68fa      	ldr	r2, [r7, #12]
 800684c:	440a      	add	r2, r1
 800684e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006852:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006856:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006858:	2300      	movs	r3, #0
}
 800685a:	4618      	mov	r0, r3
 800685c:	3714      	adds	r7, #20
 800685e:	46bd      	mov	sp, r7
 8006860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006864:	4770      	bx	lr

08006866 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006866:	b480      	push	{r7}
 8006868:	b085      	sub	sp, #20
 800686a:	af00      	add	r7, sp, #0
 800686c:	6078      	str	r0, [r7, #4]
 800686e:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006874:	683b      	ldr	r3, [r7, #0]
 8006876:	781b      	ldrb	r3, [r3, #0]
 8006878:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800687a:	683b      	ldr	r3, [r7, #0]
 800687c:	785b      	ldrb	r3, [r3, #1]
 800687e:	2b01      	cmp	r3, #1
 8006880:	d128      	bne.n	80068d4 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006882:	68bb      	ldr	r3, [r7, #8]
 8006884:	015a      	lsls	r2, r3, #5
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	4413      	add	r3, r2
 800688a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	68ba      	ldr	r2, [r7, #8]
 8006892:	0151      	lsls	r1, r2, #5
 8006894:	68fa      	ldr	r2, [r7, #12]
 8006896:	440a      	add	r2, r1
 8006898:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800689c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80068a0:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80068a2:	683b      	ldr	r3, [r7, #0]
 80068a4:	78db      	ldrb	r3, [r3, #3]
 80068a6:	2b03      	cmp	r3, #3
 80068a8:	d003      	beq.n	80068b2 <USB_EPClearStall+0x4c>
 80068aa:	683b      	ldr	r3, [r7, #0]
 80068ac:	78db      	ldrb	r3, [r3, #3]
 80068ae:	2b02      	cmp	r3, #2
 80068b0:	d138      	bne.n	8006924 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80068b2:	68bb      	ldr	r3, [r7, #8]
 80068b4:	015a      	lsls	r2, r3, #5
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	4413      	add	r3, r2
 80068ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	68ba      	ldr	r2, [r7, #8]
 80068c2:	0151      	lsls	r1, r2, #5
 80068c4:	68fa      	ldr	r2, [r7, #12]
 80068c6:	440a      	add	r2, r1
 80068c8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80068cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80068d0:	6013      	str	r3, [r2, #0]
 80068d2:	e027      	b.n	8006924 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80068d4:	68bb      	ldr	r3, [r7, #8]
 80068d6:	015a      	lsls	r2, r3, #5
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	4413      	add	r3, r2
 80068dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	68ba      	ldr	r2, [r7, #8]
 80068e4:	0151      	lsls	r1, r2, #5
 80068e6:	68fa      	ldr	r2, [r7, #12]
 80068e8:	440a      	add	r2, r1
 80068ea:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80068ee:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80068f2:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80068f4:	683b      	ldr	r3, [r7, #0]
 80068f6:	78db      	ldrb	r3, [r3, #3]
 80068f8:	2b03      	cmp	r3, #3
 80068fa:	d003      	beq.n	8006904 <USB_EPClearStall+0x9e>
 80068fc:	683b      	ldr	r3, [r7, #0]
 80068fe:	78db      	ldrb	r3, [r3, #3]
 8006900:	2b02      	cmp	r3, #2
 8006902:	d10f      	bne.n	8006924 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006904:	68bb      	ldr	r3, [r7, #8]
 8006906:	015a      	lsls	r2, r3, #5
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	4413      	add	r3, r2
 800690c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	68ba      	ldr	r2, [r7, #8]
 8006914:	0151      	lsls	r1, r2, #5
 8006916:	68fa      	ldr	r2, [r7, #12]
 8006918:	440a      	add	r2, r1
 800691a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800691e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006922:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8006924:	2300      	movs	r3, #0
}
 8006926:	4618      	mov	r0, r3
 8006928:	3714      	adds	r7, #20
 800692a:	46bd      	mov	sp, r7
 800692c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006930:	4770      	bx	lr

08006932 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8006932:	b480      	push	{r7}
 8006934:	b085      	sub	sp, #20
 8006936:	af00      	add	r7, sp, #0
 8006938:	6078      	str	r0, [r7, #4]
 800693a:	460b      	mov	r3, r1
 800693c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	68fa      	ldr	r2, [r7, #12]
 800694c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006950:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8006954:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800695c:	681a      	ldr	r2, [r3, #0]
 800695e:	78fb      	ldrb	r3, [r7, #3]
 8006960:	011b      	lsls	r3, r3, #4
 8006962:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8006966:	68f9      	ldr	r1, [r7, #12]
 8006968:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800696c:	4313      	orrs	r3, r2
 800696e:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8006970:	2300      	movs	r3, #0
}
 8006972:	4618      	mov	r0, r3
 8006974:	3714      	adds	r7, #20
 8006976:	46bd      	mov	sp, r7
 8006978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800697c:	4770      	bx	lr

0800697e <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800697e:	b480      	push	{r7}
 8006980:	b085      	sub	sp, #20
 8006982:	af00      	add	r7, sp, #0
 8006984:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	68fa      	ldr	r2, [r7, #12]
 8006994:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006998:	f023 0303 	bic.w	r3, r3, #3
 800699c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80069a4:	685b      	ldr	r3, [r3, #4]
 80069a6:	68fa      	ldr	r2, [r7, #12]
 80069a8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80069ac:	f023 0302 	bic.w	r3, r3, #2
 80069b0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80069b2:	2300      	movs	r3, #0
}
 80069b4:	4618      	mov	r0, r3
 80069b6:	3714      	adds	r7, #20
 80069b8:	46bd      	mov	sp, r7
 80069ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069be:	4770      	bx	lr

080069c0 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80069c0:	b480      	push	{r7}
 80069c2:	b085      	sub	sp, #20
 80069c4:	af00      	add	r7, sp, #0
 80069c6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	68fa      	ldr	r2, [r7, #12]
 80069d6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80069da:	f023 0303 	bic.w	r3, r3, #3
 80069de:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80069e6:	685b      	ldr	r3, [r3, #4]
 80069e8:	68fa      	ldr	r2, [r7, #12]
 80069ea:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80069ee:	f043 0302 	orr.w	r3, r3, #2
 80069f2:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80069f4:	2300      	movs	r3, #0
}
 80069f6:	4618      	mov	r0, r3
 80069f8:	3714      	adds	r7, #20
 80069fa:	46bd      	mov	sp, r7
 80069fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a00:	4770      	bx	lr

08006a02 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8006a02:	b480      	push	{r7}
 8006a04:	b085      	sub	sp, #20
 8006a06:	af00      	add	r7, sp, #0
 8006a08:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	695b      	ldr	r3, [r3, #20]
 8006a0e:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	699b      	ldr	r3, [r3, #24]
 8006a14:	68fa      	ldr	r2, [r7, #12]
 8006a16:	4013      	ands	r3, r2
 8006a18:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006a1a:	68fb      	ldr	r3, [r7, #12]
}
 8006a1c:	4618      	mov	r0, r3
 8006a1e:	3714      	adds	r7, #20
 8006a20:	46bd      	mov	sp, r7
 8006a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a26:	4770      	bx	lr

08006a28 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006a28:	b480      	push	{r7}
 8006a2a:	b085      	sub	sp, #20
 8006a2c:	af00      	add	r7, sp, #0
 8006a2e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a3a:	699b      	ldr	r3, [r3, #24]
 8006a3c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a44:	69db      	ldr	r3, [r3, #28]
 8006a46:	68ba      	ldr	r2, [r7, #8]
 8006a48:	4013      	ands	r3, r2
 8006a4a:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8006a4c:	68bb      	ldr	r3, [r7, #8]
 8006a4e:	0c1b      	lsrs	r3, r3, #16
}
 8006a50:	4618      	mov	r0, r3
 8006a52:	3714      	adds	r7, #20
 8006a54:	46bd      	mov	sp, r7
 8006a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a5a:	4770      	bx	lr

08006a5c <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006a5c:	b480      	push	{r7}
 8006a5e:	b085      	sub	sp, #20
 8006a60:	af00      	add	r7, sp, #0
 8006a62:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a6e:	699b      	ldr	r3, [r3, #24]
 8006a70:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a78:	69db      	ldr	r3, [r3, #28]
 8006a7a:	68ba      	ldr	r2, [r7, #8]
 8006a7c:	4013      	ands	r3, r2
 8006a7e:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8006a80:	68bb      	ldr	r3, [r7, #8]
 8006a82:	b29b      	uxth	r3, r3
}
 8006a84:	4618      	mov	r0, r3
 8006a86:	3714      	adds	r7, #20
 8006a88:	46bd      	mov	sp, r7
 8006a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a8e:	4770      	bx	lr

08006a90 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006a90:	b480      	push	{r7}
 8006a92:	b085      	sub	sp, #20
 8006a94:	af00      	add	r7, sp, #0
 8006a96:	6078      	str	r0, [r7, #4]
 8006a98:	460b      	mov	r3, r1
 8006a9a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8006aa0:	78fb      	ldrb	r3, [r7, #3]
 8006aa2:	015a      	lsls	r2, r3, #5
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	4413      	add	r3, r2
 8006aa8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006aac:	689b      	ldr	r3, [r3, #8]
 8006aae:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ab6:	695b      	ldr	r3, [r3, #20]
 8006ab8:	68ba      	ldr	r2, [r7, #8]
 8006aba:	4013      	ands	r3, r2
 8006abc:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006abe:	68bb      	ldr	r3, [r7, #8]
}
 8006ac0:	4618      	mov	r0, r3
 8006ac2:	3714      	adds	r7, #20
 8006ac4:	46bd      	mov	sp, r7
 8006ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aca:	4770      	bx	lr

08006acc <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006acc:	b480      	push	{r7}
 8006ace:	b087      	sub	sp, #28
 8006ad0:	af00      	add	r7, sp, #0
 8006ad2:	6078      	str	r0, [r7, #4]
 8006ad4:	460b      	mov	r3, r1
 8006ad6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8006adc:	697b      	ldr	r3, [r7, #20]
 8006ade:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ae2:	691b      	ldr	r3, [r3, #16]
 8006ae4:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8006ae6:	697b      	ldr	r3, [r7, #20]
 8006ae8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006aec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006aee:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8006af0:	78fb      	ldrb	r3, [r7, #3]
 8006af2:	f003 030f 	and.w	r3, r3, #15
 8006af6:	68fa      	ldr	r2, [r7, #12]
 8006af8:	fa22 f303 	lsr.w	r3, r2, r3
 8006afc:	01db      	lsls	r3, r3, #7
 8006afe:	b2db      	uxtb	r3, r3
 8006b00:	693a      	ldr	r2, [r7, #16]
 8006b02:	4313      	orrs	r3, r2
 8006b04:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8006b06:	78fb      	ldrb	r3, [r7, #3]
 8006b08:	015a      	lsls	r2, r3, #5
 8006b0a:	697b      	ldr	r3, [r7, #20]
 8006b0c:	4413      	add	r3, r2
 8006b0e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b12:	689b      	ldr	r3, [r3, #8]
 8006b14:	693a      	ldr	r2, [r7, #16]
 8006b16:	4013      	ands	r3, r2
 8006b18:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006b1a:	68bb      	ldr	r3, [r7, #8]
}
 8006b1c:	4618      	mov	r0, r3
 8006b1e:	371c      	adds	r7, #28
 8006b20:	46bd      	mov	sp, r7
 8006b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b26:	4770      	bx	lr

08006b28 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8006b28:	b480      	push	{r7}
 8006b2a:	b083      	sub	sp, #12
 8006b2c:	af00      	add	r7, sp, #0
 8006b2e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	695b      	ldr	r3, [r3, #20]
 8006b34:	f003 0301 	and.w	r3, r3, #1
}
 8006b38:	4618      	mov	r0, r3
 8006b3a:	370c      	adds	r7, #12
 8006b3c:	46bd      	mov	sp, r7
 8006b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b42:	4770      	bx	lr

08006b44 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8006b44:	b480      	push	{r7}
 8006b46:	b085      	sub	sp, #20
 8006b48:	af00      	add	r7, sp, #0
 8006b4a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	68fa      	ldr	r2, [r7, #12]
 8006b5a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006b5e:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8006b62:	f023 0307 	bic.w	r3, r3, #7
 8006b66:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b6e:	685b      	ldr	r3, [r3, #4]
 8006b70:	68fa      	ldr	r2, [r7, #12]
 8006b72:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006b76:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006b7a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006b7c:	2300      	movs	r3, #0
}
 8006b7e:	4618      	mov	r0, r3
 8006b80:	3714      	adds	r7, #20
 8006b82:	46bd      	mov	sp, r7
 8006b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b88:	4770      	bx	lr
	...

08006b8c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8006b8c:	b480      	push	{r7}
 8006b8e:	b087      	sub	sp, #28
 8006b90:	af00      	add	r7, sp, #0
 8006b92:	60f8      	str	r0, [r7, #12]
 8006b94:	460b      	mov	r3, r1
 8006b96:	607a      	str	r2, [r7, #4]
 8006b98:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	333c      	adds	r3, #60	; 0x3c
 8006ba2:	3304      	adds	r3, #4
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8006ba8:	693b      	ldr	r3, [r7, #16]
 8006baa:	4a26      	ldr	r2, [pc, #152]	; (8006c44 <USB_EP0_OutStart+0xb8>)
 8006bac:	4293      	cmp	r3, r2
 8006bae:	d90a      	bls.n	8006bc6 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006bb0:	697b      	ldr	r3, [r7, #20]
 8006bb2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006bbc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006bc0:	d101      	bne.n	8006bc6 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8006bc2:	2300      	movs	r3, #0
 8006bc4:	e037      	b.n	8006c36 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8006bc6:	697b      	ldr	r3, [r7, #20]
 8006bc8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006bcc:	461a      	mov	r2, r3
 8006bce:	2300      	movs	r3, #0
 8006bd0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006bd2:	697b      	ldr	r3, [r7, #20]
 8006bd4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006bd8:	691b      	ldr	r3, [r3, #16]
 8006bda:	697a      	ldr	r2, [r7, #20]
 8006bdc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006be0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006be4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8006be6:	697b      	ldr	r3, [r7, #20]
 8006be8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006bec:	691b      	ldr	r3, [r3, #16]
 8006bee:	697a      	ldr	r2, [r7, #20]
 8006bf0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006bf4:	f043 0318 	orr.w	r3, r3, #24
 8006bf8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8006bfa:	697b      	ldr	r3, [r7, #20]
 8006bfc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c00:	691b      	ldr	r3, [r3, #16]
 8006c02:	697a      	ldr	r2, [r7, #20]
 8006c04:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006c08:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8006c0c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8006c0e:	7afb      	ldrb	r3, [r7, #11]
 8006c10:	2b01      	cmp	r3, #1
 8006c12:	d10f      	bne.n	8006c34 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8006c14:	697b      	ldr	r3, [r7, #20]
 8006c16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c1a:	461a      	mov	r2, r3
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8006c20:	697b      	ldr	r3, [r7, #20]
 8006c22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	697a      	ldr	r2, [r7, #20]
 8006c2a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006c2e:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8006c32:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006c34:	2300      	movs	r3, #0
}
 8006c36:	4618      	mov	r0, r3
 8006c38:	371c      	adds	r7, #28
 8006c3a:	46bd      	mov	sp, r7
 8006c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c40:	4770      	bx	lr
 8006c42:	bf00      	nop
 8006c44:	4f54300a 	.word	0x4f54300a

08006c48 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006c48:	b480      	push	{r7}
 8006c4a:	b085      	sub	sp, #20
 8006c4c:	af00      	add	r7, sp, #0
 8006c4e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006c50:	2300      	movs	r3, #0
 8006c52:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	3301      	adds	r3, #1
 8006c58:	60fb      	str	r3, [r7, #12]
 8006c5a:	4a13      	ldr	r2, [pc, #76]	; (8006ca8 <USB_CoreReset+0x60>)
 8006c5c:	4293      	cmp	r3, r2
 8006c5e:	d901      	bls.n	8006c64 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 8006c60:	2303      	movs	r3, #3
 8006c62:	e01a      	b.n	8006c9a <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	691b      	ldr	r3, [r3, #16]
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	daf3      	bge.n	8006c54 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006c6c:	2300      	movs	r3, #0
 8006c6e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	691b      	ldr	r3, [r3, #16]
 8006c74:	f043 0201 	orr.w	r2, r3, #1
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	3301      	adds	r3, #1
 8006c80:	60fb      	str	r3, [r7, #12]
 8006c82:	4a09      	ldr	r2, [pc, #36]	; (8006ca8 <USB_CoreReset+0x60>)
 8006c84:	4293      	cmp	r3, r2
 8006c86:	d901      	bls.n	8006c8c <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 8006c88:	2303      	movs	r3, #3
 8006c8a:	e006      	b.n	8006c9a <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	691b      	ldr	r3, [r3, #16]
 8006c90:	f003 0301 	and.w	r3, r3, #1
 8006c94:	2b01      	cmp	r3, #1
 8006c96:	d0f1      	beq.n	8006c7c <USB_CoreReset+0x34>

  return HAL_OK;
 8006c98:	2300      	movs	r3, #0
}
 8006c9a:	4618      	mov	r0, r3
 8006c9c:	3714      	adds	r7, #20
 8006c9e:	46bd      	mov	sp, r7
 8006ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca4:	4770      	bx	lr
 8006ca6:	bf00      	nop
 8006ca8:	00030d40 	.word	0x00030d40

08006cac <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006cac:	b580      	push	{r7, lr}
 8006cae:	b084      	sub	sp, #16
 8006cb0:	af00      	add	r7, sp, #0
 8006cb2:	6078      	str	r0, [r7, #4]
 8006cb4:	460b      	mov	r3, r1
 8006cb6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8006cb8:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8006cbc:	f002 f964 	bl	8008f88 <USBD_static_malloc>
 8006cc0:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d105      	bne.n	8006cd4 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	2200      	movs	r2, #0
 8006ccc:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8006cd0:	2302      	movs	r3, #2
 8006cd2:	e066      	b.n	8006da2 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	68fa      	ldr	r2, [r7, #12]
 8006cd8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	7c1b      	ldrb	r3, [r3, #16]
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d119      	bne.n	8006d18 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006ce4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006ce8:	2202      	movs	r2, #2
 8006cea:	2181      	movs	r1, #129	; 0x81
 8006cec:	6878      	ldr	r0, [r7, #4]
 8006cee:	f002 f828 	bl	8008d42 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	2201      	movs	r2, #1
 8006cf6:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006cf8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006cfc:	2202      	movs	r2, #2
 8006cfe:	2101      	movs	r1, #1
 8006d00:	6878      	ldr	r0, [r7, #4]
 8006d02:	f002 f81e 	bl	8008d42 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	2201      	movs	r2, #1
 8006d0a:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	2210      	movs	r2, #16
 8006d12:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8006d16:	e016      	b.n	8006d46 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006d18:	2340      	movs	r3, #64	; 0x40
 8006d1a:	2202      	movs	r2, #2
 8006d1c:	2181      	movs	r1, #129	; 0x81
 8006d1e:	6878      	ldr	r0, [r7, #4]
 8006d20:	f002 f80f 	bl	8008d42 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	2201      	movs	r2, #1
 8006d28:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006d2a:	2340      	movs	r3, #64	; 0x40
 8006d2c:	2202      	movs	r2, #2
 8006d2e:	2101      	movs	r1, #1
 8006d30:	6878      	ldr	r0, [r7, #4]
 8006d32:	f002 f806 	bl	8008d42 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	2201      	movs	r2, #1
 8006d3a:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	2210      	movs	r2, #16
 8006d42:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8006d46:	2308      	movs	r3, #8
 8006d48:	2203      	movs	r2, #3
 8006d4a:	2182      	movs	r1, #130	; 0x82
 8006d4c:	6878      	ldr	r0, [r7, #4]
 8006d4e:	f001 fff8 	bl	8008d42 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	2201      	movs	r2, #1
 8006d56:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	2200      	movs	r2, #0
 8006d68:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	2200      	movs	r2, #0
 8006d70:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	7c1b      	ldrb	r3, [r3, #16]
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d109      	bne.n	8006d90 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006d82:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006d86:	2101      	movs	r1, #1
 8006d88:	6878      	ldr	r0, [r7, #4]
 8006d8a:	f002 f8c9 	bl	8008f20 <USBD_LL_PrepareReceive>
 8006d8e:	e007      	b.n	8006da0 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006d96:	2340      	movs	r3, #64	; 0x40
 8006d98:	2101      	movs	r1, #1
 8006d9a:	6878      	ldr	r0, [r7, #4]
 8006d9c:	f002 f8c0 	bl	8008f20 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006da0:	2300      	movs	r3, #0
}
 8006da2:	4618      	mov	r0, r3
 8006da4:	3710      	adds	r7, #16
 8006da6:	46bd      	mov	sp, r7
 8006da8:	bd80      	pop	{r7, pc}

08006daa <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006daa:	b580      	push	{r7, lr}
 8006dac:	b082      	sub	sp, #8
 8006dae:	af00      	add	r7, sp, #0
 8006db0:	6078      	str	r0, [r7, #4]
 8006db2:	460b      	mov	r3, r1
 8006db4:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8006db6:	2181      	movs	r1, #129	; 0x81
 8006db8:	6878      	ldr	r0, [r7, #4]
 8006dba:	f001 ffe8 	bl	8008d8e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	2200      	movs	r2, #0
 8006dc2:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8006dc4:	2101      	movs	r1, #1
 8006dc6:	6878      	ldr	r0, [r7, #4]
 8006dc8:	f001 ffe1 	bl	8008d8e <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	2200      	movs	r2, #0
 8006dd0:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8006dd4:	2182      	movs	r1, #130	; 0x82
 8006dd6:	6878      	ldr	r0, [r7, #4]
 8006dd8:	f001 ffd9 	bl	8008d8e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	2200      	movs	r2, #0
 8006de0:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	2200      	movs	r2, #0
 8006de8:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d00e      	beq.n	8006e14 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006dfc:	685b      	ldr	r3, [r3, #4]
 8006dfe:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006e06:	4618      	mov	r0, r3
 8006e08:	f002 f8cc 	bl	8008fa4 <USBD_static_free>
    pdev->pClassData = NULL;
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	2200      	movs	r2, #0
 8006e10:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8006e14:	2300      	movs	r3, #0
}
 8006e16:	4618      	mov	r0, r3
 8006e18:	3708      	adds	r7, #8
 8006e1a:	46bd      	mov	sp, r7
 8006e1c:	bd80      	pop	{r7, pc}
	...

08006e20 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8006e20:	b580      	push	{r7, lr}
 8006e22:	b086      	sub	sp, #24
 8006e24:	af00      	add	r7, sp, #0
 8006e26:	6078      	str	r0, [r7, #4]
 8006e28:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006e30:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8006e32:	2300      	movs	r3, #0
 8006e34:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8006e36:	2300      	movs	r3, #0
 8006e38:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8006e3a:	2300      	movs	r3, #0
 8006e3c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8006e3e:	693b      	ldr	r3, [r7, #16]
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d101      	bne.n	8006e48 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8006e44:	2303      	movs	r3, #3
 8006e46:	e0af      	b.n	8006fa8 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006e48:	683b      	ldr	r3, [r7, #0]
 8006e4a:	781b      	ldrb	r3, [r3, #0]
 8006e4c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d03f      	beq.n	8006ed4 <USBD_CDC_Setup+0xb4>
 8006e54:	2b20      	cmp	r3, #32
 8006e56:	f040 809f 	bne.w	8006f98 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8006e5a:	683b      	ldr	r3, [r7, #0]
 8006e5c:	88db      	ldrh	r3, [r3, #6]
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d02e      	beq.n	8006ec0 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8006e62:	683b      	ldr	r3, [r7, #0]
 8006e64:	781b      	ldrb	r3, [r3, #0]
 8006e66:	b25b      	sxtb	r3, r3
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	da16      	bge.n	8006e9a <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006e72:	689b      	ldr	r3, [r3, #8]
 8006e74:	683a      	ldr	r2, [r7, #0]
 8006e76:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 8006e78:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006e7a:	683a      	ldr	r2, [r7, #0]
 8006e7c:	88d2      	ldrh	r2, [r2, #6]
 8006e7e:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8006e80:	683b      	ldr	r3, [r7, #0]
 8006e82:	88db      	ldrh	r3, [r3, #6]
 8006e84:	2b07      	cmp	r3, #7
 8006e86:	bf28      	it	cs
 8006e88:	2307      	movcs	r3, #7
 8006e8a:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8006e8c:	693b      	ldr	r3, [r7, #16]
 8006e8e:	89fa      	ldrh	r2, [r7, #14]
 8006e90:	4619      	mov	r1, r3
 8006e92:	6878      	ldr	r0, [r7, #4]
 8006e94:	f001 fb19 	bl	80084ca <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 8006e98:	e085      	b.n	8006fa6 <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 8006e9a:	683b      	ldr	r3, [r7, #0]
 8006e9c:	785a      	ldrb	r2, [r3, #1]
 8006e9e:	693b      	ldr	r3, [r7, #16]
 8006ea0:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8006ea4:	683b      	ldr	r3, [r7, #0]
 8006ea6:	88db      	ldrh	r3, [r3, #6]
 8006ea8:	b2da      	uxtb	r2, r3
 8006eaa:	693b      	ldr	r3, [r7, #16]
 8006eac:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8006eb0:	6939      	ldr	r1, [r7, #16]
 8006eb2:	683b      	ldr	r3, [r7, #0]
 8006eb4:	88db      	ldrh	r3, [r3, #6]
 8006eb6:	461a      	mov	r2, r3
 8006eb8:	6878      	ldr	r0, [r7, #4]
 8006eba:	f001 fb32 	bl	8008522 <USBD_CtlPrepareRx>
      break;
 8006ebe:	e072      	b.n	8006fa6 <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006ec6:	689b      	ldr	r3, [r3, #8]
 8006ec8:	683a      	ldr	r2, [r7, #0]
 8006eca:	7850      	ldrb	r0, [r2, #1]
 8006ecc:	2200      	movs	r2, #0
 8006ece:	6839      	ldr	r1, [r7, #0]
 8006ed0:	4798      	blx	r3
      break;
 8006ed2:	e068      	b.n	8006fa6 <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006ed4:	683b      	ldr	r3, [r7, #0]
 8006ed6:	785b      	ldrb	r3, [r3, #1]
 8006ed8:	2b0b      	cmp	r3, #11
 8006eda:	d852      	bhi.n	8006f82 <USBD_CDC_Setup+0x162>
 8006edc:	a201      	add	r2, pc, #4	; (adr r2, 8006ee4 <USBD_CDC_Setup+0xc4>)
 8006ede:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ee2:	bf00      	nop
 8006ee4:	08006f15 	.word	0x08006f15
 8006ee8:	08006f91 	.word	0x08006f91
 8006eec:	08006f83 	.word	0x08006f83
 8006ef0:	08006f83 	.word	0x08006f83
 8006ef4:	08006f83 	.word	0x08006f83
 8006ef8:	08006f83 	.word	0x08006f83
 8006efc:	08006f83 	.word	0x08006f83
 8006f00:	08006f83 	.word	0x08006f83
 8006f04:	08006f83 	.word	0x08006f83
 8006f08:	08006f83 	.word	0x08006f83
 8006f0c:	08006f3f 	.word	0x08006f3f
 8006f10:	08006f69 	.word	0x08006f69
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006f1a:	b2db      	uxtb	r3, r3
 8006f1c:	2b03      	cmp	r3, #3
 8006f1e:	d107      	bne.n	8006f30 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8006f20:	f107 030a 	add.w	r3, r7, #10
 8006f24:	2202      	movs	r2, #2
 8006f26:	4619      	mov	r1, r3
 8006f28:	6878      	ldr	r0, [r7, #4]
 8006f2a:	f001 face 	bl	80084ca <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006f2e:	e032      	b.n	8006f96 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8006f30:	6839      	ldr	r1, [r7, #0]
 8006f32:	6878      	ldr	r0, [r7, #4]
 8006f34:	f001 fa58 	bl	80083e8 <USBD_CtlError>
            ret = USBD_FAIL;
 8006f38:	2303      	movs	r3, #3
 8006f3a:	75fb      	strb	r3, [r7, #23]
          break;
 8006f3c:	e02b      	b.n	8006f96 <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006f44:	b2db      	uxtb	r3, r3
 8006f46:	2b03      	cmp	r3, #3
 8006f48:	d107      	bne.n	8006f5a <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8006f4a:	f107 030d 	add.w	r3, r7, #13
 8006f4e:	2201      	movs	r2, #1
 8006f50:	4619      	mov	r1, r3
 8006f52:	6878      	ldr	r0, [r7, #4]
 8006f54:	f001 fab9 	bl	80084ca <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006f58:	e01d      	b.n	8006f96 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8006f5a:	6839      	ldr	r1, [r7, #0]
 8006f5c:	6878      	ldr	r0, [r7, #4]
 8006f5e:	f001 fa43 	bl	80083e8 <USBD_CtlError>
            ret = USBD_FAIL;
 8006f62:	2303      	movs	r3, #3
 8006f64:	75fb      	strb	r3, [r7, #23]
          break;
 8006f66:	e016      	b.n	8006f96 <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006f6e:	b2db      	uxtb	r3, r3
 8006f70:	2b03      	cmp	r3, #3
 8006f72:	d00f      	beq.n	8006f94 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 8006f74:	6839      	ldr	r1, [r7, #0]
 8006f76:	6878      	ldr	r0, [r7, #4]
 8006f78:	f001 fa36 	bl	80083e8 <USBD_CtlError>
            ret = USBD_FAIL;
 8006f7c:	2303      	movs	r3, #3
 8006f7e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8006f80:	e008      	b.n	8006f94 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8006f82:	6839      	ldr	r1, [r7, #0]
 8006f84:	6878      	ldr	r0, [r7, #4]
 8006f86:	f001 fa2f 	bl	80083e8 <USBD_CtlError>
          ret = USBD_FAIL;
 8006f8a:	2303      	movs	r3, #3
 8006f8c:	75fb      	strb	r3, [r7, #23]
          break;
 8006f8e:	e002      	b.n	8006f96 <USBD_CDC_Setup+0x176>
          break;
 8006f90:	bf00      	nop
 8006f92:	e008      	b.n	8006fa6 <USBD_CDC_Setup+0x186>
          break;
 8006f94:	bf00      	nop
      }
      break;
 8006f96:	e006      	b.n	8006fa6 <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 8006f98:	6839      	ldr	r1, [r7, #0]
 8006f9a:	6878      	ldr	r0, [r7, #4]
 8006f9c:	f001 fa24 	bl	80083e8 <USBD_CtlError>
      ret = USBD_FAIL;
 8006fa0:	2303      	movs	r3, #3
 8006fa2:	75fb      	strb	r3, [r7, #23]
      break;
 8006fa4:	bf00      	nop
  }

  return (uint8_t)ret;
 8006fa6:	7dfb      	ldrb	r3, [r7, #23]
}
 8006fa8:	4618      	mov	r0, r3
 8006faa:	3718      	adds	r7, #24
 8006fac:	46bd      	mov	sp, r7
 8006fae:	bd80      	pop	{r7, pc}

08006fb0 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006fb0:	b580      	push	{r7, lr}
 8006fb2:	b084      	sub	sp, #16
 8006fb4:	af00      	add	r7, sp, #0
 8006fb6:	6078      	str	r0, [r7, #4]
 8006fb8:	460b      	mov	r3, r1
 8006fba:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006fc2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d101      	bne.n	8006fd2 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006fce:	2303      	movs	r3, #3
 8006fd0:	e04f      	b.n	8007072 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006fd8:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8006fda:	78fa      	ldrb	r2, [r7, #3]
 8006fdc:	6879      	ldr	r1, [r7, #4]
 8006fde:	4613      	mov	r3, r2
 8006fe0:	009b      	lsls	r3, r3, #2
 8006fe2:	4413      	add	r3, r2
 8006fe4:	009b      	lsls	r3, r3, #2
 8006fe6:	440b      	add	r3, r1
 8006fe8:	3318      	adds	r3, #24
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d029      	beq.n	8007044 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8006ff0:	78fa      	ldrb	r2, [r7, #3]
 8006ff2:	6879      	ldr	r1, [r7, #4]
 8006ff4:	4613      	mov	r3, r2
 8006ff6:	009b      	lsls	r3, r3, #2
 8006ff8:	4413      	add	r3, r2
 8006ffa:	009b      	lsls	r3, r3, #2
 8006ffc:	440b      	add	r3, r1
 8006ffe:	3318      	adds	r3, #24
 8007000:	681a      	ldr	r2, [r3, #0]
 8007002:	78f9      	ldrb	r1, [r7, #3]
 8007004:	68f8      	ldr	r0, [r7, #12]
 8007006:	460b      	mov	r3, r1
 8007008:	00db      	lsls	r3, r3, #3
 800700a:	1a5b      	subs	r3, r3, r1
 800700c:	009b      	lsls	r3, r3, #2
 800700e:	4403      	add	r3, r0
 8007010:	3344      	adds	r3, #68	; 0x44
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	fbb2 f1f3 	udiv	r1, r2, r3
 8007018:	fb03 f301 	mul.w	r3, r3, r1
 800701c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800701e:	2b00      	cmp	r3, #0
 8007020:	d110      	bne.n	8007044 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8007022:	78fa      	ldrb	r2, [r7, #3]
 8007024:	6879      	ldr	r1, [r7, #4]
 8007026:	4613      	mov	r3, r2
 8007028:	009b      	lsls	r3, r3, #2
 800702a:	4413      	add	r3, r2
 800702c:	009b      	lsls	r3, r3, #2
 800702e:	440b      	add	r3, r1
 8007030:	3318      	adds	r3, #24
 8007032:	2200      	movs	r2, #0
 8007034:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8007036:	78f9      	ldrb	r1, [r7, #3]
 8007038:	2300      	movs	r3, #0
 800703a:	2200      	movs	r2, #0
 800703c:	6878      	ldr	r0, [r7, #4]
 800703e:	f001 ff4e 	bl	8008ede <USBD_LL_Transmit>
 8007042:	e015      	b.n	8007070 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 8007044:	68bb      	ldr	r3, [r7, #8]
 8007046:	2200      	movs	r2, #0
 8007048:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007052:	691b      	ldr	r3, [r3, #16]
 8007054:	2b00      	cmp	r3, #0
 8007056:	d00b      	beq.n	8007070 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800705e:	691b      	ldr	r3, [r3, #16]
 8007060:	68ba      	ldr	r2, [r7, #8]
 8007062:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8007066:	68ba      	ldr	r2, [r7, #8]
 8007068:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800706c:	78fa      	ldrb	r2, [r7, #3]
 800706e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8007070:	2300      	movs	r3, #0
}
 8007072:	4618      	mov	r0, r3
 8007074:	3710      	adds	r7, #16
 8007076:	46bd      	mov	sp, r7
 8007078:	bd80      	pop	{r7, pc}

0800707a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800707a:	b580      	push	{r7, lr}
 800707c:	b084      	sub	sp, #16
 800707e:	af00      	add	r7, sp, #0
 8007080:	6078      	str	r0, [r7, #4]
 8007082:	460b      	mov	r3, r1
 8007084:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800708c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007094:	2b00      	cmp	r3, #0
 8007096:	d101      	bne.n	800709c <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007098:	2303      	movs	r3, #3
 800709a:	e015      	b.n	80070c8 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800709c:	78fb      	ldrb	r3, [r7, #3]
 800709e:	4619      	mov	r1, r3
 80070a0:	6878      	ldr	r0, [r7, #4]
 80070a2:	f001 ff5e 	bl	8008f62 <USBD_LL_GetRxDataSize>
 80070a6:	4602      	mov	r2, r0
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80070b4:	68db      	ldr	r3, [r3, #12]
 80070b6:	68fa      	ldr	r2, [r7, #12]
 80070b8:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80070bc:	68fa      	ldr	r2, [r7, #12]
 80070be:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80070c2:	4611      	mov	r1, r2
 80070c4:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80070c6:	2300      	movs	r3, #0
}
 80070c8:	4618      	mov	r0, r3
 80070ca:	3710      	adds	r7, #16
 80070cc:	46bd      	mov	sp, r7
 80070ce:	bd80      	pop	{r7, pc}

080070d0 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80070d0:	b580      	push	{r7, lr}
 80070d2:	b084      	sub	sp, #16
 80070d4:	af00      	add	r7, sp, #0
 80070d6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80070de:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d101      	bne.n	80070ea <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 80070e6:	2303      	movs	r3, #3
 80070e8:	e01b      	b.n	8007122 <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d015      	beq.n	8007120 <USBD_CDC_EP0_RxReady+0x50>
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80070fa:	2bff      	cmp	r3, #255	; 0xff
 80070fc:	d010      	beq.n	8007120 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007104:	689b      	ldr	r3, [r3, #8]
 8007106:	68fa      	ldr	r2, [r7, #12]
 8007108:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 800710c:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800710e:	68fa      	ldr	r2, [r7, #12]
 8007110:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8007114:	b292      	uxth	r2, r2
 8007116:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	22ff      	movs	r2, #255	; 0xff
 800711c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8007120:	2300      	movs	r3, #0
}
 8007122:	4618      	mov	r0, r3
 8007124:	3710      	adds	r7, #16
 8007126:	46bd      	mov	sp, r7
 8007128:	bd80      	pop	{r7, pc}
	...

0800712c <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800712c:	b480      	push	{r7}
 800712e:	b083      	sub	sp, #12
 8007130:	af00      	add	r7, sp, #0
 8007132:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	2243      	movs	r2, #67	; 0x43
 8007138:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800713a:	4b03      	ldr	r3, [pc, #12]	; (8007148 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800713c:	4618      	mov	r0, r3
 800713e:	370c      	adds	r7, #12
 8007140:	46bd      	mov	sp, r7
 8007142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007146:	4770      	bx	lr
 8007148:	20000094 	.word	0x20000094

0800714c <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800714c:	b480      	push	{r7}
 800714e:	b083      	sub	sp, #12
 8007150:	af00      	add	r7, sp, #0
 8007152:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	2243      	movs	r2, #67	; 0x43
 8007158:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800715a:	4b03      	ldr	r3, [pc, #12]	; (8007168 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800715c:	4618      	mov	r0, r3
 800715e:	370c      	adds	r7, #12
 8007160:	46bd      	mov	sp, r7
 8007162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007166:	4770      	bx	lr
 8007168:	20000050 	.word	0x20000050

0800716c <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800716c:	b480      	push	{r7}
 800716e:	b083      	sub	sp, #12
 8007170:	af00      	add	r7, sp, #0
 8007172:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	2243      	movs	r2, #67	; 0x43
 8007178:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800717a:	4b03      	ldr	r3, [pc, #12]	; (8007188 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800717c:	4618      	mov	r0, r3
 800717e:	370c      	adds	r7, #12
 8007180:	46bd      	mov	sp, r7
 8007182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007186:	4770      	bx	lr
 8007188:	200000d8 	.word	0x200000d8

0800718c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800718c:	b480      	push	{r7}
 800718e:	b083      	sub	sp, #12
 8007190:	af00      	add	r7, sp, #0
 8007192:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	220a      	movs	r2, #10
 8007198:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800719a:	4b03      	ldr	r3, [pc, #12]	; (80071a8 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800719c:	4618      	mov	r0, r3
 800719e:	370c      	adds	r7, #12
 80071a0:	46bd      	mov	sp, r7
 80071a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071a6:	4770      	bx	lr
 80071a8:	2000000c 	.word	0x2000000c

080071ac <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80071ac:	b480      	push	{r7}
 80071ae:	b083      	sub	sp, #12
 80071b0:	af00      	add	r7, sp, #0
 80071b2:	6078      	str	r0, [r7, #4]
 80071b4:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80071b6:	683b      	ldr	r3, [r7, #0]
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d101      	bne.n	80071c0 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80071bc:	2303      	movs	r3, #3
 80071be:	e004      	b.n	80071ca <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	683a      	ldr	r2, [r7, #0]
 80071c4:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 80071c8:	2300      	movs	r3, #0
}
 80071ca:	4618      	mov	r0, r3
 80071cc:	370c      	adds	r7, #12
 80071ce:	46bd      	mov	sp, r7
 80071d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071d4:	4770      	bx	lr

080071d6 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80071d6:	b480      	push	{r7}
 80071d8:	b087      	sub	sp, #28
 80071da:	af00      	add	r7, sp, #0
 80071dc:	60f8      	str	r0, [r7, #12]
 80071de:	60b9      	str	r1, [r7, #8]
 80071e0:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80071e8:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 80071ea:	697b      	ldr	r3, [r7, #20]
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d101      	bne.n	80071f4 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 80071f0:	2303      	movs	r3, #3
 80071f2:	e008      	b.n	8007206 <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 80071f4:	697b      	ldr	r3, [r7, #20]
 80071f6:	68ba      	ldr	r2, [r7, #8]
 80071f8:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80071fc:	697b      	ldr	r3, [r7, #20]
 80071fe:	687a      	ldr	r2, [r7, #4]
 8007200:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8007204:	2300      	movs	r3, #0
}
 8007206:	4618      	mov	r0, r3
 8007208:	371c      	adds	r7, #28
 800720a:	46bd      	mov	sp, r7
 800720c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007210:	4770      	bx	lr

08007212 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8007212:	b480      	push	{r7}
 8007214:	b085      	sub	sp, #20
 8007216:	af00      	add	r7, sp, #0
 8007218:	6078      	str	r0, [r7, #4]
 800721a:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007222:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	2b00      	cmp	r3, #0
 8007228:	d101      	bne.n	800722e <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 800722a:	2303      	movs	r3, #3
 800722c:	e004      	b.n	8007238 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	683a      	ldr	r2, [r7, #0]
 8007232:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8007236:	2300      	movs	r3, #0
}
 8007238:	4618      	mov	r0, r3
 800723a:	3714      	adds	r7, #20
 800723c:	46bd      	mov	sp, r7
 800723e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007242:	4770      	bx	lr

08007244 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8007244:	b580      	push	{r7, lr}
 8007246:	b084      	sub	sp, #16
 8007248:	af00      	add	r7, sp, #0
 800724a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007252:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8007254:	2301      	movs	r3, #1
 8007256:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800725e:	2b00      	cmp	r3, #0
 8007260:	d101      	bne.n	8007266 <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007262:	2303      	movs	r3, #3
 8007264:	e01a      	b.n	800729c <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 8007266:	68bb      	ldr	r3, [r7, #8]
 8007268:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800726c:	2b00      	cmp	r3, #0
 800726e:	d114      	bne.n	800729a <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8007270:	68bb      	ldr	r3, [r7, #8]
 8007272:	2201      	movs	r2, #1
 8007274:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8007278:	68bb      	ldr	r3, [r7, #8]
 800727a:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 8007282:	68bb      	ldr	r3, [r7, #8]
 8007284:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8007288:	68bb      	ldr	r3, [r7, #8]
 800728a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800728e:	2181      	movs	r1, #129	; 0x81
 8007290:	6878      	ldr	r0, [r7, #4]
 8007292:	f001 fe24 	bl	8008ede <USBD_LL_Transmit>

    ret = USBD_OK;
 8007296:	2300      	movs	r3, #0
 8007298:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800729a:	7bfb      	ldrb	r3, [r7, #15]
}
 800729c:	4618      	mov	r0, r3
 800729e:	3710      	adds	r7, #16
 80072a0:	46bd      	mov	sp, r7
 80072a2:	bd80      	pop	{r7, pc}

080072a4 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80072a4:	b580      	push	{r7, lr}
 80072a6:	b084      	sub	sp, #16
 80072a8:	af00      	add	r7, sp, #0
 80072aa:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80072b2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d101      	bne.n	80072c2 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 80072be:	2303      	movs	r3, #3
 80072c0:	e016      	b.n	80072f0 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	7c1b      	ldrb	r3, [r3, #16]
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d109      	bne.n	80072de <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80072d0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80072d4:	2101      	movs	r1, #1
 80072d6:	6878      	ldr	r0, [r7, #4]
 80072d8:	f001 fe22 	bl	8008f20 <USBD_LL_PrepareReceive>
 80072dc:	e007      	b.n	80072ee <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80072e4:	2340      	movs	r3, #64	; 0x40
 80072e6:	2101      	movs	r1, #1
 80072e8:	6878      	ldr	r0, [r7, #4]
 80072ea:	f001 fe19 	bl	8008f20 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80072ee:	2300      	movs	r3, #0
}
 80072f0:	4618      	mov	r0, r3
 80072f2:	3710      	adds	r7, #16
 80072f4:	46bd      	mov	sp, r7
 80072f6:	bd80      	pop	{r7, pc}

080072f8 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80072f8:	b580      	push	{r7, lr}
 80072fa:	b086      	sub	sp, #24
 80072fc:	af00      	add	r7, sp, #0
 80072fe:	60f8      	str	r0, [r7, #12]
 8007300:	60b9      	str	r1, [r7, #8]
 8007302:	4613      	mov	r3, r2
 8007304:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	2b00      	cmp	r3, #0
 800730a:	d101      	bne.n	8007310 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800730c:	2303      	movs	r3, #3
 800730e:	e01f      	b.n	8007350 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	2200      	movs	r2, #0
 8007314:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	2200      	movs	r2, #0
 800731c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	2200      	movs	r2, #0
 8007324:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007328:	68bb      	ldr	r3, [r7, #8]
 800732a:	2b00      	cmp	r3, #0
 800732c:	d003      	beq.n	8007336 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	68ba      	ldr	r2, [r7, #8]
 8007332:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	2201      	movs	r2, #1
 800733a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	79fa      	ldrb	r2, [r7, #7]
 8007342:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8007344:	68f8      	ldr	r0, [r7, #12]
 8007346:	f001 fc95 	bl	8008c74 <USBD_LL_Init>
 800734a:	4603      	mov	r3, r0
 800734c:	75fb      	strb	r3, [r7, #23]

  return ret;
 800734e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007350:	4618      	mov	r0, r3
 8007352:	3718      	adds	r7, #24
 8007354:	46bd      	mov	sp, r7
 8007356:	bd80      	pop	{r7, pc}

08007358 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007358:	b580      	push	{r7, lr}
 800735a:	b084      	sub	sp, #16
 800735c:	af00      	add	r7, sp, #0
 800735e:	6078      	str	r0, [r7, #4]
 8007360:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007362:	2300      	movs	r3, #0
 8007364:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8007366:	683b      	ldr	r3, [r7, #0]
 8007368:	2b00      	cmp	r3, #0
 800736a:	d101      	bne.n	8007370 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800736c:	2303      	movs	r3, #3
 800736e:	e016      	b.n	800739e <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	683a      	ldr	r2, [r7, #0]
 8007374:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800737e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007380:	2b00      	cmp	r3, #0
 8007382:	d00b      	beq.n	800739c <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800738a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800738c:	f107 020e 	add.w	r2, r7, #14
 8007390:	4610      	mov	r0, r2
 8007392:	4798      	blx	r3
 8007394:	4602      	mov	r2, r0
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 800739c:	2300      	movs	r3, #0
}
 800739e:	4618      	mov	r0, r3
 80073a0:	3710      	adds	r7, #16
 80073a2:	46bd      	mov	sp, r7
 80073a4:	bd80      	pop	{r7, pc}

080073a6 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80073a6:	b580      	push	{r7, lr}
 80073a8:	b082      	sub	sp, #8
 80073aa:	af00      	add	r7, sp, #0
 80073ac:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80073ae:	6878      	ldr	r0, [r7, #4]
 80073b0:	f001 fcac 	bl	8008d0c <USBD_LL_Start>
 80073b4:	4603      	mov	r3, r0
}
 80073b6:	4618      	mov	r0, r3
 80073b8:	3708      	adds	r7, #8
 80073ba:	46bd      	mov	sp, r7
 80073bc:	bd80      	pop	{r7, pc}

080073be <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80073be:	b480      	push	{r7}
 80073c0:	b083      	sub	sp, #12
 80073c2:	af00      	add	r7, sp, #0
 80073c4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80073c6:	2300      	movs	r3, #0
}
 80073c8:	4618      	mov	r0, r3
 80073ca:	370c      	adds	r7, #12
 80073cc:	46bd      	mov	sp, r7
 80073ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073d2:	4770      	bx	lr

080073d4 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80073d4:	b580      	push	{r7, lr}
 80073d6:	b084      	sub	sp, #16
 80073d8:	af00      	add	r7, sp, #0
 80073da:	6078      	str	r0, [r7, #4]
 80073dc:	460b      	mov	r3, r1
 80073de:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80073e0:	2303      	movs	r3, #3
 80073e2:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d009      	beq.n	8007402 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	78fa      	ldrb	r2, [r7, #3]
 80073f8:	4611      	mov	r1, r2
 80073fa:	6878      	ldr	r0, [r7, #4]
 80073fc:	4798      	blx	r3
 80073fe:	4603      	mov	r3, r0
 8007400:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8007402:	7bfb      	ldrb	r3, [r7, #15]
}
 8007404:	4618      	mov	r0, r3
 8007406:	3710      	adds	r7, #16
 8007408:	46bd      	mov	sp, r7
 800740a:	bd80      	pop	{r7, pc}

0800740c <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800740c:	b580      	push	{r7, lr}
 800740e:	b082      	sub	sp, #8
 8007410:	af00      	add	r7, sp, #0
 8007412:	6078      	str	r0, [r7, #4]
 8007414:	460b      	mov	r3, r1
 8007416:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800741e:	2b00      	cmp	r3, #0
 8007420:	d007      	beq.n	8007432 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007428:	685b      	ldr	r3, [r3, #4]
 800742a:	78fa      	ldrb	r2, [r7, #3]
 800742c:	4611      	mov	r1, r2
 800742e:	6878      	ldr	r0, [r7, #4]
 8007430:	4798      	blx	r3
  }

  return USBD_OK;
 8007432:	2300      	movs	r3, #0
}
 8007434:	4618      	mov	r0, r3
 8007436:	3708      	adds	r7, #8
 8007438:	46bd      	mov	sp, r7
 800743a:	bd80      	pop	{r7, pc}

0800743c <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800743c:	b580      	push	{r7, lr}
 800743e:	b084      	sub	sp, #16
 8007440:	af00      	add	r7, sp, #0
 8007442:	6078      	str	r0, [r7, #4]
 8007444:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800744c:	6839      	ldr	r1, [r7, #0]
 800744e:	4618      	mov	r0, r3
 8007450:	f000 ff90 	bl	8008374 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	2201      	movs	r2, #1
 8007458:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8007462:	461a      	mov	r2, r3
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007470:	f003 031f 	and.w	r3, r3, #31
 8007474:	2b02      	cmp	r3, #2
 8007476:	d01a      	beq.n	80074ae <USBD_LL_SetupStage+0x72>
 8007478:	2b02      	cmp	r3, #2
 800747a:	d822      	bhi.n	80074c2 <USBD_LL_SetupStage+0x86>
 800747c:	2b00      	cmp	r3, #0
 800747e:	d002      	beq.n	8007486 <USBD_LL_SetupStage+0x4a>
 8007480:	2b01      	cmp	r3, #1
 8007482:	d00a      	beq.n	800749a <USBD_LL_SetupStage+0x5e>
 8007484:	e01d      	b.n	80074c2 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800748c:	4619      	mov	r1, r3
 800748e:	6878      	ldr	r0, [r7, #4]
 8007490:	f000 fa62 	bl	8007958 <USBD_StdDevReq>
 8007494:	4603      	mov	r3, r0
 8007496:	73fb      	strb	r3, [r7, #15]
      break;
 8007498:	e020      	b.n	80074dc <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80074a0:	4619      	mov	r1, r3
 80074a2:	6878      	ldr	r0, [r7, #4]
 80074a4:	f000 fac6 	bl	8007a34 <USBD_StdItfReq>
 80074a8:	4603      	mov	r3, r0
 80074aa:	73fb      	strb	r3, [r7, #15]
      break;
 80074ac:	e016      	b.n	80074dc <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80074b4:	4619      	mov	r1, r3
 80074b6:	6878      	ldr	r0, [r7, #4]
 80074b8:	f000 fb05 	bl	8007ac6 <USBD_StdEPReq>
 80074bc:	4603      	mov	r3, r0
 80074be:	73fb      	strb	r3, [r7, #15]
      break;
 80074c0:	e00c      	b.n	80074dc <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80074c8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80074cc:	b2db      	uxtb	r3, r3
 80074ce:	4619      	mov	r1, r3
 80074d0:	6878      	ldr	r0, [r7, #4]
 80074d2:	f001 fc7b 	bl	8008dcc <USBD_LL_StallEP>
 80074d6:	4603      	mov	r3, r0
 80074d8:	73fb      	strb	r3, [r7, #15]
      break;
 80074da:	bf00      	nop
  }

  return ret;
 80074dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80074de:	4618      	mov	r0, r3
 80074e0:	3710      	adds	r7, #16
 80074e2:	46bd      	mov	sp, r7
 80074e4:	bd80      	pop	{r7, pc}

080074e6 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80074e6:	b580      	push	{r7, lr}
 80074e8:	b086      	sub	sp, #24
 80074ea:	af00      	add	r7, sp, #0
 80074ec:	60f8      	str	r0, [r7, #12]
 80074ee:	460b      	mov	r3, r1
 80074f0:	607a      	str	r2, [r7, #4]
 80074f2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80074f4:	7afb      	ldrb	r3, [r7, #11]
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d138      	bne.n	800756c <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8007500:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007508:	2b03      	cmp	r3, #3
 800750a:	d14a      	bne.n	80075a2 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800750c:	693b      	ldr	r3, [r7, #16]
 800750e:	689a      	ldr	r2, [r3, #8]
 8007510:	693b      	ldr	r3, [r7, #16]
 8007512:	68db      	ldr	r3, [r3, #12]
 8007514:	429a      	cmp	r2, r3
 8007516:	d913      	bls.n	8007540 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8007518:	693b      	ldr	r3, [r7, #16]
 800751a:	689a      	ldr	r2, [r3, #8]
 800751c:	693b      	ldr	r3, [r7, #16]
 800751e:	68db      	ldr	r3, [r3, #12]
 8007520:	1ad2      	subs	r2, r2, r3
 8007522:	693b      	ldr	r3, [r7, #16]
 8007524:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8007526:	693b      	ldr	r3, [r7, #16]
 8007528:	68da      	ldr	r2, [r3, #12]
 800752a:	693b      	ldr	r3, [r7, #16]
 800752c:	689b      	ldr	r3, [r3, #8]
 800752e:	4293      	cmp	r3, r2
 8007530:	bf28      	it	cs
 8007532:	4613      	movcs	r3, r2
 8007534:	461a      	mov	r2, r3
 8007536:	6879      	ldr	r1, [r7, #4]
 8007538:	68f8      	ldr	r0, [r7, #12]
 800753a:	f001 f80f 	bl	800855c <USBD_CtlContinueRx>
 800753e:	e030      	b.n	80075a2 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007546:	b2db      	uxtb	r3, r3
 8007548:	2b03      	cmp	r3, #3
 800754a:	d10b      	bne.n	8007564 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007552:	691b      	ldr	r3, [r3, #16]
 8007554:	2b00      	cmp	r3, #0
 8007556:	d005      	beq.n	8007564 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800755e:	691b      	ldr	r3, [r3, #16]
 8007560:	68f8      	ldr	r0, [r7, #12]
 8007562:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8007564:	68f8      	ldr	r0, [r7, #12]
 8007566:	f001 f80a 	bl	800857e <USBD_CtlSendStatus>
 800756a:	e01a      	b.n	80075a2 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007572:	b2db      	uxtb	r3, r3
 8007574:	2b03      	cmp	r3, #3
 8007576:	d114      	bne.n	80075a2 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800757e:	699b      	ldr	r3, [r3, #24]
 8007580:	2b00      	cmp	r3, #0
 8007582:	d00e      	beq.n	80075a2 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800758a:	699b      	ldr	r3, [r3, #24]
 800758c:	7afa      	ldrb	r2, [r7, #11]
 800758e:	4611      	mov	r1, r2
 8007590:	68f8      	ldr	r0, [r7, #12]
 8007592:	4798      	blx	r3
 8007594:	4603      	mov	r3, r0
 8007596:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8007598:	7dfb      	ldrb	r3, [r7, #23]
 800759a:	2b00      	cmp	r3, #0
 800759c:	d001      	beq.n	80075a2 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800759e:	7dfb      	ldrb	r3, [r7, #23]
 80075a0:	e000      	b.n	80075a4 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 80075a2:	2300      	movs	r3, #0
}
 80075a4:	4618      	mov	r0, r3
 80075a6:	3718      	adds	r7, #24
 80075a8:	46bd      	mov	sp, r7
 80075aa:	bd80      	pop	{r7, pc}

080075ac <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80075ac:	b580      	push	{r7, lr}
 80075ae:	b086      	sub	sp, #24
 80075b0:	af00      	add	r7, sp, #0
 80075b2:	60f8      	str	r0, [r7, #12]
 80075b4:	460b      	mov	r3, r1
 80075b6:	607a      	str	r2, [r7, #4]
 80075b8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80075ba:	7afb      	ldrb	r3, [r7, #11]
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d16b      	bne.n	8007698 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	3314      	adds	r3, #20
 80075c4:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80075cc:	2b02      	cmp	r3, #2
 80075ce:	d156      	bne.n	800767e <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 80075d0:	693b      	ldr	r3, [r7, #16]
 80075d2:	689a      	ldr	r2, [r3, #8]
 80075d4:	693b      	ldr	r3, [r7, #16]
 80075d6:	68db      	ldr	r3, [r3, #12]
 80075d8:	429a      	cmp	r2, r3
 80075da:	d914      	bls.n	8007606 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80075dc:	693b      	ldr	r3, [r7, #16]
 80075de:	689a      	ldr	r2, [r3, #8]
 80075e0:	693b      	ldr	r3, [r7, #16]
 80075e2:	68db      	ldr	r3, [r3, #12]
 80075e4:	1ad2      	subs	r2, r2, r3
 80075e6:	693b      	ldr	r3, [r7, #16]
 80075e8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80075ea:	693b      	ldr	r3, [r7, #16]
 80075ec:	689b      	ldr	r3, [r3, #8]
 80075ee:	461a      	mov	r2, r3
 80075f0:	6879      	ldr	r1, [r7, #4]
 80075f2:	68f8      	ldr	r0, [r7, #12]
 80075f4:	f000 ff84 	bl	8008500 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80075f8:	2300      	movs	r3, #0
 80075fa:	2200      	movs	r2, #0
 80075fc:	2100      	movs	r1, #0
 80075fe:	68f8      	ldr	r0, [r7, #12]
 8007600:	f001 fc8e 	bl	8008f20 <USBD_LL_PrepareReceive>
 8007604:	e03b      	b.n	800767e <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8007606:	693b      	ldr	r3, [r7, #16]
 8007608:	68da      	ldr	r2, [r3, #12]
 800760a:	693b      	ldr	r3, [r7, #16]
 800760c:	689b      	ldr	r3, [r3, #8]
 800760e:	429a      	cmp	r2, r3
 8007610:	d11c      	bne.n	800764c <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8007612:	693b      	ldr	r3, [r7, #16]
 8007614:	685a      	ldr	r2, [r3, #4]
 8007616:	693b      	ldr	r3, [r7, #16]
 8007618:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800761a:	429a      	cmp	r2, r3
 800761c:	d316      	bcc.n	800764c <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800761e:	693b      	ldr	r3, [r7, #16]
 8007620:	685a      	ldr	r2, [r3, #4]
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007628:	429a      	cmp	r2, r3
 800762a:	d20f      	bcs.n	800764c <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800762c:	2200      	movs	r2, #0
 800762e:	2100      	movs	r1, #0
 8007630:	68f8      	ldr	r0, [r7, #12]
 8007632:	f000 ff65 	bl	8008500 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	2200      	movs	r2, #0
 800763a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800763e:	2300      	movs	r3, #0
 8007640:	2200      	movs	r2, #0
 8007642:	2100      	movs	r1, #0
 8007644:	68f8      	ldr	r0, [r7, #12]
 8007646:	f001 fc6b 	bl	8008f20 <USBD_LL_PrepareReceive>
 800764a:	e018      	b.n	800767e <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007652:	b2db      	uxtb	r3, r3
 8007654:	2b03      	cmp	r3, #3
 8007656:	d10b      	bne.n	8007670 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800765e:	68db      	ldr	r3, [r3, #12]
 8007660:	2b00      	cmp	r3, #0
 8007662:	d005      	beq.n	8007670 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800766a:	68db      	ldr	r3, [r3, #12]
 800766c:	68f8      	ldr	r0, [r7, #12]
 800766e:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8007670:	2180      	movs	r1, #128	; 0x80
 8007672:	68f8      	ldr	r0, [r7, #12]
 8007674:	f001 fbaa 	bl	8008dcc <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8007678:	68f8      	ldr	r0, [r7, #12]
 800767a:	f000 ff93 	bl	80085a4 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8007684:	2b01      	cmp	r3, #1
 8007686:	d122      	bne.n	80076ce <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8007688:	68f8      	ldr	r0, [r7, #12]
 800768a:	f7ff fe98 	bl	80073be <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	2200      	movs	r2, #0
 8007692:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8007696:	e01a      	b.n	80076ce <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800769e:	b2db      	uxtb	r3, r3
 80076a0:	2b03      	cmp	r3, #3
 80076a2:	d114      	bne.n	80076ce <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80076aa:	695b      	ldr	r3, [r3, #20]
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d00e      	beq.n	80076ce <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80076b6:	695b      	ldr	r3, [r3, #20]
 80076b8:	7afa      	ldrb	r2, [r7, #11]
 80076ba:	4611      	mov	r1, r2
 80076bc:	68f8      	ldr	r0, [r7, #12]
 80076be:	4798      	blx	r3
 80076c0:	4603      	mov	r3, r0
 80076c2:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 80076c4:	7dfb      	ldrb	r3, [r7, #23]
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d001      	beq.n	80076ce <USBD_LL_DataInStage+0x122>
        {
          return ret;
 80076ca:	7dfb      	ldrb	r3, [r7, #23]
 80076cc:	e000      	b.n	80076d0 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 80076ce:	2300      	movs	r3, #0
}
 80076d0:	4618      	mov	r0, r3
 80076d2:	3718      	adds	r7, #24
 80076d4:	46bd      	mov	sp, r7
 80076d6:	bd80      	pop	{r7, pc}

080076d8 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80076d8:	b580      	push	{r7, lr}
 80076da:	b082      	sub	sp, #8
 80076dc:	af00      	add	r7, sp, #0
 80076de:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	2201      	movs	r2, #1
 80076e4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	2200      	movs	r2, #0
 80076ec:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	2200      	movs	r2, #0
 80076f4:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	2200      	movs	r2, #0
 80076fa:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007704:	2b00      	cmp	r3, #0
 8007706:	d101      	bne.n	800770c <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8007708:	2303      	movs	r3, #3
 800770a:	e02f      	b.n	800776c <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007712:	2b00      	cmp	r3, #0
 8007714:	d00f      	beq.n	8007736 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800771c:	685b      	ldr	r3, [r3, #4]
 800771e:	2b00      	cmp	r3, #0
 8007720:	d009      	beq.n	8007736 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007728:	685b      	ldr	r3, [r3, #4]
 800772a:	687a      	ldr	r2, [r7, #4]
 800772c:	6852      	ldr	r2, [r2, #4]
 800772e:	b2d2      	uxtb	r2, r2
 8007730:	4611      	mov	r1, r2
 8007732:	6878      	ldr	r0, [r7, #4]
 8007734:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007736:	2340      	movs	r3, #64	; 0x40
 8007738:	2200      	movs	r2, #0
 800773a:	2100      	movs	r1, #0
 800773c:	6878      	ldr	r0, [r7, #4]
 800773e:	f001 fb00 	bl	8008d42 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	2201      	movs	r2, #1
 8007746:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	2240      	movs	r2, #64	; 0x40
 800774e:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007752:	2340      	movs	r3, #64	; 0x40
 8007754:	2200      	movs	r2, #0
 8007756:	2180      	movs	r1, #128	; 0x80
 8007758:	6878      	ldr	r0, [r7, #4]
 800775a:	f001 faf2 	bl	8008d42 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	2201      	movs	r2, #1
 8007762:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	2240      	movs	r2, #64	; 0x40
 8007768:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800776a:	2300      	movs	r3, #0
}
 800776c:	4618      	mov	r0, r3
 800776e:	3708      	adds	r7, #8
 8007770:	46bd      	mov	sp, r7
 8007772:	bd80      	pop	{r7, pc}

08007774 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007774:	b480      	push	{r7}
 8007776:	b083      	sub	sp, #12
 8007778:	af00      	add	r7, sp, #0
 800777a:	6078      	str	r0, [r7, #4]
 800777c:	460b      	mov	r3, r1
 800777e:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	78fa      	ldrb	r2, [r7, #3]
 8007784:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007786:	2300      	movs	r3, #0
}
 8007788:	4618      	mov	r0, r3
 800778a:	370c      	adds	r7, #12
 800778c:	46bd      	mov	sp, r7
 800778e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007792:	4770      	bx	lr

08007794 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007794:	b480      	push	{r7}
 8007796:	b083      	sub	sp, #12
 8007798:	af00      	add	r7, sp, #0
 800779a:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80077a2:	b2da      	uxtb	r2, r3
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	2204      	movs	r2, #4
 80077ae:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80077b2:	2300      	movs	r3, #0
}
 80077b4:	4618      	mov	r0, r3
 80077b6:	370c      	adds	r7, #12
 80077b8:	46bd      	mov	sp, r7
 80077ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077be:	4770      	bx	lr

080077c0 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80077c0:	b480      	push	{r7}
 80077c2:	b083      	sub	sp, #12
 80077c4:	af00      	add	r7, sp, #0
 80077c6:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80077ce:	b2db      	uxtb	r3, r3
 80077d0:	2b04      	cmp	r3, #4
 80077d2:	d106      	bne.n	80077e2 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 80077da:	b2da      	uxtb	r2, r3
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80077e2:	2300      	movs	r3, #0
}
 80077e4:	4618      	mov	r0, r3
 80077e6:	370c      	adds	r7, #12
 80077e8:	46bd      	mov	sp, r7
 80077ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ee:	4770      	bx	lr

080077f0 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80077f0:	b580      	push	{r7, lr}
 80077f2:	b082      	sub	sp, #8
 80077f4:	af00      	add	r7, sp, #0
 80077f6:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d101      	bne.n	8007806 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 8007802:	2303      	movs	r3, #3
 8007804:	e012      	b.n	800782c <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800780c:	b2db      	uxtb	r3, r3
 800780e:	2b03      	cmp	r3, #3
 8007810:	d10b      	bne.n	800782a <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007818:	69db      	ldr	r3, [r3, #28]
 800781a:	2b00      	cmp	r3, #0
 800781c:	d005      	beq.n	800782a <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007824:	69db      	ldr	r3, [r3, #28]
 8007826:	6878      	ldr	r0, [r7, #4]
 8007828:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800782a:	2300      	movs	r3, #0
}
 800782c:	4618      	mov	r0, r3
 800782e:	3708      	adds	r7, #8
 8007830:	46bd      	mov	sp, r7
 8007832:	bd80      	pop	{r7, pc}

08007834 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8007834:	b580      	push	{r7, lr}
 8007836:	b082      	sub	sp, #8
 8007838:	af00      	add	r7, sp, #0
 800783a:	6078      	str	r0, [r7, #4]
 800783c:	460b      	mov	r3, r1
 800783e:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007846:	2b00      	cmp	r3, #0
 8007848:	d101      	bne.n	800784e <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 800784a:	2303      	movs	r3, #3
 800784c:	e014      	b.n	8007878 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007854:	b2db      	uxtb	r3, r3
 8007856:	2b03      	cmp	r3, #3
 8007858:	d10d      	bne.n	8007876 <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007860:	6a1b      	ldr	r3, [r3, #32]
 8007862:	2b00      	cmp	r3, #0
 8007864:	d007      	beq.n	8007876 <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800786c:	6a1b      	ldr	r3, [r3, #32]
 800786e:	78fa      	ldrb	r2, [r7, #3]
 8007870:	4611      	mov	r1, r2
 8007872:	6878      	ldr	r0, [r7, #4]
 8007874:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007876:	2300      	movs	r3, #0
}
 8007878:	4618      	mov	r0, r3
 800787a:	3708      	adds	r7, #8
 800787c:	46bd      	mov	sp, r7
 800787e:	bd80      	pop	{r7, pc}

08007880 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8007880:	b580      	push	{r7, lr}
 8007882:	b082      	sub	sp, #8
 8007884:	af00      	add	r7, sp, #0
 8007886:	6078      	str	r0, [r7, #4]
 8007888:	460b      	mov	r3, r1
 800788a:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007892:	2b00      	cmp	r3, #0
 8007894:	d101      	bne.n	800789a <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 8007896:	2303      	movs	r3, #3
 8007898:	e014      	b.n	80078c4 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80078a0:	b2db      	uxtb	r3, r3
 80078a2:	2b03      	cmp	r3, #3
 80078a4:	d10d      	bne.n	80078c2 <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80078ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d007      	beq.n	80078c2 <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80078b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078ba:	78fa      	ldrb	r2, [r7, #3]
 80078bc:	4611      	mov	r1, r2
 80078be:	6878      	ldr	r0, [r7, #4]
 80078c0:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80078c2:	2300      	movs	r3, #0
}
 80078c4:	4618      	mov	r0, r3
 80078c6:	3708      	adds	r7, #8
 80078c8:	46bd      	mov	sp, r7
 80078ca:	bd80      	pop	{r7, pc}

080078cc <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80078cc:	b480      	push	{r7}
 80078ce:	b083      	sub	sp, #12
 80078d0:	af00      	add	r7, sp, #0
 80078d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80078d4:	2300      	movs	r3, #0
}
 80078d6:	4618      	mov	r0, r3
 80078d8:	370c      	adds	r7, #12
 80078da:	46bd      	mov	sp, r7
 80078dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078e0:	4770      	bx	lr

080078e2 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80078e2:	b580      	push	{r7, lr}
 80078e4:	b082      	sub	sp, #8
 80078e6:	af00      	add	r7, sp, #0
 80078e8:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	2201      	movs	r2, #1
 80078ee:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d009      	beq.n	8007910 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007902:	685b      	ldr	r3, [r3, #4]
 8007904:	687a      	ldr	r2, [r7, #4]
 8007906:	6852      	ldr	r2, [r2, #4]
 8007908:	b2d2      	uxtb	r2, r2
 800790a:	4611      	mov	r1, r2
 800790c:	6878      	ldr	r0, [r7, #4]
 800790e:	4798      	blx	r3
  }

  return USBD_OK;
 8007910:	2300      	movs	r3, #0
}
 8007912:	4618      	mov	r0, r3
 8007914:	3708      	adds	r7, #8
 8007916:	46bd      	mov	sp, r7
 8007918:	bd80      	pop	{r7, pc}

0800791a <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800791a:	b480      	push	{r7}
 800791c:	b087      	sub	sp, #28
 800791e:	af00      	add	r7, sp, #0
 8007920:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8007926:	697b      	ldr	r3, [r7, #20]
 8007928:	781b      	ldrb	r3, [r3, #0]
 800792a:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800792c:	697b      	ldr	r3, [r7, #20]
 800792e:	3301      	adds	r3, #1
 8007930:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8007932:	697b      	ldr	r3, [r7, #20]
 8007934:	781b      	ldrb	r3, [r3, #0]
 8007936:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8007938:	8a3b      	ldrh	r3, [r7, #16]
 800793a:	021b      	lsls	r3, r3, #8
 800793c:	b21a      	sxth	r2, r3
 800793e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007942:	4313      	orrs	r3, r2
 8007944:	b21b      	sxth	r3, r3
 8007946:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8007948:	89fb      	ldrh	r3, [r7, #14]
}
 800794a:	4618      	mov	r0, r3
 800794c:	371c      	adds	r7, #28
 800794e:	46bd      	mov	sp, r7
 8007950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007954:	4770      	bx	lr
	...

08007958 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007958:	b580      	push	{r7, lr}
 800795a:	b084      	sub	sp, #16
 800795c:	af00      	add	r7, sp, #0
 800795e:	6078      	str	r0, [r7, #4]
 8007960:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007962:	2300      	movs	r3, #0
 8007964:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007966:	683b      	ldr	r3, [r7, #0]
 8007968:	781b      	ldrb	r3, [r3, #0]
 800796a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800796e:	2b40      	cmp	r3, #64	; 0x40
 8007970:	d005      	beq.n	800797e <USBD_StdDevReq+0x26>
 8007972:	2b40      	cmp	r3, #64	; 0x40
 8007974:	d853      	bhi.n	8007a1e <USBD_StdDevReq+0xc6>
 8007976:	2b00      	cmp	r3, #0
 8007978:	d00b      	beq.n	8007992 <USBD_StdDevReq+0x3a>
 800797a:	2b20      	cmp	r3, #32
 800797c:	d14f      	bne.n	8007a1e <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007984:	689b      	ldr	r3, [r3, #8]
 8007986:	6839      	ldr	r1, [r7, #0]
 8007988:	6878      	ldr	r0, [r7, #4]
 800798a:	4798      	blx	r3
 800798c:	4603      	mov	r3, r0
 800798e:	73fb      	strb	r3, [r7, #15]
      break;
 8007990:	e04a      	b.n	8007a28 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007992:	683b      	ldr	r3, [r7, #0]
 8007994:	785b      	ldrb	r3, [r3, #1]
 8007996:	2b09      	cmp	r3, #9
 8007998:	d83b      	bhi.n	8007a12 <USBD_StdDevReq+0xba>
 800799a:	a201      	add	r2, pc, #4	; (adr r2, 80079a0 <USBD_StdDevReq+0x48>)
 800799c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079a0:	080079f5 	.word	0x080079f5
 80079a4:	08007a09 	.word	0x08007a09
 80079a8:	08007a13 	.word	0x08007a13
 80079ac:	080079ff 	.word	0x080079ff
 80079b0:	08007a13 	.word	0x08007a13
 80079b4:	080079d3 	.word	0x080079d3
 80079b8:	080079c9 	.word	0x080079c9
 80079bc:	08007a13 	.word	0x08007a13
 80079c0:	080079eb 	.word	0x080079eb
 80079c4:	080079dd 	.word	0x080079dd
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80079c8:	6839      	ldr	r1, [r7, #0]
 80079ca:	6878      	ldr	r0, [r7, #4]
 80079cc:	f000 f9de 	bl	8007d8c <USBD_GetDescriptor>
          break;
 80079d0:	e024      	b.n	8007a1c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80079d2:	6839      	ldr	r1, [r7, #0]
 80079d4:	6878      	ldr	r0, [r7, #4]
 80079d6:	f000 fb43 	bl	8008060 <USBD_SetAddress>
          break;
 80079da:	e01f      	b.n	8007a1c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80079dc:	6839      	ldr	r1, [r7, #0]
 80079de:	6878      	ldr	r0, [r7, #4]
 80079e0:	f000 fb82 	bl	80080e8 <USBD_SetConfig>
 80079e4:	4603      	mov	r3, r0
 80079e6:	73fb      	strb	r3, [r7, #15]
          break;
 80079e8:	e018      	b.n	8007a1c <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80079ea:	6839      	ldr	r1, [r7, #0]
 80079ec:	6878      	ldr	r0, [r7, #4]
 80079ee:	f000 fc21 	bl	8008234 <USBD_GetConfig>
          break;
 80079f2:	e013      	b.n	8007a1c <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80079f4:	6839      	ldr	r1, [r7, #0]
 80079f6:	6878      	ldr	r0, [r7, #4]
 80079f8:	f000 fc52 	bl	80082a0 <USBD_GetStatus>
          break;
 80079fc:	e00e      	b.n	8007a1c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80079fe:	6839      	ldr	r1, [r7, #0]
 8007a00:	6878      	ldr	r0, [r7, #4]
 8007a02:	f000 fc81 	bl	8008308 <USBD_SetFeature>
          break;
 8007a06:	e009      	b.n	8007a1c <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007a08:	6839      	ldr	r1, [r7, #0]
 8007a0a:	6878      	ldr	r0, [r7, #4]
 8007a0c:	f000 fc90 	bl	8008330 <USBD_ClrFeature>
          break;
 8007a10:	e004      	b.n	8007a1c <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8007a12:	6839      	ldr	r1, [r7, #0]
 8007a14:	6878      	ldr	r0, [r7, #4]
 8007a16:	f000 fce7 	bl	80083e8 <USBD_CtlError>
          break;
 8007a1a:	bf00      	nop
      }
      break;
 8007a1c:	e004      	b.n	8007a28 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8007a1e:	6839      	ldr	r1, [r7, #0]
 8007a20:	6878      	ldr	r0, [r7, #4]
 8007a22:	f000 fce1 	bl	80083e8 <USBD_CtlError>
      break;
 8007a26:	bf00      	nop
  }

  return ret;
 8007a28:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a2a:	4618      	mov	r0, r3
 8007a2c:	3710      	adds	r7, #16
 8007a2e:	46bd      	mov	sp, r7
 8007a30:	bd80      	pop	{r7, pc}
 8007a32:	bf00      	nop

08007a34 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007a34:	b580      	push	{r7, lr}
 8007a36:	b084      	sub	sp, #16
 8007a38:	af00      	add	r7, sp, #0
 8007a3a:	6078      	str	r0, [r7, #4]
 8007a3c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007a3e:	2300      	movs	r3, #0
 8007a40:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007a42:	683b      	ldr	r3, [r7, #0]
 8007a44:	781b      	ldrb	r3, [r3, #0]
 8007a46:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007a4a:	2b40      	cmp	r3, #64	; 0x40
 8007a4c:	d005      	beq.n	8007a5a <USBD_StdItfReq+0x26>
 8007a4e:	2b40      	cmp	r3, #64	; 0x40
 8007a50:	d82f      	bhi.n	8007ab2 <USBD_StdItfReq+0x7e>
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d001      	beq.n	8007a5a <USBD_StdItfReq+0x26>
 8007a56:	2b20      	cmp	r3, #32
 8007a58:	d12b      	bne.n	8007ab2 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a60:	b2db      	uxtb	r3, r3
 8007a62:	3b01      	subs	r3, #1
 8007a64:	2b02      	cmp	r3, #2
 8007a66:	d81d      	bhi.n	8007aa4 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007a68:	683b      	ldr	r3, [r7, #0]
 8007a6a:	889b      	ldrh	r3, [r3, #4]
 8007a6c:	b2db      	uxtb	r3, r3
 8007a6e:	2b01      	cmp	r3, #1
 8007a70:	d813      	bhi.n	8007a9a <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007a78:	689b      	ldr	r3, [r3, #8]
 8007a7a:	6839      	ldr	r1, [r7, #0]
 8007a7c:	6878      	ldr	r0, [r7, #4]
 8007a7e:	4798      	blx	r3
 8007a80:	4603      	mov	r3, r0
 8007a82:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8007a84:	683b      	ldr	r3, [r7, #0]
 8007a86:	88db      	ldrh	r3, [r3, #6]
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d110      	bne.n	8007aae <USBD_StdItfReq+0x7a>
 8007a8c:	7bfb      	ldrb	r3, [r7, #15]
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d10d      	bne.n	8007aae <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 8007a92:	6878      	ldr	r0, [r7, #4]
 8007a94:	f000 fd73 	bl	800857e <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8007a98:	e009      	b.n	8007aae <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 8007a9a:	6839      	ldr	r1, [r7, #0]
 8007a9c:	6878      	ldr	r0, [r7, #4]
 8007a9e:	f000 fca3 	bl	80083e8 <USBD_CtlError>
          break;
 8007aa2:	e004      	b.n	8007aae <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8007aa4:	6839      	ldr	r1, [r7, #0]
 8007aa6:	6878      	ldr	r0, [r7, #4]
 8007aa8:	f000 fc9e 	bl	80083e8 <USBD_CtlError>
          break;
 8007aac:	e000      	b.n	8007ab0 <USBD_StdItfReq+0x7c>
          break;
 8007aae:	bf00      	nop
      }
      break;
 8007ab0:	e004      	b.n	8007abc <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 8007ab2:	6839      	ldr	r1, [r7, #0]
 8007ab4:	6878      	ldr	r0, [r7, #4]
 8007ab6:	f000 fc97 	bl	80083e8 <USBD_CtlError>
      break;
 8007aba:	bf00      	nop
  }

  return ret;
 8007abc:	7bfb      	ldrb	r3, [r7, #15]
}
 8007abe:	4618      	mov	r0, r3
 8007ac0:	3710      	adds	r7, #16
 8007ac2:	46bd      	mov	sp, r7
 8007ac4:	bd80      	pop	{r7, pc}

08007ac6 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007ac6:	b580      	push	{r7, lr}
 8007ac8:	b084      	sub	sp, #16
 8007aca:	af00      	add	r7, sp, #0
 8007acc:	6078      	str	r0, [r7, #4]
 8007ace:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8007ad0:	2300      	movs	r3, #0
 8007ad2:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8007ad4:	683b      	ldr	r3, [r7, #0]
 8007ad6:	889b      	ldrh	r3, [r3, #4]
 8007ad8:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007ada:	683b      	ldr	r3, [r7, #0]
 8007adc:	781b      	ldrb	r3, [r3, #0]
 8007ade:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007ae2:	2b40      	cmp	r3, #64	; 0x40
 8007ae4:	d007      	beq.n	8007af6 <USBD_StdEPReq+0x30>
 8007ae6:	2b40      	cmp	r3, #64	; 0x40
 8007ae8:	f200 8145 	bhi.w	8007d76 <USBD_StdEPReq+0x2b0>
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d00c      	beq.n	8007b0a <USBD_StdEPReq+0x44>
 8007af0:	2b20      	cmp	r3, #32
 8007af2:	f040 8140 	bne.w	8007d76 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007afc:	689b      	ldr	r3, [r3, #8]
 8007afe:	6839      	ldr	r1, [r7, #0]
 8007b00:	6878      	ldr	r0, [r7, #4]
 8007b02:	4798      	blx	r3
 8007b04:	4603      	mov	r3, r0
 8007b06:	73fb      	strb	r3, [r7, #15]
      break;
 8007b08:	e13a      	b.n	8007d80 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007b0a:	683b      	ldr	r3, [r7, #0]
 8007b0c:	785b      	ldrb	r3, [r3, #1]
 8007b0e:	2b03      	cmp	r3, #3
 8007b10:	d007      	beq.n	8007b22 <USBD_StdEPReq+0x5c>
 8007b12:	2b03      	cmp	r3, #3
 8007b14:	f300 8129 	bgt.w	8007d6a <USBD_StdEPReq+0x2a4>
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d07f      	beq.n	8007c1c <USBD_StdEPReq+0x156>
 8007b1c:	2b01      	cmp	r3, #1
 8007b1e:	d03c      	beq.n	8007b9a <USBD_StdEPReq+0xd4>
 8007b20:	e123      	b.n	8007d6a <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007b28:	b2db      	uxtb	r3, r3
 8007b2a:	2b02      	cmp	r3, #2
 8007b2c:	d002      	beq.n	8007b34 <USBD_StdEPReq+0x6e>
 8007b2e:	2b03      	cmp	r3, #3
 8007b30:	d016      	beq.n	8007b60 <USBD_StdEPReq+0x9a>
 8007b32:	e02c      	b.n	8007b8e <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007b34:	7bbb      	ldrb	r3, [r7, #14]
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d00d      	beq.n	8007b56 <USBD_StdEPReq+0x90>
 8007b3a:	7bbb      	ldrb	r3, [r7, #14]
 8007b3c:	2b80      	cmp	r3, #128	; 0x80
 8007b3e:	d00a      	beq.n	8007b56 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007b40:	7bbb      	ldrb	r3, [r7, #14]
 8007b42:	4619      	mov	r1, r3
 8007b44:	6878      	ldr	r0, [r7, #4]
 8007b46:	f001 f941 	bl	8008dcc <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007b4a:	2180      	movs	r1, #128	; 0x80
 8007b4c:	6878      	ldr	r0, [r7, #4]
 8007b4e:	f001 f93d 	bl	8008dcc <USBD_LL_StallEP>
 8007b52:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007b54:	e020      	b.n	8007b98 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 8007b56:	6839      	ldr	r1, [r7, #0]
 8007b58:	6878      	ldr	r0, [r7, #4]
 8007b5a:	f000 fc45 	bl	80083e8 <USBD_CtlError>
              break;
 8007b5e:	e01b      	b.n	8007b98 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007b60:	683b      	ldr	r3, [r7, #0]
 8007b62:	885b      	ldrh	r3, [r3, #2]
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d10e      	bne.n	8007b86 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007b68:	7bbb      	ldrb	r3, [r7, #14]
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d00b      	beq.n	8007b86 <USBD_StdEPReq+0xc0>
 8007b6e:	7bbb      	ldrb	r3, [r7, #14]
 8007b70:	2b80      	cmp	r3, #128	; 0x80
 8007b72:	d008      	beq.n	8007b86 <USBD_StdEPReq+0xc0>
 8007b74:	683b      	ldr	r3, [r7, #0]
 8007b76:	88db      	ldrh	r3, [r3, #6]
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	d104      	bne.n	8007b86 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8007b7c:	7bbb      	ldrb	r3, [r7, #14]
 8007b7e:	4619      	mov	r1, r3
 8007b80:	6878      	ldr	r0, [r7, #4]
 8007b82:	f001 f923 	bl	8008dcc <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8007b86:	6878      	ldr	r0, [r7, #4]
 8007b88:	f000 fcf9 	bl	800857e <USBD_CtlSendStatus>

              break;
 8007b8c:	e004      	b.n	8007b98 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 8007b8e:	6839      	ldr	r1, [r7, #0]
 8007b90:	6878      	ldr	r0, [r7, #4]
 8007b92:	f000 fc29 	bl	80083e8 <USBD_CtlError>
              break;
 8007b96:	bf00      	nop
          }
          break;
 8007b98:	e0ec      	b.n	8007d74 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007ba0:	b2db      	uxtb	r3, r3
 8007ba2:	2b02      	cmp	r3, #2
 8007ba4:	d002      	beq.n	8007bac <USBD_StdEPReq+0xe6>
 8007ba6:	2b03      	cmp	r3, #3
 8007ba8:	d016      	beq.n	8007bd8 <USBD_StdEPReq+0x112>
 8007baa:	e030      	b.n	8007c0e <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007bac:	7bbb      	ldrb	r3, [r7, #14]
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d00d      	beq.n	8007bce <USBD_StdEPReq+0x108>
 8007bb2:	7bbb      	ldrb	r3, [r7, #14]
 8007bb4:	2b80      	cmp	r3, #128	; 0x80
 8007bb6:	d00a      	beq.n	8007bce <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007bb8:	7bbb      	ldrb	r3, [r7, #14]
 8007bba:	4619      	mov	r1, r3
 8007bbc:	6878      	ldr	r0, [r7, #4]
 8007bbe:	f001 f905 	bl	8008dcc <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007bc2:	2180      	movs	r1, #128	; 0x80
 8007bc4:	6878      	ldr	r0, [r7, #4]
 8007bc6:	f001 f901 	bl	8008dcc <USBD_LL_StallEP>
 8007bca:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007bcc:	e025      	b.n	8007c1a <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 8007bce:	6839      	ldr	r1, [r7, #0]
 8007bd0:	6878      	ldr	r0, [r7, #4]
 8007bd2:	f000 fc09 	bl	80083e8 <USBD_CtlError>
              break;
 8007bd6:	e020      	b.n	8007c1a <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007bd8:	683b      	ldr	r3, [r7, #0]
 8007bda:	885b      	ldrh	r3, [r3, #2]
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	d11b      	bne.n	8007c18 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007be0:	7bbb      	ldrb	r3, [r7, #14]
 8007be2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d004      	beq.n	8007bf4 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8007bea:	7bbb      	ldrb	r3, [r7, #14]
 8007bec:	4619      	mov	r1, r3
 8007bee:	6878      	ldr	r0, [r7, #4]
 8007bf0:	f001 f90b 	bl	8008e0a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8007bf4:	6878      	ldr	r0, [r7, #4]
 8007bf6:	f000 fcc2 	bl	800857e <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c00:	689b      	ldr	r3, [r3, #8]
 8007c02:	6839      	ldr	r1, [r7, #0]
 8007c04:	6878      	ldr	r0, [r7, #4]
 8007c06:	4798      	blx	r3
 8007c08:	4603      	mov	r3, r0
 8007c0a:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8007c0c:	e004      	b.n	8007c18 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 8007c0e:	6839      	ldr	r1, [r7, #0]
 8007c10:	6878      	ldr	r0, [r7, #4]
 8007c12:	f000 fbe9 	bl	80083e8 <USBD_CtlError>
              break;
 8007c16:	e000      	b.n	8007c1a <USBD_StdEPReq+0x154>
              break;
 8007c18:	bf00      	nop
          }
          break;
 8007c1a:	e0ab      	b.n	8007d74 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007c22:	b2db      	uxtb	r3, r3
 8007c24:	2b02      	cmp	r3, #2
 8007c26:	d002      	beq.n	8007c2e <USBD_StdEPReq+0x168>
 8007c28:	2b03      	cmp	r3, #3
 8007c2a:	d032      	beq.n	8007c92 <USBD_StdEPReq+0x1cc>
 8007c2c:	e097      	b.n	8007d5e <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007c2e:	7bbb      	ldrb	r3, [r7, #14]
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	d007      	beq.n	8007c44 <USBD_StdEPReq+0x17e>
 8007c34:	7bbb      	ldrb	r3, [r7, #14]
 8007c36:	2b80      	cmp	r3, #128	; 0x80
 8007c38:	d004      	beq.n	8007c44 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 8007c3a:	6839      	ldr	r1, [r7, #0]
 8007c3c:	6878      	ldr	r0, [r7, #4]
 8007c3e:	f000 fbd3 	bl	80083e8 <USBD_CtlError>
                break;
 8007c42:	e091      	b.n	8007d68 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007c44:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	da0b      	bge.n	8007c64 <USBD_StdEPReq+0x19e>
 8007c4c:	7bbb      	ldrb	r3, [r7, #14]
 8007c4e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007c52:	4613      	mov	r3, r2
 8007c54:	009b      	lsls	r3, r3, #2
 8007c56:	4413      	add	r3, r2
 8007c58:	009b      	lsls	r3, r3, #2
 8007c5a:	3310      	adds	r3, #16
 8007c5c:	687a      	ldr	r2, [r7, #4]
 8007c5e:	4413      	add	r3, r2
 8007c60:	3304      	adds	r3, #4
 8007c62:	e00b      	b.n	8007c7c <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007c64:	7bbb      	ldrb	r3, [r7, #14]
 8007c66:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007c6a:	4613      	mov	r3, r2
 8007c6c:	009b      	lsls	r3, r3, #2
 8007c6e:	4413      	add	r3, r2
 8007c70:	009b      	lsls	r3, r3, #2
 8007c72:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007c76:	687a      	ldr	r2, [r7, #4]
 8007c78:	4413      	add	r3, r2
 8007c7a:	3304      	adds	r3, #4
 8007c7c:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8007c7e:	68bb      	ldr	r3, [r7, #8]
 8007c80:	2200      	movs	r2, #0
 8007c82:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007c84:	68bb      	ldr	r3, [r7, #8]
 8007c86:	2202      	movs	r2, #2
 8007c88:	4619      	mov	r1, r3
 8007c8a:	6878      	ldr	r0, [r7, #4]
 8007c8c:	f000 fc1d 	bl	80084ca <USBD_CtlSendData>
              break;
 8007c90:	e06a      	b.n	8007d68 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8007c92:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	da11      	bge.n	8007cbe <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007c9a:	7bbb      	ldrb	r3, [r7, #14]
 8007c9c:	f003 020f 	and.w	r2, r3, #15
 8007ca0:	6879      	ldr	r1, [r7, #4]
 8007ca2:	4613      	mov	r3, r2
 8007ca4:	009b      	lsls	r3, r3, #2
 8007ca6:	4413      	add	r3, r2
 8007ca8:	009b      	lsls	r3, r3, #2
 8007caa:	440b      	add	r3, r1
 8007cac:	3324      	adds	r3, #36	; 0x24
 8007cae:	881b      	ldrh	r3, [r3, #0]
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	d117      	bne.n	8007ce4 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8007cb4:	6839      	ldr	r1, [r7, #0]
 8007cb6:	6878      	ldr	r0, [r7, #4]
 8007cb8:	f000 fb96 	bl	80083e8 <USBD_CtlError>
                  break;
 8007cbc:	e054      	b.n	8007d68 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007cbe:	7bbb      	ldrb	r3, [r7, #14]
 8007cc0:	f003 020f 	and.w	r2, r3, #15
 8007cc4:	6879      	ldr	r1, [r7, #4]
 8007cc6:	4613      	mov	r3, r2
 8007cc8:	009b      	lsls	r3, r3, #2
 8007cca:	4413      	add	r3, r2
 8007ccc:	009b      	lsls	r3, r3, #2
 8007cce:	440b      	add	r3, r1
 8007cd0:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007cd4:	881b      	ldrh	r3, [r3, #0]
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d104      	bne.n	8007ce4 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8007cda:	6839      	ldr	r1, [r7, #0]
 8007cdc:	6878      	ldr	r0, [r7, #4]
 8007cde:	f000 fb83 	bl	80083e8 <USBD_CtlError>
                  break;
 8007ce2:	e041      	b.n	8007d68 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007ce4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	da0b      	bge.n	8007d04 <USBD_StdEPReq+0x23e>
 8007cec:	7bbb      	ldrb	r3, [r7, #14]
 8007cee:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007cf2:	4613      	mov	r3, r2
 8007cf4:	009b      	lsls	r3, r3, #2
 8007cf6:	4413      	add	r3, r2
 8007cf8:	009b      	lsls	r3, r3, #2
 8007cfa:	3310      	adds	r3, #16
 8007cfc:	687a      	ldr	r2, [r7, #4]
 8007cfe:	4413      	add	r3, r2
 8007d00:	3304      	adds	r3, #4
 8007d02:	e00b      	b.n	8007d1c <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007d04:	7bbb      	ldrb	r3, [r7, #14]
 8007d06:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007d0a:	4613      	mov	r3, r2
 8007d0c:	009b      	lsls	r3, r3, #2
 8007d0e:	4413      	add	r3, r2
 8007d10:	009b      	lsls	r3, r3, #2
 8007d12:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007d16:	687a      	ldr	r2, [r7, #4]
 8007d18:	4413      	add	r3, r2
 8007d1a:	3304      	adds	r3, #4
 8007d1c:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007d1e:	7bbb      	ldrb	r3, [r7, #14]
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	d002      	beq.n	8007d2a <USBD_StdEPReq+0x264>
 8007d24:	7bbb      	ldrb	r3, [r7, #14]
 8007d26:	2b80      	cmp	r3, #128	; 0x80
 8007d28:	d103      	bne.n	8007d32 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 8007d2a:	68bb      	ldr	r3, [r7, #8]
 8007d2c:	2200      	movs	r2, #0
 8007d2e:	601a      	str	r2, [r3, #0]
 8007d30:	e00e      	b.n	8007d50 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8007d32:	7bbb      	ldrb	r3, [r7, #14]
 8007d34:	4619      	mov	r1, r3
 8007d36:	6878      	ldr	r0, [r7, #4]
 8007d38:	f001 f886 	bl	8008e48 <USBD_LL_IsStallEP>
 8007d3c:	4603      	mov	r3, r0
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	d003      	beq.n	8007d4a <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 8007d42:	68bb      	ldr	r3, [r7, #8]
 8007d44:	2201      	movs	r2, #1
 8007d46:	601a      	str	r2, [r3, #0]
 8007d48:	e002      	b.n	8007d50 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 8007d4a:	68bb      	ldr	r3, [r7, #8]
 8007d4c:	2200      	movs	r2, #0
 8007d4e:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007d50:	68bb      	ldr	r3, [r7, #8]
 8007d52:	2202      	movs	r2, #2
 8007d54:	4619      	mov	r1, r3
 8007d56:	6878      	ldr	r0, [r7, #4]
 8007d58:	f000 fbb7 	bl	80084ca <USBD_CtlSendData>
              break;
 8007d5c:	e004      	b.n	8007d68 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 8007d5e:	6839      	ldr	r1, [r7, #0]
 8007d60:	6878      	ldr	r0, [r7, #4]
 8007d62:	f000 fb41 	bl	80083e8 <USBD_CtlError>
              break;
 8007d66:	bf00      	nop
          }
          break;
 8007d68:	e004      	b.n	8007d74 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 8007d6a:	6839      	ldr	r1, [r7, #0]
 8007d6c:	6878      	ldr	r0, [r7, #4]
 8007d6e:	f000 fb3b 	bl	80083e8 <USBD_CtlError>
          break;
 8007d72:	bf00      	nop
      }
      break;
 8007d74:	e004      	b.n	8007d80 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 8007d76:	6839      	ldr	r1, [r7, #0]
 8007d78:	6878      	ldr	r0, [r7, #4]
 8007d7a:	f000 fb35 	bl	80083e8 <USBD_CtlError>
      break;
 8007d7e:	bf00      	nop
  }

  return ret;
 8007d80:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d82:	4618      	mov	r0, r3
 8007d84:	3710      	adds	r7, #16
 8007d86:	46bd      	mov	sp, r7
 8007d88:	bd80      	pop	{r7, pc}
	...

08007d8c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007d8c:	b580      	push	{r7, lr}
 8007d8e:	b084      	sub	sp, #16
 8007d90:	af00      	add	r7, sp, #0
 8007d92:	6078      	str	r0, [r7, #4]
 8007d94:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007d96:	2300      	movs	r3, #0
 8007d98:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8007d9a:	2300      	movs	r3, #0
 8007d9c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8007d9e:	2300      	movs	r3, #0
 8007da0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8007da2:	683b      	ldr	r3, [r7, #0]
 8007da4:	885b      	ldrh	r3, [r3, #2]
 8007da6:	0a1b      	lsrs	r3, r3, #8
 8007da8:	b29b      	uxth	r3, r3
 8007daa:	3b01      	subs	r3, #1
 8007dac:	2b06      	cmp	r3, #6
 8007dae:	f200 8128 	bhi.w	8008002 <USBD_GetDescriptor+0x276>
 8007db2:	a201      	add	r2, pc, #4	; (adr r2, 8007db8 <USBD_GetDescriptor+0x2c>)
 8007db4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007db8:	08007dd5 	.word	0x08007dd5
 8007dbc:	08007ded 	.word	0x08007ded
 8007dc0:	08007e2d 	.word	0x08007e2d
 8007dc4:	08008003 	.word	0x08008003
 8007dc8:	08008003 	.word	0x08008003
 8007dcc:	08007fa3 	.word	0x08007fa3
 8007dd0:	08007fcf 	.word	0x08007fcf
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	687a      	ldr	r2, [r7, #4]
 8007dde:	7c12      	ldrb	r2, [r2, #16]
 8007de0:	f107 0108 	add.w	r1, r7, #8
 8007de4:	4610      	mov	r0, r2
 8007de6:	4798      	blx	r3
 8007de8:	60f8      	str	r0, [r7, #12]
      break;
 8007dea:	e112      	b.n	8008012 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	7c1b      	ldrb	r3, [r3, #16]
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	d10d      	bne.n	8007e10 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007dfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007dfc:	f107 0208 	add.w	r2, r7, #8
 8007e00:	4610      	mov	r0, r2
 8007e02:	4798      	blx	r3
 8007e04:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	3301      	adds	r3, #1
 8007e0a:	2202      	movs	r2, #2
 8007e0c:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8007e0e:	e100      	b.n	8008012 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e18:	f107 0208 	add.w	r2, r7, #8
 8007e1c:	4610      	mov	r0, r2
 8007e1e:	4798      	blx	r3
 8007e20:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	3301      	adds	r3, #1
 8007e26:	2202      	movs	r2, #2
 8007e28:	701a      	strb	r2, [r3, #0]
      break;
 8007e2a:	e0f2      	b.n	8008012 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007e2c:	683b      	ldr	r3, [r7, #0]
 8007e2e:	885b      	ldrh	r3, [r3, #2]
 8007e30:	b2db      	uxtb	r3, r3
 8007e32:	2b05      	cmp	r3, #5
 8007e34:	f200 80ac 	bhi.w	8007f90 <USBD_GetDescriptor+0x204>
 8007e38:	a201      	add	r2, pc, #4	; (adr r2, 8007e40 <USBD_GetDescriptor+0xb4>)
 8007e3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e3e:	bf00      	nop
 8007e40:	08007e59 	.word	0x08007e59
 8007e44:	08007e8d 	.word	0x08007e8d
 8007e48:	08007ec1 	.word	0x08007ec1
 8007e4c:	08007ef5 	.word	0x08007ef5
 8007e50:	08007f29 	.word	0x08007f29
 8007e54:	08007f5d 	.word	0x08007f5d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007e5e:	685b      	ldr	r3, [r3, #4]
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d00b      	beq.n	8007e7c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007e6a:	685b      	ldr	r3, [r3, #4]
 8007e6c:	687a      	ldr	r2, [r7, #4]
 8007e6e:	7c12      	ldrb	r2, [r2, #16]
 8007e70:	f107 0108 	add.w	r1, r7, #8
 8007e74:	4610      	mov	r0, r2
 8007e76:	4798      	blx	r3
 8007e78:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007e7a:	e091      	b.n	8007fa0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007e7c:	6839      	ldr	r1, [r7, #0]
 8007e7e:	6878      	ldr	r0, [r7, #4]
 8007e80:	f000 fab2 	bl	80083e8 <USBD_CtlError>
            err++;
 8007e84:	7afb      	ldrb	r3, [r7, #11]
 8007e86:	3301      	adds	r3, #1
 8007e88:	72fb      	strb	r3, [r7, #11]
          break;
 8007e8a:	e089      	b.n	8007fa0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007e92:	689b      	ldr	r3, [r3, #8]
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	d00b      	beq.n	8007eb0 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007e9e:	689b      	ldr	r3, [r3, #8]
 8007ea0:	687a      	ldr	r2, [r7, #4]
 8007ea2:	7c12      	ldrb	r2, [r2, #16]
 8007ea4:	f107 0108 	add.w	r1, r7, #8
 8007ea8:	4610      	mov	r0, r2
 8007eaa:	4798      	blx	r3
 8007eac:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007eae:	e077      	b.n	8007fa0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007eb0:	6839      	ldr	r1, [r7, #0]
 8007eb2:	6878      	ldr	r0, [r7, #4]
 8007eb4:	f000 fa98 	bl	80083e8 <USBD_CtlError>
            err++;
 8007eb8:	7afb      	ldrb	r3, [r7, #11]
 8007eba:	3301      	adds	r3, #1
 8007ebc:	72fb      	strb	r3, [r7, #11]
          break;
 8007ebe:	e06f      	b.n	8007fa0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007ec6:	68db      	ldr	r3, [r3, #12]
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d00b      	beq.n	8007ee4 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007ed2:	68db      	ldr	r3, [r3, #12]
 8007ed4:	687a      	ldr	r2, [r7, #4]
 8007ed6:	7c12      	ldrb	r2, [r2, #16]
 8007ed8:	f107 0108 	add.w	r1, r7, #8
 8007edc:	4610      	mov	r0, r2
 8007ede:	4798      	blx	r3
 8007ee0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007ee2:	e05d      	b.n	8007fa0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007ee4:	6839      	ldr	r1, [r7, #0]
 8007ee6:	6878      	ldr	r0, [r7, #4]
 8007ee8:	f000 fa7e 	bl	80083e8 <USBD_CtlError>
            err++;
 8007eec:	7afb      	ldrb	r3, [r7, #11]
 8007eee:	3301      	adds	r3, #1
 8007ef0:	72fb      	strb	r3, [r7, #11]
          break;
 8007ef2:	e055      	b.n	8007fa0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007efa:	691b      	ldr	r3, [r3, #16]
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d00b      	beq.n	8007f18 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007f06:	691b      	ldr	r3, [r3, #16]
 8007f08:	687a      	ldr	r2, [r7, #4]
 8007f0a:	7c12      	ldrb	r2, [r2, #16]
 8007f0c:	f107 0108 	add.w	r1, r7, #8
 8007f10:	4610      	mov	r0, r2
 8007f12:	4798      	blx	r3
 8007f14:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007f16:	e043      	b.n	8007fa0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007f18:	6839      	ldr	r1, [r7, #0]
 8007f1a:	6878      	ldr	r0, [r7, #4]
 8007f1c:	f000 fa64 	bl	80083e8 <USBD_CtlError>
            err++;
 8007f20:	7afb      	ldrb	r3, [r7, #11]
 8007f22:	3301      	adds	r3, #1
 8007f24:	72fb      	strb	r3, [r7, #11]
          break;
 8007f26:	e03b      	b.n	8007fa0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007f2e:	695b      	ldr	r3, [r3, #20]
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	d00b      	beq.n	8007f4c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007f3a:	695b      	ldr	r3, [r3, #20]
 8007f3c:	687a      	ldr	r2, [r7, #4]
 8007f3e:	7c12      	ldrb	r2, [r2, #16]
 8007f40:	f107 0108 	add.w	r1, r7, #8
 8007f44:	4610      	mov	r0, r2
 8007f46:	4798      	blx	r3
 8007f48:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007f4a:	e029      	b.n	8007fa0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007f4c:	6839      	ldr	r1, [r7, #0]
 8007f4e:	6878      	ldr	r0, [r7, #4]
 8007f50:	f000 fa4a 	bl	80083e8 <USBD_CtlError>
            err++;
 8007f54:	7afb      	ldrb	r3, [r7, #11]
 8007f56:	3301      	adds	r3, #1
 8007f58:	72fb      	strb	r3, [r7, #11]
          break;
 8007f5a:	e021      	b.n	8007fa0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007f62:	699b      	ldr	r3, [r3, #24]
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	d00b      	beq.n	8007f80 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007f6e:	699b      	ldr	r3, [r3, #24]
 8007f70:	687a      	ldr	r2, [r7, #4]
 8007f72:	7c12      	ldrb	r2, [r2, #16]
 8007f74:	f107 0108 	add.w	r1, r7, #8
 8007f78:	4610      	mov	r0, r2
 8007f7a:	4798      	blx	r3
 8007f7c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007f7e:	e00f      	b.n	8007fa0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007f80:	6839      	ldr	r1, [r7, #0]
 8007f82:	6878      	ldr	r0, [r7, #4]
 8007f84:	f000 fa30 	bl	80083e8 <USBD_CtlError>
            err++;
 8007f88:	7afb      	ldrb	r3, [r7, #11]
 8007f8a:	3301      	adds	r3, #1
 8007f8c:	72fb      	strb	r3, [r7, #11]
          break;
 8007f8e:	e007      	b.n	8007fa0 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8007f90:	6839      	ldr	r1, [r7, #0]
 8007f92:	6878      	ldr	r0, [r7, #4]
 8007f94:	f000 fa28 	bl	80083e8 <USBD_CtlError>
          err++;
 8007f98:	7afb      	ldrb	r3, [r7, #11]
 8007f9a:	3301      	adds	r3, #1
 8007f9c:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 8007f9e:	bf00      	nop
      }
      break;
 8007fa0:	e037      	b.n	8008012 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	7c1b      	ldrb	r3, [r3, #16]
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d109      	bne.n	8007fbe <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007fb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007fb2:	f107 0208 	add.w	r2, r7, #8
 8007fb6:	4610      	mov	r0, r2
 8007fb8:	4798      	blx	r3
 8007fba:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007fbc:	e029      	b.n	8008012 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007fbe:	6839      	ldr	r1, [r7, #0]
 8007fc0:	6878      	ldr	r0, [r7, #4]
 8007fc2:	f000 fa11 	bl	80083e8 <USBD_CtlError>
        err++;
 8007fc6:	7afb      	ldrb	r3, [r7, #11]
 8007fc8:	3301      	adds	r3, #1
 8007fca:	72fb      	strb	r3, [r7, #11]
      break;
 8007fcc:	e021      	b.n	8008012 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	7c1b      	ldrb	r3, [r3, #16]
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d10d      	bne.n	8007ff2 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007fdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007fde:	f107 0208 	add.w	r2, r7, #8
 8007fe2:	4610      	mov	r0, r2
 8007fe4:	4798      	blx	r3
 8007fe6:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	3301      	adds	r3, #1
 8007fec:	2207      	movs	r2, #7
 8007fee:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007ff0:	e00f      	b.n	8008012 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007ff2:	6839      	ldr	r1, [r7, #0]
 8007ff4:	6878      	ldr	r0, [r7, #4]
 8007ff6:	f000 f9f7 	bl	80083e8 <USBD_CtlError>
        err++;
 8007ffa:	7afb      	ldrb	r3, [r7, #11]
 8007ffc:	3301      	adds	r3, #1
 8007ffe:	72fb      	strb	r3, [r7, #11]
      break;
 8008000:	e007      	b.n	8008012 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8008002:	6839      	ldr	r1, [r7, #0]
 8008004:	6878      	ldr	r0, [r7, #4]
 8008006:	f000 f9ef 	bl	80083e8 <USBD_CtlError>
      err++;
 800800a:	7afb      	ldrb	r3, [r7, #11]
 800800c:	3301      	adds	r3, #1
 800800e:	72fb      	strb	r3, [r7, #11]
      break;
 8008010:	bf00      	nop
  }

  if (err != 0U)
 8008012:	7afb      	ldrb	r3, [r7, #11]
 8008014:	2b00      	cmp	r3, #0
 8008016:	d11e      	bne.n	8008056 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8008018:	683b      	ldr	r3, [r7, #0]
 800801a:	88db      	ldrh	r3, [r3, #6]
 800801c:	2b00      	cmp	r3, #0
 800801e:	d016      	beq.n	800804e <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8008020:	893b      	ldrh	r3, [r7, #8]
 8008022:	2b00      	cmp	r3, #0
 8008024:	d00e      	beq.n	8008044 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8008026:	683b      	ldr	r3, [r7, #0]
 8008028:	88da      	ldrh	r2, [r3, #6]
 800802a:	893b      	ldrh	r3, [r7, #8]
 800802c:	4293      	cmp	r3, r2
 800802e:	bf28      	it	cs
 8008030:	4613      	movcs	r3, r2
 8008032:	b29b      	uxth	r3, r3
 8008034:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8008036:	893b      	ldrh	r3, [r7, #8]
 8008038:	461a      	mov	r2, r3
 800803a:	68f9      	ldr	r1, [r7, #12]
 800803c:	6878      	ldr	r0, [r7, #4]
 800803e:	f000 fa44 	bl	80084ca <USBD_CtlSendData>
 8008042:	e009      	b.n	8008058 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8008044:	6839      	ldr	r1, [r7, #0]
 8008046:	6878      	ldr	r0, [r7, #4]
 8008048:	f000 f9ce 	bl	80083e8 <USBD_CtlError>
 800804c:	e004      	b.n	8008058 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800804e:	6878      	ldr	r0, [r7, #4]
 8008050:	f000 fa95 	bl	800857e <USBD_CtlSendStatus>
 8008054:	e000      	b.n	8008058 <USBD_GetDescriptor+0x2cc>
    return;
 8008056:	bf00      	nop
  }
}
 8008058:	3710      	adds	r7, #16
 800805a:	46bd      	mov	sp, r7
 800805c:	bd80      	pop	{r7, pc}
 800805e:	bf00      	nop

08008060 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008060:	b580      	push	{r7, lr}
 8008062:	b084      	sub	sp, #16
 8008064:	af00      	add	r7, sp, #0
 8008066:	6078      	str	r0, [r7, #4]
 8008068:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800806a:	683b      	ldr	r3, [r7, #0]
 800806c:	889b      	ldrh	r3, [r3, #4]
 800806e:	2b00      	cmp	r3, #0
 8008070:	d131      	bne.n	80080d6 <USBD_SetAddress+0x76>
 8008072:	683b      	ldr	r3, [r7, #0]
 8008074:	88db      	ldrh	r3, [r3, #6]
 8008076:	2b00      	cmp	r3, #0
 8008078:	d12d      	bne.n	80080d6 <USBD_SetAddress+0x76>
 800807a:	683b      	ldr	r3, [r7, #0]
 800807c:	885b      	ldrh	r3, [r3, #2]
 800807e:	2b7f      	cmp	r3, #127	; 0x7f
 8008080:	d829      	bhi.n	80080d6 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008082:	683b      	ldr	r3, [r7, #0]
 8008084:	885b      	ldrh	r3, [r3, #2]
 8008086:	b2db      	uxtb	r3, r3
 8008088:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800808c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008094:	b2db      	uxtb	r3, r3
 8008096:	2b03      	cmp	r3, #3
 8008098:	d104      	bne.n	80080a4 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800809a:	6839      	ldr	r1, [r7, #0]
 800809c:	6878      	ldr	r0, [r7, #4]
 800809e:	f000 f9a3 	bl	80083e8 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80080a2:	e01d      	b.n	80080e0 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	7bfa      	ldrb	r2, [r7, #15]
 80080a8:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80080ac:	7bfb      	ldrb	r3, [r7, #15]
 80080ae:	4619      	mov	r1, r3
 80080b0:	6878      	ldr	r0, [r7, #4]
 80080b2:	f000 fef5 	bl	8008ea0 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80080b6:	6878      	ldr	r0, [r7, #4]
 80080b8:	f000 fa61 	bl	800857e <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80080bc:	7bfb      	ldrb	r3, [r7, #15]
 80080be:	2b00      	cmp	r3, #0
 80080c0:	d004      	beq.n	80080cc <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	2202      	movs	r2, #2
 80080c6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80080ca:	e009      	b.n	80080e0 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	2201      	movs	r2, #1
 80080d0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80080d4:	e004      	b.n	80080e0 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80080d6:	6839      	ldr	r1, [r7, #0]
 80080d8:	6878      	ldr	r0, [r7, #4]
 80080da:	f000 f985 	bl	80083e8 <USBD_CtlError>
  }
}
 80080de:	bf00      	nop
 80080e0:	bf00      	nop
 80080e2:	3710      	adds	r7, #16
 80080e4:	46bd      	mov	sp, r7
 80080e6:	bd80      	pop	{r7, pc}

080080e8 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80080e8:	b580      	push	{r7, lr}
 80080ea:	b084      	sub	sp, #16
 80080ec:	af00      	add	r7, sp, #0
 80080ee:	6078      	str	r0, [r7, #4]
 80080f0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80080f2:	2300      	movs	r3, #0
 80080f4:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80080f6:	683b      	ldr	r3, [r7, #0]
 80080f8:	885b      	ldrh	r3, [r3, #2]
 80080fa:	b2da      	uxtb	r2, r3
 80080fc:	4b4c      	ldr	r3, [pc, #304]	; (8008230 <USBD_SetConfig+0x148>)
 80080fe:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008100:	4b4b      	ldr	r3, [pc, #300]	; (8008230 <USBD_SetConfig+0x148>)
 8008102:	781b      	ldrb	r3, [r3, #0]
 8008104:	2b01      	cmp	r3, #1
 8008106:	d905      	bls.n	8008114 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8008108:	6839      	ldr	r1, [r7, #0]
 800810a:	6878      	ldr	r0, [r7, #4]
 800810c:	f000 f96c 	bl	80083e8 <USBD_CtlError>
    return USBD_FAIL;
 8008110:	2303      	movs	r3, #3
 8008112:	e088      	b.n	8008226 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800811a:	b2db      	uxtb	r3, r3
 800811c:	2b02      	cmp	r3, #2
 800811e:	d002      	beq.n	8008126 <USBD_SetConfig+0x3e>
 8008120:	2b03      	cmp	r3, #3
 8008122:	d025      	beq.n	8008170 <USBD_SetConfig+0x88>
 8008124:	e071      	b.n	800820a <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8008126:	4b42      	ldr	r3, [pc, #264]	; (8008230 <USBD_SetConfig+0x148>)
 8008128:	781b      	ldrb	r3, [r3, #0]
 800812a:	2b00      	cmp	r3, #0
 800812c:	d01c      	beq.n	8008168 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800812e:	4b40      	ldr	r3, [pc, #256]	; (8008230 <USBD_SetConfig+0x148>)
 8008130:	781b      	ldrb	r3, [r3, #0]
 8008132:	461a      	mov	r2, r3
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008138:	4b3d      	ldr	r3, [pc, #244]	; (8008230 <USBD_SetConfig+0x148>)
 800813a:	781b      	ldrb	r3, [r3, #0]
 800813c:	4619      	mov	r1, r3
 800813e:	6878      	ldr	r0, [r7, #4]
 8008140:	f7ff f948 	bl	80073d4 <USBD_SetClassConfig>
 8008144:	4603      	mov	r3, r0
 8008146:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8008148:	7bfb      	ldrb	r3, [r7, #15]
 800814a:	2b00      	cmp	r3, #0
 800814c:	d004      	beq.n	8008158 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800814e:	6839      	ldr	r1, [r7, #0]
 8008150:	6878      	ldr	r0, [r7, #4]
 8008152:	f000 f949 	bl	80083e8 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008156:	e065      	b.n	8008224 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8008158:	6878      	ldr	r0, [r7, #4]
 800815a:	f000 fa10 	bl	800857e <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	2203      	movs	r2, #3
 8008162:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8008166:	e05d      	b.n	8008224 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8008168:	6878      	ldr	r0, [r7, #4]
 800816a:	f000 fa08 	bl	800857e <USBD_CtlSendStatus>
      break;
 800816e:	e059      	b.n	8008224 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8008170:	4b2f      	ldr	r3, [pc, #188]	; (8008230 <USBD_SetConfig+0x148>)
 8008172:	781b      	ldrb	r3, [r3, #0]
 8008174:	2b00      	cmp	r3, #0
 8008176:	d112      	bne.n	800819e <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	2202      	movs	r2, #2
 800817c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8008180:	4b2b      	ldr	r3, [pc, #172]	; (8008230 <USBD_SetConfig+0x148>)
 8008182:	781b      	ldrb	r3, [r3, #0]
 8008184:	461a      	mov	r2, r3
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800818a:	4b29      	ldr	r3, [pc, #164]	; (8008230 <USBD_SetConfig+0x148>)
 800818c:	781b      	ldrb	r3, [r3, #0]
 800818e:	4619      	mov	r1, r3
 8008190:	6878      	ldr	r0, [r7, #4]
 8008192:	f7ff f93b 	bl	800740c <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8008196:	6878      	ldr	r0, [r7, #4]
 8008198:	f000 f9f1 	bl	800857e <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800819c:	e042      	b.n	8008224 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800819e:	4b24      	ldr	r3, [pc, #144]	; (8008230 <USBD_SetConfig+0x148>)
 80081a0:	781b      	ldrb	r3, [r3, #0]
 80081a2:	461a      	mov	r2, r3
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	685b      	ldr	r3, [r3, #4]
 80081a8:	429a      	cmp	r2, r3
 80081aa:	d02a      	beq.n	8008202 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	685b      	ldr	r3, [r3, #4]
 80081b0:	b2db      	uxtb	r3, r3
 80081b2:	4619      	mov	r1, r3
 80081b4:	6878      	ldr	r0, [r7, #4]
 80081b6:	f7ff f929 	bl	800740c <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80081ba:	4b1d      	ldr	r3, [pc, #116]	; (8008230 <USBD_SetConfig+0x148>)
 80081bc:	781b      	ldrb	r3, [r3, #0]
 80081be:	461a      	mov	r2, r3
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80081c4:	4b1a      	ldr	r3, [pc, #104]	; (8008230 <USBD_SetConfig+0x148>)
 80081c6:	781b      	ldrb	r3, [r3, #0]
 80081c8:	4619      	mov	r1, r3
 80081ca:	6878      	ldr	r0, [r7, #4]
 80081cc:	f7ff f902 	bl	80073d4 <USBD_SetClassConfig>
 80081d0:	4603      	mov	r3, r0
 80081d2:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80081d4:	7bfb      	ldrb	r3, [r7, #15]
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	d00f      	beq.n	80081fa <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 80081da:	6839      	ldr	r1, [r7, #0]
 80081dc:	6878      	ldr	r0, [r7, #4]
 80081de:	f000 f903 	bl	80083e8 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	685b      	ldr	r3, [r3, #4]
 80081e6:	b2db      	uxtb	r3, r3
 80081e8:	4619      	mov	r1, r3
 80081ea:	6878      	ldr	r0, [r7, #4]
 80081ec:	f7ff f90e 	bl	800740c <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	2202      	movs	r2, #2
 80081f4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80081f8:	e014      	b.n	8008224 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 80081fa:	6878      	ldr	r0, [r7, #4]
 80081fc:	f000 f9bf 	bl	800857e <USBD_CtlSendStatus>
      break;
 8008200:	e010      	b.n	8008224 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8008202:	6878      	ldr	r0, [r7, #4]
 8008204:	f000 f9bb 	bl	800857e <USBD_CtlSendStatus>
      break;
 8008208:	e00c      	b.n	8008224 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800820a:	6839      	ldr	r1, [r7, #0]
 800820c:	6878      	ldr	r0, [r7, #4]
 800820e:	f000 f8eb 	bl	80083e8 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008212:	4b07      	ldr	r3, [pc, #28]	; (8008230 <USBD_SetConfig+0x148>)
 8008214:	781b      	ldrb	r3, [r3, #0]
 8008216:	4619      	mov	r1, r3
 8008218:	6878      	ldr	r0, [r7, #4]
 800821a:	f7ff f8f7 	bl	800740c <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800821e:	2303      	movs	r3, #3
 8008220:	73fb      	strb	r3, [r7, #15]
      break;
 8008222:	bf00      	nop
  }

  return ret;
 8008224:	7bfb      	ldrb	r3, [r7, #15]
}
 8008226:	4618      	mov	r0, r3
 8008228:	3710      	adds	r7, #16
 800822a:	46bd      	mov	sp, r7
 800822c:	bd80      	pop	{r7, pc}
 800822e:	bf00      	nop
 8008230:	2000019c 	.word	0x2000019c

08008234 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008234:	b580      	push	{r7, lr}
 8008236:	b082      	sub	sp, #8
 8008238:	af00      	add	r7, sp, #0
 800823a:	6078      	str	r0, [r7, #4]
 800823c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800823e:	683b      	ldr	r3, [r7, #0]
 8008240:	88db      	ldrh	r3, [r3, #6]
 8008242:	2b01      	cmp	r3, #1
 8008244:	d004      	beq.n	8008250 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8008246:	6839      	ldr	r1, [r7, #0]
 8008248:	6878      	ldr	r0, [r7, #4]
 800824a:	f000 f8cd 	bl	80083e8 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800824e:	e023      	b.n	8008298 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008256:	b2db      	uxtb	r3, r3
 8008258:	2b02      	cmp	r3, #2
 800825a:	dc02      	bgt.n	8008262 <USBD_GetConfig+0x2e>
 800825c:	2b00      	cmp	r3, #0
 800825e:	dc03      	bgt.n	8008268 <USBD_GetConfig+0x34>
 8008260:	e015      	b.n	800828e <USBD_GetConfig+0x5a>
 8008262:	2b03      	cmp	r3, #3
 8008264:	d00b      	beq.n	800827e <USBD_GetConfig+0x4a>
 8008266:	e012      	b.n	800828e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	2200      	movs	r2, #0
 800826c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	3308      	adds	r3, #8
 8008272:	2201      	movs	r2, #1
 8008274:	4619      	mov	r1, r3
 8008276:	6878      	ldr	r0, [r7, #4]
 8008278:	f000 f927 	bl	80084ca <USBD_CtlSendData>
        break;
 800827c:	e00c      	b.n	8008298 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	3304      	adds	r3, #4
 8008282:	2201      	movs	r2, #1
 8008284:	4619      	mov	r1, r3
 8008286:	6878      	ldr	r0, [r7, #4]
 8008288:	f000 f91f 	bl	80084ca <USBD_CtlSendData>
        break;
 800828c:	e004      	b.n	8008298 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800828e:	6839      	ldr	r1, [r7, #0]
 8008290:	6878      	ldr	r0, [r7, #4]
 8008292:	f000 f8a9 	bl	80083e8 <USBD_CtlError>
        break;
 8008296:	bf00      	nop
}
 8008298:	bf00      	nop
 800829a:	3708      	adds	r7, #8
 800829c:	46bd      	mov	sp, r7
 800829e:	bd80      	pop	{r7, pc}

080082a0 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80082a0:	b580      	push	{r7, lr}
 80082a2:	b082      	sub	sp, #8
 80082a4:	af00      	add	r7, sp, #0
 80082a6:	6078      	str	r0, [r7, #4]
 80082a8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80082b0:	b2db      	uxtb	r3, r3
 80082b2:	3b01      	subs	r3, #1
 80082b4:	2b02      	cmp	r3, #2
 80082b6:	d81e      	bhi.n	80082f6 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80082b8:	683b      	ldr	r3, [r7, #0]
 80082ba:	88db      	ldrh	r3, [r3, #6]
 80082bc:	2b02      	cmp	r3, #2
 80082be:	d004      	beq.n	80082ca <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80082c0:	6839      	ldr	r1, [r7, #0]
 80082c2:	6878      	ldr	r0, [r7, #4]
 80082c4:	f000 f890 	bl	80083e8 <USBD_CtlError>
        break;
 80082c8:	e01a      	b.n	8008300 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	2201      	movs	r2, #1
 80082ce:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	d005      	beq.n	80082e6 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	68db      	ldr	r3, [r3, #12]
 80082de:	f043 0202 	orr.w	r2, r3, #2
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	330c      	adds	r3, #12
 80082ea:	2202      	movs	r2, #2
 80082ec:	4619      	mov	r1, r3
 80082ee:	6878      	ldr	r0, [r7, #4]
 80082f0:	f000 f8eb 	bl	80084ca <USBD_CtlSendData>
      break;
 80082f4:	e004      	b.n	8008300 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80082f6:	6839      	ldr	r1, [r7, #0]
 80082f8:	6878      	ldr	r0, [r7, #4]
 80082fa:	f000 f875 	bl	80083e8 <USBD_CtlError>
      break;
 80082fe:	bf00      	nop
  }
}
 8008300:	bf00      	nop
 8008302:	3708      	adds	r7, #8
 8008304:	46bd      	mov	sp, r7
 8008306:	bd80      	pop	{r7, pc}

08008308 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008308:	b580      	push	{r7, lr}
 800830a:	b082      	sub	sp, #8
 800830c:	af00      	add	r7, sp, #0
 800830e:	6078      	str	r0, [r7, #4]
 8008310:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008312:	683b      	ldr	r3, [r7, #0]
 8008314:	885b      	ldrh	r3, [r3, #2]
 8008316:	2b01      	cmp	r3, #1
 8008318:	d106      	bne.n	8008328 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	2201      	movs	r2, #1
 800831e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8008322:	6878      	ldr	r0, [r7, #4]
 8008324:	f000 f92b 	bl	800857e <USBD_CtlSendStatus>
  }
}
 8008328:	bf00      	nop
 800832a:	3708      	adds	r7, #8
 800832c:	46bd      	mov	sp, r7
 800832e:	bd80      	pop	{r7, pc}

08008330 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008330:	b580      	push	{r7, lr}
 8008332:	b082      	sub	sp, #8
 8008334:	af00      	add	r7, sp, #0
 8008336:	6078      	str	r0, [r7, #4]
 8008338:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008340:	b2db      	uxtb	r3, r3
 8008342:	3b01      	subs	r3, #1
 8008344:	2b02      	cmp	r3, #2
 8008346:	d80b      	bhi.n	8008360 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008348:	683b      	ldr	r3, [r7, #0]
 800834a:	885b      	ldrh	r3, [r3, #2]
 800834c:	2b01      	cmp	r3, #1
 800834e:	d10c      	bne.n	800836a <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	2200      	movs	r2, #0
 8008354:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8008358:	6878      	ldr	r0, [r7, #4]
 800835a:	f000 f910 	bl	800857e <USBD_CtlSendStatus>
      }
      break;
 800835e:	e004      	b.n	800836a <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8008360:	6839      	ldr	r1, [r7, #0]
 8008362:	6878      	ldr	r0, [r7, #4]
 8008364:	f000 f840 	bl	80083e8 <USBD_CtlError>
      break;
 8008368:	e000      	b.n	800836c <USBD_ClrFeature+0x3c>
      break;
 800836a:	bf00      	nop
  }
}
 800836c:	bf00      	nop
 800836e:	3708      	adds	r7, #8
 8008370:	46bd      	mov	sp, r7
 8008372:	bd80      	pop	{r7, pc}

08008374 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008374:	b580      	push	{r7, lr}
 8008376:	b084      	sub	sp, #16
 8008378:	af00      	add	r7, sp, #0
 800837a:	6078      	str	r0, [r7, #4]
 800837c:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800837e:	683b      	ldr	r3, [r7, #0]
 8008380:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8008382:	68fb      	ldr	r3, [r7, #12]
 8008384:	781a      	ldrb	r2, [r3, #0]
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800838a:	68fb      	ldr	r3, [r7, #12]
 800838c:	3301      	adds	r3, #1
 800838e:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	781a      	ldrb	r2, [r3, #0]
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	3301      	adds	r3, #1
 800839c:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800839e:	68f8      	ldr	r0, [r7, #12]
 80083a0:	f7ff fabb 	bl	800791a <SWAPBYTE>
 80083a4:	4603      	mov	r3, r0
 80083a6:	461a      	mov	r2, r3
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	3301      	adds	r3, #1
 80083b0:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	3301      	adds	r3, #1
 80083b6:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80083b8:	68f8      	ldr	r0, [r7, #12]
 80083ba:	f7ff faae 	bl	800791a <SWAPBYTE>
 80083be:	4603      	mov	r3, r0
 80083c0:	461a      	mov	r2, r3
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	3301      	adds	r3, #1
 80083ca:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	3301      	adds	r3, #1
 80083d0:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80083d2:	68f8      	ldr	r0, [r7, #12]
 80083d4:	f7ff faa1 	bl	800791a <SWAPBYTE>
 80083d8:	4603      	mov	r3, r0
 80083da:	461a      	mov	r2, r3
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	80da      	strh	r2, [r3, #6]
}
 80083e0:	bf00      	nop
 80083e2:	3710      	adds	r7, #16
 80083e4:	46bd      	mov	sp, r7
 80083e6:	bd80      	pop	{r7, pc}

080083e8 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80083e8:	b580      	push	{r7, lr}
 80083ea:	b082      	sub	sp, #8
 80083ec:	af00      	add	r7, sp, #0
 80083ee:	6078      	str	r0, [r7, #4]
 80083f0:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80083f2:	2180      	movs	r1, #128	; 0x80
 80083f4:	6878      	ldr	r0, [r7, #4]
 80083f6:	f000 fce9 	bl	8008dcc <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80083fa:	2100      	movs	r1, #0
 80083fc:	6878      	ldr	r0, [r7, #4]
 80083fe:	f000 fce5 	bl	8008dcc <USBD_LL_StallEP>
}
 8008402:	bf00      	nop
 8008404:	3708      	adds	r7, #8
 8008406:	46bd      	mov	sp, r7
 8008408:	bd80      	pop	{r7, pc}

0800840a <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800840a:	b580      	push	{r7, lr}
 800840c:	b086      	sub	sp, #24
 800840e:	af00      	add	r7, sp, #0
 8008410:	60f8      	str	r0, [r7, #12]
 8008412:	60b9      	str	r1, [r7, #8]
 8008414:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008416:	2300      	movs	r3, #0
 8008418:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	2b00      	cmp	r3, #0
 800841e:	d036      	beq.n	800848e <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8008424:	6938      	ldr	r0, [r7, #16]
 8008426:	f000 f836 	bl	8008496 <USBD_GetLen>
 800842a:	4603      	mov	r3, r0
 800842c:	3301      	adds	r3, #1
 800842e:	b29b      	uxth	r3, r3
 8008430:	005b      	lsls	r3, r3, #1
 8008432:	b29a      	uxth	r2, r3
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8008438:	7dfb      	ldrb	r3, [r7, #23]
 800843a:	68ba      	ldr	r2, [r7, #8]
 800843c:	4413      	add	r3, r2
 800843e:	687a      	ldr	r2, [r7, #4]
 8008440:	7812      	ldrb	r2, [r2, #0]
 8008442:	701a      	strb	r2, [r3, #0]
  idx++;
 8008444:	7dfb      	ldrb	r3, [r7, #23]
 8008446:	3301      	adds	r3, #1
 8008448:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800844a:	7dfb      	ldrb	r3, [r7, #23]
 800844c:	68ba      	ldr	r2, [r7, #8]
 800844e:	4413      	add	r3, r2
 8008450:	2203      	movs	r2, #3
 8008452:	701a      	strb	r2, [r3, #0]
  idx++;
 8008454:	7dfb      	ldrb	r3, [r7, #23]
 8008456:	3301      	adds	r3, #1
 8008458:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800845a:	e013      	b.n	8008484 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800845c:	7dfb      	ldrb	r3, [r7, #23]
 800845e:	68ba      	ldr	r2, [r7, #8]
 8008460:	4413      	add	r3, r2
 8008462:	693a      	ldr	r2, [r7, #16]
 8008464:	7812      	ldrb	r2, [r2, #0]
 8008466:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8008468:	693b      	ldr	r3, [r7, #16]
 800846a:	3301      	adds	r3, #1
 800846c:	613b      	str	r3, [r7, #16]
    idx++;
 800846e:	7dfb      	ldrb	r3, [r7, #23]
 8008470:	3301      	adds	r3, #1
 8008472:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8008474:	7dfb      	ldrb	r3, [r7, #23]
 8008476:	68ba      	ldr	r2, [r7, #8]
 8008478:	4413      	add	r3, r2
 800847a:	2200      	movs	r2, #0
 800847c:	701a      	strb	r2, [r3, #0]
    idx++;
 800847e:	7dfb      	ldrb	r3, [r7, #23]
 8008480:	3301      	adds	r3, #1
 8008482:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8008484:	693b      	ldr	r3, [r7, #16]
 8008486:	781b      	ldrb	r3, [r3, #0]
 8008488:	2b00      	cmp	r3, #0
 800848a:	d1e7      	bne.n	800845c <USBD_GetString+0x52>
 800848c:	e000      	b.n	8008490 <USBD_GetString+0x86>
    return;
 800848e:	bf00      	nop
  }
}
 8008490:	3718      	adds	r7, #24
 8008492:	46bd      	mov	sp, r7
 8008494:	bd80      	pop	{r7, pc}

08008496 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008496:	b480      	push	{r7}
 8008498:	b085      	sub	sp, #20
 800849a:	af00      	add	r7, sp, #0
 800849c:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800849e:	2300      	movs	r3, #0
 80084a0:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80084a6:	e005      	b.n	80084b4 <USBD_GetLen+0x1e>
  {
    len++;
 80084a8:	7bfb      	ldrb	r3, [r7, #15]
 80084aa:	3301      	adds	r3, #1
 80084ac:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80084ae:	68bb      	ldr	r3, [r7, #8]
 80084b0:	3301      	adds	r3, #1
 80084b2:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80084b4:	68bb      	ldr	r3, [r7, #8]
 80084b6:	781b      	ldrb	r3, [r3, #0]
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	d1f5      	bne.n	80084a8 <USBD_GetLen+0x12>
  }

  return len;
 80084bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80084be:	4618      	mov	r0, r3
 80084c0:	3714      	adds	r7, #20
 80084c2:	46bd      	mov	sp, r7
 80084c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084c8:	4770      	bx	lr

080084ca <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80084ca:	b580      	push	{r7, lr}
 80084cc:	b084      	sub	sp, #16
 80084ce:	af00      	add	r7, sp, #0
 80084d0:	60f8      	str	r0, [r7, #12]
 80084d2:	60b9      	str	r1, [r7, #8]
 80084d4:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	2202      	movs	r2, #2
 80084da:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80084de:	68fb      	ldr	r3, [r7, #12]
 80084e0:	687a      	ldr	r2, [r7, #4]
 80084e2:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	687a      	ldr	r2, [r7, #4]
 80084e8:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	68ba      	ldr	r2, [r7, #8]
 80084ee:	2100      	movs	r1, #0
 80084f0:	68f8      	ldr	r0, [r7, #12]
 80084f2:	f000 fcf4 	bl	8008ede <USBD_LL_Transmit>

  return USBD_OK;
 80084f6:	2300      	movs	r3, #0
}
 80084f8:	4618      	mov	r0, r3
 80084fa:	3710      	adds	r7, #16
 80084fc:	46bd      	mov	sp, r7
 80084fe:	bd80      	pop	{r7, pc}

08008500 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8008500:	b580      	push	{r7, lr}
 8008502:	b084      	sub	sp, #16
 8008504:	af00      	add	r7, sp, #0
 8008506:	60f8      	str	r0, [r7, #12]
 8008508:	60b9      	str	r1, [r7, #8]
 800850a:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	68ba      	ldr	r2, [r7, #8]
 8008510:	2100      	movs	r1, #0
 8008512:	68f8      	ldr	r0, [r7, #12]
 8008514:	f000 fce3 	bl	8008ede <USBD_LL_Transmit>

  return USBD_OK;
 8008518:	2300      	movs	r3, #0
}
 800851a:	4618      	mov	r0, r3
 800851c:	3710      	adds	r7, #16
 800851e:	46bd      	mov	sp, r7
 8008520:	bd80      	pop	{r7, pc}

08008522 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8008522:	b580      	push	{r7, lr}
 8008524:	b084      	sub	sp, #16
 8008526:	af00      	add	r7, sp, #0
 8008528:	60f8      	str	r0, [r7, #12]
 800852a:	60b9      	str	r1, [r7, #8]
 800852c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	2203      	movs	r2, #3
 8008532:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8008536:	68fb      	ldr	r3, [r7, #12]
 8008538:	687a      	ldr	r2, [r7, #4]
 800853a:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800853e:	68fb      	ldr	r3, [r7, #12]
 8008540:	687a      	ldr	r2, [r7, #4]
 8008542:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	68ba      	ldr	r2, [r7, #8]
 800854a:	2100      	movs	r1, #0
 800854c:	68f8      	ldr	r0, [r7, #12]
 800854e:	f000 fce7 	bl	8008f20 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008552:	2300      	movs	r3, #0
}
 8008554:	4618      	mov	r0, r3
 8008556:	3710      	adds	r7, #16
 8008558:	46bd      	mov	sp, r7
 800855a:	bd80      	pop	{r7, pc}

0800855c <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800855c:	b580      	push	{r7, lr}
 800855e:	b084      	sub	sp, #16
 8008560:	af00      	add	r7, sp, #0
 8008562:	60f8      	str	r0, [r7, #12]
 8008564:	60b9      	str	r1, [r7, #8]
 8008566:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	68ba      	ldr	r2, [r7, #8]
 800856c:	2100      	movs	r1, #0
 800856e:	68f8      	ldr	r0, [r7, #12]
 8008570:	f000 fcd6 	bl	8008f20 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008574:	2300      	movs	r3, #0
}
 8008576:	4618      	mov	r0, r3
 8008578:	3710      	adds	r7, #16
 800857a:	46bd      	mov	sp, r7
 800857c:	bd80      	pop	{r7, pc}

0800857e <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800857e:	b580      	push	{r7, lr}
 8008580:	b082      	sub	sp, #8
 8008582:	af00      	add	r7, sp, #0
 8008584:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	2204      	movs	r2, #4
 800858a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800858e:	2300      	movs	r3, #0
 8008590:	2200      	movs	r2, #0
 8008592:	2100      	movs	r1, #0
 8008594:	6878      	ldr	r0, [r7, #4]
 8008596:	f000 fca2 	bl	8008ede <USBD_LL_Transmit>

  return USBD_OK;
 800859a:	2300      	movs	r3, #0
}
 800859c:	4618      	mov	r0, r3
 800859e:	3708      	adds	r7, #8
 80085a0:	46bd      	mov	sp, r7
 80085a2:	bd80      	pop	{r7, pc}

080085a4 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80085a4:	b580      	push	{r7, lr}
 80085a6:	b082      	sub	sp, #8
 80085a8:	af00      	add	r7, sp, #0
 80085aa:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	2205      	movs	r2, #5
 80085b0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80085b4:	2300      	movs	r3, #0
 80085b6:	2200      	movs	r2, #0
 80085b8:	2100      	movs	r1, #0
 80085ba:	6878      	ldr	r0, [r7, #4]
 80085bc:	f000 fcb0 	bl	8008f20 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80085c0:	2300      	movs	r3, #0
}
 80085c2:	4618      	mov	r0, r3
 80085c4:	3708      	adds	r7, #8
 80085c6:	46bd      	mov	sp, r7
 80085c8:	bd80      	pop	{r7, pc}
	...

080085cc <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80085cc:	b580      	push	{r7, lr}
 80085ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80085d0:	2200      	movs	r2, #0
 80085d2:	4912      	ldr	r1, [pc, #72]	; (800861c <MX_USB_DEVICE_Init+0x50>)
 80085d4:	4812      	ldr	r0, [pc, #72]	; (8008620 <MX_USB_DEVICE_Init+0x54>)
 80085d6:	f7fe fe8f 	bl	80072f8 <USBD_Init>
 80085da:	4603      	mov	r3, r0
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d001      	beq.n	80085e4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80085e0:	f7f8 fe3c 	bl	800125c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80085e4:	490f      	ldr	r1, [pc, #60]	; (8008624 <MX_USB_DEVICE_Init+0x58>)
 80085e6:	480e      	ldr	r0, [pc, #56]	; (8008620 <MX_USB_DEVICE_Init+0x54>)
 80085e8:	f7fe feb6 	bl	8007358 <USBD_RegisterClass>
 80085ec:	4603      	mov	r3, r0
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	d001      	beq.n	80085f6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80085f2:	f7f8 fe33 	bl	800125c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80085f6:	490c      	ldr	r1, [pc, #48]	; (8008628 <MX_USB_DEVICE_Init+0x5c>)
 80085f8:	4809      	ldr	r0, [pc, #36]	; (8008620 <MX_USB_DEVICE_Init+0x54>)
 80085fa:	f7fe fdd7 	bl	80071ac <USBD_CDC_RegisterInterface>
 80085fe:	4603      	mov	r3, r0
 8008600:	2b00      	cmp	r3, #0
 8008602:	d001      	beq.n	8008608 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8008604:	f7f8 fe2a 	bl	800125c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8008608:	4805      	ldr	r0, [pc, #20]	; (8008620 <MX_USB_DEVICE_Init+0x54>)
 800860a:	f7fe fecc 	bl	80073a6 <USBD_Start>
 800860e:	4603      	mov	r3, r0
 8008610:	2b00      	cmp	r3, #0
 8008612:	d001      	beq.n	8008618 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8008614:	f7f8 fe22 	bl	800125c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008618:	bf00      	nop
 800861a:	bd80      	pop	{r7, pc}
 800861c:	20000130 	.word	0x20000130
 8008620:	200028e8 	.word	0x200028e8
 8008624:	20000018 	.word	0x20000018
 8008628:	2000011c 	.word	0x2000011c

0800862c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800862c:	b580      	push	{r7, lr}
 800862e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8008630:	2200      	movs	r2, #0
 8008632:	4905      	ldr	r1, [pc, #20]	; (8008648 <CDC_Init_FS+0x1c>)
 8008634:	4805      	ldr	r0, [pc, #20]	; (800864c <CDC_Init_FS+0x20>)
 8008636:	f7fe fdce 	bl	80071d6 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800863a:	4905      	ldr	r1, [pc, #20]	; (8008650 <CDC_Init_FS+0x24>)
 800863c:	4803      	ldr	r0, [pc, #12]	; (800864c <CDC_Init_FS+0x20>)
 800863e:	f7fe fde8 	bl	8007212 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8008642:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8008644:	4618      	mov	r0, r3
 8008646:	bd80      	pop	{r7, pc}
 8008648:	20002bec 	.word	0x20002bec
 800864c:	200028e8 	.word	0x200028e8
 8008650:	20002bb8 	.word	0x20002bb8

08008654 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8008654:	b480      	push	{r7}
 8008656:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8008658:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800865a:	4618      	mov	r0, r3
 800865c:	46bd      	mov	sp, r7
 800865e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008662:	4770      	bx	lr

08008664 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8008664:	b480      	push	{r7}
 8008666:	b083      	sub	sp, #12
 8008668:	af00      	add	r7, sp, #0
 800866a:	4603      	mov	r3, r0
 800866c:	6039      	str	r1, [r7, #0]
 800866e:	71fb      	strb	r3, [r7, #7]
 8008670:	4613      	mov	r3, r2
 8008672:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8008674:	79fb      	ldrb	r3, [r7, #7]
 8008676:	2b23      	cmp	r3, #35	; 0x23
 8008678:	d84a      	bhi.n	8008710 <CDC_Control_FS+0xac>
 800867a:	a201      	add	r2, pc, #4	; (adr r2, 8008680 <CDC_Control_FS+0x1c>)
 800867c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008680:	08008711 	.word	0x08008711
 8008684:	08008711 	.word	0x08008711
 8008688:	08008711 	.word	0x08008711
 800868c:	08008711 	.word	0x08008711
 8008690:	08008711 	.word	0x08008711
 8008694:	08008711 	.word	0x08008711
 8008698:	08008711 	.word	0x08008711
 800869c:	08008711 	.word	0x08008711
 80086a0:	08008711 	.word	0x08008711
 80086a4:	08008711 	.word	0x08008711
 80086a8:	08008711 	.word	0x08008711
 80086ac:	08008711 	.word	0x08008711
 80086b0:	08008711 	.word	0x08008711
 80086b4:	08008711 	.word	0x08008711
 80086b8:	08008711 	.word	0x08008711
 80086bc:	08008711 	.word	0x08008711
 80086c0:	08008711 	.word	0x08008711
 80086c4:	08008711 	.word	0x08008711
 80086c8:	08008711 	.word	0x08008711
 80086cc:	08008711 	.word	0x08008711
 80086d0:	08008711 	.word	0x08008711
 80086d4:	08008711 	.word	0x08008711
 80086d8:	08008711 	.word	0x08008711
 80086dc:	08008711 	.word	0x08008711
 80086e0:	08008711 	.word	0x08008711
 80086e4:	08008711 	.word	0x08008711
 80086e8:	08008711 	.word	0x08008711
 80086ec:	08008711 	.word	0x08008711
 80086f0:	08008711 	.word	0x08008711
 80086f4:	08008711 	.word	0x08008711
 80086f8:	08008711 	.word	0x08008711
 80086fc:	08008711 	.word	0x08008711
 8008700:	08008711 	.word	0x08008711
 8008704:	08008711 	.word	0x08008711
 8008708:	08008711 	.word	0x08008711
 800870c:	08008711 	.word	0x08008711
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8008710:	bf00      	nop
  }

  return (USBD_OK);
 8008712:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8008714:	4618      	mov	r0, r3
 8008716:	370c      	adds	r7, #12
 8008718:	46bd      	mov	sp, r7
 800871a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800871e:	4770      	bx	lr

08008720 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8008720:	b580      	push	{r7, lr}
 8008722:	b082      	sub	sp, #8
 8008724:	af00      	add	r7, sp, #0
 8008726:	6078      	str	r0, [r7, #4]
 8008728:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800872a:	6879      	ldr	r1, [r7, #4]
 800872c:	4808      	ldr	r0, [pc, #32]	; (8008750 <CDC_Receive_FS+0x30>)
 800872e:	f7fe fd70 	bl	8007212 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8008732:	4807      	ldr	r0, [pc, #28]	; (8008750 <CDC_Receive_FS+0x30>)
 8008734:	f7fe fdb6 	bl	80072a4 <USBD_CDC_ReceivePacket>
  DAS_Receive_Clbk_USB(Buf, *Len);
 8008738:	683b      	ldr	r3, [r7, #0]
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	4619      	mov	r1, r3
 800873e:	6878      	ldr	r0, [r7, #4]
 8008740:	f7f7 ffd0 	bl	80006e4 <DAS_Receive_Clbk_USB>
  return (USBD_OK);
 8008744:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8008746:	4618      	mov	r0, r3
 8008748:	3708      	adds	r7, #8
 800874a:	46bd      	mov	sp, r7
 800874c:	bd80      	pop	{r7, pc}
 800874e:	bf00      	nop
 8008750:	200028e8 	.word	0x200028e8

08008754 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8008754:	b580      	push	{r7, lr}
 8008756:	b084      	sub	sp, #16
 8008758:	af00      	add	r7, sp, #0
 800875a:	6078      	str	r0, [r7, #4]
 800875c:	460b      	mov	r3, r1
 800875e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8008760:	2300      	movs	r3, #0
 8008762:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8008764:	4b0d      	ldr	r3, [pc, #52]	; (800879c <CDC_Transmit_FS+0x48>)
 8008766:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800876a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800876c:	68bb      	ldr	r3, [r7, #8]
 800876e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008772:	2b00      	cmp	r3, #0
 8008774:	d001      	beq.n	800877a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8008776:	2301      	movs	r3, #1
 8008778:	e00b      	b.n	8008792 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800877a:	887b      	ldrh	r3, [r7, #2]
 800877c:	461a      	mov	r2, r3
 800877e:	6879      	ldr	r1, [r7, #4]
 8008780:	4806      	ldr	r0, [pc, #24]	; (800879c <CDC_Transmit_FS+0x48>)
 8008782:	f7fe fd28 	bl	80071d6 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8008786:	4805      	ldr	r0, [pc, #20]	; (800879c <CDC_Transmit_FS+0x48>)
 8008788:	f7fe fd5c 	bl	8007244 <USBD_CDC_TransmitPacket>
 800878c:	4603      	mov	r3, r0
 800878e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8008790:	7bfb      	ldrb	r3, [r7, #15]
}
 8008792:	4618      	mov	r0, r3
 8008794:	3710      	adds	r7, #16
 8008796:	46bd      	mov	sp, r7
 8008798:	bd80      	pop	{r7, pc}
 800879a:	bf00      	nop
 800879c:	200028e8 	.word	0x200028e8

080087a0 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80087a0:	b580      	push	{r7, lr}
 80087a2:	b086      	sub	sp, #24
 80087a4:	af00      	add	r7, sp, #0
 80087a6:	60f8      	str	r0, [r7, #12]
 80087a8:	60b9      	str	r1, [r7, #8]
 80087aa:	4613      	mov	r3, r2
 80087ac:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80087ae:	2300      	movs	r3, #0
 80087b0:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  result = DAS_Transmit_Clbk_USB();
 80087b2:	f7f7 ffa9 	bl	8000708 <DAS_Transmit_Clbk_USB>
 80087b6:	4603      	mov	r3, r0
 80087b8:	75fb      	strb	r3, [r7, #23]
  /* USER CODE END 13 */
  return result;
 80087ba:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80087be:	4618      	mov	r0, r3
 80087c0:	3718      	adds	r7, #24
 80087c2:	46bd      	mov	sp, r7
 80087c4:	bd80      	pop	{r7, pc}
	...

080087c8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80087c8:	b480      	push	{r7}
 80087ca:	b083      	sub	sp, #12
 80087cc:	af00      	add	r7, sp, #0
 80087ce:	4603      	mov	r3, r0
 80087d0:	6039      	str	r1, [r7, #0]
 80087d2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80087d4:	683b      	ldr	r3, [r7, #0]
 80087d6:	2212      	movs	r2, #18
 80087d8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80087da:	4b03      	ldr	r3, [pc, #12]	; (80087e8 <USBD_FS_DeviceDescriptor+0x20>)
}
 80087dc:	4618      	mov	r0, r3
 80087de:	370c      	adds	r7, #12
 80087e0:	46bd      	mov	sp, r7
 80087e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087e6:	4770      	bx	lr
 80087e8:	2000014c 	.word	0x2000014c

080087ec <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80087ec:	b480      	push	{r7}
 80087ee:	b083      	sub	sp, #12
 80087f0:	af00      	add	r7, sp, #0
 80087f2:	4603      	mov	r3, r0
 80087f4:	6039      	str	r1, [r7, #0]
 80087f6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80087f8:	683b      	ldr	r3, [r7, #0]
 80087fa:	2204      	movs	r2, #4
 80087fc:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80087fe:	4b03      	ldr	r3, [pc, #12]	; (800880c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008800:	4618      	mov	r0, r3
 8008802:	370c      	adds	r7, #12
 8008804:	46bd      	mov	sp, r7
 8008806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800880a:	4770      	bx	lr
 800880c:	20000160 	.word	0x20000160

08008810 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008810:	b580      	push	{r7, lr}
 8008812:	b082      	sub	sp, #8
 8008814:	af00      	add	r7, sp, #0
 8008816:	4603      	mov	r3, r0
 8008818:	6039      	str	r1, [r7, #0]
 800881a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800881c:	79fb      	ldrb	r3, [r7, #7]
 800881e:	2b00      	cmp	r3, #0
 8008820:	d105      	bne.n	800882e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008822:	683a      	ldr	r2, [r7, #0]
 8008824:	4907      	ldr	r1, [pc, #28]	; (8008844 <USBD_FS_ProductStrDescriptor+0x34>)
 8008826:	4808      	ldr	r0, [pc, #32]	; (8008848 <USBD_FS_ProductStrDescriptor+0x38>)
 8008828:	f7ff fdef 	bl	800840a <USBD_GetString>
 800882c:	e004      	b.n	8008838 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800882e:	683a      	ldr	r2, [r7, #0]
 8008830:	4904      	ldr	r1, [pc, #16]	; (8008844 <USBD_FS_ProductStrDescriptor+0x34>)
 8008832:	4805      	ldr	r0, [pc, #20]	; (8008848 <USBD_FS_ProductStrDescriptor+0x38>)
 8008834:	f7ff fde9 	bl	800840a <USBD_GetString>
  }
  return USBD_StrDesc;
 8008838:	4b02      	ldr	r3, [pc, #8]	; (8008844 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800883a:	4618      	mov	r0, r3
 800883c:	3708      	adds	r7, #8
 800883e:	46bd      	mov	sp, r7
 8008840:	bd80      	pop	{r7, pc}
 8008842:	bf00      	nop
 8008844:	200033ec 	.word	0x200033ec
 8008848:	08009080 	.word	0x08009080

0800884c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800884c:	b580      	push	{r7, lr}
 800884e:	b082      	sub	sp, #8
 8008850:	af00      	add	r7, sp, #0
 8008852:	4603      	mov	r3, r0
 8008854:	6039      	str	r1, [r7, #0]
 8008856:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008858:	683a      	ldr	r2, [r7, #0]
 800885a:	4904      	ldr	r1, [pc, #16]	; (800886c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800885c:	4804      	ldr	r0, [pc, #16]	; (8008870 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800885e:	f7ff fdd4 	bl	800840a <USBD_GetString>
  return USBD_StrDesc;
 8008862:	4b02      	ldr	r3, [pc, #8]	; (800886c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8008864:	4618      	mov	r0, r3
 8008866:	3708      	adds	r7, #8
 8008868:	46bd      	mov	sp, r7
 800886a:	bd80      	pop	{r7, pc}
 800886c:	200033ec 	.word	0x200033ec
 8008870:	08009098 	.word	0x08009098

08008874 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008874:	b580      	push	{r7, lr}
 8008876:	b082      	sub	sp, #8
 8008878:	af00      	add	r7, sp, #0
 800887a:	4603      	mov	r3, r0
 800887c:	6039      	str	r1, [r7, #0]
 800887e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008880:	683b      	ldr	r3, [r7, #0]
 8008882:	221a      	movs	r2, #26
 8008884:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8008886:	f000 f843 	bl	8008910 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800888a:	4b02      	ldr	r3, [pc, #8]	; (8008894 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800888c:	4618      	mov	r0, r3
 800888e:	3708      	adds	r7, #8
 8008890:	46bd      	mov	sp, r7
 8008892:	bd80      	pop	{r7, pc}
 8008894:	20000164 	.word	0x20000164

08008898 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008898:	b580      	push	{r7, lr}
 800889a:	b082      	sub	sp, #8
 800889c:	af00      	add	r7, sp, #0
 800889e:	4603      	mov	r3, r0
 80088a0:	6039      	str	r1, [r7, #0]
 80088a2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80088a4:	79fb      	ldrb	r3, [r7, #7]
 80088a6:	2b00      	cmp	r3, #0
 80088a8:	d105      	bne.n	80088b6 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80088aa:	683a      	ldr	r2, [r7, #0]
 80088ac:	4907      	ldr	r1, [pc, #28]	; (80088cc <USBD_FS_ConfigStrDescriptor+0x34>)
 80088ae:	4808      	ldr	r0, [pc, #32]	; (80088d0 <USBD_FS_ConfigStrDescriptor+0x38>)
 80088b0:	f7ff fdab 	bl	800840a <USBD_GetString>
 80088b4:	e004      	b.n	80088c0 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80088b6:	683a      	ldr	r2, [r7, #0]
 80088b8:	4904      	ldr	r1, [pc, #16]	; (80088cc <USBD_FS_ConfigStrDescriptor+0x34>)
 80088ba:	4805      	ldr	r0, [pc, #20]	; (80088d0 <USBD_FS_ConfigStrDescriptor+0x38>)
 80088bc:	f7ff fda5 	bl	800840a <USBD_GetString>
  }
  return USBD_StrDesc;
 80088c0:	4b02      	ldr	r3, [pc, #8]	; (80088cc <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80088c2:	4618      	mov	r0, r3
 80088c4:	3708      	adds	r7, #8
 80088c6:	46bd      	mov	sp, r7
 80088c8:	bd80      	pop	{r7, pc}
 80088ca:	bf00      	nop
 80088cc:	200033ec 	.word	0x200033ec
 80088d0:	080090ac 	.word	0x080090ac

080088d4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80088d4:	b580      	push	{r7, lr}
 80088d6:	b082      	sub	sp, #8
 80088d8:	af00      	add	r7, sp, #0
 80088da:	4603      	mov	r3, r0
 80088dc:	6039      	str	r1, [r7, #0]
 80088de:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80088e0:	79fb      	ldrb	r3, [r7, #7]
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	d105      	bne.n	80088f2 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80088e6:	683a      	ldr	r2, [r7, #0]
 80088e8:	4907      	ldr	r1, [pc, #28]	; (8008908 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80088ea:	4808      	ldr	r0, [pc, #32]	; (800890c <USBD_FS_InterfaceStrDescriptor+0x38>)
 80088ec:	f7ff fd8d 	bl	800840a <USBD_GetString>
 80088f0:	e004      	b.n	80088fc <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80088f2:	683a      	ldr	r2, [r7, #0]
 80088f4:	4904      	ldr	r1, [pc, #16]	; (8008908 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80088f6:	4805      	ldr	r0, [pc, #20]	; (800890c <USBD_FS_InterfaceStrDescriptor+0x38>)
 80088f8:	f7ff fd87 	bl	800840a <USBD_GetString>
  }
  return USBD_StrDesc;
 80088fc:	4b02      	ldr	r3, [pc, #8]	; (8008908 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80088fe:	4618      	mov	r0, r3
 8008900:	3708      	adds	r7, #8
 8008902:	46bd      	mov	sp, r7
 8008904:	bd80      	pop	{r7, pc}
 8008906:	bf00      	nop
 8008908:	200033ec 	.word	0x200033ec
 800890c:	080090b8 	.word	0x080090b8

08008910 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008910:	b580      	push	{r7, lr}
 8008912:	b084      	sub	sp, #16
 8008914:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8008916:	4b0f      	ldr	r3, [pc, #60]	; (8008954 <Get_SerialNum+0x44>)
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800891c:	4b0e      	ldr	r3, [pc, #56]	; (8008958 <Get_SerialNum+0x48>)
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8008922:	4b0e      	ldr	r3, [pc, #56]	; (800895c <Get_SerialNum+0x4c>)
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008928:	68fa      	ldr	r2, [r7, #12]
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	4413      	add	r3, r2
 800892e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008930:	68fb      	ldr	r3, [r7, #12]
 8008932:	2b00      	cmp	r3, #0
 8008934:	d009      	beq.n	800894a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8008936:	2208      	movs	r2, #8
 8008938:	4909      	ldr	r1, [pc, #36]	; (8008960 <Get_SerialNum+0x50>)
 800893a:	68f8      	ldr	r0, [r7, #12]
 800893c:	f000 f814 	bl	8008968 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008940:	2204      	movs	r2, #4
 8008942:	4908      	ldr	r1, [pc, #32]	; (8008964 <Get_SerialNum+0x54>)
 8008944:	68b8      	ldr	r0, [r7, #8]
 8008946:	f000 f80f 	bl	8008968 <IntToUnicode>
  }
}
 800894a:	bf00      	nop
 800894c:	3710      	adds	r7, #16
 800894e:	46bd      	mov	sp, r7
 8008950:	bd80      	pop	{r7, pc}
 8008952:	bf00      	nop
 8008954:	1fff7a10 	.word	0x1fff7a10
 8008958:	1fff7a14 	.word	0x1fff7a14
 800895c:	1fff7a18 	.word	0x1fff7a18
 8008960:	20000166 	.word	0x20000166
 8008964:	20000176 	.word	0x20000176

08008968 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008968:	b480      	push	{r7}
 800896a:	b087      	sub	sp, #28
 800896c:	af00      	add	r7, sp, #0
 800896e:	60f8      	str	r0, [r7, #12]
 8008970:	60b9      	str	r1, [r7, #8]
 8008972:	4613      	mov	r3, r2
 8008974:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8008976:	2300      	movs	r3, #0
 8008978:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800897a:	2300      	movs	r3, #0
 800897c:	75fb      	strb	r3, [r7, #23]
 800897e:	e027      	b.n	80089d0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	0f1b      	lsrs	r3, r3, #28
 8008984:	2b09      	cmp	r3, #9
 8008986:	d80b      	bhi.n	80089a0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008988:	68fb      	ldr	r3, [r7, #12]
 800898a:	0f1b      	lsrs	r3, r3, #28
 800898c:	b2da      	uxtb	r2, r3
 800898e:	7dfb      	ldrb	r3, [r7, #23]
 8008990:	005b      	lsls	r3, r3, #1
 8008992:	4619      	mov	r1, r3
 8008994:	68bb      	ldr	r3, [r7, #8]
 8008996:	440b      	add	r3, r1
 8008998:	3230      	adds	r2, #48	; 0x30
 800899a:	b2d2      	uxtb	r2, r2
 800899c:	701a      	strb	r2, [r3, #0]
 800899e:	e00a      	b.n	80089b6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80089a0:	68fb      	ldr	r3, [r7, #12]
 80089a2:	0f1b      	lsrs	r3, r3, #28
 80089a4:	b2da      	uxtb	r2, r3
 80089a6:	7dfb      	ldrb	r3, [r7, #23]
 80089a8:	005b      	lsls	r3, r3, #1
 80089aa:	4619      	mov	r1, r3
 80089ac:	68bb      	ldr	r3, [r7, #8]
 80089ae:	440b      	add	r3, r1
 80089b0:	3237      	adds	r2, #55	; 0x37
 80089b2:	b2d2      	uxtb	r2, r2
 80089b4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80089b6:	68fb      	ldr	r3, [r7, #12]
 80089b8:	011b      	lsls	r3, r3, #4
 80089ba:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80089bc:	7dfb      	ldrb	r3, [r7, #23]
 80089be:	005b      	lsls	r3, r3, #1
 80089c0:	3301      	adds	r3, #1
 80089c2:	68ba      	ldr	r2, [r7, #8]
 80089c4:	4413      	add	r3, r2
 80089c6:	2200      	movs	r2, #0
 80089c8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80089ca:	7dfb      	ldrb	r3, [r7, #23]
 80089cc:	3301      	adds	r3, #1
 80089ce:	75fb      	strb	r3, [r7, #23]
 80089d0:	7dfa      	ldrb	r2, [r7, #23]
 80089d2:	79fb      	ldrb	r3, [r7, #7]
 80089d4:	429a      	cmp	r2, r3
 80089d6:	d3d3      	bcc.n	8008980 <IntToUnicode+0x18>
  }
}
 80089d8:	bf00      	nop
 80089da:	bf00      	nop
 80089dc:	371c      	adds	r7, #28
 80089de:	46bd      	mov	sp, r7
 80089e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089e4:	4770      	bx	lr
	...

080089e8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80089e8:	b580      	push	{r7, lr}
 80089ea:	b08a      	sub	sp, #40	; 0x28
 80089ec:	af00      	add	r7, sp, #0
 80089ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80089f0:	f107 0314 	add.w	r3, r7, #20
 80089f4:	2200      	movs	r2, #0
 80089f6:	601a      	str	r2, [r3, #0]
 80089f8:	605a      	str	r2, [r3, #4]
 80089fa:	609a      	str	r2, [r3, #8]
 80089fc:	60da      	str	r2, [r3, #12]
 80089fe:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008a08:	d13a      	bne.n	8008a80 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008a0a:	2300      	movs	r3, #0
 8008a0c:	613b      	str	r3, [r7, #16]
 8008a0e:	4b1e      	ldr	r3, [pc, #120]	; (8008a88 <HAL_PCD_MspInit+0xa0>)
 8008a10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a12:	4a1d      	ldr	r2, [pc, #116]	; (8008a88 <HAL_PCD_MspInit+0xa0>)
 8008a14:	f043 0301 	orr.w	r3, r3, #1
 8008a18:	6313      	str	r3, [r2, #48]	; 0x30
 8008a1a:	4b1b      	ldr	r3, [pc, #108]	; (8008a88 <HAL_PCD_MspInit+0xa0>)
 8008a1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a1e:	f003 0301 	and.w	r3, r3, #1
 8008a22:	613b      	str	r3, [r7, #16]
 8008a24:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8008a26:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8008a2a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008a2c:	2302      	movs	r3, #2
 8008a2e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008a30:	2300      	movs	r3, #0
 8008a32:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008a34:	2303      	movs	r3, #3
 8008a36:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8008a38:	230a      	movs	r3, #10
 8008a3a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008a3c:	f107 0314 	add.w	r3, r7, #20
 8008a40:	4619      	mov	r1, r3
 8008a42:	4812      	ldr	r0, [pc, #72]	; (8008a8c <HAL_PCD_MspInit+0xa4>)
 8008a44:	f7f9 fd86 	bl	8002554 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8008a48:	4b0f      	ldr	r3, [pc, #60]	; (8008a88 <HAL_PCD_MspInit+0xa0>)
 8008a4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a4c:	4a0e      	ldr	r2, [pc, #56]	; (8008a88 <HAL_PCD_MspInit+0xa0>)
 8008a4e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008a52:	6353      	str	r3, [r2, #52]	; 0x34
 8008a54:	2300      	movs	r3, #0
 8008a56:	60fb      	str	r3, [r7, #12]
 8008a58:	4b0b      	ldr	r3, [pc, #44]	; (8008a88 <HAL_PCD_MspInit+0xa0>)
 8008a5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008a5c:	4a0a      	ldr	r2, [pc, #40]	; (8008a88 <HAL_PCD_MspInit+0xa0>)
 8008a5e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008a62:	6453      	str	r3, [r2, #68]	; 0x44
 8008a64:	4b08      	ldr	r3, [pc, #32]	; (8008a88 <HAL_PCD_MspInit+0xa0>)
 8008a66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008a68:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008a6c:	60fb      	str	r3, [r7, #12]
 8008a6e:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8008a70:	2200      	movs	r2, #0
 8008a72:	2100      	movs	r1, #0
 8008a74:	2043      	movs	r0, #67	; 0x43
 8008a76:	f7f9 fd36 	bl	80024e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8008a7a:	2043      	movs	r0, #67	; 0x43
 8008a7c:	f7f9 fd4f 	bl	800251e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8008a80:	bf00      	nop
 8008a82:	3728      	adds	r7, #40	; 0x28
 8008a84:	46bd      	mov	sp, r7
 8008a86:	bd80      	pop	{r7, pc}
 8008a88:	40023800 	.word	0x40023800
 8008a8c:	40020000 	.word	0x40020000

08008a90 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008a90:	b580      	push	{r7, lr}
 8008a92:	b082      	sub	sp, #8
 8008a94:	af00      	add	r7, sp, #0
 8008a96:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8008aa4:	4619      	mov	r1, r3
 8008aa6:	4610      	mov	r0, r2
 8008aa8:	f7fe fcc8 	bl	800743c <USBD_LL_SetupStage>
}
 8008aac:	bf00      	nop
 8008aae:	3708      	adds	r7, #8
 8008ab0:	46bd      	mov	sp, r7
 8008ab2:	bd80      	pop	{r7, pc}

08008ab4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008ab4:	b580      	push	{r7, lr}
 8008ab6:	b082      	sub	sp, #8
 8008ab8:	af00      	add	r7, sp, #0
 8008aba:	6078      	str	r0, [r7, #4]
 8008abc:	460b      	mov	r3, r1
 8008abe:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8008ac6:	78fa      	ldrb	r2, [r7, #3]
 8008ac8:	6879      	ldr	r1, [r7, #4]
 8008aca:	4613      	mov	r3, r2
 8008acc:	00db      	lsls	r3, r3, #3
 8008ace:	1a9b      	subs	r3, r3, r2
 8008ad0:	009b      	lsls	r3, r3, #2
 8008ad2:	440b      	add	r3, r1
 8008ad4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8008ad8:	681a      	ldr	r2, [r3, #0]
 8008ada:	78fb      	ldrb	r3, [r7, #3]
 8008adc:	4619      	mov	r1, r3
 8008ade:	f7fe fd02 	bl	80074e6 <USBD_LL_DataOutStage>
}
 8008ae2:	bf00      	nop
 8008ae4:	3708      	adds	r7, #8
 8008ae6:	46bd      	mov	sp, r7
 8008ae8:	bd80      	pop	{r7, pc}

08008aea <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008aea:	b580      	push	{r7, lr}
 8008aec:	b082      	sub	sp, #8
 8008aee:	af00      	add	r7, sp, #0
 8008af0:	6078      	str	r0, [r7, #4]
 8008af2:	460b      	mov	r3, r1
 8008af4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8008afc:	78fa      	ldrb	r2, [r7, #3]
 8008afe:	6879      	ldr	r1, [r7, #4]
 8008b00:	4613      	mov	r3, r2
 8008b02:	00db      	lsls	r3, r3, #3
 8008b04:	1a9b      	subs	r3, r3, r2
 8008b06:	009b      	lsls	r3, r3, #2
 8008b08:	440b      	add	r3, r1
 8008b0a:	3348      	adds	r3, #72	; 0x48
 8008b0c:	681a      	ldr	r2, [r3, #0]
 8008b0e:	78fb      	ldrb	r3, [r7, #3]
 8008b10:	4619      	mov	r1, r3
 8008b12:	f7fe fd4b 	bl	80075ac <USBD_LL_DataInStage>
}
 8008b16:	bf00      	nop
 8008b18:	3708      	adds	r7, #8
 8008b1a:	46bd      	mov	sp, r7
 8008b1c:	bd80      	pop	{r7, pc}

08008b1e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008b1e:	b580      	push	{r7, lr}
 8008b20:	b082      	sub	sp, #8
 8008b22:	af00      	add	r7, sp, #0
 8008b24:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008b2c:	4618      	mov	r0, r3
 8008b2e:	f7fe fe5f 	bl	80077f0 <USBD_LL_SOF>
}
 8008b32:	bf00      	nop
 8008b34:	3708      	adds	r7, #8
 8008b36:	46bd      	mov	sp, r7
 8008b38:	bd80      	pop	{r7, pc}

08008b3a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008b3a:	b580      	push	{r7, lr}
 8008b3c:	b084      	sub	sp, #16
 8008b3e:	af00      	add	r7, sp, #0
 8008b40:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8008b42:	2301      	movs	r3, #1
 8008b44:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	68db      	ldr	r3, [r3, #12]
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	d102      	bne.n	8008b54 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8008b4e:	2300      	movs	r3, #0
 8008b50:	73fb      	strb	r3, [r7, #15]
 8008b52:	e008      	b.n	8008b66 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	68db      	ldr	r3, [r3, #12]
 8008b58:	2b02      	cmp	r3, #2
 8008b5a:	d102      	bne.n	8008b62 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8008b5c:	2301      	movs	r3, #1
 8008b5e:	73fb      	strb	r3, [r7, #15]
 8008b60:	e001      	b.n	8008b66 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8008b62:	f7f8 fb7b 	bl	800125c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008b6c:	7bfa      	ldrb	r2, [r7, #15]
 8008b6e:	4611      	mov	r1, r2
 8008b70:	4618      	mov	r0, r3
 8008b72:	f7fe fdff 	bl	8007774 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008b7c:	4618      	mov	r0, r3
 8008b7e:	f7fe fdab 	bl	80076d8 <USBD_LL_Reset>
}
 8008b82:	bf00      	nop
 8008b84:	3710      	adds	r7, #16
 8008b86:	46bd      	mov	sp, r7
 8008b88:	bd80      	pop	{r7, pc}
	...

08008b8c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008b8c:	b580      	push	{r7, lr}
 8008b8e:	b082      	sub	sp, #8
 8008b90:	af00      	add	r7, sp, #0
 8008b92:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008b9a:	4618      	mov	r0, r3
 8008b9c:	f7fe fdfa 	bl	8007794 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	687a      	ldr	r2, [r7, #4]
 8008bac:	6812      	ldr	r2, [r2, #0]
 8008bae:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008bb2:	f043 0301 	orr.w	r3, r3, #1
 8008bb6:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	6a1b      	ldr	r3, [r3, #32]
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	d005      	beq.n	8008bcc <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008bc0:	4b04      	ldr	r3, [pc, #16]	; (8008bd4 <HAL_PCD_SuspendCallback+0x48>)
 8008bc2:	691b      	ldr	r3, [r3, #16]
 8008bc4:	4a03      	ldr	r2, [pc, #12]	; (8008bd4 <HAL_PCD_SuspendCallback+0x48>)
 8008bc6:	f043 0306 	orr.w	r3, r3, #6
 8008bca:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008bcc:	bf00      	nop
 8008bce:	3708      	adds	r7, #8
 8008bd0:	46bd      	mov	sp, r7
 8008bd2:	bd80      	pop	{r7, pc}
 8008bd4:	e000ed00 	.word	0xe000ed00

08008bd8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008bd8:	b580      	push	{r7, lr}
 8008bda:	b082      	sub	sp, #8
 8008bdc:	af00      	add	r7, sp, #0
 8008bde:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008be6:	4618      	mov	r0, r3
 8008be8:	f7fe fdea 	bl	80077c0 <USBD_LL_Resume>
}
 8008bec:	bf00      	nop
 8008bee:	3708      	adds	r7, #8
 8008bf0:	46bd      	mov	sp, r7
 8008bf2:	bd80      	pop	{r7, pc}

08008bf4 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008bf4:	b580      	push	{r7, lr}
 8008bf6:	b082      	sub	sp, #8
 8008bf8:	af00      	add	r7, sp, #0
 8008bfa:	6078      	str	r0, [r7, #4]
 8008bfc:	460b      	mov	r3, r1
 8008bfe:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008c06:	78fa      	ldrb	r2, [r7, #3]
 8008c08:	4611      	mov	r1, r2
 8008c0a:	4618      	mov	r0, r3
 8008c0c:	f7fe fe38 	bl	8007880 <USBD_LL_IsoOUTIncomplete>
}
 8008c10:	bf00      	nop
 8008c12:	3708      	adds	r7, #8
 8008c14:	46bd      	mov	sp, r7
 8008c16:	bd80      	pop	{r7, pc}

08008c18 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008c18:	b580      	push	{r7, lr}
 8008c1a:	b082      	sub	sp, #8
 8008c1c:	af00      	add	r7, sp, #0
 8008c1e:	6078      	str	r0, [r7, #4]
 8008c20:	460b      	mov	r3, r1
 8008c22:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008c2a:	78fa      	ldrb	r2, [r7, #3]
 8008c2c:	4611      	mov	r1, r2
 8008c2e:	4618      	mov	r0, r3
 8008c30:	f7fe fe00 	bl	8007834 <USBD_LL_IsoINIncomplete>
}
 8008c34:	bf00      	nop
 8008c36:	3708      	adds	r7, #8
 8008c38:	46bd      	mov	sp, r7
 8008c3a:	bd80      	pop	{r7, pc}

08008c3c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008c3c:	b580      	push	{r7, lr}
 8008c3e:	b082      	sub	sp, #8
 8008c40:	af00      	add	r7, sp, #0
 8008c42:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008c4a:	4618      	mov	r0, r3
 8008c4c:	f7fe fe3e 	bl	80078cc <USBD_LL_DevConnected>
}
 8008c50:	bf00      	nop
 8008c52:	3708      	adds	r7, #8
 8008c54:	46bd      	mov	sp, r7
 8008c56:	bd80      	pop	{r7, pc}

08008c58 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008c58:	b580      	push	{r7, lr}
 8008c5a:	b082      	sub	sp, #8
 8008c5c:	af00      	add	r7, sp, #0
 8008c5e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008c66:	4618      	mov	r0, r3
 8008c68:	f7fe fe3b 	bl	80078e2 <USBD_LL_DevDisconnected>
}
 8008c6c:	bf00      	nop
 8008c6e:	3708      	adds	r7, #8
 8008c70:	46bd      	mov	sp, r7
 8008c72:	bd80      	pop	{r7, pc}

08008c74 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008c74:	b580      	push	{r7, lr}
 8008c76:	b082      	sub	sp, #8
 8008c78:	af00      	add	r7, sp, #0
 8008c7a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	781b      	ldrb	r3, [r3, #0]
 8008c80:	2b00      	cmp	r3, #0
 8008c82:	d13c      	bne.n	8008cfe <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8008c84:	4a20      	ldr	r2, [pc, #128]	; (8008d08 <USBD_LL_Init+0x94>)
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	4a1e      	ldr	r2, [pc, #120]	; (8008d08 <USBD_LL_Init+0x94>)
 8008c90:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8008c94:	4b1c      	ldr	r3, [pc, #112]	; (8008d08 <USBD_LL_Init+0x94>)
 8008c96:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8008c9a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8008c9c:	4b1a      	ldr	r3, [pc, #104]	; (8008d08 <USBD_LL_Init+0x94>)
 8008c9e:	2204      	movs	r2, #4
 8008ca0:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8008ca2:	4b19      	ldr	r3, [pc, #100]	; (8008d08 <USBD_LL_Init+0x94>)
 8008ca4:	2202      	movs	r2, #2
 8008ca6:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8008ca8:	4b17      	ldr	r3, [pc, #92]	; (8008d08 <USBD_LL_Init+0x94>)
 8008caa:	2200      	movs	r2, #0
 8008cac:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8008cae:	4b16      	ldr	r3, [pc, #88]	; (8008d08 <USBD_LL_Init+0x94>)
 8008cb0:	2202      	movs	r2, #2
 8008cb2:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8008cb4:	4b14      	ldr	r3, [pc, #80]	; (8008d08 <USBD_LL_Init+0x94>)
 8008cb6:	2200      	movs	r2, #0
 8008cb8:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8008cba:	4b13      	ldr	r3, [pc, #76]	; (8008d08 <USBD_LL_Init+0x94>)
 8008cbc:	2200      	movs	r2, #0
 8008cbe:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8008cc0:	4b11      	ldr	r3, [pc, #68]	; (8008d08 <USBD_LL_Init+0x94>)
 8008cc2:	2200      	movs	r2, #0
 8008cc4:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8008cc6:	4b10      	ldr	r3, [pc, #64]	; (8008d08 <USBD_LL_Init+0x94>)
 8008cc8:	2200      	movs	r2, #0
 8008cca:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8008ccc:	4b0e      	ldr	r3, [pc, #56]	; (8008d08 <USBD_LL_Init+0x94>)
 8008cce:	2200      	movs	r2, #0
 8008cd0:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8008cd2:	480d      	ldr	r0, [pc, #52]	; (8008d08 <USBD_LL_Init+0x94>)
 8008cd4:	f7f9 fddb 	bl	800288e <HAL_PCD_Init>
 8008cd8:	4603      	mov	r3, r0
 8008cda:	2b00      	cmp	r3, #0
 8008cdc:	d001      	beq.n	8008ce2 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8008cde:	f7f8 fabd 	bl	800125c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8008ce2:	2180      	movs	r1, #128	; 0x80
 8008ce4:	4808      	ldr	r0, [pc, #32]	; (8008d08 <USBD_LL_Init+0x94>)
 8008ce6:	f7fa ff38 	bl	8003b5a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8008cea:	2240      	movs	r2, #64	; 0x40
 8008cec:	2100      	movs	r1, #0
 8008cee:	4806      	ldr	r0, [pc, #24]	; (8008d08 <USBD_LL_Init+0x94>)
 8008cf0:	f7fa feec 	bl	8003acc <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8008cf4:	2280      	movs	r2, #128	; 0x80
 8008cf6:	2101      	movs	r1, #1
 8008cf8:	4803      	ldr	r0, [pc, #12]	; (8008d08 <USBD_LL_Init+0x94>)
 8008cfa:	f7fa fee7 	bl	8003acc <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8008cfe:	2300      	movs	r3, #0
}
 8008d00:	4618      	mov	r0, r3
 8008d02:	3708      	adds	r7, #8
 8008d04:	46bd      	mov	sp, r7
 8008d06:	bd80      	pop	{r7, pc}
 8008d08:	200035ec 	.word	0x200035ec

08008d0c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008d0c:	b580      	push	{r7, lr}
 8008d0e:	b084      	sub	sp, #16
 8008d10:	af00      	add	r7, sp, #0
 8008d12:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008d14:	2300      	movs	r3, #0
 8008d16:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008d18:	2300      	movs	r3, #0
 8008d1a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008d22:	4618      	mov	r0, r3
 8008d24:	f7f9 fed0 	bl	8002ac8 <HAL_PCD_Start>
 8008d28:	4603      	mov	r3, r0
 8008d2a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008d2c:	7bfb      	ldrb	r3, [r7, #15]
 8008d2e:	4618      	mov	r0, r3
 8008d30:	f000 f942 	bl	8008fb8 <USBD_Get_USB_Status>
 8008d34:	4603      	mov	r3, r0
 8008d36:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008d38:	7bbb      	ldrb	r3, [r7, #14]
}
 8008d3a:	4618      	mov	r0, r3
 8008d3c:	3710      	adds	r7, #16
 8008d3e:	46bd      	mov	sp, r7
 8008d40:	bd80      	pop	{r7, pc}

08008d42 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8008d42:	b580      	push	{r7, lr}
 8008d44:	b084      	sub	sp, #16
 8008d46:	af00      	add	r7, sp, #0
 8008d48:	6078      	str	r0, [r7, #4]
 8008d4a:	4608      	mov	r0, r1
 8008d4c:	4611      	mov	r1, r2
 8008d4e:	461a      	mov	r2, r3
 8008d50:	4603      	mov	r3, r0
 8008d52:	70fb      	strb	r3, [r7, #3]
 8008d54:	460b      	mov	r3, r1
 8008d56:	70bb      	strb	r3, [r7, #2]
 8008d58:	4613      	mov	r3, r2
 8008d5a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008d5c:	2300      	movs	r3, #0
 8008d5e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008d60:	2300      	movs	r3, #0
 8008d62:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8008d6a:	78bb      	ldrb	r3, [r7, #2]
 8008d6c:	883a      	ldrh	r2, [r7, #0]
 8008d6e:	78f9      	ldrb	r1, [r7, #3]
 8008d70:	f7fa fab4 	bl	80032dc <HAL_PCD_EP_Open>
 8008d74:	4603      	mov	r3, r0
 8008d76:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008d78:	7bfb      	ldrb	r3, [r7, #15]
 8008d7a:	4618      	mov	r0, r3
 8008d7c:	f000 f91c 	bl	8008fb8 <USBD_Get_USB_Status>
 8008d80:	4603      	mov	r3, r0
 8008d82:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008d84:	7bbb      	ldrb	r3, [r7, #14]
}
 8008d86:	4618      	mov	r0, r3
 8008d88:	3710      	adds	r7, #16
 8008d8a:	46bd      	mov	sp, r7
 8008d8c:	bd80      	pop	{r7, pc}

08008d8e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008d8e:	b580      	push	{r7, lr}
 8008d90:	b084      	sub	sp, #16
 8008d92:	af00      	add	r7, sp, #0
 8008d94:	6078      	str	r0, [r7, #4]
 8008d96:	460b      	mov	r3, r1
 8008d98:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008d9a:	2300      	movs	r3, #0
 8008d9c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008d9e:	2300      	movs	r3, #0
 8008da0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008da8:	78fa      	ldrb	r2, [r7, #3]
 8008daa:	4611      	mov	r1, r2
 8008dac:	4618      	mov	r0, r3
 8008dae:	f7fa fafd 	bl	80033ac <HAL_PCD_EP_Close>
 8008db2:	4603      	mov	r3, r0
 8008db4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008db6:	7bfb      	ldrb	r3, [r7, #15]
 8008db8:	4618      	mov	r0, r3
 8008dba:	f000 f8fd 	bl	8008fb8 <USBD_Get_USB_Status>
 8008dbe:	4603      	mov	r3, r0
 8008dc0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008dc2:	7bbb      	ldrb	r3, [r7, #14]
}
 8008dc4:	4618      	mov	r0, r3
 8008dc6:	3710      	adds	r7, #16
 8008dc8:	46bd      	mov	sp, r7
 8008dca:	bd80      	pop	{r7, pc}

08008dcc <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008dcc:	b580      	push	{r7, lr}
 8008dce:	b084      	sub	sp, #16
 8008dd0:	af00      	add	r7, sp, #0
 8008dd2:	6078      	str	r0, [r7, #4]
 8008dd4:	460b      	mov	r3, r1
 8008dd6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008dd8:	2300      	movs	r3, #0
 8008dda:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008ddc:	2300      	movs	r3, #0
 8008dde:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008de6:	78fa      	ldrb	r2, [r7, #3]
 8008de8:	4611      	mov	r1, r2
 8008dea:	4618      	mov	r0, r3
 8008dec:	f7fa fbd5 	bl	800359a <HAL_PCD_EP_SetStall>
 8008df0:	4603      	mov	r3, r0
 8008df2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008df4:	7bfb      	ldrb	r3, [r7, #15]
 8008df6:	4618      	mov	r0, r3
 8008df8:	f000 f8de 	bl	8008fb8 <USBD_Get_USB_Status>
 8008dfc:	4603      	mov	r3, r0
 8008dfe:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008e00:	7bbb      	ldrb	r3, [r7, #14]
}
 8008e02:	4618      	mov	r0, r3
 8008e04:	3710      	adds	r7, #16
 8008e06:	46bd      	mov	sp, r7
 8008e08:	bd80      	pop	{r7, pc}

08008e0a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008e0a:	b580      	push	{r7, lr}
 8008e0c:	b084      	sub	sp, #16
 8008e0e:	af00      	add	r7, sp, #0
 8008e10:	6078      	str	r0, [r7, #4]
 8008e12:	460b      	mov	r3, r1
 8008e14:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008e16:	2300      	movs	r3, #0
 8008e18:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008e1a:	2300      	movs	r3, #0
 8008e1c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008e24:	78fa      	ldrb	r2, [r7, #3]
 8008e26:	4611      	mov	r1, r2
 8008e28:	4618      	mov	r0, r3
 8008e2a:	f7fa fc1a 	bl	8003662 <HAL_PCD_EP_ClrStall>
 8008e2e:	4603      	mov	r3, r0
 8008e30:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008e32:	7bfb      	ldrb	r3, [r7, #15]
 8008e34:	4618      	mov	r0, r3
 8008e36:	f000 f8bf 	bl	8008fb8 <USBD_Get_USB_Status>
 8008e3a:	4603      	mov	r3, r0
 8008e3c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008e3e:	7bbb      	ldrb	r3, [r7, #14]
}
 8008e40:	4618      	mov	r0, r3
 8008e42:	3710      	adds	r7, #16
 8008e44:	46bd      	mov	sp, r7
 8008e46:	bd80      	pop	{r7, pc}

08008e48 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008e48:	b480      	push	{r7}
 8008e4a:	b085      	sub	sp, #20
 8008e4c:	af00      	add	r7, sp, #0
 8008e4e:	6078      	str	r0, [r7, #4]
 8008e50:	460b      	mov	r3, r1
 8008e52:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008e5a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8008e5c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008e60:	2b00      	cmp	r3, #0
 8008e62:	da0b      	bge.n	8008e7c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008e64:	78fb      	ldrb	r3, [r7, #3]
 8008e66:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008e6a:	68f9      	ldr	r1, [r7, #12]
 8008e6c:	4613      	mov	r3, r2
 8008e6e:	00db      	lsls	r3, r3, #3
 8008e70:	1a9b      	subs	r3, r3, r2
 8008e72:	009b      	lsls	r3, r3, #2
 8008e74:	440b      	add	r3, r1
 8008e76:	333e      	adds	r3, #62	; 0x3e
 8008e78:	781b      	ldrb	r3, [r3, #0]
 8008e7a:	e00b      	b.n	8008e94 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8008e7c:	78fb      	ldrb	r3, [r7, #3]
 8008e7e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008e82:	68f9      	ldr	r1, [r7, #12]
 8008e84:	4613      	mov	r3, r2
 8008e86:	00db      	lsls	r3, r3, #3
 8008e88:	1a9b      	subs	r3, r3, r2
 8008e8a:	009b      	lsls	r3, r3, #2
 8008e8c:	440b      	add	r3, r1
 8008e8e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8008e92:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008e94:	4618      	mov	r0, r3
 8008e96:	3714      	adds	r7, #20
 8008e98:	46bd      	mov	sp, r7
 8008e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e9e:	4770      	bx	lr

08008ea0 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008ea0:	b580      	push	{r7, lr}
 8008ea2:	b084      	sub	sp, #16
 8008ea4:	af00      	add	r7, sp, #0
 8008ea6:	6078      	str	r0, [r7, #4]
 8008ea8:	460b      	mov	r3, r1
 8008eaa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008eac:	2300      	movs	r3, #0
 8008eae:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008eb0:	2300      	movs	r3, #0
 8008eb2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008eba:	78fa      	ldrb	r2, [r7, #3]
 8008ebc:	4611      	mov	r1, r2
 8008ebe:	4618      	mov	r0, r3
 8008ec0:	f7fa f9e7 	bl	8003292 <HAL_PCD_SetAddress>
 8008ec4:	4603      	mov	r3, r0
 8008ec6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008ec8:	7bfb      	ldrb	r3, [r7, #15]
 8008eca:	4618      	mov	r0, r3
 8008ecc:	f000 f874 	bl	8008fb8 <USBD_Get_USB_Status>
 8008ed0:	4603      	mov	r3, r0
 8008ed2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008ed4:	7bbb      	ldrb	r3, [r7, #14]
}
 8008ed6:	4618      	mov	r0, r3
 8008ed8:	3710      	adds	r7, #16
 8008eda:	46bd      	mov	sp, r7
 8008edc:	bd80      	pop	{r7, pc}

08008ede <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008ede:	b580      	push	{r7, lr}
 8008ee0:	b086      	sub	sp, #24
 8008ee2:	af00      	add	r7, sp, #0
 8008ee4:	60f8      	str	r0, [r7, #12]
 8008ee6:	607a      	str	r2, [r7, #4]
 8008ee8:	603b      	str	r3, [r7, #0]
 8008eea:	460b      	mov	r3, r1
 8008eec:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008eee:	2300      	movs	r3, #0
 8008ef0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008ef2:	2300      	movs	r3, #0
 8008ef4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8008ef6:	68fb      	ldr	r3, [r7, #12]
 8008ef8:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8008efc:	7af9      	ldrb	r1, [r7, #11]
 8008efe:	683b      	ldr	r3, [r7, #0]
 8008f00:	687a      	ldr	r2, [r7, #4]
 8008f02:	f7fa fb00 	bl	8003506 <HAL_PCD_EP_Transmit>
 8008f06:	4603      	mov	r3, r0
 8008f08:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008f0a:	7dfb      	ldrb	r3, [r7, #23]
 8008f0c:	4618      	mov	r0, r3
 8008f0e:	f000 f853 	bl	8008fb8 <USBD_Get_USB_Status>
 8008f12:	4603      	mov	r3, r0
 8008f14:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008f16:	7dbb      	ldrb	r3, [r7, #22]
}
 8008f18:	4618      	mov	r0, r3
 8008f1a:	3718      	adds	r7, #24
 8008f1c:	46bd      	mov	sp, r7
 8008f1e:	bd80      	pop	{r7, pc}

08008f20 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008f20:	b580      	push	{r7, lr}
 8008f22:	b086      	sub	sp, #24
 8008f24:	af00      	add	r7, sp, #0
 8008f26:	60f8      	str	r0, [r7, #12]
 8008f28:	607a      	str	r2, [r7, #4]
 8008f2a:	603b      	str	r3, [r7, #0]
 8008f2c:	460b      	mov	r3, r1
 8008f2e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008f30:	2300      	movs	r3, #0
 8008f32:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008f34:	2300      	movs	r3, #0
 8008f36:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008f38:	68fb      	ldr	r3, [r7, #12]
 8008f3a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8008f3e:	7af9      	ldrb	r1, [r7, #11]
 8008f40:	683b      	ldr	r3, [r7, #0]
 8008f42:	687a      	ldr	r2, [r7, #4]
 8008f44:	f7fa fa7c 	bl	8003440 <HAL_PCD_EP_Receive>
 8008f48:	4603      	mov	r3, r0
 8008f4a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008f4c:	7dfb      	ldrb	r3, [r7, #23]
 8008f4e:	4618      	mov	r0, r3
 8008f50:	f000 f832 	bl	8008fb8 <USBD_Get_USB_Status>
 8008f54:	4603      	mov	r3, r0
 8008f56:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008f58:	7dbb      	ldrb	r3, [r7, #22]
}
 8008f5a:	4618      	mov	r0, r3
 8008f5c:	3718      	adds	r7, #24
 8008f5e:	46bd      	mov	sp, r7
 8008f60:	bd80      	pop	{r7, pc}

08008f62 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008f62:	b580      	push	{r7, lr}
 8008f64:	b082      	sub	sp, #8
 8008f66:	af00      	add	r7, sp, #0
 8008f68:	6078      	str	r0, [r7, #4]
 8008f6a:	460b      	mov	r3, r1
 8008f6c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008f74:	78fa      	ldrb	r2, [r7, #3]
 8008f76:	4611      	mov	r1, r2
 8008f78:	4618      	mov	r0, r3
 8008f7a:	f7fa faac 	bl	80034d6 <HAL_PCD_EP_GetRxCount>
 8008f7e:	4603      	mov	r3, r0
}
 8008f80:	4618      	mov	r0, r3
 8008f82:	3708      	adds	r7, #8
 8008f84:	46bd      	mov	sp, r7
 8008f86:	bd80      	pop	{r7, pc}

08008f88 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8008f88:	b480      	push	{r7}
 8008f8a:	b083      	sub	sp, #12
 8008f8c:	af00      	add	r7, sp, #0
 8008f8e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8008f90:	4b03      	ldr	r3, [pc, #12]	; (8008fa0 <USBD_static_malloc+0x18>)
}
 8008f92:	4618      	mov	r0, r3
 8008f94:	370c      	adds	r7, #12
 8008f96:	46bd      	mov	sp, r7
 8008f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f9c:	4770      	bx	lr
 8008f9e:	bf00      	nop
 8008fa0:	200001a0 	.word	0x200001a0

08008fa4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8008fa4:	b480      	push	{r7}
 8008fa6:	b083      	sub	sp, #12
 8008fa8:	af00      	add	r7, sp, #0
 8008faa:	6078      	str	r0, [r7, #4]

}
 8008fac:	bf00      	nop
 8008fae:	370c      	adds	r7, #12
 8008fb0:	46bd      	mov	sp, r7
 8008fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fb6:	4770      	bx	lr

08008fb8 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008fb8:	b480      	push	{r7}
 8008fba:	b085      	sub	sp, #20
 8008fbc:	af00      	add	r7, sp, #0
 8008fbe:	4603      	mov	r3, r0
 8008fc0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008fc2:	2300      	movs	r3, #0
 8008fc4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008fc6:	79fb      	ldrb	r3, [r7, #7]
 8008fc8:	2b03      	cmp	r3, #3
 8008fca:	d817      	bhi.n	8008ffc <USBD_Get_USB_Status+0x44>
 8008fcc:	a201      	add	r2, pc, #4	; (adr r2, 8008fd4 <USBD_Get_USB_Status+0x1c>)
 8008fce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008fd2:	bf00      	nop
 8008fd4:	08008fe5 	.word	0x08008fe5
 8008fd8:	08008feb 	.word	0x08008feb
 8008fdc:	08008ff1 	.word	0x08008ff1
 8008fe0:	08008ff7 	.word	0x08008ff7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008fe4:	2300      	movs	r3, #0
 8008fe6:	73fb      	strb	r3, [r7, #15]
    break;
 8008fe8:	e00b      	b.n	8009002 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008fea:	2303      	movs	r3, #3
 8008fec:	73fb      	strb	r3, [r7, #15]
    break;
 8008fee:	e008      	b.n	8009002 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008ff0:	2301      	movs	r3, #1
 8008ff2:	73fb      	strb	r3, [r7, #15]
    break;
 8008ff4:	e005      	b.n	8009002 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008ff6:	2303      	movs	r3, #3
 8008ff8:	73fb      	strb	r3, [r7, #15]
    break;
 8008ffa:	e002      	b.n	8009002 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008ffc:	2303      	movs	r3, #3
 8008ffe:	73fb      	strb	r3, [r7, #15]
    break;
 8009000:	bf00      	nop
  }
  return usb_status;
 8009002:	7bfb      	ldrb	r3, [r7, #15]
}
 8009004:	4618      	mov	r0, r3
 8009006:	3714      	adds	r7, #20
 8009008:	46bd      	mov	sp, r7
 800900a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800900e:	4770      	bx	lr

08009010 <__libc_init_array>:
 8009010:	b570      	push	{r4, r5, r6, lr}
 8009012:	4d0d      	ldr	r5, [pc, #52]	; (8009048 <__libc_init_array+0x38>)
 8009014:	4c0d      	ldr	r4, [pc, #52]	; (800904c <__libc_init_array+0x3c>)
 8009016:	1b64      	subs	r4, r4, r5
 8009018:	10a4      	asrs	r4, r4, #2
 800901a:	2600      	movs	r6, #0
 800901c:	42a6      	cmp	r6, r4
 800901e:	d109      	bne.n	8009034 <__libc_init_array+0x24>
 8009020:	4d0b      	ldr	r5, [pc, #44]	; (8009050 <__libc_init_array+0x40>)
 8009022:	4c0c      	ldr	r4, [pc, #48]	; (8009054 <__libc_init_array+0x44>)
 8009024:	f000 f820 	bl	8009068 <_init>
 8009028:	1b64      	subs	r4, r4, r5
 800902a:	10a4      	asrs	r4, r4, #2
 800902c:	2600      	movs	r6, #0
 800902e:	42a6      	cmp	r6, r4
 8009030:	d105      	bne.n	800903e <__libc_init_array+0x2e>
 8009032:	bd70      	pop	{r4, r5, r6, pc}
 8009034:	f855 3b04 	ldr.w	r3, [r5], #4
 8009038:	4798      	blx	r3
 800903a:	3601      	adds	r6, #1
 800903c:	e7ee      	b.n	800901c <__libc_init_array+0xc>
 800903e:	f855 3b04 	ldr.w	r3, [r5], #4
 8009042:	4798      	blx	r3
 8009044:	3601      	adds	r6, #1
 8009046:	e7f2      	b.n	800902e <__libc_init_array+0x1e>
 8009048:	080090e0 	.word	0x080090e0
 800904c:	080090e0 	.word	0x080090e0
 8009050:	080090e0 	.word	0x080090e0
 8009054:	080090e4 	.word	0x080090e4

08009058 <memset>:
 8009058:	4402      	add	r2, r0
 800905a:	4603      	mov	r3, r0
 800905c:	4293      	cmp	r3, r2
 800905e:	d100      	bne.n	8009062 <memset+0xa>
 8009060:	4770      	bx	lr
 8009062:	f803 1b01 	strb.w	r1, [r3], #1
 8009066:	e7f9      	b.n	800905c <memset+0x4>

08009068 <_init>:
 8009068:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800906a:	bf00      	nop
 800906c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800906e:	bc08      	pop	{r3}
 8009070:	469e      	mov	lr, r3
 8009072:	4770      	bx	lr

08009074 <_fini>:
 8009074:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009076:	bf00      	nop
 8009078:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800907a:	bc08      	pop	{r3}
 800907c:	469e      	mov	lr, r3
 800907e:	4770      	bx	lr
