
MultimeterLoger.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009554  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  080096e8  080096e8  000196e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009740  08009740  00020180  2**0
                  CONTENTS
  4 .ARM          00000008  08009740  08009740  00019740  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009748  08009748  00020180  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009748  08009748  00019748  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800974c  0800974c  0001974c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000180  20000000  08009750  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003884  20000180  080098d0  00020180  2**2
                  ALLOC
 10 ._user_heap_stack 00000804  20003a04  080098d0  00023a04  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020180  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001bfd7  00000000  00000000  000201b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003c67  00000000  00000000  0003c187  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012d0  00000000  00000000  0003fdf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001138  00000000  00000000  000410c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001af0c  00000000  00000000  000421f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000179a7  00000000  00000000  0005d104  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009b38a  00000000  00000000  00074aab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0010fe35  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004e04  00000000  00000000  0010fe88  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000180 	.word	0x20000180
 80001b0:	00000000 	.word	0x00000000
 80001b4:	080096d0 	.word	0x080096d0

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000184 	.word	0x20000184
 80001d0:	080096d0 	.word	0x080096d0

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295
 80001e8:	f000 b96e 	b.w	80004c8 <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	9d08      	ldr	r5, [sp, #32]
 800020a:	4604      	mov	r4, r0
 800020c:	468c      	mov	ip, r1
 800020e:	2b00      	cmp	r3, #0
 8000210:	f040 8083 	bne.w	800031a <__udivmoddi4+0x116>
 8000214:	428a      	cmp	r2, r1
 8000216:	4617      	mov	r7, r2
 8000218:	d947      	bls.n	80002aa <__udivmoddi4+0xa6>
 800021a:	fab2 f282 	clz	r2, r2
 800021e:	b142      	cbz	r2, 8000232 <__udivmoddi4+0x2e>
 8000220:	f1c2 0020 	rsb	r0, r2, #32
 8000224:	fa24 f000 	lsr.w	r0, r4, r0
 8000228:	4091      	lsls	r1, r2
 800022a:	4097      	lsls	r7, r2
 800022c:	ea40 0c01 	orr.w	ip, r0, r1
 8000230:	4094      	lsls	r4, r2
 8000232:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000236:	0c23      	lsrs	r3, r4, #16
 8000238:	fbbc f6f8 	udiv	r6, ip, r8
 800023c:	fa1f fe87 	uxth.w	lr, r7
 8000240:	fb08 c116 	mls	r1, r8, r6, ip
 8000244:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000248:	fb06 f10e 	mul.w	r1, r6, lr
 800024c:	4299      	cmp	r1, r3
 800024e:	d909      	bls.n	8000264 <__udivmoddi4+0x60>
 8000250:	18fb      	adds	r3, r7, r3
 8000252:	f106 30ff 	add.w	r0, r6, #4294967295
 8000256:	f080 8119 	bcs.w	800048c <__udivmoddi4+0x288>
 800025a:	4299      	cmp	r1, r3
 800025c:	f240 8116 	bls.w	800048c <__udivmoddi4+0x288>
 8000260:	3e02      	subs	r6, #2
 8000262:	443b      	add	r3, r7
 8000264:	1a5b      	subs	r3, r3, r1
 8000266:	b2a4      	uxth	r4, r4
 8000268:	fbb3 f0f8 	udiv	r0, r3, r8
 800026c:	fb08 3310 	mls	r3, r8, r0, r3
 8000270:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000274:	fb00 fe0e 	mul.w	lr, r0, lr
 8000278:	45a6      	cmp	lr, r4
 800027a:	d909      	bls.n	8000290 <__udivmoddi4+0x8c>
 800027c:	193c      	adds	r4, r7, r4
 800027e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000282:	f080 8105 	bcs.w	8000490 <__udivmoddi4+0x28c>
 8000286:	45a6      	cmp	lr, r4
 8000288:	f240 8102 	bls.w	8000490 <__udivmoddi4+0x28c>
 800028c:	3802      	subs	r0, #2
 800028e:	443c      	add	r4, r7
 8000290:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000294:	eba4 040e 	sub.w	r4, r4, lr
 8000298:	2600      	movs	r6, #0
 800029a:	b11d      	cbz	r5, 80002a4 <__udivmoddi4+0xa0>
 800029c:	40d4      	lsrs	r4, r2
 800029e:	2300      	movs	r3, #0
 80002a0:	e9c5 4300 	strd	r4, r3, [r5]
 80002a4:	4631      	mov	r1, r6
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	b902      	cbnz	r2, 80002ae <__udivmoddi4+0xaa>
 80002ac:	deff      	udf	#255	; 0xff
 80002ae:	fab2 f282 	clz	r2, r2
 80002b2:	2a00      	cmp	r2, #0
 80002b4:	d150      	bne.n	8000358 <__udivmoddi4+0x154>
 80002b6:	1bcb      	subs	r3, r1, r7
 80002b8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002bc:	fa1f f887 	uxth.w	r8, r7
 80002c0:	2601      	movs	r6, #1
 80002c2:	fbb3 fcfe 	udiv	ip, r3, lr
 80002c6:	0c21      	lsrs	r1, r4, #16
 80002c8:	fb0e 331c 	mls	r3, lr, ip, r3
 80002cc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002d0:	fb08 f30c 	mul.w	r3, r8, ip
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d907      	bls.n	80002e8 <__udivmoddi4+0xe4>
 80002d8:	1879      	adds	r1, r7, r1
 80002da:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002de:	d202      	bcs.n	80002e6 <__udivmoddi4+0xe2>
 80002e0:	428b      	cmp	r3, r1
 80002e2:	f200 80e9 	bhi.w	80004b8 <__udivmoddi4+0x2b4>
 80002e6:	4684      	mov	ip, r0
 80002e8:	1ac9      	subs	r1, r1, r3
 80002ea:	b2a3      	uxth	r3, r4
 80002ec:	fbb1 f0fe 	udiv	r0, r1, lr
 80002f0:	fb0e 1110 	mls	r1, lr, r0, r1
 80002f4:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002f8:	fb08 f800 	mul.w	r8, r8, r0
 80002fc:	45a0      	cmp	r8, r4
 80002fe:	d907      	bls.n	8000310 <__udivmoddi4+0x10c>
 8000300:	193c      	adds	r4, r7, r4
 8000302:	f100 33ff 	add.w	r3, r0, #4294967295
 8000306:	d202      	bcs.n	800030e <__udivmoddi4+0x10a>
 8000308:	45a0      	cmp	r8, r4
 800030a:	f200 80d9 	bhi.w	80004c0 <__udivmoddi4+0x2bc>
 800030e:	4618      	mov	r0, r3
 8000310:	eba4 0408 	sub.w	r4, r4, r8
 8000314:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000318:	e7bf      	b.n	800029a <__udivmoddi4+0x96>
 800031a:	428b      	cmp	r3, r1
 800031c:	d909      	bls.n	8000332 <__udivmoddi4+0x12e>
 800031e:	2d00      	cmp	r5, #0
 8000320:	f000 80b1 	beq.w	8000486 <__udivmoddi4+0x282>
 8000324:	2600      	movs	r6, #0
 8000326:	e9c5 0100 	strd	r0, r1, [r5]
 800032a:	4630      	mov	r0, r6
 800032c:	4631      	mov	r1, r6
 800032e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000332:	fab3 f683 	clz	r6, r3
 8000336:	2e00      	cmp	r6, #0
 8000338:	d14a      	bne.n	80003d0 <__udivmoddi4+0x1cc>
 800033a:	428b      	cmp	r3, r1
 800033c:	d302      	bcc.n	8000344 <__udivmoddi4+0x140>
 800033e:	4282      	cmp	r2, r0
 8000340:	f200 80b8 	bhi.w	80004b4 <__udivmoddi4+0x2b0>
 8000344:	1a84      	subs	r4, r0, r2
 8000346:	eb61 0103 	sbc.w	r1, r1, r3
 800034a:	2001      	movs	r0, #1
 800034c:	468c      	mov	ip, r1
 800034e:	2d00      	cmp	r5, #0
 8000350:	d0a8      	beq.n	80002a4 <__udivmoddi4+0xa0>
 8000352:	e9c5 4c00 	strd	r4, ip, [r5]
 8000356:	e7a5      	b.n	80002a4 <__udivmoddi4+0xa0>
 8000358:	f1c2 0320 	rsb	r3, r2, #32
 800035c:	fa20 f603 	lsr.w	r6, r0, r3
 8000360:	4097      	lsls	r7, r2
 8000362:	fa01 f002 	lsl.w	r0, r1, r2
 8000366:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800036a:	40d9      	lsrs	r1, r3
 800036c:	4330      	orrs	r0, r6
 800036e:	0c03      	lsrs	r3, r0, #16
 8000370:	fbb1 f6fe 	udiv	r6, r1, lr
 8000374:	fa1f f887 	uxth.w	r8, r7
 8000378:	fb0e 1116 	mls	r1, lr, r6, r1
 800037c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000380:	fb06 f108 	mul.w	r1, r6, r8
 8000384:	4299      	cmp	r1, r3
 8000386:	fa04 f402 	lsl.w	r4, r4, r2
 800038a:	d909      	bls.n	80003a0 <__udivmoddi4+0x19c>
 800038c:	18fb      	adds	r3, r7, r3
 800038e:	f106 3cff 	add.w	ip, r6, #4294967295
 8000392:	f080 808d 	bcs.w	80004b0 <__udivmoddi4+0x2ac>
 8000396:	4299      	cmp	r1, r3
 8000398:	f240 808a 	bls.w	80004b0 <__udivmoddi4+0x2ac>
 800039c:	3e02      	subs	r6, #2
 800039e:	443b      	add	r3, r7
 80003a0:	1a5b      	subs	r3, r3, r1
 80003a2:	b281      	uxth	r1, r0
 80003a4:	fbb3 f0fe 	udiv	r0, r3, lr
 80003a8:	fb0e 3310 	mls	r3, lr, r0, r3
 80003ac:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003b0:	fb00 f308 	mul.w	r3, r0, r8
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d907      	bls.n	80003c8 <__udivmoddi4+0x1c4>
 80003b8:	1879      	adds	r1, r7, r1
 80003ba:	f100 3cff 	add.w	ip, r0, #4294967295
 80003be:	d273      	bcs.n	80004a8 <__udivmoddi4+0x2a4>
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d971      	bls.n	80004a8 <__udivmoddi4+0x2a4>
 80003c4:	3802      	subs	r0, #2
 80003c6:	4439      	add	r1, r7
 80003c8:	1acb      	subs	r3, r1, r3
 80003ca:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003ce:	e778      	b.n	80002c2 <__udivmoddi4+0xbe>
 80003d0:	f1c6 0c20 	rsb	ip, r6, #32
 80003d4:	fa03 f406 	lsl.w	r4, r3, r6
 80003d8:	fa22 f30c 	lsr.w	r3, r2, ip
 80003dc:	431c      	orrs	r4, r3
 80003de:	fa20 f70c 	lsr.w	r7, r0, ip
 80003e2:	fa01 f306 	lsl.w	r3, r1, r6
 80003e6:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003ea:	fa21 f10c 	lsr.w	r1, r1, ip
 80003ee:	431f      	orrs	r7, r3
 80003f0:	0c3b      	lsrs	r3, r7, #16
 80003f2:	fbb1 f9fe 	udiv	r9, r1, lr
 80003f6:	fa1f f884 	uxth.w	r8, r4
 80003fa:	fb0e 1119 	mls	r1, lr, r9, r1
 80003fe:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000402:	fb09 fa08 	mul.w	sl, r9, r8
 8000406:	458a      	cmp	sl, r1
 8000408:	fa02 f206 	lsl.w	r2, r2, r6
 800040c:	fa00 f306 	lsl.w	r3, r0, r6
 8000410:	d908      	bls.n	8000424 <__udivmoddi4+0x220>
 8000412:	1861      	adds	r1, r4, r1
 8000414:	f109 30ff 	add.w	r0, r9, #4294967295
 8000418:	d248      	bcs.n	80004ac <__udivmoddi4+0x2a8>
 800041a:	458a      	cmp	sl, r1
 800041c:	d946      	bls.n	80004ac <__udivmoddi4+0x2a8>
 800041e:	f1a9 0902 	sub.w	r9, r9, #2
 8000422:	4421      	add	r1, r4
 8000424:	eba1 010a 	sub.w	r1, r1, sl
 8000428:	b2bf      	uxth	r7, r7
 800042a:	fbb1 f0fe 	udiv	r0, r1, lr
 800042e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000432:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000436:	fb00 f808 	mul.w	r8, r0, r8
 800043a:	45b8      	cmp	r8, r7
 800043c:	d907      	bls.n	800044e <__udivmoddi4+0x24a>
 800043e:	19e7      	adds	r7, r4, r7
 8000440:	f100 31ff 	add.w	r1, r0, #4294967295
 8000444:	d22e      	bcs.n	80004a4 <__udivmoddi4+0x2a0>
 8000446:	45b8      	cmp	r8, r7
 8000448:	d92c      	bls.n	80004a4 <__udivmoddi4+0x2a0>
 800044a:	3802      	subs	r0, #2
 800044c:	4427      	add	r7, r4
 800044e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000452:	eba7 0708 	sub.w	r7, r7, r8
 8000456:	fba0 8902 	umull	r8, r9, r0, r2
 800045a:	454f      	cmp	r7, r9
 800045c:	46c6      	mov	lr, r8
 800045e:	4649      	mov	r1, r9
 8000460:	d31a      	bcc.n	8000498 <__udivmoddi4+0x294>
 8000462:	d017      	beq.n	8000494 <__udivmoddi4+0x290>
 8000464:	b15d      	cbz	r5, 800047e <__udivmoddi4+0x27a>
 8000466:	ebb3 020e 	subs.w	r2, r3, lr
 800046a:	eb67 0701 	sbc.w	r7, r7, r1
 800046e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000472:	40f2      	lsrs	r2, r6
 8000474:	ea4c 0202 	orr.w	r2, ip, r2
 8000478:	40f7      	lsrs	r7, r6
 800047a:	e9c5 2700 	strd	r2, r7, [r5]
 800047e:	2600      	movs	r6, #0
 8000480:	4631      	mov	r1, r6
 8000482:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000486:	462e      	mov	r6, r5
 8000488:	4628      	mov	r0, r5
 800048a:	e70b      	b.n	80002a4 <__udivmoddi4+0xa0>
 800048c:	4606      	mov	r6, r0
 800048e:	e6e9      	b.n	8000264 <__udivmoddi4+0x60>
 8000490:	4618      	mov	r0, r3
 8000492:	e6fd      	b.n	8000290 <__udivmoddi4+0x8c>
 8000494:	4543      	cmp	r3, r8
 8000496:	d2e5      	bcs.n	8000464 <__udivmoddi4+0x260>
 8000498:	ebb8 0e02 	subs.w	lr, r8, r2
 800049c:	eb69 0104 	sbc.w	r1, r9, r4
 80004a0:	3801      	subs	r0, #1
 80004a2:	e7df      	b.n	8000464 <__udivmoddi4+0x260>
 80004a4:	4608      	mov	r0, r1
 80004a6:	e7d2      	b.n	800044e <__udivmoddi4+0x24a>
 80004a8:	4660      	mov	r0, ip
 80004aa:	e78d      	b.n	80003c8 <__udivmoddi4+0x1c4>
 80004ac:	4681      	mov	r9, r0
 80004ae:	e7b9      	b.n	8000424 <__udivmoddi4+0x220>
 80004b0:	4666      	mov	r6, ip
 80004b2:	e775      	b.n	80003a0 <__udivmoddi4+0x19c>
 80004b4:	4630      	mov	r0, r6
 80004b6:	e74a      	b.n	800034e <__udivmoddi4+0x14a>
 80004b8:	f1ac 0c02 	sub.w	ip, ip, #2
 80004bc:	4439      	add	r1, r7
 80004be:	e713      	b.n	80002e8 <__udivmoddi4+0xe4>
 80004c0:	3802      	subs	r0, #2
 80004c2:	443c      	add	r4, r7
 80004c4:	e724      	b.n	8000310 <__udivmoddi4+0x10c>
 80004c6:	bf00      	nop

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <TESS_DAS_INIT>:

static void TESS_FILL_DASOUTPUT_BUFFER(r_buff_data_t* out_buffer);
static void TESS_DAS_ADD_SIGNAL(float signal, dtype_t dtype, float resolution);

void TESS_DAS_INIT()
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	af00      	add	r7, sp, #0

   TESS_RING_BUFFER_INIT(&TESS_RING_BUFFER);
 80004d0:	4812      	ldr	r0, [pc, #72]	; (800051c <TESS_DAS_INIT+0x50>)
 80004d2:	f000 fab5 	bl	8000a40 <TESS_RING_BUFFER_INIT>
   TESS_LOOP_CNT = 0;
 80004d6:	4b12      	ldr	r3, [pc, #72]	; (8000520 <TESS_DAS_INIT+0x54>)
 80004d8:	2200      	movs	r2, #0
 80004da:	601a      	str	r2, [r3, #0]

   /*init das buffer*/
   TESS_DASOUTPUT_BUFF.p_byte_data = &TESS_DASOUTPUT_BUFF.buff.byte0;
 80004dc:	4b11      	ldr	r3, [pc, #68]	; (8000524 <TESS_DAS_INIT+0x58>)
 80004de:	4a12      	ldr	r2, [pc, #72]	; (8000528 <TESS_DAS_INIT+0x5c>)
 80004e0:	605a      	str	r2, [r3, #4]
   for (TESS_DASOUTPUT_BUFF.filled = 0; TESS_DASOUTPUT_BUFF.filled < ACQ_BUFFER_SIZE; TESS_DASOUTPUT_BUFF.filled++)
 80004e2:	4b10      	ldr	r3, [pc, #64]	; (8000524 <TESS_DAS_INIT+0x58>)
 80004e4:	2200      	movs	r2, #0
 80004e6:	701a      	strb	r2, [r3, #0]
 80004e8:	e00c      	b.n	8000504 <TESS_DAS_INIT+0x38>
   {
      *(TESS_DASOUTPUT_BUFF.p_byte_data + TESS_DASOUTPUT_BUFF.filled) = 0;
 80004ea:	4b0e      	ldr	r3, [pc, #56]	; (8000524 <TESS_DAS_INIT+0x58>)
 80004ec:	685b      	ldr	r3, [r3, #4]
 80004ee:	4a0d      	ldr	r2, [pc, #52]	; (8000524 <TESS_DAS_INIT+0x58>)
 80004f0:	7812      	ldrb	r2, [r2, #0]
 80004f2:	4413      	add	r3, r2
 80004f4:	2200      	movs	r2, #0
 80004f6:	701a      	strb	r2, [r3, #0]
   for (TESS_DASOUTPUT_BUFF.filled = 0; TESS_DASOUTPUT_BUFF.filled < ACQ_BUFFER_SIZE; TESS_DASOUTPUT_BUFF.filled++)
 80004f8:	4b0a      	ldr	r3, [pc, #40]	; (8000524 <TESS_DAS_INIT+0x58>)
 80004fa:	781b      	ldrb	r3, [r3, #0]
 80004fc:	3301      	adds	r3, #1
 80004fe:	b2da      	uxtb	r2, r3
 8000500:	4b08      	ldr	r3, [pc, #32]	; (8000524 <TESS_DAS_INIT+0x58>)
 8000502:	701a      	strb	r2, [r3, #0]
 8000504:	4b07      	ldr	r3, [pc, #28]	; (8000524 <TESS_DAS_INIT+0x58>)
 8000506:	781b      	ldrb	r3, [r3, #0]
 8000508:	2b05      	cmp	r3, #5
 800050a:	d9ee      	bls.n	80004ea <TESS_DAS_INIT+0x1e>
   }
   TESS_DASOUTPUT_BUFF.filled = 0;
 800050c:	4b05      	ldr	r3, [pc, #20]	; (8000524 <TESS_DAS_INIT+0x58>)
 800050e:	2200      	movs	r2, #0
 8000510:	701a      	strb	r2, [r3, #0]
   Set_TessDasStates(DAS_StandBy);
 8000512:	4b06      	ldr	r3, [pc, #24]	; (800052c <TESS_DAS_INIT+0x60>)
 8000514:	2200      	movs	r2, #0
 8000516:	701a      	strb	r2, [r3, #0]
}
 8000518:	bf00      	nop
 800051a:	bd80      	pop	{r7, pc}
 800051c:	200003cc 	.word	0x200003cc
 8000520:	200027e0 	.word	0x200027e0
 8000524:	200027f0 	.word	0x200027f0
 8000528:	200027f8 	.word	0x200027f8
 800052c:	200027e4 	.word	0x200027e4

08000530 <TESS_FILL_DASOUTPUT_BUFFER>:

static void TESS_FILL_DASOUTPUT_BUFFER(r_buff_data_t* out_buffer)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	b082      	sub	sp, #8
 8000534:	af00      	add	r7, sp, #0
 8000536:	6078      	str	r0, [r7, #4]
   /* fill buffer with data*/
   TESS_DAS_ADD_SIGNAL(TESS_LOOP_CNT,uint32,1); /*0*/
 8000538:	4b10      	ldr	r3, [pc, #64]	; (800057c <TESS_FILL_DASOUTPUT_BUFFER+0x4c>)
 800053a:	681b      	ldr	r3, [r3, #0]
 800053c:	ee07 3a90 	vmov	s15, r3
 8000540:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000544:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8000548:	2004      	movs	r0, #4
 800054a:	eeb0 0a67 	vmov.f32	s0, s15
 800054e:	f000 f8e3 	bl	8000718 <TESS_DAS_ADD_SIGNAL>
   TESS_DAS_ADD_SIGNAL(Get_TessDasADC_CH_1(),uint16,1);     /*4*/
 8000552:	4b0b      	ldr	r3, [pc, #44]	; (8000580 <TESS_FILL_DASOUTPUT_BUFFER+0x50>)
 8000554:	881b      	ldrh	r3, [r3, #0]
 8000556:	ee07 3a90 	vmov	s15, r3
 800055a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800055e:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8000562:	2002      	movs	r0, #2
 8000564:	eeb0 0a67 	vmov.f32	s0, s15
 8000568:	f000 f8d6 	bl	8000718 <TESS_DAS_ADD_SIGNAL>

   /*Reset */
   TESS_DASOUTPUT_BUFF.filled = 0;
 800056c:	4b05      	ldr	r3, [pc, #20]	; (8000584 <TESS_FILL_DASOUTPUT_BUFFER+0x54>)
 800056e:	2200      	movs	r2, #0
 8000570:	701a      	strb	r2, [r3, #0]

}
 8000572:	bf00      	nop
 8000574:	3708      	adds	r7, #8
 8000576:	46bd      	mov	sp, r7
 8000578:	bd80      	pop	{r7, pc}
 800057a:	bf00      	nop
 800057c:	200027e0 	.word	0x200027e0
 8000580:	200027d6 	.word	0x200027d6
 8000584:	200027f0 	.word	0x200027f0

08000588 <TESS_DAS_MAIN>:

void TESS_DAS_MAIN()
{
 8000588:	b590      	push	{r4, r7, lr}
 800058a:	b083      	sub	sp, #12
 800058c:	af00      	add	r7, sp, #0
   /*DAS State Machine*/
   switch(Get_TessDasStates())
 800058e:	4b24      	ldr	r3, [pc, #144]	; (8000620 <TESS_DAS_MAIN+0x98>)
 8000590:	781b      	ldrb	r3, [r3, #0]
 8000592:	2b04      	cmp	r3, #4
 8000594:	d039      	beq.n	800060a <TESS_DAS_MAIN+0x82>
 8000596:	2b04      	cmp	r3, #4
 8000598:	dc3d      	bgt.n	8000616 <TESS_DAS_MAIN+0x8e>
 800059a:	2b02      	cmp	r3, #2
 800059c:	d002      	beq.n	80005a4 <TESS_DAS_MAIN+0x1c>
 800059e:	2b03      	cmp	r3, #3
 80005a0:	d023      	beq.n	80005ea <TESS_DAS_MAIN+0x62>
      Set_TessDasStates(DAS_StandBy);
      break;
   case DAS_StandBy:

   default:
      break;
 80005a2:	e038      	b.n	8000616 <TESS_DAS_MAIN+0x8e>
      TESS_FILL_DASOUTPUT_BUFFER(&TESS_DATA_ACQ_BUFFER);
 80005a4:	481f      	ldr	r0, [pc, #124]	; (8000624 <TESS_DAS_MAIN+0x9c>)
 80005a6:	f7ff ffc3 	bl	8000530 <TESS_FILL_DASOUTPUT_BUFFER>
      TESS_RING_BUFFER_PUT(&TESS_RING_BUFFER, TESS_DASOUTPUT_BUFF.buff);
 80005aa:	4b1f      	ldr	r3, [pc, #124]	; (8000628 <TESS_DAS_MAIN+0xa0>)
 80005ac:	3308      	adds	r3, #8
 80005ae:	e893 0006 	ldmia.w	r3, {r1, r2}
 80005b2:	481e      	ldr	r0, [pc, #120]	; (800062c <TESS_DAS_MAIN+0xa4>)
 80005b4:	f000 fae5 	bl	8000b82 <TESS_RING_BUFFER_PUT>
      TESS_DMA_BUFFER = TESS_RING_BUFFER_GET(&TESS_RING_BUFFER);
 80005b8:	4c1d      	ldr	r4, [pc, #116]	; (8000630 <TESS_DAS_MAIN+0xa8>)
 80005ba:	463b      	mov	r3, r7
 80005bc:	491b      	ldr	r1, [pc, #108]	; (800062c <TESS_DAS_MAIN+0xa4>)
 80005be:	4618      	mov	r0, r3
 80005c0:	f000 fa9b 	bl	8000afa <TESS_RING_BUFFER_GET>
 80005c4:	4622      	mov	r2, r4
 80005c6:	463b      	mov	r3, r7
 80005c8:	6819      	ldr	r1, [r3, #0]
 80005ca:	6011      	str	r1, [r2, #0]
 80005cc:	889b      	ldrh	r3, [r3, #4]
 80005ce:	8093      	strh	r3, [r2, #4]
      CDC_Transmit_FS((uint8_t *)&TESS_DMA_BUFFER,ACQ_BUFFER_SIZE);
 80005d0:	2106      	movs	r1, #6
 80005d2:	4817      	ldr	r0, [pc, #92]	; (8000630 <TESS_DAS_MAIN+0xa8>)
 80005d4:	f008 fbf2 	bl	8008dbc <CDC_Transmit_FS>
      TESS_LOOP_CNT++;
 80005d8:	4b16      	ldr	r3, [pc, #88]	; (8000634 <TESS_DAS_MAIN+0xac>)
 80005da:	681b      	ldr	r3, [r3, #0]
 80005dc:	3301      	adds	r3, #1
 80005de:	4a15      	ldr	r2, [pc, #84]	; (8000634 <TESS_DAS_MAIN+0xac>)
 80005e0:	6013      	str	r3, [r2, #0]
      Set_TessDasStates(DAS_KeepPacking);
 80005e2:	4b0f      	ldr	r3, [pc, #60]	; (8000620 <TESS_DAS_MAIN+0x98>)
 80005e4:	2203      	movs	r2, #3
 80005e6:	701a      	strb	r2, [r3, #0]
      break;
 80005e8:	e016      	b.n	8000618 <TESS_DAS_MAIN+0x90>
      TESS_FILL_DASOUTPUT_BUFFER(&TESS_DATA_ACQ_BUFFER);
 80005ea:	480e      	ldr	r0, [pc, #56]	; (8000624 <TESS_DAS_MAIN+0x9c>)
 80005ec:	f7ff ffa0 	bl	8000530 <TESS_FILL_DASOUTPUT_BUFFER>
      TESS_RING_BUFFER_PUT(&TESS_RING_BUFFER, TESS_DASOUTPUT_BUFF.buff);
 80005f0:	4b0d      	ldr	r3, [pc, #52]	; (8000628 <TESS_DAS_MAIN+0xa0>)
 80005f2:	3308      	adds	r3, #8
 80005f4:	e893 0006 	ldmia.w	r3, {r1, r2}
 80005f8:	480c      	ldr	r0, [pc, #48]	; (800062c <TESS_DAS_MAIN+0xa4>)
 80005fa:	f000 fac2 	bl	8000b82 <TESS_RING_BUFFER_PUT>
      TESS_LOOP_CNT++;
 80005fe:	4b0d      	ldr	r3, [pc, #52]	; (8000634 <TESS_DAS_MAIN+0xac>)
 8000600:	681b      	ldr	r3, [r3, #0]
 8000602:	3301      	adds	r3, #1
 8000604:	4a0b      	ldr	r2, [pc, #44]	; (8000634 <TESS_DAS_MAIN+0xac>)
 8000606:	6013      	str	r3, [r2, #0]
      break;
 8000608:	e006      	b.n	8000618 <TESS_DAS_MAIN+0x90>
      TESS_DAS_INIT();
 800060a:	f7ff ff5f 	bl	80004cc <TESS_DAS_INIT>
      Set_TessDasStates(DAS_StandBy);
 800060e:	4b04      	ldr	r3, [pc, #16]	; (8000620 <TESS_DAS_MAIN+0x98>)
 8000610:	2200      	movs	r2, #0
 8000612:	701a      	strb	r2, [r3, #0]
      break;
 8000614:	e000      	b.n	8000618 <TESS_DAS_MAIN+0x90>
      break;
 8000616:	bf00      	nop
   }

}
 8000618:	bf00      	nop
 800061a:	370c      	adds	r7, #12
 800061c:	46bd      	mov	sp, r7
 800061e:	bd90      	pop	{r4, r7, pc}
 8000620:	200027e4 	.word	0x200027e4
 8000624:	20002800 	.word	0x20002800
 8000628:	200027f0 	.word	0x200027f0
 800062c:	200003cc 	.word	0x200003cc
 8000630:	200027e8 	.word	0x200027e8
 8000634:	200027e0 	.word	0x200027e0

08000638 <TESS_DAS_GET_COMMANDS>:

void TESS_DAS_GET_COMMANDS(uint8_t command)
{
 8000638:	b480      	push	{r7}
 800063a:	b083      	sub	sp, #12
 800063c:	af00      	add	r7, sp, #0
 800063e:	4603      	mov	r3, r0
 8000640:	71fb      	strb	r3, [r7, #7]
   if ((command == DAS_START_MEAS) )
 8000642:	79fb      	ldrb	r3, [r7, #7]
 8000644:	2b31      	cmp	r3, #49	; 0x31
 8000646:	d107      	bne.n	8000658 <TESS_DAS_GET_COMMANDS+0x20>
   {
      if (Get_TessDasStates() == DAS_StandBy)
 8000648:	4b0d      	ldr	r3, [pc, #52]	; (8000680 <TESS_DAS_GET_COMMANDS+0x48>)
 800064a:	781b      	ldrb	r3, [r3, #0]
 800064c:	2b00      	cmp	r3, #0
 800064e:	d111      	bne.n	8000674 <TESS_DAS_GET_COMMANDS+0x3c>
      {
         Set_TessDasStates(DAS_StartMeas);
 8000650:	4b0b      	ldr	r3, [pc, #44]	; (8000680 <TESS_DAS_GET_COMMANDS+0x48>)
 8000652:	2202      	movs	r2, #2
 8000654:	701a      	strb	r2, [r3, #0]
      else
      {
         /*transition from other states forbidden*/
      }
   }
}
 8000656:	e00d      	b.n	8000674 <TESS_DAS_GET_COMMANDS+0x3c>
   else if(command == DAS_STOP_MEAS)
 8000658:	79fb      	ldrb	r3, [r7, #7]
 800065a:	2b30      	cmp	r3, #48	; 0x30
 800065c:	d10a      	bne.n	8000674 <TESS_DAS_GET_COMMANDS+0x3c>
      if ((Get_TessDasStates() == DAS_KeepPacking) || (Get_TessDasStates() == DAS_StartMeas))
 800065e:	4b08      	ldr	r3, [pc, #32]	; (8000680 <TESS_DAS_GET_COMMANDS+0x48>)
 8000660:	781b      	ldrb	r3, [r3, #0]
 8000662:	2b03      	cmp	r3, #3
 8000664:	d003      	beq.n	800066e <TESS_DAS_GET_COMMANDS+0x36>
 8000666:	4b06      	ldr	r3, [pc, #24]	; (8000680 <TESS_DAS_GET_COMMANDS+0x48>)
 8000668:	781b      	ldrb	r3, [r3, #0]
 800066a:	2b02      	cmp	r3, #2
 800066c:	d102      	bne.n	8000674 <TESS_DAS_GET_COMMANDS+0x3c>
         Set_TessDasStates(DAS_StopOfMeasurement);
 800066e:	4b04      	ldr	r3, [pc, #16]	; (8000680 <TESS_DAS_GET_COMMANDS+0x48>)
 8000670:	2204      	movs	r2, #4
 8000672:	701a      	strb	r2, [r3, #0]
}
 8000674:	bf00      	nop
 8000676:	370c      	adds	r7, #12
 8000678:	46bd      	mov	sp, r7
 800067a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800067e:	4770      	bx	lr
 8000680:	200027e4 	.word	0x200027e4

08000684 <TESS_DAS_UPDATE_UPON_TC>:

uint8_t TESS_DAS_UPDATE_UPON_TC()
{
 8000684:	b590      	push	{r4, r7, lr}
 8000686:	b085      	sub	sp, #20
 8000688:	af00      	add	r7, sp, #0
   uint8_t  usb_tx_result = USBD_OK;
 800068a:	2300      	movs	r3, #0
 800068c:	73fb      	strb	r3, [r7, #15]


   if (Get_TessDasStates() == DAS_KeepPacking)
 800068e:	4b12      	ldr	r3, [pc, #72]	; (80006d8 <TESS_DAS_UPDATE_UPON_TC+0x54>)
 8000690:	781b      	ldrb	r3, [r3, #0]
 8000692:	2b03      	cmp	r3, #3
 8000694:	d11b      	bne.n	80006ce <TESS_DAS_UPDATE_UPON_TC+0x4a>
   {
      if (!TESS_RINGBUFF_IS_EMPTY(&TESS_RING_BUFFER) )
 8000696:	4811      	ldr	r0, [pc, #68]	; (80006dc <TESS_DAS_UPDATE_UPON_TC+0x58>)
 8000698:	f000 facf 	bl	8000c3a <TESS_RINGBUFF_IS_EMPTY>
 800069c:	4603      	mov	r3, r0
 800069e:	2b00      	cmp	r3, #0
 80006a0:	d112      	bne.n	80006c8 <TESS_DAS_UPDATE_UPON_TC+0x44>
      {
         TESS_DMA_BUFFER = TESS_RING_BUFFER_GET(&TESS_RING_BUFFER);
 80006a2:	4c0f      	ldr	r4, [pc, #60]	; (80006e0 <TESS_DAS_UPDATE_UPON_TC+0x5c>)
 80006a4:	463b      	mov	r3, r7
 80006a6:	490d      	ldr	r1, [pc, #52]	; (80006dc <TESS_DAS_UPDATE_UPON_TC+0x58>)
 80006a8:	4618      	mov	r0, r3
 80006aa:	f000 fa26 	bl	8000afa <TESS_RING_BUFFER_GET>
 80006ae:	4622      	mov	r2, r4
 80006b0:	463b      	mov	r3, r7
 80006b2:	6819      	ldr	r1, [r3, #0]
 80006b4:	6011      	str	r1, [r2, #0]
 80006b6:	889b      	ldrh	r3, [r3, #4]
 80006b8:	8093      	strh	r3, [r2, #4]
         usb_tx_result =  CDC_Transmit_FS((uint8_t *)&TESS_DMA_BUFFER,ACQ_BUFFER_SIZE);
 80006ba:	2106      	movs	r1, #6
 80006bc:	4808      	ldr	r0, [pc, #32]	; (80006e0 <TESS_DAS_UPDATE_UPON_TC+0x5c>)
 80006be:	f008 fb7d 	bl	8008dbc <CDC_Transmit_FS>
 80006c2:	4603      	mov	r3, r0
 80006c4:	73fb      	strb	r3, [r7, #15]
 80006c6:	e002      	b.n	80006ce <TESS_DAS_UPDATE_UPON_TC+0x4a>
      }
      else
      {
         /*trigger another transmittion*/
         Set_TessDasStates(DAS_StartMeas);
 80006c8:	4b03      	ldr	r3, [pc, #12]	; (80006d8 <TESS_DAS_UPDATE_UPON_TC+0x54>)
 80006ca:	2202      	movs	r2, #2
 80006cc:	701a      	strb	r2, [r3, #0]
      }
   }
   return usb_tx_result;
 80006ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80006d0:	4618      	mov	r0, r3
 80006d2:	3714      	adds	r7, #20
 80006d4:	46bd      	mov	sp, r7
 80006d6:	bd90      	pop	{r4, r7, pc}
 80006d8:	200027e4 	.word	0x200027e4
 80006dc:	200003cc 	.word	0x200003cc
 80006e0:	200027e8 	.word	0x200027e8

080006e4 <DAS_Receive_Clbk_USB>:


void DAS_Receive_Clbk_USB (uint8_t* Buf, uint32_t Len)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b084      	sub	sp, #16
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	6078      	str	r0, [r7, #4]
 80006ec:	6039      	str	r1, [r7, #0]
   uint8_t  rx_char_usb = 0;
 80006ee:	2300      	movs	r3, #0
 80006f0:	73fb      	strb	r3, [r7, #15]

   rx_char_usb = Buf[0];
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	781b      	ldrb	r3, [r3, #0]
 80006f6:	73fb      	strb	r3, [r7, #15]
   TESS_DAS_GET_COMMANDS(rx_char_usb);
 80006f8:	7bfb      	ldrb	r3, [r7, #15]
 80006fa:	4618      	mov	r0, r3
 80006fc:	f7ff ff9c 	bl	8000638 <TESS_DAS_GET_COMMANDS>
}
 8000700:	bf00      	nop
 8000702:	3710      	adds	r7, #16
 8000704:	46bd      	mov	sp, r7
 8000706:	bd80      	pop	{r7, pc}

08000708 <DAS_Transmit_Clbk_USB>:

int8_t  DAS_Transmit_Clbk_USB (void)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	af00      	add	r7, sp, #0

   return TESS_DAS_UPDATE_UPON_TC();
 800070c:	f7ff ffba 	bl	8000684 <TESS_DAS_UPDATE_UPON_TC>
 8000710:	4603      	mov	r3, r0
 8000712:	b25b      	sxtb	r3, r3
}
 8000714:	4618      	mov	r0, r3
 8000716:	bd80      	pop	{r7, pc}

08000718 <TESS_DAS_ADD_SIGNAL>:


static void TESS_DAS_ADD_SIGNAL(float signal, dtype_t dtype, float resolution)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	b086      	sub	sp, #24
 800071c:	af00      	add	r7, sp, #0
 800071e:	ed87 0a03 	vstr	s0, [r7, #12]
 8000722:	4603      	mov	r3, r0
 8000724:	edc7 0a01 	vstr	s1, [r7, #4]
 8000728:	72fb      	strb	r3, [r7, #11]
   uint32_t  temp32;


   switch (dtype)
 800072a:	7afb      	ldrb	r3, [r7, #11]
 800072c:	2b05      	cmp	r3, #5
 800072e:	f200 8180 	bhi.w	8000a32 <TESS_DAS_ADD_SIGNAL+0x31a>
 8000732:	a201      	add	r2, pc, #4	; (adr r2, 8000738 <TESS_DAS_ADD_SIGNAL+0x20>)
 8000734:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000738:	08000785 	.word	0x08000785
 800073c:	08000751 	.word	0x08000751
 8000740:	080007bf 	.word	0x080007bf
 8000744:	08000829 	.word	0x08000829
 8000748:	080008a3 	.word	0x080008a3
 800074c:	08000975 	.word	0x08000975
   {
   case uint8:
      {
         *(TESS_DASOUTPUT_BUFF.p_byte_data + TESS_DASOUTPUT_BUFF.filled) = (uint8_t)signal;
 8000750:	4b86      	ldr	r3, [pc, #536]	; (800096c <TESS_DAS_ADD_SIGNAL+0x254>)
 8000752:	685b      	ldr	r3, [r3, #4]
 8000754:	4a85      	ldr	r2, [pc, #532]	; (800096c <TESS_DAS_ADD_SIGNAL+0x254>)
 8000756:	7812      	ldrb	r2, [r2, #0]
 8000758:	4413      	add	r3, r2
 800075a:	edd7 7a03 	vldr	s15, [r7, #12]
 800075e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000762:	edc7 7a00 	vstr	s15, [r7]
 8000766:	683a      	ldr	r2, [r7, #0]
 8000768:	b2d2      	uxtb	r2, r2
 800076a:	701a      	strb	r2, [r3, #0]
         TESS_DASOUTPUT_BUFF.filled = TESS_BUFF_IDX_INC(TESS_DASOUTPUT_BUFF.filled, ACQ_BUFFER_SIZE);
 800076c:	4b7f      	ldr	r3, [pc, #508]	; (800096c <TESS_DAS_ADD_SIGNAL+0x254>)
 800076e:	781b      	ldrb	r3, [r3, #0]
 8000770:	b29b      	uxth	r3, r3
 8000772:	2106      	movs	r1, #6
 8000774:	4618      	mov	r0, r3
 8000776:	f000 fa71 	bl	8000c5c <TESS_BUFF_IDX_INC>
 800077a:	4603      	mov	r3, r0
 800077c:	b2da      	uxtb	r2, r3
 800077e:	4b7b      	ldr	r3, [pc, #492]	; (800096c <TESS_DAS_ADD_SIGNAL+0x254>)
 8000780:	701a      	strb	r2, [r3, #0]
      }
      break;
 8000782:	e156      	b.n	8000a32 <TESS_DAS_ADD_SIGNAL+0x31a>
   case int8:
      {
         *(TESS_DASOUTPUT_BUFF.p_byte_data + TESS_DASOUTPUT_BUFF.filled) = TESS_SINT8_TO_UINT8((int8_t)signal);
 8000784:	edd7 7a03 	vldr	s15, [r7, #12]
 8000788:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800078c:	edc7 7a00 	vstr	s15, [r7]
 8000790:	683b      	ldr	r3, [r7, #0]
 8000792:	b25b      	sxtb	r3, r3
 8000794:	b2da      	uxtb	r2, r3
 8000796:	4b75      	ldr	r3, [pc, #468]	; (800096c <TESS_DAS_ADD_SIGNAL+0x254>)
 8000798:	685b      	ldr	r3, [r3, #4]
 800079a:	4974      	ldr	r1, [pc, #464]	; (800096c <TESS_DAS_ADD_SIGNAL+0x254>)
 800079c:	7809      	ldrb	r1, [r1, #0]
 800079e:	440b      	add	r3, r1
 80007a0:	3a80      	subs	r2, #128	; 0x80
 80007a2:	b2d2      	uxtb	r2, r2
 80007a4:	701a      	strb	r2, [r3, #0]
         TESS_DASOUTPUT_BUFF.filled = TESS_BUFF_IDX_INC(TESS_DASOUTPUT_BUFF.filled, ACQ_BUFFER_SIZE);
 80007a6:	4b71      	ldr	r3, [pc, #452]	; (800096c <TESS_DAS_ADD_SIGNAL+0x254>)
 80007a8:	781b      	ldrb	r3, [r3, #0]
 80007aa:	b29b      	uxth	r3, r3
 80007ac:	2106      	movs	r1, #6
 80007ae:	4618      	mov	r0, r3
 80007b0:	f000 fa54 	bl	8000c5c <TESS_BUFF_IDX_INC>
 80007b4:	4603      	mov	r3, r0
 80007b6:	b2da      	uxtb	r2, r3
 80007b8:	4b6c      	ldr	r3, [pc, #432]	; (800096c <TESS_DAS_ADD_SIGNAL+0x254>)
 80007ba:	701a      	strb	r2, [r3, #0]
      }
      break;
 80007bc:	e139      	b.n	8000a32 <TESS_DAS_ADD_SIGNAL+0x31a>
   case uint16:
      {
         *(TESS_DASOUTPUT_BUFF.p_byte_data + TESS_DASOUTPUT_BUFF.filled) = ((uint16_t)(signal)&0x00FF);
 80007be:	edd7 7a03 	vldr	s15, [r7, #12]
 80007c2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80007c6:	ee17 3a90 	vmov	r3, s15
 80007ca:	b299      	uxth	r1, r3
 80007cc:	4b67      	ldr	r3, [pc, #412]	; (800096c <TESS_DAS_ADD_SIGNAL+0x254>)
 80007ce:	685b      	ldr	r3, [r3, #4]
 80007d0:	4a66      	ldr	r2, [pc, #408]	; (800096c <TESS_DAS_ADD_SIGNAL+0x254>)
 80007d2:	7812      	ldrb	r2, [r2, #0]
 80007d4:	4413      	add	r3, r2
 80007d6:	b2ca      	uxtb	r2, r1
 80007d8:	701a      	strb	r2, [r3, #0]
         TESS_DASOUTPUT_BUFF.filled = TESS_BUFF_IDX_INC(TESS_DASOUTPUT_BUFF.filled, ACQ_BUFFER_SIZE);
 80007da:	4b64      	ldr	r3, [pc, #400]	; (800096c <TESS_DAS_ADD_SIGNAL+0x254>)
 80007dc:	781b      	ldrb	r3, [r3, #0]
 80007de:	b29b      	uxth	r3, r3
 80007e0:	2106      	movs	r1, #6
 80007e2:	4618      	mov	r0, r3
 80007e4:	f000 fa3a 	bl	8000c5c <TESS_BUFF_IDX_INC>
 80007e8:	4603      	mov	r3, r0
 80007ea:	b2da      	uxtb	r2, r3
 80007ec:	4b5f      	ldr	r3, [pc, #380]	; (800096c <TESS_DAS_ADD_SIGNAL+0x254>)
 80007ee:	701a      	strb	r2, [r3, #0]
         *(TESS_DASOUTPUT_BUFF.p_byte_data + TESS_DASOUTPUT_BUFF.filled) = ((uint16_t)(signal)&0xFF00)>>8;
 80007f0:	edd7 7a03 	vldr	s15, [r7, #12]
 80007f4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80007f8:	ee17 3a90 	vmov	r3, s15
 80007fc:	b29b      	uxth	r3, r3
 80007fe:	0a1b      	lsrs	r3, r3, #8
 8000800:	b299      	uxth	r1, r3
 8000802:	4b5a      	ldr	r3, [pc, #360]	; (800096c <TESS_DAS_ADD_SIGNAL+0x254>)
 8000804:	685b      	ldr	r3, [r3, #4]
 8000806:	4a59      	ldr	r2, [pc, #356]	; (800096c <TESS_DAS_ADD_SIGNAL+0x254>)
 8000808:	7812      	ldrb	r2, [r2, #0]
 800080a:	4413      	add	r3, r2
 800080c:	b2ca      	uxtb	r2, r1
 800080e:	701a      	strb	r2, [r3, #0]
         TESS_DASOUTPUT_BUFF.filled = TESS_BUFF_IDX_INC(TESS_DASOUTPUT_BUFF.filled, ACQ_BUFFER_SIZE);
 8000810:	4b56      	ldr	r3, [pc, #344]	; (800096c <TESS_DAS_ADD_SIGNAL+0x254>)
 8000812:	781b      	ldrb	r3, [r3, #0]
 8000814:	b29b      	uxth	r3, r3
 8000816:	2106      	movs	r1, #6
 8000818:	4618      	mov	r0, r3
 800081a:	f000 fa1f 	bl	8000c5c <TESS_BUFF_IDX_INC>
 800081e:	4603      	mov	r3, r0
 8000820:	b2da      	uxtb	r2, r3
 8000822:	4b52      	ldr	r3, [pc, #328]	; (800096c <TESS_DAS_ADD_SIGNAL+0x254>)
 8000824:	701a      	strb	r2, [r3, #0]
      }
      break;
 8000826:	e104      	b.n	8000a32 <TESS_DAS_ADD_SIGNAL+0x31a>
   case int16:
      {
         *(TESS_DASOUTPUT_BUFF.p_byte_data + TESS_DASOUTPUT_BUFF.filled) = ((TESS_SINT16_TO_UINT16(signal))&0x00FF);
 8000828:	edd7 7a03 	vldr	s15, [r7, #12]
 800082c:	ed9f 7a50 	vldr	s14, [pc, #320]	; 8000970 <TESS_DAS_ADD_SIGNAL+0x258>
 8000830:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000834:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000838:	ee17 3a90 	vmov	r3, s15
 800083c:	b299      	uxth	r1, r3
 800083e:	4b4b      	ldr	r3, [pc, #300]	; (800096c <TESS_DAS_ADD_SIGNAL+0x254>)
 8000840:	685b      	ldr	r3, [r3, #4]
 8000842:	4a4a      	ldr	r2, [pc, #296]	; (800096c <TESS_DAS_ADD_SIGNAL+0x254>)
 8000844:	7812      	ldrb	r2, [r2, #0]
 8000846:	4413      	add	r3, r2
 8000848:	b2ca      	uxtb	r2, r1
 800084a:	701a      	strb	r2, [r3, #0]
         TESS_DASOUTPUT_BUFF.filled = TESS_BUFF_IDX_INC(TESS_DASOUTPUT_BUFF.filled, ACQ_BUFFER_SIZE);
 800084c:	4b47      	ldr	r3, [pc, #284]	; (800096c <TESS_DAS_ADD_SIGNAL+0x254>)
 800084e:	781b      	ldrb	r3, [r3, #0]
 8000850:	b29b      	uxth	r3, r3
 8000852:	2106      	movs	r1, #6
 8000854:	4618      	mov	r0, r3
 8000856:	f000 fa01 	bl	8000c5c <TESS_BUFF_IDX_INC>
 800085a:	4603      	mov	r3, r0
 800085c:	b2da      	uxtb	r2, r3
 800085e:	4b43      	ldr	r3, [pc, #268]	; (800096c <TESS_DAS_ADD_SIGNAL+0x254>)
 8000860:	701a      	strb	r2, [r3, #0]
         *(TESS_DASOUTPUT_BUFF.p_byte_data + TESS_DASOUTPUT_BUFF.filled) = ((TESS_SINT16_TO_UINT16(signal))&0xFF00)>>8;
 8000862:	edd7 7a03 	vldr	s15, [r7, #12]
 8000866:	ed9f 7a42 	vldr	s14, [pc, #264]	; 8000970 <TESS_DAS_ADD_SIGNAL+0x258>
 800086a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800086e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000872:	ee17 3a90 	vmov	r3, s15
 8000876:	b29b      	uxth	r3, r3
 8000878:	0a1b      	lsrs	r3, r3, #8
 800087a:	b299      	uxth	r1, r3
 800087c:	4b3b      	ldr	r3, [pc, #236]	; (800096c <TESS_DAS_ADD_SIGNAL+0x254>)
 800087e:	685b      	ldr	r3, [r3, #4]
 8000880:	4a3a      	ldr	r2, [pc, #232]	; (800096c <TESS_DAS_ADD_SIGNAL+0x254>)
 8000882:	7812      	ldrb	r2, [r2, #0]
 8000884:	4413      	add	r3, r2
 8000886:	b2ca      	uxtb	r2, r1
 8000888:	701a      	strb	r2, [r3, #0]
         TESS_DASOUTPUT_BUFF.filled = TESS_BUFF_IDX_INC(TESS_DASOUTPUT_BUFF.filled, ACQ_BUFFER_SIZE);
 800088a:	4b38      	ldr	r3, [pc, #224]	; (800096c <TESS_DAS_ADD_SIGNAL+0x254>)
 800088c:	781b      	ldrb	r3, [r3, #0]
 800088e:	b29b      	uxth	r3, r3
 8000890:	2106      	movs	r1, #6
 8000892:	4618      	mov	r0, r3
 8000894:	f000 f9e2 	bl	8000c5c <TESS_BUFF_IDX_INC>
 8000898:	4603      	mov	r3, r0
 800089a:	b2da      	uxtb	r2, r3
 800089c:	4b33      	ldr	r3, [pc, #204]	; (800096c <TESS_DAS_ADD_SIGNAL+0x254>)
 800089e:	701a      	strb	r2, [r3, #0]
      }
      break;
 80008a0:	e0c7      	b.n	8000a32 <TESS_DAS_ADD_SIGNAL+0x31a>
   case uint32:
      {
         *(TESS_DASOUTPUT_BUFF.p_byte_data + TESS_DASOUTPUT_BUFF.filled) = (((uint32_t)(signal))&0x000000FF);
 80008a2:	edd7 7a03 	vldr	s15, [r7, #12]
 80008a6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80008aa:	edc7 7a00 	vstr	s15, [r7]
 80008ae:	4b2f      	ldr	r3, [pc, #188]	; (800096c <TESS_DAS_ADD_SIGNAL+0x254>)
 80008b0:	685b      	ldr	r3, [r3, #4]
 80008b2:	4a2e      	ldr	r2, [pc, #184]	; (800096c <TESS_DAS_ADD_SIGNAL+0x254>)
 80008b4:	7812      	ldrb	r2, [r2, #0]
 80008b6:	4413      	add	r3, r2
 80008b8:	683a      	ldr	r2, [r7, #0]
 80008ba:	b2d2      	uxtb	r2, r2
 80008bc:	701a      	strb	r2, [r3, #0]
         TESS_DASOUTPUT_BUFF.filled = TESS_BUFF_IDX_INC(TESS_DASOUTPUT_BUFF.filled, ACQ_BUFFER_SIZE);
 80008be:	4b2b      	ldr	r3, [pc, #172]	; (800096c <TESS_DAS_ADD_SIGNAL+0x254>)
 80008c0:	781b      	ldrb	r3, [r3, #0]
 80008c2:	b29b      	uxth	r3, r3
 80008c4:	2106      	movs	r1, #6
 80008c6:	4618      	mov	r0, r3
 80008c8:	f000 f9c8 	bl	8000c5c <TESS_BUFF_IDX_INC>
 80008cc:	4603      	mov	r3, r0
 80008ce:	b2da      	uxtb	r2, r3
 80008d0:	4b26      	ldr	r3, [pc, #152]	; (800096c <TESS_DAS_ADD_SIGNAL+0x254>)
 80008d2:	701a      	strb	r2, [r3, #0]
         *(TESS_DASOUTPUT_BUFF.p_byte_data + TESS_DASOUTPUT_BUFF.filled) = (((uint32_t)(signal))&0x0000FF00)>>8;
 80008d4:	edd7 7a03 	vldr	s15, [r7, #12]
 80008d8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80008dc:	ee17 3a90 	vmov	r3, s15
 80008e0:	0a19      	lsrs	r1, r3, #8
 80008e2:	4b22      	ldr	r3, [pc, #136]	; (800096c <TESS_DAS_ADD_SIGNAL+0x254>)
 80008e4:	685b      	ldr	r3, [r3, #4]
 80008e6:	4a21      	ldr	r2, [pc, #132]	; (800096c <TESS_DAS_ADD_SIGNAL+0x254>)
 80008e8:	7812      	ldrb	r2, [r2, #0]
 80008ea:	4413      	add	r3, r2
 80008ec:	b2ca      	uxtb	r2, r1
 80008ee:	701a      	strb	r2, [r3, #0]
         TESS_DASOUTPUT_BUFF.filled = TESS_BUFF_IDX_INC(TESS_DASOUTPUT_BUFF.filled, ACQ_BUFFER_SIZE);
 80008f0:	4b1e      	ldr	r3, [pc, #120]	; (800096c <TESS_DAS_ADD_SIGNAL+0x254>)
 80008f2:	781b      	ldrb	r3, [r3, #0]
 80008f4:	b29b      	uxth	r3, r3
 80008f6:	2106      	movs	r1, #6
 80008f8:	4618      	mov	r0, r3
 80008fa:	f000 f9af 	bl	8000c5c <TESS_BUFF_IDX_INC>
 80008fe:	4603      	mov	r3, r0
 8000900:	b2da      	uxtb	r2, r3
 8000902:	4b1a      	ldr	r3, [pc, #104]	; (800096c <TESS_DAS_ADD_SIGNAL+0x254>)
 8000904:	701a      	strb	r2, [r3, #0]
         *(TESS_DASOUTPUT_BUFF.p_byte_data + TESS_DASOUTPUT_BUFF.filled) = (((uint32_t)(signal))&0x00FF0000)>>16;
 8000906:	edd7 7a03 	vldr	s15, [r7, #12]
 800090a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800090e:	ee17 3a90 	vmov	r3, s15
 8000912:	0c19      	lsrs	r1, r3, #16
 8000914:	4b15      	ldr	r3, [pc, #84]	; (800096c <TESS_DAS_ADD_SIGNAL+0x254>)
 8000916:	685b      	ldr	r3, [r3, #4]
 8000918:	4a14      	ldr	r2, [pc, #80]	; (800096c <TESS_DAS_ADD_SIGNAL+0x254>)
 800091a:	7812      	ldrb	r2, [r2, #0]
 800091c:	4413      	add	r3, r2
 800091e:	b2ca      	uxtb	r2, r1
 8000920:	701a      	strb	r2, [r3, #0]
         TESS_DASOUTPUT_BUFF.filled = TESS_BUFF_IDX_INC(TESS_DASOUTPUT_BUFF.filled, ACQ_BUFFER_SIZE);
 8000922:	4b12      	ldr	r3, [pc, #72]	; (800096c <TESS_DAS_ADD_SIGNAL+0x254>)
 8000924:	781b      	ldrb	r3, [r3, #0]
 8000926:	b29b      	uxth	r3, r3
 8000928:	2106      	movs	r1, #6
 800092a:	4618      	mov	r0, r3
 800092c:	f000 f996 	bl	8000c5c <TESS_BUFF_IDX_INC>
 8000930:	4603      	mov	r3, r0
 8000932:	b2da      	uxtb	r2, r3
 8000934:	4b0d      	ldr	r3, [pc, #52]	; (800096c <TESS_DAS_ADD_SIGNAL+0x254>)
 8000936:	701a      	strb	r2, [r3, #0]
         *(TESS_DASOUTPUT_BUFF.p_byte_data + TESS_DASOUTPUT_BUFF.filled) = (((uint32_t)(signal))&0xFF000000)>>24;
 8000938:	edd7 7a03 	vldr	s15, [r7, #12]
 800093c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000940:	ee17 3a90 	vmov	r3, s15
 8000944:	0e19      	lsrs	r1, r3, #24
 8000946:	4b09      	ldr	r3, [pc, #36]	; (800096c <TESS_DAS_ADD_SIGNAL+0x254>)
 8000948:	685b      	ldr	r3, [r3, #4]
 800094a:	4a08      	ldr	r2, [pc, #32]	; (800096c <TESS_DAS_ADD_SIGNAL+0x254>)
 800094c:	7812      	ldrb	r2, [r2, #0]
 800094e:	4413      	add	r3, r2
 8000950:	b2ca      	uxtb	r2, r1
 8000952:	701a      	strb	r2, [r3, #0]
         TESS_DASOUTPUT_BUFF.filled = TESS_BUFF_IDX_INC(TESS_DASOUTPUT_BUFF.filled, ACQ_BUFFER_SIZE);
 8000954:	4b05      	ldr	r3, [pc, #20]	; (800096c <TESS_DAS_ADD_SIGNAL+0x254>)
 8000956:	781b      	ldrb	r3, [r3, #0]
 8000958:	b29b      	uxth	r3, r3
 800095a:	2106      	movs	r1, #6
 800095c:	4618      	mov	r0, r3
 800095e:	f000 f97d 	bl	8000c5c <TESS_BUFF_IDX_INC>
 8000962:	4603      	mov	r3, r0
 8000964:	b2da      	uxtb	r2, r3
 8000966:	4b01      	ldr	r3, [pc, #4]	; (800096c <TESS_DAS_ADD_SIGNAL+0x254>)
 8000968:	701a      	strb	r2, [r3, #0]
      }
      break;
 800096a:	e062      	b.n	8000a32 <TESS_DAS_ADD_SIGNAL+0x31a>
 800096c:	200027f0 	.word	0x200027f0
 8000970:	47000000 	.word	0x47000000
   case int32:      /*or float 32*/
      {
         temp32 = (int32_t)(signal*resolution);
 8000974:	ed97 7a03 	vldr	s14, [r7, #12]
 8000978:	edd7 7a01 	vldr	s15, [r7, #4]
 800097c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000980:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000984:	ee17 3a90 	vmov	r3, s15
 8000988:	617b      	str	r3, [r7, #20]
         temp32 = TESS_SINT32_TO_UINT32(temp32);
 800098a:	697b      	ldr	r3, [r7, #20]
 800098c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8000990:	617b      	str	r3, [r7, #20]
         *(TESS_DASOUTPUT_BUFF.p_byte_data + TESS_DASOUTPUT_BUFF.filled) = (temp32&0x000000FF);
 8000992:	4b2a      	ldr	r3, [pc, #168]	; (8000a3c <TESS_DAS_ADD_SIGNAL+0x324>)
 8000994:	685b      	ldr	r3, [r3, #4]
 8000996:	4a29      	ldr	r2, [pc, #164]	; (8000a3c <TESS_DAS_ADD_SIGNAL+0x324>)
 8000998:	7812      	ldrb	r2, [r2, #0]
 800099a:	4413      	add	r3, r2
 800099c:	697a      	ldr	r2, [r7, #20]
 800099e:	b2d2      	uxtb	r2, r2
 80009a0:	701a      	strb	r2, [r3, #0]
         TESS_DASOUTPUT_BUFF.filled = TESS_BUFF_IDX_INC(TESS_DASOUTPUT_BUFF.filled, ACQ_BUFFER_SIZE);
 80009a2:	4b26      	ldr	r3, [pc, #152]	; (8000a3c <TESS_DAS_ADD_SIGNAL+0x324>)
 80009a4:	781b      	ldrb	r3, [r3, #0]
 80009a6:	b29b      	uxth	r3, r3
 80009a8:	2106      	movs	r1, #6
 80009aa:	4618      	mov	r0, r3
 80009ac:	f000 f956 	bl	8000c5c <TESS_BUFF_IDX_INC>
 80009b0:	4603      	mov	r3, r0
 80009b2:	b2da      	uxtb	r2, r3
 80009b4:	4b21      	ldr	r3, [pc, #132]	; (8000a3c <TESS_DAS_ADD_SIGNAL+0x324>)
 80009b6:	701a      	strb	r2, [r3, #0]
         *(TESS_DASOUTPUT_BUFF.p_byte_data + TESS_DASOUTPUT_BUFF.filled) = (temp32&0x0000FF00)>>8;
 80009b8:	697b      	ldr	r3, [r7, #20]
 80009ba:	0a19      	lsrs	r1, r3, #8
 80009bc:	4b1f      	ldr	r3, [pc, #124]	; (8000a3c <TESS_DAS_ADD_SIGNAL+0x324>)
 80009be:	685b      	ldr	r3, [r3, #4]
 80009c0:	4a1e      	ldr	r2, [pc, #120]	; (8000a3c <TESS_DAS_ADD_SIGNAL+0x324>)
 80009c2:	7812      	ldrb	r2, [r2, #0]
 80009c4:	4413      	add	r3, r2
 80009c6:	b2ca      	uxtb	r2, r1
 80009c8:	701a      	strb	r2, [r3, #0]
         TESS_DASOUTPUT_BUFF.filled = TESS_BUFF_IDX_INC(TESS_DASOUTPUT_BUFF.filled, ACQ_BUFFER_SIZE);
 80009ca:	4b1c      	ldr	r3, [pc, #112]	; (8000a3c <TESS_DAS_ADD_SIGNAL+0x324>)
 80009cc:	781b      	ldrb	r3, [r3, #0]
 80009ce:	b29b      	uxth	r3, r3
 80009d0:	2106      	movs	r1, #6
 80009d2:	4618      	mov	r0, r3
 80009d4:	f000 f942 	bl	8000c5c <TESS_BUFF_IDX_INC>
 80009d8:	4603      	mov	r3, r0
 80009da:	b2da      	uxtb	r2, r3
 80009dc:	4b17      	ldr	r3, [pc, #92]	; (8000a3c <TESS_DAS_ADD_SIGNAL+0x324>)
 80009de:	701a      	strb	r2, [r3, #0]
         *(TESS_DASOUTPUT_BUFF.p_byte_data + TESS_DASOUTPUT_BUFF.filled) = (temp32&0x00FF0000)>>16;
 80009e0:	697b      	ldr	r3, [r7, #20]
 80009e2:	0c19      	lsrs	r1, r3, #16
 80009e4:	4b15      	ldr	r3, [pc, #84]	; (8000a3c <TESS_DAS_ADD_SIGNAL+0x324>)
 80009e6:	685b      	ldr	r3, [r3, #4]
 80009e8:	4a14      	ldr	r2, [pc, #80]	; (8000a3c <TESS_DAS_ADD_SIGNAL+0x324>)
 80009ea:	7812      	ldrb	r2, [r2, #0]
 80009ec:	4413      	add	r3, r2
 80009ee:	b2ca      	uxtb	r2, r1
 80009f0:	701a      	strb	r2, [r3, #0]
         TESS_DASOUTPUT_BUFF.filled = TESS_BUFF_IDX_INC(TESS_DASOUTPUT_BUFF.filled, ACQ_BUFFER_SIZE);
 80009f2:	4b12      	ldr	r3, [pc, #72]	; (8000a3c <TESS_DAS_ADD_SIGNAL+0x324>)
 80009f4:	781b      	ldrb	r3, [r3, #0]
 80009f6:	b29b      	uxth	r3, r3
 80009f8:	2106      	movs	r1, #6
 80009fa:	4618      	mov	r0, r3
 80009fc:	f000 f92e 	bl	8000c5c <TESS_BUFF_IDX_INC>
 8000a00:	4603      	mov	r3, r0
 8000a02:	b2da      	uxtb	r2, r3
 8000a04:	4b0d      	ldr	r3, [pc, #52]	; (8000a3c <TESS_DAS_ADD_SIGNAL+0x324>)
 8000a06:	701a      	strb	r2, [r3, #0]
         *(TESS_DASOUTPUT_BUFF.p_byte_data + TESS_DASOUTPUT_BUFF.filled) = (temp32&0xFF000000)>>24;
 8000a08:	697b      	ldr	r3, [r7, #20]
 8000a0a:	0e19      	lsrs	r1, r3, #24
 8000a0c:	4b0b      	ldr	r3, [pc, #44]	; (8000a3c <TESS_DAS_ADD_SIGNAL+0x324>)
 8000a0e:	685b      	ldr	r3, [r3, #4]
 8000a10:	4a0a      	ldr	r2, [pc, #40]	; (8000a3c <TESS_DAS_ADD_SIGNAL+0x324>)
 8000a12:	7812      	ldrb	r2, [r2, #0]
 8000a14:	4413      	add	r3, r2
 8000a16:	b2ca      	uxtb	r2, r1
 8000a18:	701a      	strb	r2, [r3, #0]
         TESS_DASOUTPUT_BUFF.filled = TESS_BUFF_IDX_INC(TESS_DASOUTPUT_BUFF.filled, ACQ_BUFFER_SIZE);
 8000a1a:	4b08      	ldr	r3, [pc, #32]	; (8000a3c <TESS_DAS_ADD_SIGNAL+0x324>)
 8000a1c:	781b      	ldrb	r3, [r3, #0]
 8000a1e:	b29b      	uxth	r3, r3
 8000a20:	2106      	movs	r1, #6
 8000a22:	4618      	mov	r0, r3
 8000a24:	f000 f91a 	bl	8000c5c <TESS_BUFF_IDX_INC>
 8000a28:	4603      	mov	r3, r0
 8000a2a:	b2da      	uxtb	r2, r3
 8000a2c:	4b03      	ldr	r3, [pc, #12]	; (8000a3c <TESS_DAS_ADD_SIGNAL+0x324>)
 8000a2e:	701a      	strb	r2, [r3, #0]
      }
      break;
 8000a30:	bf00      	nop
   }


}
 8000a32:	bf00      	nop
 8000a34:	3718      	adds	r7, #24
 8000a36:	46bd      	mov	sp, r7
 8000a38:	bd80      	pop	{r7, pc}
 8000a3a:	bf00      	nop
 8000a3c:	200027f0 	.word	0x200027f0

08000a40 <TESS_RING_BUFFER_INIT>:
#if CFG_ACQ_ON

static void DATA_COPY ( const r_buff_data_t *source, r_buff_data_t *dest);
static void FULL_BUFF_DATA(r_buff_data_t *dest);
void TESS_RING_BUFFER_INIT(ring_buffer_t * buff)
{
 8000a40:	b480      	push	{r7}
 8000a42:	b085      	sub	sp, #20
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	6078      	str	r0, [r7, #4]
   uint16_t  idx;


   buff->count         = 0;
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	809a      	strh	r2, [r3, #4]
   buff->inner_count   = 0;
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	2200      	movs	r2, #0
 8000a52:	80da      	strh	r2, [r3, #6]
   buff->head          = 0;
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	2200      	movs	r2, #0
 8000a58:	801a      	strh	r2, [r3, #0]
   buff->tail          = 0;
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	805a      	strh	r2, [r3, #2]

   for (idx = 0; idx < RBUF_SIZE; idx++)
 8000a60:	2300      	movs	r3, #0
 8000a62:	81fb      	strh	r3, [r7, #14]
 8000a64:	e03e      	b.n	8000ae4 <TESS_RING_BUFFER_INIT+0xa4>
   {
      buff->buff_data[idx].byte0 = 0;
 8000a66:	89fa      	ldrh	r2, [r7, #14]
 8000a68:	6879      	ldr	r1, [r7, #4]
 8000a6a:	4613      	mov	r3, r2
 8000a6c:	005b      	lsls	r3, r3, #1
 8000a6e:	4413      	add	r3, r2
 8000a70:	005b      	lsls	r3, r3, #1
 8000a72:	440b      	add	r3, r1
 8000a74:	330a      	adds	r3, #10
 8000a76:	2200      	movs	r2, #0
 8000a78:	701a      	strb	r2, [r3, #0]
      buff->buff_data[idx].byte1 = 0;
 8000a7a:	89fa      	ldrh	r2, [r7, #14]
 8000a7c:	6879      	ldr	r1, [r7, #4]
 8000a7e:	4613      	mov	r3, r2
 8000a80:	005b      	lsls	r3, r3, #1
 8000a82:	4413      	add	r3, r2
 8000a84:	005b      	lsls	r3, r3, #1
 8000a86:	440b      	add	r3, r1
 8000a88:	330b      	adds	r3, #11
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	701a      	strb	r2, [r3, #0]
      buff->buff_data[idx].byte2 = 0;
 8000a8e:	89fa      	ldrh	r2, [r7, #14]
 8000a90:	6879      	ldr	r1, [r7, #4]
 8000a92:	4613      	mov	r3, r2
 8000a94:	005b      	lsls	r3, r3, #1
 8000a96:	4413      	add	r3, r2
 8000a98:	005b      	lsls	r3, r3, #1
 8000a9a:	440b      	add	r3, r1
 8000a9c:	330c      	adds	r3, #12
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	701a      	strb	r2, [r3, #0]
      buff->buff_data[idx].byte3 = 0;
 8000aa2:	89fa      	ldrh	r2, [r7, #14]
 8000aa4:	6879      	ldr	r1, [r7, #4]
 8000aa6:	4613      	mov	r3, r2
 8000aa8:	005b      	lsls	r3, r3, #1
 8000aaa:	4413      	add	r3, r2
 8000aac:	005b      	lsls	r3, r3, #1
 8000aae:	440b      	add	r3, r1
 8000ab0:	330d      	adds	r3, #13
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	701a      	strb	r2, [r3, #0]
      buff->buff_data[idx].byte4 = 0;
 8000ab6:	89fa      	ldrh	r2, [r7, #14]
 8000ab8:	6879      	ldr	r1, [r7, #4]
 8000aba:	4613      	mov	r3, r2
 8000abc:	005b      	lsls	r3, r3, #1
 8000abe:	4413      	add	r3, r2
 8000ac0:	005b      	lsls	r3, r3, #1
 8000ac2:	440b      	add	r3, r1
 8000ac4:	330e      	adds	r3, #14
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	701a      	strb	r2, [r3, #0]
      buff->buff_data[idx].byte5 = 0;
 8000aca:	89fa      	ldrh	r2, [r7, #14]
 8000acc:	6879      	ldr	r1, [r7, #4]
 8000ace:	4613      	mov	r3, r2
 8000ad0:	005b      	lsls	r3, r3, #1
 8000ad2:	4413      	add	r3, r2
 8000ad4:	005b      	lsls	r3, r3, #1
 8000ad6:	440b      	add	r3, r1
 8000ad8:	330f      	adds	r3, #15
 8000ada:	2200      	movs	r2, #0
 8000adc:	701a      	strb	r2, [r3, #0]
   for (idx = 0; idx < RBUF_SIZE; idx++)
 8000ade:	89fb      	ldrh	r3, [r7, #14]
 8000ae0:	3301      	adds	r3, #1
 8000ae2:	81fb      	strh	r3, [r7, #14]
 8000ae4:	89fb      	ldrh	r3, [r7, #14]
 8000ae6:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8000aea:	d3bc      	bcc.n	8000a66 <TESS_RING_BUFFER_INIT+0x26>
   }
}
 8000aec:	bf00      	nop
 8000aee:	bf00      	nop
 8000af0:	3714      	adds	r7, #20
 8000af2:	46bd      	mov	sp, r7
 8000af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af8:	4770      	bx	lr

08000afa <TESS_RING_BUFFER_GET>:

r_buff_data_t TESS_RING_BUFFER_GET(ring_buffer_t * buff)
{
 8000afa:	b580      	push	{r7, lr}
 8000afc:	b084      	sub	sp, #16
 8000afe:	af00      	add	r7, sp, #0
 8000b00:	6078      	str	r0, [r7, #4]
 8000b02:	6039      	str	r1, [r7, #0]
   r_buff_data_t  loc_buff_data;


   if (buff->count > 0u)
 8000b04:	683b      	ldr	r3, [r7, #0]
 8000b06:	889b      	ldrh	r3, [r3, #4]
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d022      	beq.n	8000b52 <TESS_RING_BUFFER_GET+0x58>
   {
      /*copy data from the buffer to local structure*/
      DATA_COPY(&(buff->buff_data[buff->tail]), &loc_buff_data);
 8000b0c:	683b      	ldr	r3, [r7, #0]
 8000b0e:	885b      	ldrh	r3, [r3, #2]
 8000b10:	461a      	mov	r2, r3
 8000b12:	4613      	mov	r3, r2
 8000b14:	005b      	lsls	r3, r3, #1
 8000b16:	4413      	add	r3, r2
 8000b18:	005b      	lsls	r3, r3, #1
 8000b1a:	3308      	adds	r3, #8
 8000b1c:	683a      	ldr	r2, [r7, #0]
 8000b1e:	4413      	add	r3, r2
 8000b20:	3302      	adds	r3, #2
 8000b22:	f107 0208 	add.w	r2, r7, #8
 8000b26:	4611      	mov	r1, r2
 8000b28:	4618      	mov	r0, r3
 8000b2a:	f000 f8b1 	bl	8000c90 <DATA_COPY>

      buff->tail  = TESS_BUFF_IDX_INC (buff->tail, RBUF_SIZE);
 8000b2e:	683b      	ldr	r3, [r7, #0]
 8000b30:	885b      	ldrh	r3, [r3, #2]
 8000b32:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8000b36:	4618      	mov	r0, r3
 8000b38:	f000 f890 	bl	8000c5c <TESS_BUFF_IDX_INC>
 8000b3c:	4603      	mov	r3, r0
 8000b3e:	461a      	mov	r2, r3
 8000b40:	683b      	ldr	r3, [r7, #0]
 8000b42:	805a      	strh	r2, [r3, #2]
      buff->count--;
 8000b44:	683b      	ldr	r3, [r7, #0]
 8000b46:	889b      	ldrh	r3, [r3, #4]
 8000b48:	3b01      	subs	r3, #1
 8000b4a:	b29a      	uxth	r2, r3
 8000b4c:	683b      	ldr	r3, [r7, #0]
 8000b4e:	809a      	strh	r2, [r3, #4]
 8000b50:	e00b      	b.n	8000b6a <TESS_RING_BUFFER_GET+0x70>

   }
   else
   {
      /* fill buffer with dummy data*/
      loc_buff_data.byte0 = 1;
 8000b52:	2301      	movs	r3, #1
 8000b54:	723b      	strb	r3, [r7, #8]
      loc_buff_data.byte1 = 1;
 8000b56:	2301      	movs	r3, #1
 8000b58:	727b      	strb	r3, [r7, #9]
      loc_buff_data.byte2 = 1;
 8000b5a:	2301      	movs	r3, #1
 8000b5c:	72bb      	strb	r3, [r7, #10]
      loc_buff_data.byte3 = 1;
 8000b5e:	2301      	movs	r3, #1
 8000b60:	72fb      	strb	r3, [r7, #11]
      loc_buff_data.byte4 = 1;
 8000b62:	2301      	movs	r3, #1
 8000b64:	733b      	strb	r3, [r7, #12]
      loc_buff_data.byte5 = 1;
 8000b66:	2301      	movs	r3, #1
 8000b68:	737b      	strb	r3, [r7, #13]
   }

   /*return the entire structure at once*/
   return (loc_buff_data);
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	461a      	mov	r2, r3
 8000b6e:	f107 0308 	add.w	r3, r7, #8
 8000b72:	6818      	ldr	r0, [r3, #0]
 8000b74:	6010      	str	r0, [r2, #0]
 8000b76:	889b      	ldrh	r3, [r3, #4]
 8000b78:	8093      	strh	r3, [r2, #4]
}
 8000b7a:	6878      	ldr	r0, [r7, #4]
 8000b7c:	3710      	adds	r7, #16
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	bd80      	pop	{r7, pc}

08000b82 <TESS_RING_BUFFER_PUT>:

void TESS_RING_BUFFER_PUT(ring_buffer_t * buff, r_buff_data_t data)
{
 8000b82:	b580      	push	{r7, lr}
 8000b84:	b084      	sub	sp, #16
 8000b86:	af00      	add	r7, sp, #0
 8000b88:	60f8      	str	r0, [r7, #12]
 8000b8a:	1d3b      	adds	r3, r7, #4
 8000b8c:	e883 0006 	stmia.w	r3, {r1, r2}

   if (buff->count < RBUF_SIZE)
 8000b90:	68fb      	ldr	r3, [r7, #12]
 8000b92:	889b      	ldrh	r3, [r3, #4]
 8000b94:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8000b98:	d221      	bcs.n	8000bde <TESS_RING_BUFFER_PUT+0x5c>
   {
      DATA_COPY(&data, &(buff->buff_data[buff->head]));    /* copy received data to the buffer */
 8000b9a:	68fb      	ldr	r3, [r7, #12]
 8000b9c:	881b      	ldrh	r3, [r3, #0]
 8000b9e:	461a      	mov	r2, r3
 8000ba0:	4613      	mov	r3, r2
 8000ba2:	005b      	lsls	r3, r3, #1
 8000ba4:	4413      	add	r3, r2
 8000ba6:	005b      	lsls	r3, r3, #1
 8000ba8:	3308      	adds	r3, #8
 8000baa:	68fa      	ldr	r2, [r7, #12]
 8000bac:	4413      	add	r3, r2
 8000bae:	1c9a      	adds	r2, r3, #2
 8000bb0:	1d3b      	adds	r3, r7, #4
 8000bb2:	4611      	mov	r1, r2
 8000bb4:	4618      	mov	r0, r3
 8000bb6:	f000 f86b 	bl	8000c90 <DATA_COPY>

      buff->head = TESS_BUFF_IDX_INC (buff->head, RBUF_SIZE);
 8000bba:	68fb      	ldr	r3, [r7, #12]
 8000bbc:	881b      	ldrh	r3, [r3, #0]
 8000bbe:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	f000 f84a 	bl	8000c5c <TESS_BUFF_IDX_INC>
 8000bc8:	4603      	mov	r3, r0
 8000bca:	461a      	mov	r2, r3
 8000bcc:	68fb      	ldr	r3, [r7, #12]
 8000bce:	801a      	strh	r2, [r3, #0]
      buff->count++;
 8000bd0:	68fb      	ldr	r3, [r7, #12]
 8000bd2:	889b      	ldrh	r3, [r3, #4]
 8000bd4:	3301      	adds	r3, #1
 8000bd6:	b29a      	uxth	r2, r3
 8000bd8:	68fb      	ldr	r3, [r7, #12]
 8000bda:	809a      	strh	r2, [r3, #4]
      DATA_COPY(&data, &(buff->buff_data[buff->head]));    /* copy received data to the buffer */
      buff->head = TESS_BUFF_IDX_INC (buff->head, RBUF_SIZE);

      /*count will remain constant*/
   }
}
 8000bdc:	e029      	b.n	8000c32 <TESS_RING_BUFFER_PUT+0xb0>
      buff->tail = TESS_BUFF_IDX_INC (buff->tail, RBUF_SIZE);
 8000bde:	68fb      	ldr	r3, [r7, #12]
 8000be0:	885b      	ldrh	r3, [r3, #2]
 8000be2:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8000be6:	4618      	mov	r0, r3
 8000be8:	f000 f838 	bl	8000c5c <TESS_BUFF_IDX_INC>
 8000bec:	4603      	mov	r3, r0
 8000bee:	461a      	mov	r2, r3
 8000bf0:	68fb      	ldr	r3, [r7, #12]
 8000bf2:	805a      	strh	r2, [r3, #2]
      FULL_BUFF_DATA(&data);
 8000bf4:	1d3b      	adds	r3, r7, #4
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	f000 f86d 	bl	8000cd6 <FULL_BUFF_DATA>
      DATA_COPY(&data, &(buff->buff_data[buff->head]));    /* copy received data to the buffer */
 8000bfc:	68fb      	ldr	r3, [r7, #12]
 8000bfe:	881b      	ldrh	r3, [r3, #0]
 8000c00:	461a      	mov	r2, r3
 8000c02:	4613      	mov	r3, r2
 8000c04:	005b      	lsls	r3, r3, #1
 8000c06:	4413      	add	r3, r2
 8000c08:	005b      	lsls	r3, r3, #1
 8000c0a:	3308      	adds	r3, #8
 8000c0c:	68fa      	ldr	r2, [r7, #12]
 8000c0e:	4413      	add	r3, r2
 8000c10:	1c9a      	adds	r2, r3, #2
 8000c12:	1d3b      	adds	r3, r7, #4
 8000c14:	4611      	mov	r1, r2
 8000c16:	4618      	mov	r0, r3
 8000c18:	f000 f83a 	bl	8000c90 <DATA_COPY>
      buff->head = TESS_BUFF_IDX_INC (buff->head, RBUF_SIZE);
 8000c1c:	68fb      	ldr	r3, [r7, #12]
 8000c1e:	881b      	ldrh	r3, [r3, #0]
 8000c20:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8000c24:	4618      	mov	r0, r3
 8000c26:	f000 f819 	bl	8000c5c <TESS_BUFF_IDX_INC>
 8000c2a:	4603      	mov	r3, r0
 8000c2c:	461a      	mov	r2, r3
 8000c2e:	68fb      	ldr	r3, [r7, #12]
 8000c30:	801a      	strh	r2, [r3, #0]
}
 8000c32:	bf00      	nop
 8000c34:	3710      	adds	r7, #16
 8000c36:	46bd      	mov	sp, r7
 8000c38:	bd80      	pop	{r7, pc}

08000c3a <TESS_RINGBUFF_IS_EMPTY>:

uint8_t TESS_RINGBUFF_IS_EMPTY( const ring_buffer_t * buff)
{
 8000c3a:	b480      	push	{r7}
 8000c3c:	b083      	sub	sp, #12
 8000c3e:	af00      	add	r7, sp, #0
 8000c40:	6078      	str	r0, [r7, #4]
   return (buff->count == 0);
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	889b      	ldrh	r3, [r3, #4]
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	bf0c      	ite	eq
 8000c4a:	2301      	moveq	r3, #1
 8000c4c:	2300      	movne	r3, #0
 8000c4e:	b2db      	uxtb	r3, r3
}
 8000c50:	4618      	mov	r0, r3
 8000c52:	370c      	adds	r7, #12
 8000c54:	46bd      	mov	sp, r7
 8000c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5a:	4770      	bx	lr

08000c5c <TESS_BUFF_IDX_INC>:
{
   return (RBUF_SIZE == buff->count);
}

uint16_t TESS_BUFF_IDX_INC (const uint16_t currentVal,const uint16_t buff_size)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	b085      	sub	sp, #20
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	4603      	mov	r3, r0
 8000c64:	460a      	mov	r2, r1
 8000c66:	80fb      	strh	r3, [r7, #6]
 8000c68:	4613      	mov	r3, r2
 8000c6a:	80bb      	strh	r3, [r7, #4]
   uint16_t  newVal;

   newVal = currentVal + 1;
 8000c6c:	88fb      	ldrh	r3, [r7, #6]
 8000c6e:	3301      	adds	r3, #1
 8000c70:	81fb      	strh	r3, [r7, #14]
   newVal %= buff_size;
 8000c72:	89fb      	ldrh	r3, [r7, #14]
 8000c74:	88ba      	ldrh	r2, [r7, #4]
 8000c76:	fbb3 f1f2 	udiv	r1, r3, r2
 8000c7a:	fb02 f201 	mul.w	r2, r2, r1
 8000c7e:	1a9b      	subs	r3, r3, r2
 8000c80:	81fb      	strh	r3, [r7, #14]

   return newVal;
 8000c82:	89fb      	ldrh	r3, [r7, #14]
}
 8000c84:	4618      	mov	r0, r3
 8000c86:	3714      	adds	r7, #20
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8e:	4770      	bx	lr

08000c90 <DATA_COPY>:

static void DATA_COPY ( const r_buff_data_t *source, r_buff_data_t *dest)
{
 8000c90:	b480      	push	{r7}
 8000c92:	b083      	sub	sp, #12
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	6078      	str	r0, [r7, #4]
 8000c98:	6039      	str	r1, [r7, #0]
   /* copy byte by byte*/
   dest->byte0 = source->byte0;
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	781a      	ldrb	r2, [r3, #0]
 8000c9e:	683b      	ldr	r3, [r7, #0]
 8000ca0:	701a      	strb	r2, [r3, #0]
   dest->byte1 = source->byte1;
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	785a      	ldrb	r2, [r3, #1]
 8000ca6:	683b      	ldr	r3, [r7, #0]
 8000ca8:	705a      	strb	r2, [r3, #1]
   dest->byte2 = source->byte2;
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	789a      	ldrb	r2, [r3, #2]
 8000cae:	683b      	ldr	r3, [r7, #0]
 8000cb0:	709a      	strb	r2, [r3, #2]
   dest->byte3 = source->byte3;
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	78da      	ldrb	r2, [r3, #3]
 8000cb6:	683b      	ldr	r3, [r7, #0]
 8000cb8:	70da      	strb	r2, [r3, #3]
   dest->byte4 = source->byte4;
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	791a      	ldrb	r2, [r3, #4]
 8000cbe:	683b      	ldr	r3, [r7, #0]
 8000cc0:	711a      	strb	r2, [r3, #4]
   dest->byte5 = source->byte5;
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	795a      	ldrb	r2, [r3, #5]
 8000cc6:	683b      	ldr	r3, [r7, #0]
 8000cc8:	715a      	strb	r2, [r3, #5]

}
 8000cca:	bf00      	nop
 8000ccc:	370c      	adds	r7, #12
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd4:	4770      	bx	lr

08000cd6 <FULL_BUFF_DATA>:

static void FULL_BUFF_DATA(r_buff_data_t *dest)
{
 8000cd6:	b480      	push	{r7}
 8000cd8:	b083      	sub	sp, #12
 8000cda:	af00      	add	r7, sp, #0
 8000cdc:	6078      	str	r0, [r7, #4]
   dest->byte0 = 0;
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	701a      	strb	r2, [r3, #0]
   dest->byte1 = 0;
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	705a      	strb	r2, [r3, #1]
   dest->byte2 = 0;
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	2200      	movs	r2, #0
 8000cee:	709a      	strb	r2, [r3, #2]
   dest->byte3 = 0;
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	70da      	strb	r2, [r3, #3]
   dest->byte4 = 0;
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	711a      	strb	r2, [r3, #4]
   dest->byte5 = 0;
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	2200      	movs	r2, #0
 8000d00:	715a      	strb	r2, [r3, #5]
}
 8000d02:	bf00      	nop
 8000d04:	370c      	adds	r7, #12
 8000d06:	46bd      	mov	sp, r7
 8000d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0c:	4770      	bx	lr

08000d0e <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d0e:	b580      	push	{r7, lr}
 8000d10:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d12:	f000 fcd7 	bl	80016c4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d16:	f000 f80d 	bl	8000d34 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d1a:	f000 fa2f 	bl	800117c <MX_GPIO_Init>
  MX_ADC1_Init();
 8000d1e:	f000 f873 	bl	8000e08 <MX_ADC1_Init>
  MX_TIM1_Init();
 8000d22:	f000 f917 	bl	8000f54 <MX_TIM1_Init>
  MX_TIM3_Init();
 8000d26:	f000 f9b5 	bl	8001094 <MX_TIM3_Init>
  MX_USB_DEVICE_Init();
 8000d2a:	f007 ff83 	bl	8008c34 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  TESS_DAS_INIT();
 8000d2e:	f7ff fbcd 	bl	80004cc <TESS_DAS_INIT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000d32:	e7fe      	b.n	8000d32 <main+0x24>

08000d34 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b094      	sub	sp, #80	; 0x50
 8000d38:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d3a:	f107 0320 	add.w	r3, r7, #32
 8000d3e:	2230      	movs	r2, #48	; 0x30
 8000d40:	2100      	movs	r1, #0
 8000d42:	4618      	mov	r0, r3
 8000d44:	f008 fcbc 	bl	80096c0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d48:	f107 030c 	add.w	r3, r7, #12
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	601a      	str	r2, [r3, #0]
 8000d50:	605a      	str	r2, [r3, #4]
 8000d52:	609a      	str	r2, [r3, #8]
 8000d54:	60da      	str	r2, [r3, #12]
 8000d56:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d58:	2300      	movs	r3, #0
 8000d5a:	60bb      	str	r3, [r7, #8]
 8000d5c:	4b28      	ldr	r3, [pc, #160]	; (8000e00 <SystemClock_Config+0xcc>)
 8000d5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d60:	4a27      	ldr	r2, [pc, #156]	; (8000e00 <SystemClock_Config+0xcc>)
 8000d62:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d66:	6413      	str	r3, [r2, #64]	; 0x40
 8000d68:	4b25      	ldr	r3, [pc, #148]	; (8000e00 <SystemClock_Config+0xcc>)
 8000d6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d6c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d70:	60bb      	str	r3, [r7, #8]
 8000d72:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000d74:	2300      	movs	r3, #0
 8000d76:	607b      	str	r3, [r7, #4]
 8000d78:	4b22      	ldr	r3, [pc, #136]	; (8000e04 <SystemClock_Config+0xd0>)
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000d80:	4a20      	ldr	r2, [pc, #128]	; (8000e04 <SystemClock_Config+0xd0>)
 8000d82:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000d86:	6013      	str	r3, [r2, #0]
 8000d88:	4b1e      	ldr	r3, [pc, #120]	; (8000e04 <SystemClock_Config+0xd0>)
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000d90:	607b      	str	r3, [r7, #4]
 8000d92:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000d94:	2301      	movs	r3, #1
 8000d96:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000d98:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000d9c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d9e:	2302      	movs	r3, #2
 8000da0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000da2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000da6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000da8:	2304      	movs	r3, #4
 8000daa:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000dac:	23a8      	movs	r3, #168	; 0xa8
 8000dae:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000db0:	2304      	movs	r3, #4
 8000db2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000db4:	2307      	movs	r3, #7
 8000db6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000db8:	f107 0320 	add.w	r3, r7, #32
 8000dbc:	4618      	mov	r0, r3
 8000dbe:	f002 ff71 	bl	8003ca4 <HAL_RCC_OscConfig>
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d001      	beq.n	8000dcc <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000dc8:	f000 faca 	bl	8001360 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000dcc:	230f      	movs	r3, #15
 8000dce:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000dd0:	2302      	movs	r3, #2
 8000dd2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000dd8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ddc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000dde:	2300      	movs	r3, #0
 8000de0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000de2:	f107 030c 	add.w	r3, r7, #12
 8000de6:	2102      	movs	r1, #2
 8000de8:	4618      	mov	r0, r3
 8000dea:	f003 f9d3 	bl	8004194 <HAL_RCC_ClockConfig>
 8000dee:	4603      	mov	r3, r0
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d001      	beq.n	8000df8 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000df4:	f000 fab4 	bl	8001360 <Error_Handler>
  }
}
 8000df8:	bf00      	nop
 8000dfa:	3750      	adds	r7, #80	; 0x50
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	bd80      	pop	{r7, pc}
 8000e00:	40023800 	.word	0x40023800
 8000e04:	40007000 	.word	0x40007000

08000e08 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b08c      	sub	sp, #48	; 0x30
 8000e0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000e0e:	f107 0320 	add.w	r3, r7, #32
 8000e12:	2200      	movs	r2, #0
 8000e14:	601a      	str	r2, [r3, #0]
 8000e16:	605a      	str	r2, [r3, #4]
 8000e18:	609a      	str	r2, [r3, #8]
 8000e1a:	60da      	str	r2, [r3, #12]
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8000e1c:	463b      	mov	r3, r7
 8000e1e:	2220      	movs	r2, #32
 8000e20:	2100      	movs	r1, #0
 8000e22:	4618      	mov	r0, r3
 8000e24:	f008 fc4c 	bl	80096c0 <memset>
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000e28:	4b47      	ldr	r3, [pc, #284]	; (8000f48 <MX_ADC1_Init+0x140>)
 8000e2a:	4a48      	ldr	r2, [pc, #288]	; (8000f4c <MX_ADC1_Init+0x144>)
 8000e2c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000e2e:	4b46      	ldr	r3, [pc, #280]	; (8000f48 <MX_ADC1_Init+0x140>)
 8000e30:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000e34:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000e36:	4b44      	ldr	r3, [pc, #272]	; (8000f48 <MX_ADC1_Init+0x140>)
 8000e38:	2200      	movs	r2, #0
 8000e3a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000e3c:	4b42      	ldr	r3, [pc, #264]	; (8000f48 <MX_ADC1_Init+0x140>)
 8000e3e:	2201      	movs	r2, #1
 8000e40:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000e42:	4b41      	ldr	r3, [pc, #260]	; (8000f48 <MX_ADC1_Init+0x140>)
 8000e44:	2201      	movs	r2, #1
 8000e46:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000e48:	4b3f      	ldr	r3, [pc, #252]	; (8000f48 <MX_ADC1_Init+0x140>)
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000e50:	4b3d      	ldr	r3, [pc, #244]	; (8000f48 <MX_ADC1_Init+0x140>)
 8000e52:	2200      	movs	r2, #0
 8000e54:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000e56:	4b3c      	ldr	r3, [pc, #240]	; (8000f48 <MX_ADC1_Init+0x140>)
 8000e58:	4a3d      	ldr	r2, [pc, #244]	; (8000f50 <MX_ADC1_Init+0x148>)
 8000e5a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000e5c:	4b3a      	ldr	r3, [pc, #232]	; (8000f48 <MX_ADC1_Init+0x140>)
 8000e5e:	2200      	movs	r2, #0
 8000e60:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000e62:	4b39      	ldr	r3, [pc, #228]	; (8000f48 <MX_ADC1_Init+0x140>)
 8000e64:	2201      	movs	r2, #1
 8000e66:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000e68:	4b37      	ldr	r3, [pc, #220]	; (8000f48 <MX_ADC1_Init+0x140>)
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000e70:	4b35      	ldr	r3, [pc, #212]	; (8000f48 <MX_ADC1_Init+0x140>)
 8000e72:	2200      	movs	r2, #0
 8000e74:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000e76:	4834      	ldr	r0, [pc, #208]	; (8000f48 <MX_ADC1_Init+0x140>)
 8000e78:	f000 fcba 	bl	80017f0 <HAL_ADC_Init>
 8000e7c:	4603      	mov	r3, r0
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d001      	beq.n	8000e86 <MX_ADC1_Init+0x7e>
  {
    Error_Handler();
 8000e82:	f000 fa6d 	bl	8001360 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000e86:	230a      	movs	r3, #10
 8000e88:	623b      	str	r3, [r7, #32]
  sConfig.Rank = 1;
 8000e8a:	2301      	movs	r3, #1
 8000e8c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e92:	f107 0320 	add.w	r3, r7, #32
 8000e96:	4619      	mov	r1, r3
 8000e98:	482b      	ldr	r0, [pc, #172]	; (8000f48 <MX_ADC1_Init+0x140>)
 8000e9a:	f000 fe4b 	bl	8001b34 <HAL_ADC_ConfigChannel>
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d001      	beq.n	8000ea8 <MX_ADC1_Init+0xa0>
  {
    Error_Handler();
 8000ea4:	f000 fa5c 	bl	8001360 <Error_Handler>
  }
  /** Configures for the selected ADC injected channel its corresponding rank in the sequencer and its sample time
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_10;
 8000ea8:	230a      	movs	r3, #10
 8000eaa:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = 1;
 8000eac:	2301      	movs	r3, #1
 8000eae:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedNbrOfConversion = 4;
 8000eb0:	2304      	movs	r3, #4
 8000eb2:	613b      	str	r3, [r7, #16]
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_480CYCLES;
 8000eb4:	2307      	movs	r3, #7
 8000eb6:	60bb      	str	r3, [r7, #8]
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONVEDGE_RISING;
 8000eb8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000ebc:	61fb      	str	r3, [r7, #28]
  sConfigInjected.ExternalTrigInjecConv = ADC_EXTERNALTRIGINJECCONV_T1_TRGO;
 8000ebe:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000ec2:	61bb      	str	r3, [r7, #24]
  sConfigInjected.AutoInjectedConv = DISABLE;
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	757b      	strb	r3, [r7, #21]
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 8000ec8:	2300      	movs	r3, #0
 8000eca:	753b      	strb	r3, [r7, #20]
  sConfigInjected.InjectedOffset = 0;
 8000ecc:	2300      	movs	r3, #0
 8000ece:	60fb      	str	r3, [r7, #12]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8000ed0:	463b      	mov	r3, r7
 8000ed2:	4619      	mov	r1, r3
 8000ed4:	481c      	ldr	r0, [pc, #112]	; (8000f48 <MX_ADC1_Init+0x140>)
 8000ed6:	f001 f91d 	bl	8002114 <HAL_ADCEx_InjectedConfigChannel>
 8000eda:	4603      	mov	r3, r0
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d001      	beq.n	8000ee4 <MX_ADC1_Init+0xdc>
  {
    Error_Handler();
 8000ee0:	f000 fa3e 	bl	8001360 <Error_Handler>
  }
  /** Configures for the selected ADC injected channel its corresponding rank in the sequencer and its sample time
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_11;
 8000ee4:	230b      	movs	r3, #11
 8000ee6:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = 2;
 8000ee8:	2302      	movs	r3, #2
 8000eea:	607b      	str	r3, [r7, #4]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8000eec:	463b      	mov	r3, r7
 8000eee:	4619      	mov	r1, r3
 8000ef0:	4815      	ldr	r0, [pc, #84]	; (8000f48 <MX_ADC1_Init+0x140>)
 8000ef2:	f001 f90f 	bl	8002114 <HAL_ADCEx_InjectedConfigChannel>
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d001      	beq.n	8000f00 <MX_ADC1_Init+0xf8>
  {
    Error_Handler();
 8000efc:	f000 fa30 	bl	8001360 <Error_Handler>
  }
  /** Configures for the selected ADC injected channel its corresponding rank in the sequencer and its sample time
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_12;
 8000f00:	230c      	movs	r3, #12
 8000f02:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = 3;
 8000f04:	2303      	movs	r3, #3
 8000f06:	607b      	str	r3, [r7, #4]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8000f08:	463b      	mov	r3, r7
 8000f0a:	4619      	mov	r1, r3
 8000f0c:	480e      	ldr	r0, [pc, #56]	; (8000f48 <MX_ADC1_Init+0x140>)
 8000f0e:	f001 f901 	bl	8002114 <HAL_ADCEx_InjectedConfigChannel>
 8000f12:	4603      	mov	r3, r0
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d001      	beq.n	8000f1c <MX_ADC1_Init+0x114>
  {
    Error_Handler();
 8000f18:	f000 fa22 	bl	8001360 <Error_Handler>
  }
  /** Configures for the selected ADC injected channel its corresponding rank in the sequencer and its sample time
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_13;
 8000f1c:	230d      	movs	r3, #13
 8000f1e:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = 4;
 8000f20:	2304      	movs	r3, #4
 8000f22:	607b      	str	r3, [r7, #4]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8000f24:	463b      	mov	r3, r7
 8000f26:	4619      	mov	r1, r3
 8000f28:	4807      	ldr	r0, [pc, #28]	; (8000f48 <MX_ADC1_Init+0x140>)
 8000f2a:	f001 f8f3 	bl	8002114 <HAL_ADCEx_InjectedConfigChannel>
 8000f2e:	4603      	mov	r3, r0
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d001      	beq.n	8000f38 <MX_ADC1_Init+0x130>
  {
    Error_Handler();
 8000f34:	f000 fa14 	bl	8001360 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */
  HAL_ADCEx_InjectedStart_IT(&hadc1);
 8000f38:	4803      	ldr	r0, [pc, #12]	; (8000f48 <MX_ADC1_Init+0x140>)
 8000f3a:	f001 f819 	bl	8001f70 <HAL_ADCEx_InjectedStart_IT>
  /* USER CODE END ADC1_Init 2 */

}
 8000f3e:	bf00      	nop
 8000f40:	3730      	adds	r7, #48	; 0x30
 8000f42:	46bd      	mov	sp, r7
 8000f44:	bd80      	pop	{r7, pc}
 8000f46:	bf00      	nop
 8000f48:	20002854 	.word	0x20002854
 8000f4c:	40012000 	.word	0x40012000
 8000f50:	0f000001 	.word	0x0f000001

08000f54 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b096      	sub	sp, #88	; 0x58
 8000f58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f5a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000f5e:	2200      	movs	r2, #0
 8000f60:	601a      	str	r2, [r3, #0]
 8000f62:	605a      	str	r2, [r3, #4]
 8000f64:	609a      	str	r2, [r3, #8]
 8000f66:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f68:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	601a      	str	r2, [r3, #0]
 8000f70:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000f72:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f76:	2200      	movs	r2, #0
 8000f78:	601a      	str	r2, [r3, #0]
 8000f7a:	605a      	str	r2, [r3, #4]
 8000f7c:	609a      	str	r2, [r3, #8]
 8000f7e:	60da      	str	r2, [r3, #12]
 8000f80:	611a      	str	r2, [r3, #16]
 8000f82:	615a      	str	r2, [r3, #20]
 8000f84:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000f86:	1d3b      	adds	r3, r7, #4
 8000f88:	2220      	movs	r2, #32
 8000f8a:	2100      	movs	r1, #0
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	f008 fb97 	bl	80096c0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000f92:	4b3e      	ldr	r3, [pc, #248]	; (800108c <MX_TIM1_Init+0x138>)
 8000f94:	4a3e      	ldr	r2, [pc, #248]	; (8001090 <MX_TIM1_Init+0x13c>)
 8000f96:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1;
 8000f98:	4b3c      	ldr	r3, [pc, #240]	; (800108c <MX_TIM1_Init+0x138>)
 8000f9a:	2201      	movs	r2, #1
 8000f9c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f9e:	4b3b      	ldr	r3, [pc, #236]	; (800108c <MX_TIM1_Init+0x138>)
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 4199;
 8000fa4:	4b39      	ldr	r3, [pc, #228]	; (800108c <MX_TIM1_Init+0x138>)
 8000fa6:	f241 0267 	movw	r2, #4199	; 0x1067
 8000faa:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fac:	4b37      	ldr	r3, [pc, #220]	; (800108c <MX_TIM1_Init+0x138>)
 8000fae:	2200      	movs	r2, #0
 8000fb0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 1;
 8000fb2:	4b36      	ldr	r3, [pc, #216]	; (800108c <MX_TIM1_Init+0x138>)
 8000fb4:	2201      	movs	r2, #1
 8000fb6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000fb8:	4b34      	ldr	r3, [pc, #208]	; (800108c <MX_TIM1_Init+0x138>)
 8000fba:	2200      	movs	r2, #0
 8000fbc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000fbe:	4833      	ldr	r0, [pc, #204]	; (800108c <MX_TIM1_Init+0x138>)
 8000fc0:	f003 fabc 	bl	800453c <HAL_TIM_Base_Init>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d001      	beq.n	8000fce <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8000fca:	f000 f9c9 	bl	8001360 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000fce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000fd2:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000fd4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000fd8:	4619      	mov	r1, r3
 8000fda:	482c      	ldr	r0, [pc, #176]	; (800108c <MX_TIM1_Init+0x138>)
 8000fdc:	f004 f82e 	bl	800503c <HAL_TIM_ConfigClockSource>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d001      	beq.n	8000fea <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000fe6:	f000 f9bb 	bl	8001360 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000fea:	4828      	ldr	r0, [pc, #160]	; (800108c <MX_TIM1_Init+0x138>)
 8000fec:	f003 faf5 	bl	80045da <HAL_TIM_PWM_Init>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d001      	beq.n	8000ffa <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8000ff6:	f000 f9b3 	bl	8001360 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000ffa:	2320      	movs	r3, #32
 8000ffc:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 8000ffe:	2380      	movs	r3, #128	; 0x80
 8001000:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001002:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001006:	4619      	mov	r1, r3
 8001008:	4820      	ldr	r0, [pc, #128]	; (800108c <MX_TIM1_Init+0x138>)
 800100a:	f004 fd35 	bl	8005a78 <HAL_TIMEx_MasterConfigSynchronization>
 800100e:	4603      	mov	r3, r0
 8001010:	2b00      	cmp	r3, #0
 8001012:	d001      	beq.n	8001018 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001014:	f000 f9a4 	bl	8001360 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001018:	2360      	movs	r3, #96	; 0x60
 800101a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 800101c:	2300      	movs	r3, #0
 800101e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001020:	2300      	movs	r3, #0
 8001022:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001024:	2300      	movs	r3, #0
 8001026:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001028:	2300      	movs	r3, #0
 800102a:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800102c:	2300      	movs	r3, #0
 800102e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001030:	2300      	movs	r3, #0
 8001032:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001034:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001038:	2200      	movs	r2, #0
 800103a:	4619      	mov	r1, r3
 800103c:	4813      	ldr	r0, [pc, #76]	; (800108c <MX_TIM1_Init+0x138>)
 800103e:	f003 ff3b 	bl	8004eb8 <HAL_TIM_PWM_ConfigChannel>
 8001042:	4603      	mov	r3, r0
 8001044:	2b00      	cmp	r3, #0
 8001046:	d001      	beq.n	800104c <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8001048:	f000 f98a 	bl	8001360 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800104c:	2300      	movs	r3, #0
 800104e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001050:	2300      	movs	r3, #0
 8001052:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001054:	2300      	movs	r3, #0
 8001056:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001058:	2300      	movs	r3, #0
 800105a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800105c:	2300      	movs	r3, #0
 800105e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001060:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001064:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001066:	2300      	movs	r3, #0
 8001068:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800106a:	1d3b      	adds	r3, r7, #4
 800106c:	4619      	mov	r1, r3
 800106e:	4807      	ldr	r0, [pc, #28]	; (800108c <MX_TIM1_Init+0x138>)
 8001070:	f004 fd70 	bl	8005b54 <HAL_TIMEx_ConfigBreakDeadTime>
 8001074:	4603      	mov	r3, r0
 8001076:	2b00      	cmp	r3, #0
 8001078:	d001      	beq.n	800107e <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 800107a:	f000 f971 	bl	8001360 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800107e:	4803      	ldr	r0, [pc, #12]	; (800108c <MX_TIM1_Init+0x138>)
 8001080:	f000 fa50 	bl	8001524 <HAL_TIM_MspPostInit>

}
 8001084:	bf00      	nop
 8001086:	3758      	adds	r7, #88	; 0x58
 8001088:	46bd      	mov	sp, r7
 800108a:	bd80      	pop	{r7, pc}
 800108c:	200028a0 	.word	0x200028a0
 8001090:	40010000 	.word	0x40010000

08001094 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b08a      	sub	sp, #40	; 0x28
 8001098:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800109a:	f107 0318 	add.w	r3, r7, #24
 800109e:	2200      	movs	r2, #0
 80010a0:	601a      	str	r2, [r3, #0]
 80010a2:	605a      	str	r2, [r3, #4]
 80010a4:	609a      	str	r2, [r3, #8]
 80010a6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010a8:	f107 0310 	add.w	r3, r7, #16
 80010ac:	2200      	movs	r2, #0
 80010ae:	601a      	str	r2, [r3, #0]
 80010b0:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80010b2:	463b      	mov	r3, r7
 80010b4:	2200      	movs	r2, #0
 80010b6:	601a      	str	r2, [r3, #0]
 80010b8:	605a      	str	r2, [r3, #4]
 80010ba:	609a      	str	r2, [r3, #8]
 80010bc:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80010be:	4b2d      	ldr	r3, [pc, #180]	; (8001174 <MX_TIM3_Init+0xe0>)
 80010c0:	4a2d      	ldr	r2, [pc, #180]	; (8001178 <MX_TIM3_Init+0xe4>)
 80010c2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 20;
 80010c4:	4b2b      	ldr	r3, [pc, #172]	; (8001174 <MX_TIM3_Init+0xe0>)
 80010c6:	2214      	movs	r2, #20
 80010c8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010ca:	4b2a      	ldr	r3, [pc, #168]	; (8001174 <MX_TIM3_Init+0xe0>)
 80010cc:	2200      	movs	r2, #0
 80010ce:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80010d0:	4b28      	ldr	r3, [pc, #160]	; (8001174 <MX_TIM3_Init+0xe0>)
 80010d2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80010d6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010d8:	4b26      	ldr	r3, [pc, #152]	; (8001174 <MX_TIM3_Init+0xe0>)
 80010da:	2200      	movs	r2, #0
 80010dc:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010de:	4b25      	ldr	r3, [pc, #148]	; (8001174 <MX_TIM3_Init+0xe0>)
 80010e0:	2200      	movs	r2, #0
 80010e2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80010e4:	4823      	ldr	r0, [pc, #140]	; (8001174 <MX_TIM3_Init+0xe0>)
 80010e6:	f003 fa29 	bl	800453c <HAL_TIM_Base_Init>
 80010ea:	4603      	mov	r3, r0
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d001      	beq.n	80010f4 <MX_TIM3_Init+0x60>
  {
    Error_Handler();
 80010f0:	f000 f936 	bl	8001360 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80010f4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010f8:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80010fa:	f107 0318 	add.w	r3, r7, #24
 80010fe:	4619      	mov	r1, r3
 8001100:	481c      	ldr	r0, [pc, #112]	; (8001174 <MX_TIM3_Init+0xe0>)
 8001102:	f003 ff9b 	bl	800503c <HAL_TIM_ConfigClockSource>
 8001106:	4603      	mov	r3, r0
 8001108:	2b00      	cmp	r3, #0
 800110a:	d001      	beq.n	8001110 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 800110c:	f000 f928 	bl	8001360 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8001110:	4818      	ldr	r0, [pc, #96]	; (8001174 <MX_TIM3_Init+0xe0>)
 8001112:	f003 fbb9 	bl	8004888 <HAL_TIM_IC_Init>
 8001116:	4603      	mov	r3, r0
 8001118:	2b00      	cmp	r3, #0
 800111a:	d001      	beq.n	8001120 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 800111c:	f000 f920 	bl	8001360 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001120:	2300      	movs	r3, #0
 8001122:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001124:	2300      	movs	r3, #0
 8001126:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001128:	f107 0310 	add.w	r3, r7, #16
 800112c:	4619      	mov	r1, r3
 800112e:	4811      	ldr	r0, [pc, #68]	; (8001174 <MX_TIM3_Init+0xe0>)
 8001130:	f004 fca2 	bl	8005a78 <HAL_TIMEx_MasterConfigSynchronization>
 8001134:	4603      	mov	r3, r0
 8001136:	2b00      	cmp	r3, #0
 8001138:	d001      	beq.n	800113e <MX_TIM3_Init+0xaa>
  {
    Error_Handler();
 800113a:	f000 f911 	bl	8001360 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800113e:	2300      	movs	r3, #0
 8001140:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001142:	2301      	movs	r3, #1
 8001144:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001146:	2300      	movs	r3, #0
 8001148:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 8;
 800114a:	2308      	movs	r3, #8
 800114c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800114e:	463b      	mov	r3, r7
 8001150:	2200      	movs	r2, #0
 8001152:	4619      	mov	r1, r3
 8001154:	4807      	ldr	r0, [pc, #28]	; (8001174 <MX_TIM3_Init+0xe0>)
 8001156:	f003 fe13 	bl	8004d80 <HAL_TIM_IC_ConfigChannel>
 800115a:	4603      	mov	r3, r0
 800115c:	2b00      	cmp	r3, #0
 800115e:	d001      	beq.n	8001164 <MX_TIM3_Init+0xd0>
  {
    Error_Handler();
 8001160:	f000 f8fe 	bl	8001360 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */
  HAL_TIM_IC_Start_IT(&htim3,TIM_CHANNEL_1);
 8001164:	2100      	movs	r1, #0
 8001166:	4803      	ldr	r0, [pc, #12]	; (8001174 <MX_TIM3_Init+0xe0>)
 8001168:	f003 fbe8 	bl	800493c <HAL_TIM_IC_Start_IT>
  /* USER CODE END TIM3_Init 2 */

}
 800116c:	bf00      	nop
 800116e:	3728      	adds	r7, #40	; 0x28
 8001170:	46bd      	mov	sp, r7
 8001172:	bd80      	pop	{r7, pc}
 8001174:	2000280c 	.word	0x2000280c
 8001178:	40000400 	.word	0x40000400

0800117c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b08a      	sub	sp, #40	; 0x28
 8001180:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001182:	f107 0314 	add.w	r3, r7, #20
 8001186:	2200      	movs	r2, #0
 8001188:	601a      	str	r2, [r3, #0]
 800118a:	605a      	str	r2, [r3, #4]
 800118c:	609a      	str	r2, [r3, #8]
 800118e:	60da      	str	r2, [r3, #12]
 8001190:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001192:	2300      	movs	r3, #0
 8001194:	613b      	str	r3, [r7, #16]
 8001196:	4b35      	ldr	r3, [pc, #212]	; (800126c <MX_GPIO_Init+0xf0>)
 8001198:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800119a:	4a34      	ldr	r2, [pc, #208]	; (800126c <MX_GPIO_Init+0xf0>)
 800119c:	f043 0304 	orr.w	r3, r3, #4
 80011a0:	6313      	str	r3, [r2, #48]	; 0x30
 80011a2:	4b32      	ldr	r3, [pc, #200]	; (800126c <MX_GPIO_Init+0xf0>)
 80011a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011a6:	f003 0304 	and.w	r3, r3, #4
 80011aa:	613b      	str	r3, [r7, #16]
 80011ac:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80011ae:	2300      	movs	r3, #0
 80011b0:	60fb      	str	r3, [r7, #12]
 80011b2:	4b2e      	ldr	r3, [pc, #184]	; (800126c <MX_GPIO_Init+0xf0>)
 80011b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011b6:	4a2d      	ldr	r2, [pc, #180]	; (800126c <MX_GPIO_Init+0xf0>)
 80011b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80011bc:	6313      	str	r3, [r2, #48]	; 0x30
 80011be:	4b2b      	ldr	r3, [pc, #172]	; (800126c <MX_GPIO_Init+0xf0>)
 80011c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80011c6:	60fb      	str	r3, [r7, #12]
 80011c8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011ca:	2300      	movs	r3, #0
 80011cc:	60bb      	str	r3, [r7, #8]
 80011ce:	4b27      	ldr	r3, [pc, #156]	; (800126c <MX_GPIO_Init+0xf0>)
 80011d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011d2:	4a26      	ldr	r2, [pc, #152]	; (800126c <MX_GPIO_Init+0xf0>)
 80011d4:	f043 0301 	orr.w	r3, r3, #1
 80011d8:	6313      	str	r3, [r2, #48]	; 0x30
 80011da:	4b24      	ldr	r3, [pc, #144]	; (800126c <MX_GPIO_Init+0xf0>)
 80011dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011de:	f003 0301 	and.w	r3, r3, #1
 80011e2:	60bb      	str	r3, [r7, #8]
 80011e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011e6:	2300      	movs	r3, #0
 80011e8:	607b      	str	r3, [r7, #4]
 80011ea:	4b20      	ldr	r3, [pc, #128]	; (800126c <MX_GPIO_Init+0xf0>)
 80011ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ee:	4a1f      	ldr	r2, [pc, #124]	; (800126c <MX_GPIO_Init+0xf0>)
 80011f0:	f043 0302 	orr.w	r3, r3, #2
 80011f4:	6313      	str	r3, [r2, #48]	; 0x30
 80011f6:	4b1d      	ldr	r3, [pc, #116]	; (800126c <MX_GPIO_Init+0xf0>)
 80011f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011fa:	f003 0302 	and.w	r3, r3, #2
 80011fe:	607b      	str	r3, [r7, #4]
 8001200:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001202:	2200      	movs	r2, #0
 8001204:	2120      	movs	r1, #32
 8001206:	481a      	ldr	r0, [pc, #104]	; (8001270 <MX_GPIO_Init+0xf4>)
 8001208:	f001 fbb0 	bl	800296c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800120c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001210:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001212:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001216:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001218:	2300      	movs	r3, #0
 800121a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800121c:	f107 0314 	add.w	r3, r7, #20
 8001220:	4619      	mov	r1, r3
 8001222:	4814      	ldr	r0, [pc, #80]	; (8001274 <MX_GPIO_Init+0xf8>)
 8001224:	f001 fa1e 	bl	8002664 <HAL_GPIO_Init>

  /*Configure GPIO pins : USART_TX_Pin USART_RX_Pin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001228:	230c      	movs	r3, #12
 800122a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800122c:	2302      	movs	r3, #2
 800122e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001230:	2300      	movs	r3, #0
 8001232:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001234:	2300      	movs	r3, #0
 8001236:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001238:	2307      	movs	r3, #7
 800123a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800123c:	f107 0314 	add.w	r3, r7, #20
 8001240:	4619      	mov	r1, r3
 8001242:	480b      	ldr	r0, [pc, #44]	; (8001270 <MX_GPIO_Init+0xf4>)
 8001244:	f001 fa0e 	bl	8002664 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001248:	2320      	movs	r3, #32
 800124a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800124c:	2301      	movs	r3, #1
 800124e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001250:	2300      	movs	r3, #0
 8001252:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001254:	2300      	movs	r3, #0
 8001256:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001258:	f107 0314 	add.w	r3, r7, #20
 800125c:	4619      	mov	r1, r3
 800125e:	4804      	ldr	r0, [pc, #16]	; (8001270 <MX_GPIO_Init+0xf4>)
 8001260:	f001 fa00 	bl	8002664 <HAL_GPIO_Init>

}
 8001264:	bf00      	nop
 8001266:	3728      	adds	r7, #40	; 0x28
 8001268:	46bd      	mov	sp, r7
 800126a:	bd80      	pop	{r7, pc}
 800126c:	40023800 	.word	0x40023800
 8001270:	40020000 	.word	0x40020000
 8001274:	40020800 	.word	0x40020800

08001278 <HAL_ADCEx_InjectedConvCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b082      	sub	sp, #8
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
	Set_TessDasADC_CH_1(hadc->Instance->JDR1);
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001286:	b29a      	uxth	r2, r3
 8001288:	4b03      	ldr	r3, [pc, #12]	; (8001298 <HAL_ADCEx_InjectedConvCpltCallback+0x20>)
 800128a:	801a      	strh	r2, [r3, #0]
	TESS_DAS_MAIN();
 800128c:	f7ff f97c 	bl	8000588 <TESS_DAS_MAIN>
	/*Debug*/
	/*MainClock++;
	HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);*/
}
 8001290:	bf00      	nop
 8001292:	3708      	adds	r7, #8
 8001294:	46bd      	mov	sp, r7
 8001296:	bd80      	pop	{r7, pc}
 8001298:	200027d6 	.word	0x200027d6

0800129c <HAL_TIM_IC_CaptureCallback>:
uint16_t Period;
float    Frequency;
float    MotorSpeed;
float    WheelSpeed;
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b084      	sub	sp, #16
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
	uint16_t InputCaptureValue = 0;
 80012a4:	2300      	movs	r3, #0
 80012a6:	81fb      	strh	r3, [r7, #14]

	static uint16_t PrevInputCaptureValue = 0;

	InputCaptureValue = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 80012a8:	2100      	movs	r1, #0
 80012aa:	6878      	ldr	r0, [r7, #4]
 80012ac:	f003 ff8e 	bl	80051cc <HAL_TIM_ReadCapturedValue>
 80012b0:	4603      	mov	r3, r0
 80012b2:	81fb      	strh	r3, [r7, #14]
	if(PrevInputCaptureValue < InputCaptureValue)
 80012b4:	4b22      	ldr	r3, [pc, #136]	; (8001340 <HAL_TIM_IC_CaptureCallback+0xa4>)
 80012b6:	881b      	ldrh	r3, [r3, #0]
 80012b8:	89fa      	ldrh	r2, [r7, #14]
 80012ba:	429a      	cmp	r2, r3
 80012bc:	d907      	bls.n	80012ce <HAL_TIM_IC_CaptureCallback+0x32>
	{
		Period				= InputCaptureValue - PrevInputCaptureValue;
 80012be:	4b20      	ldr	r3, [pc, #128]	; (8001340 <HAL_TIM_IC_CaptureCallback+0xa4>)
 80012c0:	881b      	ldrh	r3, [r3, #0]
 80012c2:	89fa      	ldrh	r2, [r7, #14]
 80012c4:	1ad3      	subs	r3, r2, r3
 80012c6:	b29a      	uxth	r2, r3
 80012c8:	4b1e      	ldr	r3, [pc, #120]	; (8001344 <HAL_TIM_IC_CaptureCallback+0xa8>)
 80012ca:	801a      	strh	r2, [r3, #0]
 80012cc:	e008      	b.n	80012e0 <HAL_TIM_IC_CaptureCallback+0x44>
	}
	else
	{
		Period				= (0xFFFF - PrevInputCaptureValue) + InputCaptureValue;
 80012ce:	4b1c      	ldr	r3, [pc, #112]	; (8001340 <HAL_TIM_IC_CaptureCallback+0xa4>)
 80012d0:	881b      	ldrh	r3, [r3, #0]
 80012d2:	89fa      	ldrh	r2, [r7, #14]
 80012d4:	1ad3      	subs	r3, r2, r3
 80012d6:	b29b      	uxth	r3, r3
 80012d8:	3b01      	subs	r3, #1
 80012da:	b29a      	uxth	r2, r3
 80012dc:	4b19      	ldr	r3, [pc, #100]	; (8001344 <HAL_TIM_IC_CaptureCallback+0xa8>)
 80012de:	801a      	strh	r2, [r3, #0]
	}
	Frequency = 84000000/((float)Period*21.0F);
 80012e0:	4b18      	ldr	r3, [pc, #96]	; (8001344 <HAL_TIM_IC_CaptureCallback+0xa8>)
 80012e2:	881b      	ldrh	r3, [r3, #0]
 80012e4:	ee07 3a90 	vmov	s15, r3
 80012e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80012ec:	eeb3 7a05 	vmov.f32	s14, #53	; 0x41a80000  21.0
 80012f0:	ee27 7a87 	vmul.f32	s14, s15, s14
 80012f4:	eddf 6a14 	vldr	s13, [pc, #80]	; 8001348 <HAL_TIM_IC_CaptureCallback+0xac>
 80012f8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80012fc:	4b13      	ldr	r3, [pc, #76]	; (800134c <HAL_TIM_IC_CaptureCallback+0xb0>)
 80012fe:	edc3 7a00 	vstr	s15, [r3]
	MotorSpeed = (Frequency*60.0F)/11.0F;
 8001302:	4b12      	ldr	r3, [pc, #72]	; (800134c <HAL_TIM_IC_CaptureCallback+0xb0>)
 8001304:	edd3 7a00 	vldr	s15, [r3]
 8001308:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8001350 <HAL_TIM_IC_CaptureCallback+0xb4>
 800130c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001310:	eef2 6a06 	vmov.f32	s13, #38	; 0x41300000  11.0
 8001314:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001318:	4b0e      	ldr	r3, [pc, #56]	; (8001354 <HAL_TIM_IC_CaptureCallback+0xb8>)
 800131a:	edc3 7a00 	vstr	s15, [r3]
	WheelSpeed = MotorSpeed/75.0F;
 800131e:	4b0d      	ldr	r3, [pc, #52]	; (8001354 <HAL_TIM_IC_CaptureCallback+0xb8>)
 8001320:	ed93 7a00 	vldr	s14, [r3]
 8001324:	eddf 6a0c 	vldr	s13, [pc, #48]	; 8001358 <HAL_TIM_IC_CaptureCallback+0xbc>
 8001328:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800132c:	4b0b      	ldr	r3, [pc, #44]	; (800135c <HAL_TIM_IC_CaptureCallback+0xc0>)
 800132e:	edc3 7a00 	vstr	s15, [r3]
	PrevInputCaptureValue = InputCaptureValue;
 8001332:	4a03      	ldr	r2, [pc, #12]	; (8001340 <HAL_TIM_IC_CaptureCallback+0xa4>)
 8001334:	89fb      	ldrh	r3, [r7, #14]
 8001336:	8013      	strh	r3, [r2, #0]

}
 8001338:	bf00      	nop
 800133a:	3710      	adds	r7, #16
 800133c:	46bd      	mov	sp, r7
 800133e:	bd80      	pop	{r7, pc}
 8001340:	2000019c 	.word	0x2000019c
 8001344:	200028e8 	.word	0x200028e8
 8001348:	4ca037a0 	.word	0x4ca037a0
 800134c:	200028f0 	.word	0x200028f0
 8001350:	42700000 	.word	0x42700000
 8001354:	20002808 	.word	0x20002808
 8001358:	42960000 	.word	0x42960000
 800135c:	200028ec 	.word	0x200028ec

08001360 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001360:	b480      	push	{r7}
 8001362:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001364:	bf00      	nop
 8001366:	46bd      	mov	sp, r7
 8001368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136c:	4770      	bx	lr
	...

08001370 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b082      	sub	sp, #8
 8001374:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001376:	2300      	movs	r3, #0
 8001378:	607b      	str	r3, [r7, #4]
 800137a:	4b10      	ldr	r3, [pc, #64]	; (80013bc <HAL_MspInit+0x4c>)
 800137c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800137e:	4a0f      	ldr	r2, [pc, #60]	; (80013bc <HAL_MspInit+0x4c>)
 8001380:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001384:	6453      	str	r3, [r2, #68]	; 0x44
 8001386:	4b0d      	ldr	r3, [pc, #52]	; (80013bc <HAL_MspInit+0x4c>)
 8001388:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800138a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800138e:	607b      	str	r3, [r7, #4]
 8001390:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001392:	2300      	movs	r3, #0
 8001394:	603b      	str	r3, [r7, #0]
 8001396:	4b09      	ldr	r3, [pc, #36]	; (80013bc <HAL_MspInit+0x4c>)
 8001398:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800139a:	4a08      	ldr	r2, [pc, #32]	; (80013bc <HAL_MspInit+0x4c>)
 800139c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013a0:	6413      	str	r3, [r2, #64]	; 0x40
 80013a2:	4b06      	ldr	r3, [pc, #24]	; (80013bc <HAL_MspInit+0x4c>)
 80013a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013aa:	603b      	str	r3, [r7, #0]
 80013ac:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_2);
 80013ae:	2005      	movs	r0, #5
 80013b0:	f001 f916 	bl	80025e0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013b4:	bf00      	nop
 80013b6:	3708      	adds	r7, #8
 80013b8:	46bd      	mov	sp, r7
 80013ba:	bd80      	pop	{r7, pc}
 80013bc:	40023800 	.word	0x40023800

080013c0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b08a      	sub	sp, #40	; 0x28
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013c8:	f107 0314 	add.w	r3, r7, #20
 80013cc:	2200      	movs	r2, #0
 80013ce:	601a      	str	r2, [r3, #0]
 80013d0:	605a      	str	r2, [r3, #4]
 80013d2:	609a      	str	r2, [r3, #8]
 80013d4:	60da      	str	r2, [r3, #12]
 80013d6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	4a1b      	ldr	r2, [pc, #108]	; (800144c <HAL_ADC_MspInit+0x8c>)
 80013de:	4293      	cmp	r3, r2
 80013e0:	d12f      	bne.n	8001442 <HAL_ADC_MspInit+0x82>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80013e2:	2300      	movs	r3, #0
 80013e4:	613b      	str	r3, [r7, #16]
 80013e6:	4b1a      	ldr	r3, [pc, #104]	; (8001450 <HAL_ADC_MspInit+0x90>)
 80013e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013ea:	4a19      	ldr	r2, [pc, #100]	; (8001450 <HAL_ADC_MspInit+0x90>)
 80013ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013f0:	6453      	str	r3, [r2, #68]	; 0x44
 80013f2:	4b17      	ldr	r3, [pc, #92]	; (8001450 <HAL_ADC_MspInit+0x90>)
 80013f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013fa:	613b      	str	r3, [r7, #16]
 80013fc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80013fe:	2300      	movs	r3, #0
 8001400:	60fb      	str	r3, [r7, #12]
 8001402:	4b13      	ldr	r3, [pc, #76]	; (8001450 <HAL_ADC_MspInit+0x90>)
 8001404:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001406:	4a12      	ldr	r2, [pc, #72]	; (8001450 <HAL_ADC_MspInit+0x90>)
 8001408:	f043 0304 	orr.w	r3, r3, #4
 800140c:	6313      	str	r3, [r2, #48]	; 0x30
 800140e:	4b10      	ldr	r3, [pc, #64]	; (8001450 <HAL_ADC_MspInit+0x90>)
 8001410:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001412:	f003 0304 	and.w	r3, r3, #4
 8001416:	60fb      	str	r3, [r7, #12]
 8001418:	68fb      	ldr	r3, [r7, #12]
    PC0     ------> ADC1_IN10
    PC1     ------> ADC1_IN11
    PC2     ------> ADC1_IN12
    PC3     ------> ADC1_IN13
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 800141a:	230f      	movs	r3, #15
 800141c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800141e:	2303      	movs	r3, #3
 8001420:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001422:	2300      	movs	r3, #0
 8001424:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001426:	f107 0314 	add.w	r3, r7, #20
 800142a:	4619      	mov	r1, r3
 800142c:	4809      	ldr	r0, [pc, #36]	; (8001454 <HAL_ADC_MspInit+0x94>)
 800142e:	f001 f919 	bl	8002664 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 1);
 8001432:	2201      	movs	r2, #1
 8001434:	2100      	movs	r1, #0
 8001436:	2012      	movs	r0, #18
 8001438:	f001 f8dd 	bl	80025f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 800143c:	2012      	movs	r0, #18
 800143e:	f001 f8f6 	bl	800262e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001442:	bf00      	nop
 8001444:	3728      	adds	r7, #40	; 0x28
 8001446:	46bd      	mov	sp, r7
 8001448:	bd80      	pop	{r7, pc}
 800144a:	bf00      	nop
 800144c:	40012000 	.word	0x40012000
 8001450:	40023800 	.word	0x40023800
 8001454:	40020800 	.word	0x40020800

08001458 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b08a      	sub	sp, #40	; 0x28
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001460:	f107 0314 	add.w	r3, r7, #20
 8001464:	2200      	movs	r2, #0
 8001466:	601a      	str	r2, [r3, #0]
 8001468:	605a      	str	r2, [r3, #4]
 800146a:	609a      	str	r2, [r3, #8]
 800146c:	60da      	str	r2, [r3, #12]
 800146e:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	4a27      	ldr	r2, [pc, #156]	; (8001514 <HAL_TIM_Base_MspInit+0xbc>)
 8001476:	4293      	cmp	r3, r2
 8001478:	d10e      	bne.n	8001498 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800147a:	2300      	movs	r3, #0
 800147c:	613b      	str	r3, [r7, #16]
 800147e:	4b26      	ldr	r3, [pc, #152]	; (8001518 <HAL_TIM_Base_MspInit+0xc0>)
 8001480:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001482:	4a25      	ldr	r2, [pc, #148]	; (8001518 <HAL_TIM_Base_MspInit+0xc0>)
 8001484:	f043 0301 	orr.w	r3, r3, #1
 8001488:	6453      	str	r3, [r2, #68]	; 0x44
 800148a:	4b23      	ldr	r3, [pc, #140]	; (8001518 <HAL_TIM_Base_MspInit+0xc0>)
 800148c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800148e:	f003 0301 	and.w	r3, r3, #1
 8001492:	613b      	str	r3, [r7, #16]
 8001494:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001496:	e038      	b.n	800150a <HAL_TIM_Base_MspInit+0xb2>
  else if(htim_base->Instance==TIM3)
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	4a1f      	ldr	r2, [pc, #124]	; (800151c <HAL_TIM_Base_MspInit+0xc4>)
 800149e:	4293      	cmp	r3, r2
 80014a0:	d133      	bne.n	800150a <HAL_TIM_Base_MspInit+0xb2>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80014a2:	2300      	movs	r3, #0
 80014a4:	60fb      	str	r3, [r7, #12]
 80014a6:	4b1c      	ldr	r3, [pc, #112]	; (8001518 <HAL_TIM_Base_MspInit+0xc0>)
 80014a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014aa:	4a1b      	ldr	r2, [pc, #108]	; (8001518 <HAL_TIM_Base_MspInit+0xc0>)
 80014ac:	f043 0302 	orr.w	r3, r3, #2
 80014b0:	6413      	str	r3, [r2, #64]	; 0x40
 80014b2:	4b19      	ldr	r3, [pc, #100]	; (8001518 <HAL_TIM_Base_MspInit+0xc0>)
 80014b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014b6:	f003 0302 	and.w	r3, r3, #2
 80014ba:	60fb      	str	r3, [r7, #12]
 80014bc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014be:	2300      	movs	r3, #0
 80014c0:	60bb      	str	r3, [r7, #8]
 80014c2:	4b15      	ldr	r3, [pc, #84]	; (8001518 <HAL_TIM_Base_MspInit+0xc0>)
 80014c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014c6:	4a14      	ldr	r2, [pc, #80]	; (8001518 <HAL_TIM_Base_MspInit+0xc0>)
 80014c8:	f043 0301 	orr.w	r3, r3, #1
 80014cc:	6313      	str	r3, [r2, #48]	; 0x30
 80014ce:	4b12      	ldr	r3, [pc, #72]	; (8001518 <HAL_TIM_Base_MspInit+0xc0>)
 80014d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014d2:	f003 0301 	and.w	r3, r3, #1
 80014d6:	60bb      	str	r3, [r7, #8]
 80014d8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80014da:	2340      	movs	r3, #64	; 0x40
 80014dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014de:	2302      	movs	r3, #2
 80014e0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014e2:	2300      	movs	r3, #0
 80014e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014e6:	2300      	movs	r3, #0
 80014e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80014ea:	2302      	movs	r3, #2
 80014ec:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014ee:	f107 0314 	add.w	r3, r7, #20
 80014f2:	4619      	mov	r1, r3
 80014f4:	480a      	ldr	r0, [pc, #40]	; (8001520 <HAL_TIM_Base_MspInit+0xc8>)
 80014f6:	f001 f8b5 	bl	8002664 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 1, 0);
 80014fa:	2200      	movs	r2, #0
 80014fc:	2101      	movs	r1, #1
 80014fe:	201d      	movs	r0, #29
 8001500:	f001 f879 	bl	80025f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001504:	201d      	movs	r0, #29
 8001506:	f001 f892 	bl	800262e <HAL_NVIC_EnableIRQ>
}
 800150a:	bf00      	nop
 800150c:	3728      	adds	r7, #40	; 0x28
 800150e:	46bd      	mov	sp, r7
 8001510:	bd80      	pop	{r7, pc}
 8001512:	bf00      	nop
 8001514:	40010000 	.word	0x40010000
 8001518:	40023800 	.word	0x40023800
 800151c:	40000400 	.word	0x40000400
 8001520:	40020000 	.word	0x40020000

08001524 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b088      	sub	sp, #32
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800152c:	f107 030c 	add.w	r3, r7, #12
 8001530:	2200      	movs	r2, #0
 8001532:	601a      	str	r2, [r3, #0]
 8001534:	605a      	str	r2, [r3, #4]
 8001536:	609a      	str	r2, [r3, #8]
 8001538:	60da      	str	r2, [r3, #12]
 800153a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	4a17      	ldr	r2, [pc, #92]	; (80015a0 <HAL_TIM_MspPostInit+0x7c>)
 8001542:	4293      	cmp	r3, r2
 8001544:	d128      	bne.n	8001598 <HAL_TIM_MspPostInit+0x74>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001546:	2300      	movs	r3, #0
 8001548:	60bb      	str	r3, [r7, #8]
 800154a:	4b16      	ldr	r3, [pc, #88]	; (80015a4 <HAL_TIM_MspPostInit+0x80>)
 800154c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800154e:	4a15      	ldr	r2, [pc, #84]	; (80015a4 <HAL_TIM_MspPostInit+0x80>)
 8001550:	f043 0301 	orr.w	r3, r3, #1
 8001554:	6313      	str	r3, [r2, #48]	; 0x30
 8001556:	4b13      	ldr	r3, [pc, #76]	; (80015a4 <HAL_TIM_MspPostInit+0x80>)
 8001558:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800155a:	f003 0301 	and.w	r3, r3, #1
 800155e:	60bb      	str	r3, [r7, #8]
 8001560:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001562:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001566:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001568:	2302      	movs	r3, #2
 800156a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800156c:	2300      	movs	r3, #0
 800156e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001570:	2300      	movs	r3, #0
 8001572:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001574:	2301      	movs	r3, #1
 8001576:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001578:	f107 030c 	add.w	r3, r7, #12
 800157c:	4619      	mov	r1, r3
 800157e:	480a      	ldr	r0, [pc, #40]	; (80015a8 <HAL_TIM_MspPostInit+0x84>)
 8001580:	f001 f870 	bl	8002664 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM1_MspPostInit 1 */
    HAL_TIM_PWM_Start_IT(htim, TIM_CHANNEL_1);
 8001584:	2100      	movs	r1, #0
 8001586:	6878      	ldr	r0, [r7, #4]
 8001588:	f003 f880 	bl	800468c <HAL_TIM_PWM_Start_IT>
    htim->Instance->CCR1 = htim->Init.Period/2;
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	68da      	ldr	r2, [r3, #12]
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	0852      	lsrs	r2, r2, #1
 8001596:	635a      	str	r2, [r3, #52]	; 0x34
  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001598:	bf00      	nop
 800159a:	3720      	adds	r7, #32
 800159c:	46bd      	mov	sp, r7
 800159e:	bd80      	pop	{r7, pc}
 80015a0:	40010000 	.word	0x40010000
 80015a4:	40023800 	.word	0x40023800
 80015a8:	40020000 	.word	0x40020000

080015ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015ac:	b480      	push	{r7}
 80015ae:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80015b0:	bf00      	nop
 80015b2:	46bd      	mov	sp, r7
 80015b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b8:	4770      	bx	lr

080015ba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015ba:	b480      	push	{r7}
 80015bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015be:	e7fe      	b.n	80015be <HardFault_Handler+0x4>

080015c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015c0:	b480      	push	{r7}
 80015c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015c4:	e7fe      	b.n	80015c4 <MemManage_Handler+0x4>

080015c6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015c6:	b480      	push	{r7}
 80015c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015ca:	e7fe      	b.n	80015ca <BusFault_Handler+0x4>

080015cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015cc:	b480      	push	{r7}
 80015ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015d0:	e7fe      	b.n	80015d0 <UsageFault_Handler+0x4>

080015d2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80015d2:	b480      	push	{r7}
 80015d4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80015d6:	bf00      	nop
 80015d8:	46bd      	mov	sp, r7
 80015da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015de:	4770      	bx	lr

080015e0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015e0:	b480      	push	{r7}
 80015e2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015e4:	bf00      	nop
 80015e6:	46bd      	mov	sp, r7
 80015e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ec:	4770      	bx	lr

080015ee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80015ee:	b480      	push	{r7}
 80015f0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80015f2:	bf00      	nop
 80015f4:	46bd      	mov	sp, r7
 80015f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fa:	4770      	bx	lr

080015fc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001600:	f000 f8b2 	bl	8001768 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001604:	bf00      	nop
 8001606:	bd80      	pop	{r7, pc}

08001608 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 800160c:	4802      	ldr	r0, [pc, #8]	; (8001618 <ADC_IRQHandler+0x10>)
 800160e:	f000 f932 	bl	8001876 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8001612:	bf00      	nop
 8001614:	bd80      	pop	{r7, pc}
 8001616:	bf00      	nop
 8001618:	20002854 	.word	0x20002854

0800161c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001620:	4802      	ldr	r0, [pc, #8]	; (800162c <TIM3_IRQHandler+0x10>)
 8001622:	f003 faa5 	bl	8004b70 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001626:	bf00      	nop
 8001628:	bd80      	pop	{r7, pc}
 800162a:	bf00      	nop
 800162c:	2000280c 	.word	0x2000280c

08001630 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001634:	4802      	ldr	r0, [pc, #8]	; (8001640 <OTG_FS_IRQHandler+0x10>)
 8001636:	f001 fb02 	bl	8002c3e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800163a:	bf00      	nop
 800163c:	bd80      	pop	{r7, pc}
 800163e:	bf00      	nop
 8001640:	200035fc 	.word	0x200035fc

08001644 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001644:	b480      	push	{r7}
 8001646:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001648:	4b08      	ldr	r3, [pc, #32]	; (800166c <SystemInit+0x28>)
 800164a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800164e:	4a07      	ldr	r2, [pc, #28]	; (800166c <SystemInit+0x28>)
 8001650:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001654:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001658:	4b04      	ldr	r3, [pc, #16]	; (800166c <SystemInit+0x28>)
 800165a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800165e:	609a      	str	r2, [r3, #8]
#endif
}
 8001660:	bf00      	nop
 8001662:	46bd      	mov	sp, r7
 8001664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001668:	4770      	bx	lr
 800166a:	bf00      	nop
 800166c:	e000ed00 	.word	0xe000ed00

08001670 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001670:	f8df d034 	ldr.w	sp, [pc, #52]	; 80016a8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001674:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001676:	e003      	b.n	8001680 <LoopCopyDataInit>

08001678 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001678:	4b0c      	ldr	r3, [pc, #48]	; (80016ac <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800167a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800167c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800167e:	3104      	adds	r1, #4

08001680 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001680:	480b      	ldr	r0, [pc, #44]	; (80016b0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001682:	4b0c      	ldr	r3, [pc, #48]	; (80016b4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001684:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001686:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001688:	d3f6      	bcc.n	8001678 <CopyDataInit>
  ldr  r2, =_sbss
 800168a:	4a0b      	ldr	r2, [pc, #44]	; (80016b8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800168c:	e002      	b.n	8001694 <LoopFillZerobss>

0800168e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800168e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001690:	f842 3b04 	str.w	r3, [r2], #4

08001694 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001694:	4b09      	ldr	r3, [pc, #36]	; (80016bc <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001696:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001698:	d3f9      	bcc.n	800168e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800169a:	f7ff ffd3 	bl	8001644 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800169e:	f007 ffeb 	bl	8009678 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80016a2:	f7ff fb34 	bl	8000d0e <main>
  bx  lr    
 80016a6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80016a8:	20018000 	.word	0x20018000
  ldr  r3, =_sidata
 80016ac:	08009750 	.word	0x08009750
  ldr  r0, =_sdata
 80016b0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80016b4:	20000180 	.word	0x20000180
  ldr  r2, =_sbss
 80016b8:	20000180 	.word	0x20000180
  ldr  r3, = _ebss
 80016bc:	20003a04 	.word	0x20003a04

080016c0 <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80016c0:	e7fe      	b.n	80016c0 <DMA1_Stream0_IRQHandler>
	...

080016c4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80016c8:	4b0e      	ldr	r3, [pc, #56]	; (8001704 <HAL_Init+0x40>)
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	4a0d      	ldr	r2, [pc, #52]	; (8001704 <HAL_Init+0x40>)
 80016ce:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80016d2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80016d4:	4b0b      	ldr	r3, [pc, #44]	; (8001704 <HAL_Init+0x40>)
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	4a0a      	ldr	r2, [pc, #40]	; (8001704 <HAL_Init+0x40>)
 80016da:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80016de:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80016e0:	4b08      	ldr	r3, [pc, #32]	; (8001704 <HAL_Init+0x40>)
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	4a07      	ldr	r2, [pc, #28]	; (8001704 <HAL_Init+0x40>)
 80016e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016ea:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016ec:	2003      	movs	r0, #3
 80016ee:	f000 ff77 	bl	80025e0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80016f2:	2000      	movs	r0, #0
 80016f4:	f000 f808 	bl	8001708 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80016f8:	f7ff fe3a 	bl	8001370 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80016fc:	2300      	movs	r3, #0
}
 80016fe:	4618      	mov	r0, r3
 8001700:	bd80      	pop	{r7, pc}
 8001702:	bf00      	nop
 8001704:	40023c00 	.word	0x40023c00

08001708 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b082      	sub	sp, #8
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001710:	4b12      	ldr	r3, [pc, #72]	; (800175c <HAL_InitTick+0x54>)
 8001712:	681a      	ldr	r2, [r3, #0]
 8001714:	4b12      	ldr	r3, [pc, #72]	; (8001760 <HAL_InitTick+0x58>)
 8001716:	781b      	ldrb	r3, [r3, #0]
 8001718:	4619      	mov	r1, r3
 800171a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800171e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001722:	fbb2 f3f3 	udiv	r3, r2, r3
 8001726:	4618      	mov	r0, r3
 8001728:	f000 ff8f 	bl	800264a <HAL_SYSTICK_Config>
 800172c:	4603      	mov	r3, r0
 800172e:	2b00      	cmp	r3, #0
 8001730:	d001      	beq.n	8001736 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001732:	2301      	movs	r3, #1
 8001734:	e00e      	b.n	8001754 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	2b0f      	cmp	r3, #15
 800173a:	d80a      	bhi.n	8001752 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800173c:	2200      	movs	r2, #0
 800173e:	6879      	ldr	r1, [r7, #4]
 8001740:	f04f 30ff 	mov.w	r0, #4294967295
 8001744:	f000 ff57 	bl	80025f6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001748:	4a06      	ldr	r2, [pc, #24]	; (8001764 <HAL_InitTick+0x5c>)
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800174e:	2300      	movs	r3, #0
 8001750:	e000      	b.n	8001754 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001752:	2301      	movs	r3, #1
}
 8001754:	4618      	mov	r0, r3
 8001756:	3708      	adds	r7, #8
 8001758:	46bd      	mov	sp, r7
 800175a:	bd80      	pop	{r7, pc}
 800175c:	20000000 	.word	0x20000000
 8001760:	20000008 	.word	0x20000008
 8001764:	20000004 	.word	0x20000004

08001768 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001768:	b480      	push	{r7}
 800176a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800176c:	4b06      	ldr	r3, [pc, #24]	; (8001788 <HAL_IncTick+0x20>)
 800176e:	781b      	ldrb	r3, [r3, #0]
 8001770:	461a      	mov	r2, r3
 8001772:	4b06      	ldr	r3, [pc, #24]	; (800178c <HAL_IncTick+0x24>)
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	4413      	add	r3, r2
 8001778:	4a04      	ldr	r2, [pc, #16]	; (800178c <HAL_IncTick+0x24>)
 800177a:	6013      	str	r3, [r2, #0]
}
 800177c:	bf00      	nop
 800177e:	46bd      	mov	sp, r7
 8001780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001784:	4770      	bx	lr
 8001786:	bf00      	nop
 8001788:	20000008 	.word	0x20000008
 800178c:	200028f4 	.word	0x200028f4

08001790 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001790:	b480      	push	{r7}
 8001792:	af00      	add	r7, sp, #0
  return uwTick;
 8001794:	4b03      	ldr	r3, [pc, #12]	; (80017a4 <HAL_GetTick+0x14>)
 8001796:	681b      	ldr	r3, [r3, #0]
}
 8001798:	4618      	mov	r0, r3
 800179a:	46bd      	mov	sp, r7
 800179c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a0:	4770      	bx	lr
 80017a2:	bf00      	nop
 80017a4:	200028f4 	.word	0x200028f4

080017a8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b084      	sub	sp, #16
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80017b0:	f7ff ffee 	bl	8001790 <HAL_GetTick>
 80017b4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80017c0:	d005      	beq.n	80017ce <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80017c2:	4b0a      	ldr	r3, [pc, #40]	; (80017ec <HAL_Delay+0x44>)
 80017c4:	781b      	ldrb	r3, [r3, #0]
 80017c6:	461a      	mov	r2, r3
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	4413      	add	r3, r2
 80017cc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80017ce:	bf00      	nop
 80017d0:	f7ff ffde 	bl	8001790 <HAL_GetTick>
 80017d4:	4602      	mov	r2, r0
 80017d6:	68bb      	ldr	r3, [r7, #8]
 80017d8:	1ad3      	subs	r3, r2, r3
 80017da:	68fa      	ldr	r2, [r7, #12]
 80017dc:	429a      	cmp	r2, r3
 80017de:	d8f7      	bhi.n	80017d0 <HAL_Delay+0x28>
  {
  }
}
 80017e0:	bf00      	nop
 80017e2:	bf00      	nop
 80017e4:	3710      	adds	r7, #16
 80017e6:	46bd      	mov	sp, r7
 80017e8:	bd80      	pop	{r7, pc}
 80017ea:	bf00      	nop
 80017ec:	20000008 	.word	0x20000008

080017f0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b084      	sub	sp, #16
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80017f8:	2300      	movs	r3, #0
 80017fa:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d101      	bne.n	8001806 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001802:	2301      	movs	r3, #1
 8001804:	e033      	b.n	800186e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800180a:	2b00      	cmp	r3, #0
 800180c:	d109      	bne.n	8001822 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800180e:	6878      	ldr	r0, [r7, #4]
 8001810:	f7ff fdd6 	bl	80013c0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	2200      	movs	r2, #0
 8001818:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	2200      	movs	r2, #0
 800181e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001826:	f003 0310 	and.w	r3, r3, #16
 800182a:	2b00      	cmp	r3, #0
 800182c:	d118      	bne.n	8001860 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001832:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001836:	f023 0302 	bic.w	r3, r3, #2
 800183a:	f043 0202 	orr.w	r2, r3, #2
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001842:	6878      	ldr	r0, [r7, #4]
 8001844:	f000 fa98 	bl	8001d78 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	2200      	movs	r2, #0
 800184c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001852:	f023 0303 	bic.w	r3, r3, #3
 8001856:	f043 0201 	orr.w	r2, r3, #1
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	641a      	str	r2, [r3, #64]	; 0x40
 800185e:	e001      	b.n	8001864 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001860:	2301      	movs	r3, #1
 8001862:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	2200      	movs	r2, #0
 8001868:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800186c:	7bfb      	ldrb	r3, [r7, #15]
}
 800186e:	4618      	mov	r0, r3
 8001870:	3710      	adds	r7, #16
 8001872:	46bd      	mov	sp, r7
 8001874:	bd80      	pop	{r7, pc}

08001876 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8001876:	b580      	push	{r7, lr}
 8001878:	b084      	sub	sp, #16
 800187a:	af00      	add	r7, sp, #0
 800187c:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 800187e:	2300      	movs	r3, #0
 8001880:	60fb      	str	r3, [r7, #12]
 8001882:	2300      	movs	r3, #0
 8001884:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	f003 0302 	and.w	r3, r3, #2
 8001890:	2b02      	cmp	r3, #2
 8001892:	bf0c      	ite	eq
 8001894:	2301      	moveq	r3, #1
 8001896:	2300      	movne	r3, #0
 8001898:	b2db      	uxtb	r3, r3
 800189a:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	685b      	ldr	r3, [r3, #4]
 80018a2:	f003 0320 	and.w	r3, r3, #32
 80018a6:	2b20      	cmp	r3, #32
 80018a8:	bf0c      	ite	eq
 80018aa:	2301      	moveq	r3, #1
 80018ac:	2300      	movne	r3, #0
 80018ae:	b2db      	uxtb	r3, r3
 80018b0:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d049      	beq.n	800194c <HAL_ADC_IRQHandler+0xd6>
 80018b8:	68bb      	ldr	r3, [r7, #8]
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d046      	beq.n	800194c <HAL_ADC_IRQHandler+0xd6>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018c2:	f003 0310 	and.w	r3, r3, #16
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d105      	bne.n	80018d6 <HAL_ADC_IRQHandler+0x60>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ce:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	689b      	ldr	r3, [r3, #8]
 80018dc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d12b      	bne.n	800193c <HAL_ADC_IRQHandler+0xc6>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d127      	bne.n	800193c <HAL_ADC_IRQHandler+0xc6>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018f2:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d006      	beq.n	8001908 <HAL_ADC_IRQHandler+0x92>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	689b      	ldr	r3, [r3, #8]
 8001900:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001904:	2b00      	cmp	r3, #0
 8001906:	d119      	bne.n	800193c <HAL_ADC_IRQHandler+0xc6>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	685a      	ldr	r2, [r3, #4]
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	f022 0220 	bic.w	r2, r2, #32
 8001916:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800191c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001928:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800192c:	2b00      	cmp	r3, #0
 800192e:	d105      	bne.n	800193c <HAL_ADC_IRQHandler+0xc6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001934:	f043 0201 	orr.w	r2, r3, #1
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800193c:	6878      	ldr	r0, [r7, #4]
 800193e:	f000 f8db 	bl	8001af8 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	f06f 0212 	mvn.w	r2, #18
 800194a:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	f003 0304 	and.w	r3, r3, #4
 8001956:	2b04      	cmp	r3, #4
 8001958:	bf0c      	ite	eq
 800195a:	2301      	moveq	r3, #1
 800195c:	2300      	movne	r3, #0
 800195e:	b2db      	uxtb	r3, r3
 8001960:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	685b      	ldr	r3, [r3, #4]
 8001968:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800196c:	2b80      	cmp	r3, #128	; 0x80
 800196e:	bf0c      	ite	eq
 8001970:	2301      	moveq	r3, #1
 8001972:	2300      	movne	r3, #0
 8001974:	b2db      	uxtb	r3, r3
 8001976:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	2b00      	cmp	r3, #0
 800197c:	d057      	beq.n	8001a2e <HAL_ADC_IRQHandler+0x1b8>
 800197e:	68bb      	ldr	r3, [r7, #8]
 8001980:	2b00      	cmp	r3, #0
 8001982:	d054      	beq.n	8001a2e <HAL_ADC_IRQHandler+0x1b8>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001988:	f003 0310 	and.w	r3, r3, #16
 800198c:	2b00      	cmp	r3, #0
 800198e:	d105      	bne.n	800199c <HAL_ADC_IRQHandler+0x126>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001994:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	689b      	ldr	r3, [r3, #8]
 80019a2:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d139      	bne.n	8001a1e <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80019b0:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d006      	beq.n	80019c6 <HAL_ADC_IRQHandler+0x150>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	689b      	ldr	r3, [r3, #8]
 80019be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d12b      	bne.n	8001a1e <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	685b      	ldr	r3, [r3, #4]
 80019cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d124      	bne.n	8001a1e <HAL_ADC_IRQHandler+0x1a8>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	689b      	ldr	r3, [r3, #8]
 80019da:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d11d      	bne.n	8001a1e <HAL_ADC_IRQHandler+0x1a8>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d119      	bne.n	8001a1e <HAL_ADC_IRQHandler+0x1a8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	685a      	ldr	r2, [r3, #4]
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80019f8:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019fe:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d105      	bne.n	8001a1e <HAL_ADC_IRQHandler+0x1a8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a16:	f043 0201 	orr.w	r2, r3, #1
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001a1e:	6878      	ldr	r0, [r7, #4]
 8001a20:	f7ff fc2a 	bl	8001278 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f06f 020c 	mvn.w	r2, #12
 8001a2c:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	f003 0301 	and.w	r3, r3, #1
 8001a38:	2b01      	cmp	r3, #1
 8001a3a:	bf0c      	ite	eq
 8001a3c:	2301      	moveq	r3, #1
 8001a3e:	2300      	movne	r3, #0
 8001a40:	b2db      	uxtb	r3, r3
 8001a42:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	685b      	ldr	r3, [r3, #4]
 8001a4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a4e:	2b40      	cmp	r3, #64	; 0x40
 8001a50:	bf0c      	ite	eq
 8001a52:	2301      	moveq	r3, #1
 8001a54:	2300      	movne	r3, #0
 8001a56:	b2db      	uxtb	r3, r3
 8001a58:	60bb      	str	r3, [r7, #8]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d017      	beq.n	8001a90 <HAL_ADC_IRQHandler+0x21a>
 8001a60:	68bb      	ldr	r3, [r7, #8]
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d014      	beq.n	8001a90 <HAL_ADC_IRQHandler+0x21a>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	f003 0301 	and.w	r3, r3, #1
 8001a70:	2b01      	cmp	r3, #1
 8001a72:	d10d      	bne.n	8001a90 <HAL_ADC_IRQHandler+0x21a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a78:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001a80:	6878      	ldr	r0, [r7, #4]
 8001a82:	f000 f843 	bl	8001b0c <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f06f 0201 	mvn.w	r2, #1
 8001a8e:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f003 0320 	and.w	r3, r3, #32
 8001a9a:	2b20      	cmp	r3, #32
 8001a9c:	bf0c      	ite	eq
 8001a9e:	2301      	moveq	r3, #1
 8001aa0:	2300      	movne	r3, #0
 8001aa2:	b2db      	uxtb	r3, r3
 8001aa4:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	685b      	ldr	r3, [r3, #4]
 8001aac:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001ab0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001ab4:	bf0c      	ite	eq
 8001ab6:	2301      	moveq	r3, #1
 8001ab8:	2300      	movne	r3, #0
 8001aba:	b2db      	uxtb	r3, r3
 8001abc:	60bb      	str	r3, [r7, #8]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d015      	beq.n	8001af0 <HAL_ADC_IRQHandler+0x27a>
 8001ac4:	68bb      	ldr	r3, [r7, #8]
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d012      	beq.n	8001af0 <HAL_ADC_IRQHandler+0x27a>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ace:	f043 0202 	orr.w	r2, r3, #2
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f06f 0220 	mvn.w	r2, #32
 8001ade:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8001ae0:	6878      	ldr	r0, [r7, #4]
 8001ae2:	f000 f81d 	bl	8001b20 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f06f 0220 	mvn.w	r2, #32
 8001aee:	601a      	str	r2, [r3, #0]
  }
}
 8001af0:	bf00      	nop
 8001af2:	3710      	adds	r7, #16
 8001af4:	46bd      	mov	sp, r7
 8001af6:	bd80      	pop	{r7, pc}

08001af8 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001af8:	b480      	push	{r7}
 8001afa:	b083      	sub	sp, #12
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8001b00:	bf00      	nop
 8001b02:	370c      	adds	r7, #12
 8001b04:	46bd      	mov	sp, r7
 8001b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0a:	4770      	bx	lr

08001b0c <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8001b0c:	b480      	push	{r7}
 8001b0e:	b083      	sub	sp, #12
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8001b14:	bf00      	nop
 8001b16:	370c      	adds	r7, #12
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1e:	4770      	bx	lr

08001b20 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001b20:	b480      	push	{r7}
 8001b22:	b083      	sub	sp, #12
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001b28:	bf00      	nop
 8001b2a:	370c      	adds	r7, #12
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b32:	4770      	bx	lr

08001b34 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001b34:	b480      	push	{r7}
 8001b36:	b085      	sub	sp, #20
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
 8001b3c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001b3e:	2300      	movs	r3, #0
 8001b40:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001b48:	2b01      	cmp	r3, #1
 8001b4a:	d101      	bne.n	8001b50 <HAL_ADC_ConfigChannel+0x1c>
 8001b4c:	2302      	movs	r3, #2
 8001b4e:	e105      	b.n	8001d5c <HAL_ADC_ConfigChannel+0x228>
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	2201      	movs	r2, #1
 8001b54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001b58:	683b      	ldr	r3, [r7, #0]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	2b09      	cmp	r3, #9
 8001b5e:	d925      	bls.n	8001bac <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	68d9      	ldr	r1, [r3, #12]
 8001b66:	683b      	ldr	r3, [r7, #0]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	b29b      	uxth	r3, r3
 8001b6c:	461a      	mov	r2, r3
 8001b6e:	4613      	mov	r3, r2
 8001b70:	005b      	lsls	r3, r3, #1
 8001b72:	4413      	add	r3, r2
 8001b74:	3b1e      	subs	r3, #30
 8001b76:	2207      	movs	r2, #7
 8001b78:	fa02 f303 	lsl.w	r3, r2, r3
 8001b7c:	43da      	mvns	r2, r3
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	400a      	ands	r2, r1
 8001b84:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	68d9      	ldr	r1, [r3, #12]
 8001b8c:	683b      	ldr	r3, [r7, #0]
 8001b8e:	689a      	ldr	r2, [r3, #8]
 8001b90:	683b      	ldr	r3, [r7, #0]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	b29b      	uxth	r3, r3
 8001b96:	4618      	mov	r0, r3
 8001b98:	4603      	mov	r3, r0
 8001b9a:	005b      	lsls	r3, r3, #1
 8001b9c:	4403      	add	r3, r0
 8001b9e:	3b1e      	subs	r3, #30
 8001ba0:	409a      	lsls	r2, r3
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	430a      	orrs	r2, r1
 8001ba8:	60da      	str	r2, [r3, #12]
 8001baa:	e022      	b.n	8001bf2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	6919      	ldr	r1, [r3, #16]
 8001bb2:	683b      	ldr	r3, [r7, #0]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	b29b      	uxth	r3, r3
 8001bb8:	461a      	mov	r2, r3
 8001bba:	4613      	mov	r3, r2
 8001bbc:	005b      	lsls	r3, r3, #1
 8001bbe:	4413      	add	r3, r2
 8001bc0:	2207      	movs	r2, #7
 8001bc2:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc6:	43da      	mvns	r2, r3
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	400a      	ands	r2, r1
 8001bce:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	6919      	ldr	r1, [r3, #16]
 8001bd6:	683b      	ldr	r3, [r7, #0]
 8001bd8:	689a      	ldr	r2, [r3, #8]
 8001bda:	683b      	ldr	r3, [r7, #0]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	b29b      	uxth	r3, r3
 8001be0:	4618      	mov	r0, r3
 8001be2:	4603      	mov	r3, r0
 8001be4:	005b      	lsls	r3, r3, #1
 8001be6:	4403      	add	r3, r0
 8001be8:	409a      	lsls	r2, r3
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	430a      	orrs	r2, r1
 8001bf0:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001bf2:	683b      	ldr	r3, [r7, #0]
 8001bf4:	685b      	ldr	r3, [r3, #4]
 8001bf6:	2b06      	cmp	r3, #6
 8001bf8:	d824      	bhi.n	8001c44 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001c00:	683b      	ldr	r3, [r7, #0]
 8001c02:	685a      	ldr	r2, [r3, #4]
 8001c04:	4613      	mov	r3, r2
 8001c06:	009b      	lsls	r3, r3, #2
 8001c08:	4413      	add	r3, r2
 8001c0a:	3b05      	subs	r3, #5
 8001c0c:	221f      	movs	r2, #31
 8001c0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c12:	43da      	mvns	r2, r3
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	400a      	ands	r2, r1
 8001c1a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001c22:	683b      	ldr	r3, [r7, #0]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	b29b      	uxth	r3, r3
 8001c28:	4618      	mov	r0, r3
 8001c2a:	683b      	ldr	r3, [r7, #0]
 8001c2c:	685a      	ldr	r2, [r3, #4]
 8001c2e:	4613      	mov	r3, r2
 8001c30:	009b      	lsls	r3, r3, #2
 8001c32:	4413      	add	r3, r2
 8001c34:	3b05      	subs	r3, #5
 8001c36:	fa00 f203 	lsl.w	r2, r0, r3
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	430a      	orrs	r2, r1
 8001c40:	635a      	str	r2, [r3, #52]	; 0x34
 8001c42:	e04c      	b.n	8001cde <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001c44:	683b      	ldr	r3, [r7, #0]
 8001c46:	685b      	ldr	r3, [r3, #4]
 8001c48:	2b0c      	cmp	r3, #12
 8001c4a:	d824      	bhi.n	8001c96 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001c52:	683b      	ldr	r3, [r7, #0]
 8001c54:	685a      	ldr	r2, [r3, #4]
 8001c56:	4613      	mov	r3, r2
 8001c58:	009b      	lsls	r3, r3, #2
 8001c5a:	4413      	add	r3, r2
 8001c5c:	3b23      	subs	r3, #35	; 0x23
 8001c5e:	221f      	movs	r2, #31
 8001c60:	fa02 f303 	lsl.w	r3, r2, r3
 8001c64:	43da      	mvns	r2, r3
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	400a      	ands	r2, r1
 8001c6c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001c74:	683b      	ldr	r3, [r7, #0]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	b29b      	uxth	r3, r3
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	683b      	ldr	r3, [r7, #0]
 8001c7e:	685a      	ldr	r2, [r3, #4]
 8001c80:	4613      	mov	r3, r2
 8001c82:	009b      	lsls	r3, r3, #2
 8001c84:	4413      	add	r3, r2
 8001c86:	3b23      	subs	r3, #35	; 0x23
 8001c88:	fa00 f203 	lsl.w	r2, r0, r3
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	430a      	orrs	r2, r1
 8001c92:	631a      	str	r2, [r3, #48]	; 0x30
 8001c94:	e023      	b.n	8001cde <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001c9c:	683b      	ldr	r3, [r7, #0]
 8001c9e:	685a      	ldr	r2, [r3, #4]
 8001ca0:	4613      	mov	r3, r2
 8001ca2:	009b      	lsls	r3, r3, #2
 8001ca4:	4413      	add	r3, r2
 8001ca6:	3b41      	subs	r3, #65	; 0x41
 8001ca8:	221f      	movs	r2, #31
 8001caa:	fa02 f303 	lsl.w	r3, r2, r3
 8001cae:	43da      	mvns	r2, r3
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	400a      	ands	r2, r1
 8001cb6:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001cbe:	683b      	ldr	r3, [r7, #0]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	b29b      	uxth	r3, r3
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	683b      	ldr	r3, [r7, #0]
 8001cc8:	685a      	ldr	r2, [r3, #4]
 8001cca:	4613      	mov	r3, r2
 8001ccc:	009b      	lsls	r3, r3, #2
 8001cce:	4413      	add	r3, r2
 8001cd0:	3b41      	subs	r3, #65	; 0x41
 8001cd2:	fa00 f203 	lsl.w	r2, r0, r3
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	430a      	orrs	r2, r1
 8001cdc:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001cde:	4b22      	ldr	r3, [pc, #136]	; (8001d68 <HAL_ADC_ConfigChannel+0x234>)
 8001ce0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	4a21      	ldr	r2, [pc, #132]	; (8001d6c <HAL_ADC_ConfigChannel+0x238>)
 8001ce8:	4293      	cmp	r3, r2
 8001cea:	d109      	bne.n	8001d00 <HAL_ADC_ConfigChannel+0x1cc>
 8001cec:	683b      	ldr	r3, [r7, #0]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	2b12      	cmp	r3, #18
 8001cf2:	d105      	bne.n	8001d00 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	685b      	ldr	r3, [r3, #4]
 8001cf8:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	4a19      	ldr	r2, [pc, #100]	; (8001d6c <HAL_ADC_ConfigChannel+0x238>)
 8001d06:	4293      	cmp	r3, r2
 8001d08:	d123      	bne.n	8001d52 <HAL_ADC_ConfigChannel+0x21e>
 8001d0a:	683b      	ldr	r3, [r7, #0]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	2b10      	cmp	r3, #16
 8001d10:	d003      	beq.n	8001d1a <HAL_ADC_ConfigChannel+0x1e6>
 8001d12:	683b      	ldr	r3, [r7, #0]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	2b11      	cmp	r3, #17
 8001d18:	d11b      	bne.n	8001d52 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	685b      	ldr	r3, [r3, #4]
 8001d1e:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001d26:	683b      	ldr	r3, [r7, #0]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	2b10      	cmp	r3, #16
 8001d2c:	d111      	bne.n	8001d52 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001d2e:	4b10      	ldr	r3, [pc, #64]	; (8001d70 <HAL_ADC_ConfigChannel+0x23c>)
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	4a10      	ldr	r2, [pc, #64]	; (8001d74 <HAL_ADC_ConfigChannel+0x240>)
 8001d34:	fba2 2303 	umull	r2, r3, r2, r3
 8001d38:	0c9a      	lsrs	r2, r3, #18
 8001d3a:	4613      	mov	r3, r2
 8001d3c:	009b      	lsls	r3, r3, #2
 8001d3e:	4413      	add	r3, r2
 8001d40:	005b      	lsls	r3, r3, #1
 8001d42:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001d44:	e002      	b.n	8001d4c <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8001d46:	68bb      	ldr	r3, [r7, #8]
 8001d48:	3b01      	subs	r3, #1
 8001d4a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001d4c:	68bb      	ldr	r3, [r7, #8]
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d1f9      	bne.n	8001d46 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	2200      	movs	r2, #0
 8001d56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001d5a:	2300      	movs	r3, #0
}
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	3714      	adds	r7, #20
 8001d60:	46bd      	mov	sp, r7
 8001d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d66:	4770      	bx	lr
 8001d68:	40012300 	.word	0x40012300
 8001d6c:	40012000 	.word	0x40012000
 8001d70:	20000000 	.word	0x20000000
 8001d74:	431bde83 	.word	0x431bde83

08001d78 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001d78:	b480      	push	{r7}
 8001d7a:	b085      	sub	sp, #20
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001d80:	4b79      	ldr	r3, [pc, #484]	; (8001f68 <ADC_Init+0x1f0>)
 8001d82:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	685b      	ldr	r3, [r3, #4]
 8001d88:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	685a      	ldr	r2, [r3, #4]
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	685b      	ldr	r3, [r3, #4]
 8001d98:	431a      	orrs	r2, r3
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	685a      	ldr	r2, [r3, #4]
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001dac:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	6859      	ldr	r1, [r3, #4]
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	691b      	ldr	r3, [r3, #16]
 8001db8:	021a      	lsls	r2, r3, #8
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	430a      	orrs	r2, r1
 8001dc0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	685a      	ldr	r2, [r3, #4]
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001dd0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	6859      	ldr	r1, [r3, #4]
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	689a      	ldr	r2, [r3, #8]
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	430a      	orrs	r2, r1
 8001de2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	689a      	ldr	r2, [r3, #8]
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001df2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	6899      	ldr	r1, [r3, #8]
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	68da      	ldr	r2, [r3, #12]
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	430a      	orrs	r2, r1
 8001e04:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e0a:	4a58      	ldr	r2, [pc, #352]	; (8001f6c <ADC_Init+0x1f4>)
 8001e0c:	4293      	cmp	r3, r2
 8001e0e:	d022      	beq.n	8001e56 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	689a      	ldr	r2, [r3, #8]
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001e1e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	6899      	ldr	r1, [r3, #8]
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	430a      	orrs	r2, r1
 8001e30:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	689a      	ldr	r2, [r3, #8]
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001e40:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	6899      	ldr	r1, [r3, #8]
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	430a      	orrs	r2, r1
 8001e52:	609a      	str	r2, [r3, #8]
 8001e54:	e00f      	b.n	8001e76 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	689a      	ldr	r2, [r3, #8]
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001e64:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	689a      	ldr	r2, [r3, #8]
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001e74:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	689a      	ldr	r2, [r3, #8]
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	f022 0202 	bic.w	r2, r2, #2
 8001e84:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	6899      	ldr	r1, [r3, #8]
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	7e1b      	ldrb	r3, [r3, #24]
 8001e90:	005a      	lsls	r2, r3, #1
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	430a      	orrs	r2, r1
 8001e98:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d01b      	beq.n	8001edc <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	685a      	ldr	r2, [r3, #4]
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001eb2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	685a      	ldr	r2, [r3, #4]
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001ec2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	6859      	ldr	r1, [r3, #4]
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ece:	3b01      	subs	r3, #1
 8001ed0:	035a      	lsls	r2, r3, #13
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	430a      	orrs	r2, r1
 8001ed8:	605a      	str	r2, [r3, #4]
 8001eda:	e007      	b.n	8001eec <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	685a      	ldr	r2, [r3, #4]
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001eea:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001efa:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	69db      	ldr	r3, [r3, #28]
 8001f06:	3b01      	subs	r3, #1
 8001f08:	051a      	lsls	r2, r3, #20
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	430a      	orrs	r2, r1
 8001f10:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	689a      	ldr	r2, [r3, #8]
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001f20:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	6899      	ldr	r1, [r3, #8]
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001f2e:	025a      	lsls	r2, r3, #9
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	430a      	orrs	r2, r1
 8001f36:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	689a      	ldr	r2, [r3, #8]
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001f46:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	6899      	ldr	r1, [r3, #8]
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	695b      	ldr	r3, [r3, #20]
 8001f52:	029a      	lsls	r2, r3, #10
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	430a      	orrs	r2, r1
 8001f5a:	609a      	str	r2, [r3, #8]
}
 8001f5c:	bf00      	nop
 8001f5e:	3714      	adds	r7, #20
 8001f60:	46bd      	mov	sp, r7
 8001f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f66:	4770      	bx	lr
 8001f68:	40012300 	.word	0x40012300
 8001f6c:	0f000001 	.word	0x0f000001

08001f70 <HAL_ADCEx_InjectedStart_IT>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedStart_IT(ADC_HandleTypeDef* hadc)
{
 8001f70:	b480      	push	{r7}
 8001f72:	b087      	sub	sp, #28
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001f78:	2300      	movs	r3, #0
 8001f7a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	617b      	str	r3, [r7, #20]
 8001f80:	2300      	movs	r3, #0
 8001f82:	613b      	str	r3, [r7, #16]
  ADC_Common_TypeDef *tmpADC_Common;
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001f8a:	2b01      	cmp	r3, #1
 8001f8c:	d101      	bne.n	8001f92 <HAL_ADCEx_InjectedStart_IT+0x22>
 8001f8e:	2302      	movs	r3, #2
 8001f90:	e0b2      	b.n	80020f8 <HAL_ADCEx_InjectedStart_IT+0x188>
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	2201      	movs	r2, #1
 8001f96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
     Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	689b      	ldr	r3, [r3, #8]
 8001fa0:	f003 0301 	and.w	r3, r3, #1
 8001fa4:	2b01      	cmp	r3, #1
 8001fa6:	d018      	beq.n	8001fda <HAL_ADCEx_InjectedStart_IT+0x6a>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	689a      	ldr	r2, [r3, #8]
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f042 0201 	orr.w	r2, r2, #1
 8001fb6:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001fb8:	4b52      	ldr	r3, [pc, #328]	; (8002104 <HAL_ADCEx_InjectedStart_IT+0x194>)
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	4a52      	ldr	r2, [pc, #328]	; (8002108 <HAL_ADCEx_InjectedStart_IT+0x198>)
 8001fbe:	fba2 2303 	umull	r2, r3, r2, r3
 8001fc2:	0c9a      	lsrs	r2, r3, #18
 8001fc4:	4613      	mov	r3, r2
 8001fc6:	005b      	lsls	r3, r3, #1
 8001fc8:	4413      	add	r3, r2
 8001fca:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001fcc:	e002      	b.n	8001fd4 <HAL_ADCEx_InjectedStart_IT+0x64>
    {
      counter--;
 8001fce:	68bb      	ldr	r3, [r7, #8]
 8001fd0:	3b01      	subs	r3, #1
 8001fd2:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001fd4:	68bb      	ldr	r3, [r7, #8]
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d1f9      	bne.n	8001fce <HAL_ADCEx_InjectedStart_IT+0x5e>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	689b      	ldr	r3, [r3, #8]
 8001fe0:	f003 0301 	and.w	r3, r3, #1
 8001fe4:	2b01      	cmp	r3, #1
 8001fe6:	d17a      	bne.n	80020de <HAL_ADCEx_InjectedStart_IT+0x16e>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to injected group conversion results    */
    /* - Set state bitfield related to injected operation                     */
    ADC_STATE_CLR_SET(hadc->State,
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fec:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001ff0:	f023 0301 	bic.w	r3, r3, #1
 8001ff4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Check if a regular conversion is ongoing */
    /* Note: On this device, there is no ADC error code fields related to     */
    /*       conversions on group injected only. In case of conversion on     */
    /*       going on group regular, no error code is reset.                  */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002000:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002004:	2b00      	cmp	r3, #0
 8002006:	d102      	bne.n	800200e <HAL_ADCEx_InjectedStart_IT+0x9e>
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	2200      	movs	r2, #0
 800200c:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	2200      	movs	r2, #0
 8002012:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear injected group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC);
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f06f 0204 	mvn.w	r2, #4
 800201e:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for injected channels */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	685a      	ldr	r2, [r3, #4]
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800202e:	605a      	str	r2, [r3, #4]

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADC and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002030:	4b36      	ldr	r3, [pc, #216]	; (800210c <HAL_ADCEx_InjectedStart_IT+0x19c>)
 8002032:	60fb      	str	r3, [r7, #12]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	685b      	ldr	r3, [r3, #4]
 8002038:	f003 031f 	and.w	r3, r3, #31
 800203c:	2b00      	cmp	r3, #0
 800203e:	d124      	bne.n	800208a <HAL_ADCEx_InjectedStart_IT+0x11a>
    {
      tmp1 = HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_JEXTEN);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	689b      	ldr	r3, [r3, #8]
 8002046:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800204a:	2b00      	cmp	r3, #0
 800204c:	bf0c      	ite	eq
 800204e:	2301      	moveq	r3, #1
 8002050:	2300      	movne	r3, #0
 8002052:	b2db      	uxtb	r3, r3
 8002054:	617b      	str	r3, [r7, #20]
      tmp2 = HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO);
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	685b      	ldr	r3, [r3, #4]
 800205c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002060:	2b00      	cmp	r3, #0
 8002062:	bf0c      	ite	eq
 8002064:	2301      	moveq	r3, #1
 8002066:	2300      	movne	r3, #0
 8002068:	b2db      	uxtb	r3, r3
 800206a:	613b      	str	r3, [r7, #16]
      if(tmp1 && tmp2)
 800206c:	697b      	ldr	r3, [r7, #20]
 800206e:	2b00      	cmp	r3, #0
 8002070:	d041      	beq.n	80020f6 <HAL_ADCEx_InjectedStart_IT+0x186>
 8002072:	693b      	ldr	r3, [r7, #16]
 8002074:	2b00      	cmp	r3, #0
 8002076:	d03e      	beq.n	80020f6 <HAL_ADCEx_InjectedStart_IT+0x186>
      {
        /* Enable the selected ADC software conversion for injected group */
        hadc->Instance->CR2 |= ADC_CR2_JSWSTART;
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	689a      	ldr	r2, [r3, #8]
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8002086:	609a      	str	r2, [r3, #8]
 8002088:	e035      	b.n	80020f6 <HAL_ADCEx_InjectedStart_IT+0x186>
      }
    }
    else
    {
      tmp1 = HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_JEXTEN);
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	689b      	ldr	r3, [r3, #8]
 8002090:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8002094:	2b00      	cmp	r3, #0
 8002096:	bf0c      	ite	eq
 8002098:	2301      	moveq	r3, #1
 800209a:	2300      	movne	r3, #0
 800209c:	b2db      	uxtb	r3, r3
 800209e:	617b      	str	r3, [r7, #20]
      tmp2 = HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO);
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	685b      	ldr	r3, [r3, #4]
 80020a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	bf0c      	ite	eq
 80020ae:	2301      	moveq	r3, #1
 80020b0:	2300      	movne	r3, #0
 80020b2:	b2db      	uxtb	r3, r3
 80020b4:	613b      	str	r3, [r7, #16]
      if((hadc->Instance == ADC1) && tmp1 && tmp2)  
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	4a15      	ldr	r2, [pc, #84]	; (8002110 <HAL_ADCEx_InjectedStart_IT+0x1a0>)
 80020bc:	4293      	cmp	r3, r2
 80020be:	d11a      	bne.n	80020f6 <HAL_ADCEx_InjectedStart_IT+0x186>
 80020c0:	697b      	ldr	r3, [r7, #20]
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d017      	beq.n	80020f6 <HAL_ADCEx_InjectedStart_IT+0x186>
 80020c6:	693b      	ldr	r3, [r7, #16]
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d014      	beq.n	80020f6 <HAL_ADCEx_InjectedStart_IT+0x186>
      {
        /* Enable the selected ADC software conversion for injected group */
        hadc->Instance->CR2 |= ADC_CR2_JSWSTART;
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	689a      	ldr	r2, [r3, #8]
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 80020da:	609a      	str	r2, [r3, #8]
 80020dc:	e00b      	b.n	80020f6 <HAL_ADCEx_InjectedStart_IT+0x186>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020e2:	f043 0210 	orr.w	r2, r3, #16
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020ee:	f043 0201 	orr.w	r2, r3, #1
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80020f6:	2300      	movs	r3, #0
}
 80020f8:	4618      	mov	r0, r3
 80020fa:	371c      	adds	r7, #28
 80020fc:	46bd      	mov	sp, r7
 80020fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002102:	4770      	bx	lr
 8002104:	20000000 	.word	0x20000000
 8002108:	431bde83 	.word	0x431bde83
 800210c:	40012300 	.word	0x40012300
 8002110:	40012000 	.word	0x40012000

08002114 <HAL_ADCEx_InjectedConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfigInjected ADC configuration structure for injected channel. 
  * @retval None
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedConfigChannel(ADC_HandleTypeDef* hadc, ADC_InjectionConfTypeDef* sConfigInjected)
{
 8002114:	b480      	push	{r7}
 8002116:	b085      	sub	sp, #20
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
 800211c:	6039      	str	r1, [r7, #0]
  {
    assert_param(IS_ADC_EXT_INJEC_TRIG_EDGE(sConfigInjected->ExternalTrigInjecConvEdge));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002124:	2b01      	cmp	r3, #1
 8002126:	d101      	bne.n	800212c <HAL_ADCEx_InjectedConfigChannel+0x18>
 8002128:	2302      	movs	r3, #2
 800212a:	e17d      	b.n	8002428 <HAL_ADCEx_InjectedConfigChannel+0x314>
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	2201      	movs	r2, #1
 8002130:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfigInjected->InjectedChannel > ADC_CHANNEL_9)
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	2b09      	cmp	r3, #9
 800213a:	d925      	bls.n	8002188 <HAL_ADCEx_InjectedConfigChannel+0x74>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfigInjected->InjectedChannel);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	68d9      	ldr	r1, [r3, #12]
 8002142:	683b      	ldr	r3, [r7, #0]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	b29b      	uxth	r3, r3
 8002148:	461a      	mov	r2, r3
 800214a:	4613      	mov	r3, r2
 800214c:	005b      	lsls	r3, r3, #1
 800214e:	4413      	add	r3, r2
 8002150:	3b1e      	subs	r3, #30
 8002152:	2207      	movs	r2, #7
 8002154:	fa02 f303 	lsl.w	r3, r2, r3
 8002158:	43da      	mvns	r2, r3
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	400a      	ands	r2, r1
 8002160:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel);
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	68d9      	ldr	r1, [r3, #12]
 8002168:	683b      	ldr	r3, [r7, #0]
 800216a:	689a      	ldr	r2, [r3, #8]
 800216c:	683b      	ldr	r3, [r7, #0]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	b29b      	uxth	r3, r3
 8002172:	4618      	mov	r0, r3
 8002174:	4603      	mov	r3, r0
 8002176:	005b      	lsls	r3, r3, #1
 8002178:	4403      	add	r3, r0
 800217a:	3b1e      	subs	r3, #30
 800217c:	409a      	lsls	r2, r3
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	430a      	orrs	r2, r1
 8002184:	60da      	str	r2, [r3, #12]
 8002186:	e022      	b.n	80021ce <HAL_ADCEx_InjectedConfigChannel+0xba>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfigInjected->InjectedChannel);
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	6919      	ldr	r1, [r3, #16]
 800218e:	683b      	ldr	r3, [r7, #0]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	b29b      	uxth	r3, r3
 8002194:	461a      	mov	r2, r3
 8002196:	4613      	mov	r3, r2
 8002198:	005b      	lsls	r3, r3, #1
 800219a:	4413      	add	r3, r2
 800219c:	2207      	movs	r2, #7
 800219e:	fa02 f303 	lsl.w	r3, r2, r3
 80021a2:	43da      	mvns	r2, r3
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	400a      	ands	r2, r1
 80021aa:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel);
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	6919      	ldr	r1, [r3, #16]
 80021b2:	683b      	ldr	r3, [r7, #0]
 80021b4:	689a      	ldr	r2, [r3, #8]
 80021b6:	683b      	ldr	r3, [r7, #0]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	b29b      	uxth	r3, r3
 80021bc:	4618      	mov	r0, r3
 80021be:	4603      	mov	r3, r0
 80021c0:	005b      	lsls	r3, r3, #1
 80021c2:	4403      	add	r3, r0
 80021c4:	409a      	lsls	r2, r3
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	430a      	orrs	r2, r1
 80021cc:	611a      	str	r2, [r3, #16]
  }
  
  /*---------------------------- ADCx JSQR Configuration -----------------*/
  hadc->Instance->JSQR &= ~(ADC_JSQR_JL);
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 80021dc:	639a      	str	r2, [r3, #56]	; 0x38
  hadc->Instance->JSQR |=  ADC_SQR1(sConfigInjected->InjectedNbrOfConversion);
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80021e4:	683b      	ldr	r3, [r7, #0]
 80021e6:	691b      	ldr	r3, [r3, #16]
 80021e8:	3b01      	subs	r3, #1
 80021ea:	051a      	lsls	r2, r3, #20
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	430a      	orrs	r2, r1
 80021f2:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Rank configuration */
  
  /* Clear the old SQx bits for the selected rank */
  hadc->Instance->JSQR &= ~ADC_JSQR(ADC_JSQR_JSQ1, sConfigInjected->InjectedRank,sConfigInjected->InjectedNbrOfConversion);
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80021fa:	683b      	ldr	r3, [r7, #0]
 80021fc:	685b      	ldr	r3, [r3, #4]
 80021fe:	b2da      	uxtb	r2, r3
 8002200:	683b      	ldr	r3, [r7, #0]
 8002202:	691b      	ldr	r3, [r3, #16]
 8002204:	b2db      	uxtb	r3, r3
 8002206:	1ad3      	subs	r3, r2, r3
 8002208:	b2db      	uxtb	r3, r3
 800220a:	3303      	adds	r3, #3
 800220c:	b2db      	uxtb	r3, r3
 800220e:	461a      	mov	r2, r3
 8002210:	4613      	mov	r3, r2
 8002212:	009b      	lsls	r3, r3, #2
 8002214:	4413      	add	r3, r2
 8002216:	221f      	movs	r2, #31
 8002218:	fa02 f303 	lsl.w	r3, r2, r3
 800221c:	43da      	mvns	r2, r3
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	400a      	ands	r2, r1
 8002224:	639a      	str	r2, [r3, #56]	; 0x38
   
  /* Set the SQx bits for the selected rank */
  hadc->Instance->JSQR |= ADC_JSQR(sConfigInjected->InjectedChannel, sConfigInjected->InjectedRank,sConfigInjected->InjectedNbrOfConversion);
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800222c:	683b      	ldr	r3, [r7, #0]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	b29b      	uxth	r3, r3
 8002232:	4618      	mov	r0, r3
 8002234:	683b      	ldr	r3, [r7, #0]
 8002236:	685b      	ldr	r3, [r3, #4]
 8002238:	b2da      	uxtb	r2, r3
 800223a:	683b      	ldr	r3, [r7, #0]
 800223c:	691b      	ldr	r3, [r3, #16]
 800223e:	b2db      	uxtb	r3, r3
 8002240:	1ad3      	subs	r3, r2, r3
 8002242:	b2db      	uxtb	r3, r3
 8002244:	3303      	adds	r3, #3
 8002246:	b2db      	uxtb	r3, r3
 8002248:	461a      	mov	r2, r3
 800224a:	4613      	mov	r3, r2
 800224c:	009b      	lsls	r3, r3, #2
 800224e:	4413      	add	r3, r2
 8002250:	fa00 f203 	lsl.w	r2, r0, r3
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	430a      	orrs	r2, r1
 800225a:	639a      	str	r2, [r3, #56]	; 0x38
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */ 
  if(sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 800225c:	683b      	ldr	r3, [r7, #0]
 800225e:	699b      	ldr	r3, [r3, #24]
 8002260:	4a74      	ldr	r2, [pc, #464]	; (8002434 <HAL_ADCEx_InjectedConfigChannel+0x320>)
 8002262:	4293      	cmp	r3, r2
 8002264:	d022      	beq.n	80022ac <HAL_ADCEx_InjectedConfigChannel+0x198>
  {  
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTSEL);
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	689a      	ldr	r2, [r3, #8]
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
 8002274:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |=  sConfigInjected->ExternalTrigInjecConv;
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	6899      	ldr	r1, [r3, #8]
 800227c:	683b      	ldr	r3, [r7, #0]
 800227e:	699a      	ldr	r2, [r3, #24]
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	430a      	orrs	r2, r1
 8002286:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTEN);
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	689a      	ldr	r2, [r3, #8]
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8002296:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= sConfigInjected->ExternalTrigInjecConvEdge;
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	6899      	ldr	r1, [r3, #8]
 800229e:	683b      	ldr	r3, [r7, #0]
 80022a0:	69da      	ldr	r2, [r3, #28]
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	430a      	orrs	r2, r1
 80022a8:	609a      	str	r2, [r3, #8]
 80022aa:	e00f      	b.n	80022cc <HAL_ADCEx_InjectedConfigChannel+0x1b8>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTSEL);
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	689a      	ldr	r2, [r3, #8]
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
 80022ba:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTEN);  
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	689a      	ldr	r2, [r3, #8]
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 80022ca:	609a      	str	r2, [r3, #8]
  }
  
  if (sConfigInjected->AutoInjectedConv != DISABLE)
 80022cc:	683b      	ldr	r3, [r7, #0]
 80022ce:	7d5b      	ldrb	r3, [r3, #21]
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d008      	beq.n	80022e6 <HAL_ADCEx_InjectedConfigChannel+0x1d2>
  {
    /* Enable the selected ADC automatic injected group conversion */
    hadc->Instance->CR1 |= ADC_CR1_JAUTO;
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	685a      	ldr	r2, [r3, #4]
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80022e2:	605a      	str	r2, [r3, #4]
 80022e4:	e007      	b.n	80022f6 <HAL_ADCEx_InjectedConfigChannel+0x1e2>
  }
  else
  {
    /* Disable the selected ADC automatic injected group conversion */
    hadc->Instance->CR1 &= ~(ADC_CR1_JAUTO);
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	685a      	ldr	r2, [r3, #4]
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80022f4:	605a      	str	r2, [r3, #4]
  }
  
  if (sConfigInjected->InjectedDiscontinuousConvMode != DISABLE)
 80022f6:	683b      	ldr	r3, [r7, #0]
 80022f8:	7d1b      	ldrb	r3, [r3, #20]
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d008      	beq.n	8002310 <HAL_ADCEx_InjectedConfigChannel+0x1fc>
  {
    /* Enable the selected ADC injected discontinuous mode */
    hadc->Instance->CR1 |= ADC_CR1_JDISCEN;
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	685a      	ldr	r2, [r3, #4]
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800230c:	605a      	str	r2, [r3, #4]
 800230e:	e007      	b.n	8002320 <HAL_ADCEx_InjectedConfigChannel+0x20c>
  }
  else
  {
    /* Disable the selected ADC injected discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_JDISCEN);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	685a      	ldr	r2, [r3, #4]
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800231e:	605a      	str	r2, [r3, #4]
  }
  
  switch(sConfigInjected->InjectedRank)
 8002320:	683b      	ldr	r3, [r7, #0]
 8002322:	685b      	ldr	r3, [r3, #4]
 8002324:	2b03      	cmp	r3, #3
 8002326:	d02e      	beq.n	8002386 <HAL_ADCEx_InjectedConfigChannel+0x272>
 8002328:	2b03      	cmp	r3, #3
 800232a:	d840      	bhi.n	80023ae <HAL_ADCEx_InjectedConfigChannel+0x29a>
 800232c:	2b01      	cmp	r3, #1
 800232e:	d002      	beq.n	8002336 <HAL_ADCEx_InjectedConfigChannel+0x222>
 8002330:	2b02      	cmp	r3, #2
 8002332:	d014      	beq.n	800235e <HAL_ADCEx_InjectedConfigChannel+0x24a>
 8002334:	e03b      	b.n	80023ae <HAL_ADCEx_InjectedConfigChannel+0x29a>
  {
    case 1U:
      /* Set injected channel 1 offset */
      hadc->Instance->JOFR1 &= ~(ADC_JOFR1_JOFFSET1);
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	695b      	ldr	r3, [r3, #20]
 800233c:	687a      	ldr	r2, [r7, #4]
 800233e:	6812      	ldr	r2, [r2, #0]
 8002340:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8002344:	f023 030f 	bic.w	r3, r3, #15
 8002348:	6153      	str	r3, [r2, #20]
      hadc->Instance->JOFR1 |= sConfigInjected->InjectedOffset;
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	6959      	ldr	r1, [r3, #20]
 8002350:	683b      	ldr	r3, [r7, #0]
 8002352:	68da      	ldr	r2, [r3, #12]
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	430a      	orrs	r2, r1
 800235a:	615a      	str	r2, [r3, #20]
      break;
 800235c:	e03b      	b.n	80023d6 <HAL_ADCEx_InjectedConfigChannel+0x2c2>
    case 2U:
      /* Set injected channel 2 offset */
      hadc->Instance->JOFR2 &= ~(ADC_JOFR2_JOFFSET2);
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	699b      	ldr	r3, [r3, #24]
 8002364:	687a      	ldr	r2, [r7, #4]
 8002366:	6812      	ldr	r2, [r2, #0]
 8002368:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800236c:	f023 030f 	bic.w	r3, r3, #15
 8002370:	6193      	str	r3, [r2, #24]
      hadc->Instance->JOFR2 |= sConfigInjected->InjectedOffset;
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	6999      	ldr	r1, [r3, #24]
 8002378:	683b      	ldr	r3, [r7, #0]
 800237a:	68da      	ldr	r2, [r3, #12]
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	430a      	orrs	r2, r1
 8002382:	619a      	str	r2, [r3, #24]
      break;
 8002384:	e027      	b.n	80023d6 <HAL_ADCEx_InjectedConfigChannel+0x2c2>
    case 3U:
      /* Set injected channel 3 offset */
      hadc->Instance->JOFR3 &= ~(ADC_JOFR3_JOFFSET3);
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	69db      	ldr	r3, [r3, #28]
 800238c:	687a      	ldr	r2, [r7, #4]
 800238e:	6812      	ldr	r2, [r2, #0]
 8002390:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8002394:	f023 030f 	bic.w	r3, r3, #15
 8002398:	61d3      	str	r3, [r2, #28]
      hadc->Instance->JOFR3 |= sConfigInjected->InjectedOffset;
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	69d9      	ldr	r1, [r3, #28]
 80023a0:	683b      	ldr	r3, [r7, #0]
 80023a2:	68da      	ldr	r2, [r3, #12]
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	430a      	orrs	r2, r1
 80023aa:	61da      	str	r2, [r3, #28]
      break;
 80023ac:	e013      	b.n	80023d6 <HAL_ADCEx_InjectedConfigChannel+0x2c2>
    default:
      /* Set injected channel 4 offset */
      hadc->Instance->JOFR4 &= ~(ADC_JOFR4_JOFFSET4);
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	6a1b      	ldr	r3, [r3, #32]
 80023b4:	687a      	ldr	r2, [r7, #4]
 80023b6:	6812      	ldr	r2, [r2, #0]
 80023b8:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80023bc:	f023 030f 	bic.w	r3, r3, #15
 80023c0:	6213      	str	r3, [r2, #32]
      hadc->Instance->JOFR4 |= sConfigInjected->InjectedOffset;
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	6a19      	ldr	r1, [r3, #32]
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	68da      	ldr	r2, [r3, #12]
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	430a      	orrs	r2, r1
 80023d2:	621a      	str	r2, [r3, #32]
      break;
 80023d4:	bf00      	nop
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADC and 1 common */
  /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80023d6:	4b18      	ldr	r3, [pc, #96]	; (8002438 <HAL_ADCEx_InjectedConfigChannel+0x324>)
 80023d8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT))
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	4a17      	ldr	r2, [pc, #92]	; (800243c <HAL_ADCEx_InjectedConfigChannel+0x328>)
 80023e0:	4293      	cmp	r3, r2
 80023e2:	d109      	bne.n	80023f8 <HAL_ADCEx_InjectedConfigChannel+0x2e4>
 80023e4:	683b      	ldr	r3, [r7, #0]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	2b12      	cmp	r3, #18
 80023ea:	d105      	bne.n	80023f8 <HAL_ADCEx_InjectedConfigChannel+0x2e4>
  {
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	685b      	ldr	r3, [r3, #4]
 80023f0:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) || (sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)))
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	4a0f      	ldr	r2, [pc, #60]	; (800243c <HAL_ADCEx_InjectedConfigChannel+0x328>)
 80023fe:	4293      	cmp	r3, r2
 8002400:	d10d      	bne.n	800241e <HAL_ADCEx_InjectedConfigChannel+0x30a>
 8002402:	683b      	ldr	r3, [r7, #0]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	2b10      	cmp	r3, #16
 8002408:	d003      	beq.n	8002412 <HAL_ADCEx_InjectedConfigChannel+0x2fe>
 800240a:	683b      	ldr	r3, [r7, #0]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	2b11      	cmp	r3, #17
 8002410:	d105      	bne.n	800241e <HAL_ADCEx_InjectedConfigChannel+0x30a>
  {
    /* Enable the TSVREFE channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	685b      	ldr	r3, [r3, #4]
 8002416:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	605a      	str	r2, [r3, #4]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	2200      	movs	r2, #0
 8002422:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002426:	2300      	movs	r3, #0
}
 8002428:	4618      	mov	r0, r3
 800242a:	3714      	adds	r7, #20
 800242c:	46bd      	mov	sp, r7
 800242e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002432:	4770      	bx	lr
 8002434:	000f0001 	.word	0x000f0001
 8002438:	40012300 	.word	0x40012300
 800243c:	40012000 	.word	0x40012000

08002440 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002440:	b480      	push	{r7}
 8002442:	b085      	sub	sp, #20
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	f003 0307 	and.w	r3, r3, #7
 800244e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002450:	4b0c      	ldr	r3, [pc, #48]	; (8002484 <__NVIC_SetPriorityGrouping+0x44>)
 8002452:	68db      	ldr	r3, [r3, #12]
 8002454:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002456:	68ba      	ldr	r2, [r7, #8]
 8002458:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800245c:	4013      	ands	r3, r2
 800245e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002464:	68bb      	ldr	r3, [r7, #8]
 8002466:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002468:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800246c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002470:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002472:	4a04      	ldr	r2, [pc, #16]	; (8002484 <__NVIC_SetPriorityGrouping+0x44>)
 8002474:	68bb      	ldr	r3, [r7, #8]
 8002476:	60d3      	str	r3, [r2, #12]
}
 8002478:	bf00      	nop
 800247a:	3714      	adds	r7, #20
 800247c:	46bd      	mov	sp, r7
 800247e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002482:	4770      	bx	lr
 8002484:	e000ed00 	.word	0xe000ed00

08002488 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002488:	b480      	push	{r7}
 800248a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800248c:	4b04      	ldr	r3, [pc, #16]	; (80024a0 <__NVIC_GetPriorityGrouping+0x18>)
 800248e:	68db      	ldr	r3, [r3, #12]
 8002490:	0a1b      	lsrs	r3, r3, #8
 8002492:	f003 0307 	and.w	r3, r3, #7
}
 8002496:	4618      	mov	r0, r3
 8002498:	46bd      	mov	sp, r7
 800249a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249e:	4770      	bx	lr
 80024a0:	e000ed00 	.word	0xe000ed00

080024a4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80024a4:	b480      	push	{r7}
 80024a6:	b083      	sub	sp, #12
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	4603      	mov	r3, r0
 80024ac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	db0b      	blt.n	80024ce <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80024b6:	79fb      	ldrb	r3, [r7, #7]
 80024b8:	f003 021f 	and.w	r2, r3, #31
 80024bc:	4907      	ldr	r1, [pc, #28]	; (80024dc <__NVIC_EnableIRQ+0x38>)
 80024be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024c2:	095b      	lsrs	r3, r3, #5
 80024c4:	2001      	movs	r0, #1
 80024c6:	fa00 f202 	lsl.w	r2, r0, r2
 80024ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80024ce:	bf00      	nop
 80024d0:	370c      	adds	r7, #12
 80024d2:	46bd      	mov	sp, r7
 80024d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d8:	4770      	bx	lr
 80024da:	bf00      	nop
 80024dc:	e000e100 	.word	0xe000e100

080024e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80024e0:	b480      	push	{r7}
 80024e2:	b083      	sub	sp, #12
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	4603      	mov	r3, r0
 80024e8:	6039      	str	r1, [r7, #0]
 80024ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	db0a      	blt.n	800250a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024f4:	683b      	ldr	r3, [r7, #0]
 80024f6:	b2da      	uxtb	r2, r3
 80024f8:	490c      	ldr	r1, [pc, #48]	; (800252c <__NVIC_SetPriority+0x4c>)
 80024fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024fe:	0112      	lsls	r2, r2, #4
 8002500:	b2d2      	uxtb	r2, r2
 8002502:	440b      	add	r3, r1
 8002504:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002508:	e00a      	b.n	8002520 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800250a:	683b      	ldr	r3, [r7, #0]
 800250c:	b2da      	uxtb	r2, r3
 800250e:	4908      	ldr	r1, [pc, #32]	; (8002530 <__NVIC_SetPriority+0x50>)
 8002510:	79fb      	ldrb	r3, [r7, #7]
 8002512:	f003 030f 	and.w	r3, r3, #15
 8002516:	3b04      	subs	r3, #4
 8002518:	0112      	lsls	r2, r2, #4
 800251a:	b2d2      	uxtb	r2, r2
 800251c:	440b      	add	r3, r1
 800251e:	761a      	strb	r2, [r3, #24]
}
 8002520:	bf00      	nop
 8002522:	370c      	adds	r7, #12
 8002524:	46bd      	mov	sp, r7
 8002526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252a:	4770      	bx	lr
 800252c:	e000e100 	.word	0xe000e100
 8002530:	e000ed00 	.word	0xe000ed00

08002534 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002534:	b480      	push	{r7}
 8002536:	b089      	sub	sp, #36	; 0x24
 8002538:	af00      	add	r7, sp, #0
 800253a:	60f8      	str	r0, [r7, #12]
 800253c:	60b9      	str	r1, [r7, #8]
 800253e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	f003 0307 	and.w	r3, r3, #7
 8002546:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002548:	69fb      	ldr	r3, [r7, #28]
 800254a:	f1c3 0307 	rsb	r3, r3, #7
 800254e:	2b04      	cmp	r3, #4
 8002550:	bf28      	it	cs
 8002552:	2304      	movcs	r3, #4
 8002554:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002556:	69fb      	ldr	r3, [r7, #28]
 8002558:	3304      	adds	r3, #4
 800255a:	2b06      	cmp	r3, #6
 800255c:	d902      	bls.n	8002564 <NVIC_EncodePriority+0x30>
 800255e:	69fb      	ldr	r3, [r7, #28]
 8002560:	3b03      	subs	r3, #3
 8002562:	e000      	b.n	8002566 <NVIC_EncodePriority+0x32>
 8002564:	2300      	movs	r3, #0
 8002566:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002568:	f04f 32ff 	mov.w	r2, #4294967295
 800256c:	69bb      	ldr	r3, [r7, #24]
 800256e:	fa02 f303 	lsl.w	r3, r2, r3
 8002572:	43da      	mvns	r2, r3
 8002574:	68bb      	ldr	r3, [r7, #8]
 8002576:	401a      	ands	r2, r3
 8002578:	697b      	ldr	r3, [r7, #20]
 800257a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800257c:	f04f 31ff 	mov.w	r1, #4294967295
 8002580:	697b      	ldr	r3, [r7, #20]
 8002582:	fa01 f303 	lsl.w	r3, r1, r3
 8002586:	43d9      	mvns	r1, r3
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800258c:	4313      	orrs	r3, r2
         );
}
 800258e:	4618      	mov	r0, r3
 8002590:	3724      	adds	r7, #36	; 0x24
 8002592:	46bd      	mov	sp, r7
 8002594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002598:	4770      	bx	lr
	...

0800259c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	b082      	sub	sp, #8
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	3b01      	subs	r3, #1
 80025a8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80025ac:	d301      	bcc.n	80025b2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80025ae:	2301      	movs	r3, #1
 80025b0:	e00f      	b.n	80025d2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80025b2:	4a0a      	ldr	r2, [pc, #40]	; (80025dc <SysTick_Config+0x40>)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	3b01      	subs	r3, #1
 80025b8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80025ba:	210f      	movs	r1, #15
 80025bc:	f04f 30ff 	mov.w	r0, #4294967295
 80025c0:	f7ff ff8e 	bl	80024e0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80025c4:	4b05      	ldr	r3, [pc, #20]	; (80025dc <SysTick_Config+0x40>)
 80025c6:	2200      	movs	r2, #0
 80025c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80025ca:	4b04      	ldr	r3, [pc, #16]	; (80025dc <SysTick_Config+0x40>)
 80025cc:	2207      	movs	r2, #7
 80025ce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80025d0:	2300      	movs	r3, #0
}
 80025d2:	4618      	mov	r0, r3
 80025d4:	3708      	adds	r7, #8
 80025d6:	46bd      	mov	sp, r7
 80025d8:	bd80      	pop	{r7, pc}
 80025da:	bf00      	nop
 80025dc:	e000e010 	.word	0xe000e010

080025e0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025e0:	b580      	push	{r7, lr}
 80025e2:	b082      	sub	sp, #8
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80025e8:	6878      	ldr	r0, [r7, #4]
 80025ea:	f7ff ff29 	bl	8002440 <__NVIC_SetPriorityGrouping>
}
 80025ee:	bf00      	nop
 80025f0:	3708      	adds	r7, #8
 80025f2:	46bd      	mov	sp, r7
 80025f4:	bd80      	pop	{r7, pc}

080025f6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80025f6:	b580      	push	{r7, lr}
 80025f8:	b086      	sub	sp, #24
 80025fa:	af00      	add	r7, sp, #0
 80025fc:	4603      	mov	r3, r0
 80025fe:	60b9      	str	r1, [r7, #8]
 8002600:	607a      	str	r2, [r7, #4]
 8002602:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002604:	2300      	movs	r3, #0
 8002606:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002608:	f7ff ff3e 	bl	8002488 <__NVIC_GetPriorityGrouping>
 800260c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800260e:	687a      	ldr	r2, [r7, #4]
 8002610:	68b9      	ldr	r1, [r7, #8]
 8002612:	6978      	ldr	r0, [r7, #20]
 8002614:	f7ff ff8e 	bl	8002534 <NVIC_EncodePriority>
 8002618:	4602      	mov	r2, r0
 800261a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800261e:	4611      	mov	r1, r2
 8002620:	4618      	mov	r0, r3
 8002622:	f7ff ff5d 	bl	80024e0 <__NVIC_SetPriority>
}
 8002626:	bf00      	nop
 8002628:	3718      	adds	r7, #24
 800262a:	46bd      	mov	sp, r7
 800262c:	bd80      	pop	{r7, pc}

0800262e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800262e:	b580      	push	{r7, lr}
 8002630:	b082      	sub	sp, #8
 8002632:	af00      	add	r7, sp, #0
 8002634:	4603      	mov	r3, r0
 8002636:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002638:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800263c:	4618      	mov	r0, r3
 800263e:	f7ff ff31 	bl	80024a4 <__NVIC_EnableIRQ>
}
 8002642:	bf00      	nop
 8002644:	3708      	adds	r7, #8
 8002646:	46bd      	mov	sp, r7
 8002648:	bd80      	pop	{r7, pc}

0800264a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800264a:	b580      	push	{r7, lr}
 800264c:	b082      	sub	sp, #8
 800264e:	af00      	add	r7, sp, #0
 8002650:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002652:	6878      	ldr	r0, [r7, #4]
 8002654:	f7ff ffa2 	bl	800259c <SysTick_Config>
 8002658:	4603      	mov	r3, r0
}
 800265a:	4618      	mov	r0, r3
 800265c:	3708      	adds	r7, #8
 800265e:	46bd      	mov	sp, r7
 8002660:	bd80      	pop	{r7, pc}
	...

08002664 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002664:	b480      	push	{r7}
 8002666:	b089      	sub	sp, #36	; 0x24
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
 800266c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800266e:	2300      	movs	r3, #0
 8002670:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002672:	2300      	movs	r3, #0
 8002674:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002676:	2300      	movs	r3, #0
 8002678:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800267a:	2300      	movs	r3, #0
 800267c:	61fb      	str	r3, [r7, #28]
 800267e:	e159      	b.n	8002934 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002680:	2201      	movs	r2, #1
 8002682:	69fb      	ldr	r3, [r7, #28]
 8002684:	fa02 f303 	lsl.w	r3, r2, r3
 8002688:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800268a:	683b      	ldr	r3, [r7, #0]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	697a      	ldr	r2, [r7, #20]
 8002690:	4013      	ands	r3, r2
 8002692:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002694:	693a      	ldr	r2, [r7, #16]
 8002696:	697b      	ldr	r3, [r7, #20]
 8002698:	429a      	cmp	r2, r3
 800269a:	f040 8148 	bne.w	800292e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800269e:	683b      	ldr	r3, [r7, #0]
 80026a0:	685b      	ldr	r3, [r3, #4]
 80026a2:	f003 0303 	and.w	r3, r3, #3
 80026a6:	2b01      	cmp	r3, #1
 80026a8:	d005      	beq.n	80026b6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80026aa:	683b      	ldr	r3, [r7, #0]
 80026ac:	685b      	ldr	r3, [r3, #4]
 80026ae:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80026b2:	2b02      	cmp	r3, #2
 80026b4:	d130      	bne.n	8002718 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	689b      	ldr	r3, [r3, #8]
 80026ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80026bc:	69fb      	ldr	r3, [r7, #28]
 80026be:	005b      	lsls	r3, r3, #1
 80026c0:	2203      	movs	r2, #3
 80026c2:	fa02 f303 	lsl.w	r3, r2, r3
 80026c6:	43db      	mvns	r3, r3
 80026c8:	69ba      	ldr	r2, [r7, #24]
 80026ca:	4013      	ands	r3, r2
 80026cc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80026ce:	683b      	ldr	r3, [r7, #0]
 80026d0:	68da      	ldr	r2, [r3, #12]
 80026d2:	69fb      	ldr	r3, [r7, #28]
 80026d4:	005b      	lsls	r3, r3, #1
 80026d6:	fa02 f303 	lsl.w	r3, r2, r3
 80026da:	69ba      	ldr	r2, [r7, #24]
 80026dc:	4313      	orrs	r3, r2
 80026de:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	69ba      	ldr	r2, [r7, #24]
 80026e4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	685b      	ldr	r3, [r3, #4]
 80026ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80026ec:	2201      	movs	r2, #1
 80026ee:	69fb      	ldr	r3, [r7, #28]
 80026f0:	fa02 f303 	lsl.w	r3, r2, r3
 80026f4:	43db      	mvns	r3, r3
 80026f6:	69ba      	ldr	r2, [r7, #24]
 80026f8:	4013      	ands	r3, r2
 80026fa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80026fc:	683b      	ldr	r3, [r7, #0]
 80026fe:	685b      	ldr	r3, [r3, #4]
 8002700:	091b      	lsrs	r3, r3, #4
 8002702:	f003 0201 	and.w	r2, r3, #1
 8002706:	69fb      	ldr	r3, [r7, #28]
 8002708:	fa02 f303 	lsl.w	r3, r2, r3
 800270c:	69ba      	ldr	r2, [r7, #24]
 800270e:	4313      	orrs	r3, r2
 8002710:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	69ba      	ldr	r2, [r7, #24]
 8002716:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002718:	683b      	ldr	r3, [r7, #0]
 800271a:	685b      	ldr	r3, [r3, #4]
 800271c:	f003 0303 	and.w	r3, r3, #3
 8002720:	2b03      	cmp	r3, #3
 8002722:	d017      	beq.n	8002754 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	68db      	ldr	r3, [r3, #12]
 8002728:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800272a:	69fb      	ldr	r3, [r7, #28]
 800272c:	005b      	lsls	r3, r3, #1
 800272e:	2203      	movs	r2, #3
 8002730:	fa02 f303 	lsl.w	r3, r2, r3
 8002734:	43db      	mvns	r3, r3
 8002736:	69ba      	ldr	r2, [r7, #24]
 8002738:	4013      	ands	r3, r2
 800273a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800273c:	683b      	ldr	r3, [r7, #0]
 800273e:	689a      	ldr	r2, [r3, #8]
 8002740:	69fb      	ldr	r3, [r7, #28]
 8002742:	005b      	lsls	r3, r3, #1
 8002744:	fa02 f303 	lsl.w	r3, r2, r3
 8002748:	69ba      	ldr	r2, [r7, #24]
 800274a:	4313      	orrs	r3, r2
 800274c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	69ba      	ldr	r2, [r7, #24]
 8002752:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002754:	683b      	ldr	r3, [r7, #0]
 8002756:	685b      	ldr	r3, [r3, #4]
 8002758:	f003 0303 	and.w	r3, r3, #3
 800275c:	2b02      	cmp	r3, #2
 800275e:	d123      	bne.n	80027a8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002760:	69fb      	ldr	r3, [r7, #28]
 8002762:	08da      	lsrs	r2, r3, #3
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	3208      	adds	r2, #8
 8002768:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800276c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800276e:	69fb      	ldr	r3, [r7, #28]
 8002770:	f003 0307 	and.w	r3, r3, #7
 8002774:	009b      	lsls	r3, r3, #2
 8002776:	220f      	movs	r2, #15
 8002778:	fa02 f303 	lsl.w	r3, r2, r3
 800277c:	43db      	mvns	r3, r3
 800277e:	69ba      	ldr	r2, [r7, #24]
 8002780:	4013      	ands	r3, r2
 8002782:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002784:	683b      	ldr	r3, [r7, #0]
 8002786:	691a      	ldr	r2, [r3, #16]
 8002788:	69fb      	ldr	r3, [r7, #28]
 800278a:	f003 0307 	and.w	r3, r3, #7
 800278e:	009b      	lsls	r3, r3, #2
 8002790:	fa02 f303 	lsl.w	r3, r2, r3
 8002794:	69ba      	ldr	r2, [r7, #24]
 8002796:	4313      	orrs	r3, r2
 8002798:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800279a:	69fb      	ldr	r3, [r7, #28]
 800279c:	08da      	lsrs	r2, r3, #3
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	3208      	adds	r2, #8
 80027a2:	69b9      	ldr	r1, [r7, #24]
 80027a4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80027ae:	69fb      	ldr	r3, [r7, #28]
 80027b0:	005b      	lsls	r3, r3, #1
 80027b2:	2203      	movs	r2, #3
 80027b4:	fa02 f303 	lsl.w	r3, r2, r3
 80027b8:	43db      	mvns	r3, r3
 80027ba:	69ba      	ldr	r2, [r7, #24]
 80027bc:	4013      	ands	r3, r2
 80027be:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80027c0:	683b      	ldr	r3, [r7, #0]
 80027c2:	685b      	ldr	r3, [r3, #4]
 80027c4:	f003 0203 	and.w	r2, r3, #3
 80027c8:	69fb      	ldr	r3, [r7, #28]
 80027ca:	005b      	lsls	r3, r3, #1
 80027cc:	fa02 f303 	lsl.w	r3, r2, r3
 80027d0:	69ba      	ldr	r2, [r7, #24]
 80027d2:	4313      	orrs	r3, r2
 80027d4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	69ba      	ldr	r2, [r7, #24]
 80027da:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80027dc:	683b      	ldr	r3, [r7, #0]
 80027de:	685b      	ldr	r3, [r3, #4]
 80027e0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	f000 80a2 	beq.w	800292e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80027ea:	2300      	movs	r3, #0
 80027ec:	60fb      	str	r3, [r7, #12]
 80027ee:	4b57      	ldr	r3, [pc, #348]	; (800294c <HAL_GPIO_Init+0x2e8>)
 80027f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027f2:	4a56      	ldr	r2, [pc, #344]	; (800294c <HAL_GPIO_Init+0x2e8>)
 80027f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80027f8:	6453      	str	r3, [r2, #68]	; 0x44
 80027fa:	4b54      	ldr	r3, [pc, #336]	; (800294c <HAL_GPIO_Init+0x2e8>)
 80027fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002802:	60fb      	str	r3, [r7, #12]
 8002804:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002806:	4a52      	ldr	r2, [pc, #328]	; (8002950 <HAL_GPIO_Init+0x2ec>)
 8002808:	69fb      	ldr	r3, [r7, #28]
 800280a:	089b      	lsrs	r3, r3, #2
 800280c:	3302      	adds	r3, #2
 800280e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002812:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002814:	69fb      	ldr	r3, [r7, #28]
 8002816:	f003 0303 	and.w	r3, r3, #3
 800281a:	009b      	lsls	r3, r3, #2
 800281c:	220f      	movs	r2, #15
 800281e:	fa02 f303 	lsl.w	r3, r2, r3
 8002822:	43db      	mvns	r3, r3
 8002824:	69ba      	ldr	r2, [r7, #24]
 8002826:	4013      	ands	r3, r2
 8002828:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	4a49      	ldr	r2, [pc, #292]	; (8002954 <HAL_GPIO_Init+0x2f0>)
 800282e:	4293      	cmp	r3, r2
 8002830:	d019      	beq.n	8002866 <HAL_GPIO_Init+0x202>
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	4a48      	ldr	r2, [pc, #288]	; (8002958 <HAL_GPIO_Init+0x2f4>)
 8002836:	4293      	cmp	r3, r2
 8002838:	d013      	beq.n	8002862 <HAL_GPIO_Init+0x1fe>
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	4a47      	ldr	r2, [pc, #284]	; (800295c <HAL_GPIO_Init+0x2f8>)
 800283e:	4293      	cmp	r3, r2
 8002840:	d00d      	beq.n	800285e <HAL_GPIO_Init+0x1fa>
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	4a46      	ldr	r2, [pc, #280]	; (8002960 <HAL_GPIO_Init+0x2fc>)
 8002846:	4293      	cmp	r3, r2
 8002848:	d007      	beq.n	800285a <HAL_GPIO_Init+0x1f6>
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	4a45      	ldr	r2, [pc, #276]	; (8002964 <HAL_GPIO_Init+0x300>)
 800284e:	4293      	cmp	r3, r2
 8002850:	d101      	bne.n	8002856 <HAL_GPIO_Init+0x1f2>
 8002852:	2304      	movs	r3, #4
 8002854:	e008      	b.n	8002868 <HAL_GPIO_Init+0x204>
 8002856:	2307      	movs	r3, #7
 8002858:	e006      	b.n	8002868 <HAL_GPIO_Init+0x204>
 800285a:	2303      	movs	r3, #3
 800285c:	e004      	b.n	8002868 <HAL_GPIO_Init+0x204>
 800285e:	2302      	movs	r3, #2
 8002860:	e002      	b.n	8002868 <HAL_GPIO_Init+0x204>
 8002862:	2301      	movs	r3, #1
 8002864:	e000      	b.n	8002868 <HAL_GPIO_Init+0x204>
 8002866:	2300      	movs	r3, #0
 8002868:	69fa      	ldr	r2, [r7, #28]
 800286a:	f002 0203 	and.w	r2, r2, #3
 800286e:	0092      	lsls	r2, r2, #2
 8002870:	4093      	lsls	r3, r2
 8002872:	69ba      	ldr	r2, [r7, #24]
 8002874:	4313      	orrs	r3, r2
 8002876:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002878:	4935      	ldr	r1, [pc, #212]	; (8002950 <HAL_GPIO_Init+0x2ec>)
 800287a:	69fb      	ldr	r3, [r7, #28]
 800287c:	089b      	lsrs	r3, r3, #2
 800287e:	3302      	adds	r3, #2
 8002880:	69ba      	ldr	r2, [r7, #24]
 8002882:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002886:	4b38      	ldr	r3, [pc, #224]	; (8002968 <HAL_GPIO_Init+0x304>)
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800288c:	693b      	ldr	r3, [r7, #16]
 800288e:	43db      	mvns	r3, r3
 8002890:	69ba      	ldr	r2, [r7, #24]
 8002892:	4013      	ands	r3, r2
 8002894:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002896:	683b      	ldr	r3, [r7, #0]
 8002898:	685b      	ldr	r3, [r3, #4]
 800289a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d003      	beq.n	80028aa <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80028a2:	69ba      	ldr	r2, [r7, #24]
 80028a4:	693b      	ldr	r3, [r7, #16]
 80028a6:	4313      	orrs	r3, r2
 80028a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80028aa:	4a2f      	ldr	r2, [pc, #188]	; (8002968 <HAL_GPIO_Init+0x304>)
 80028ac:	69bb      	ldr	r3, [r7, #24]
 80028ae:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80028b0:	4b2d      	ldr	r3, [pc, #180]	; (8002968 <HAL_GPIO_Init+0x304>)
 80028b2:	685b      	ldr	r3, [r3, #4]
 80028b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028b6:	693b      	ldr	r3, [r7, #16]
 80028b8:	43db      	mvns	r3, r3
 80028ba:	69ba      	ldr	r2, [r7, #24]
 80028bc:	4013      	ands	r3, r2
 80028be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80028c0:	683b      	ldr	r3, [r7, #0]
 80028c2:	685b      	ldr	r3, [r3, #4]
 80028c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d003      	beq.n	80028d4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80028cc:	69ba      	ldr	r2, [r7, #24]
 80028ce:	693b      	ldr	r3, [r7, #16]
 80028d0:	4313      	orrs	r3, r2
 80028d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80028d4:	4a24      	ldr	r2, [pc, #144]	; (8002968 <HAL_GPIO_Init+0x304>)
 80028d6:	69bb      	ldr	r3, [r7, #24]
 80028d8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80028da:	4b23      	ldr	r3, [pc, #140]	; (8002968 <HAL_GPIO_Init+0x304>)
 80028dc:	689b      	ldr	r3, [r3, #8]
 80028de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028e0:	693b      	ldr	r3, [r7, #16]
 80028e2:	43db      	mvns	r3, r3
 80028e4:	69ba      	ldr	r2, [r7, #24]
 80028e6:	4013      	ands	r3, r2
 80028e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80028ea:	683b      	ldr	r3, [r7, #0]
 80028ec:	685b      	ldr	r3, [r3, #4]
 80028ee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d003      	beq.n	80028fe <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80028f6:	69ba      	ldr	r2, [r7, #24]
 80028f8:	693b      	ldr	r3, [r7, #16]
 80028fa:	4313      	orrs	r3, r2
 80028fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80028fe:	4a1a      	ldr	r2, [pc, #104]	; (8002968 <HAL_GPIO_Init+0x304>)
 8002900:	69bb      	ldr	r3, [r7, #24]
 8002902:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002904:	4b18      	ldr	r3, [pc, #96]	; (8002968 <HAL_GPIO_Init+0x304>)
 8002906:	68db      	ldr	r3, [r3, #12]
 8002908:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800290a:	693b      	ldr	r3, [r7, #16]
 800290c:	43db      	mvns	r3, r3
 800290e:	69ba      	ldr	r2, [r7, #24]
 8002910:	4013      	ands	r3, r2
 8002912:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002914:	683b      	ldr	r3, [r7, #0]
 8002916:	685b      	ldr	r3, [r3, #4]
 8002918:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800291c:	2b00      	cmp	r3, #0
 800291e:	d003      	beq.n	8002928 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002920:	69ba      	ldr	r2, [r7, #24]
 8002922:	693b      	ldr	r3, [r7, #16]
 8002924:	4313      	orrs	r3, r2
 8002926:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002928:	4a0f      	ldr	r2, [pc, #60]	; (8002968 <HAL_GPIO_Init+0x304>)
 800292a:	69bb      	ldr	r3, [r7, #24]
 800292c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800292e:	69fb      	ldr	r3, [r7, #28]
 8002930:	3301      	adds	r3, #1
 8002932:	61fb      	str	r3, [r7, #28]
 8002934:	69fb      	ldr	r3, [r7, #28]
 8002936:	2b0f      	cmp	r3, #15
 8002938:	f67f aea2 	bls.w	8002680 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800293c:	bf00      	nop
 800293e:	bf00      	nop
 8002940:	3724      	adds	r7, #36	; 0x24
 8002942:	46bd      	mov	sp, r7
 8002944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002948:	4770      	bx	lr
 800294a:	bf00      	nop
 800294c:	40023800 	.word	0x40023800
 8002950:	40013800 	.word	0x40013800
 8002954:	40020000 	.word	0x40020000
 8002958:	40020400 	.word	0x40020400
 800295c:	40020800 	.word	0x40020800
 8002960:	40020c00 	.word	0x40020c00
 8002964:	40021000 	.word	0x40021000
 8002968:	40013c00 	.word	0x40013c00

0800296c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800296c:	b480      	push	{r7}
 800296e:	b083      	sub	sp, #12
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]
 8002974:	460b      	mov	r3, r1
 8002976:	807b      	strh	r3, [r7, #2]
 8002978:	4613      	mov	r3, r2
 800297a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800297c:	787b      	ldrb	r3, [r7, #1]
 800297e:	2b00      	cmp	r3, #0
 8002980:	d003      	beq.n	800298a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002982:	887a      	ldrh	r2, [r7, #2]
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002988:	e003      	b.n	8002992 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800298a:	887b      	ldrh	r3, [r7, #2]
 800298c:	041a      	lsls	r2, r3, #16
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	619a      	str	r2, [r3, #24]
}
 8002992:	bf00      	nop
 8002994:	370c      	adds	r7, #12
 8002996:	46bd      	mov	sp, r7
 8002998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299c:	4770      	bx	lr

0800299e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800299e:	b5f0      	push	{r4, r5, r6, r7, lr}
 80029a0:	b08f      	sub	sp, #60	; 0x3c
 80029a2:	af0a      	add	r7, sp, #40	; 0x28
 80029a4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d101      	bne.n	80029b0 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80029ac:	2301      	movs	r3, #1
 80029ae:	e10f      	b.n	8002bd0 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80029bc:	b2db      	uxtb	r3, r3
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d106      	bne.n	80029d0 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	2200      	movs	r2, #0
 80029c6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80029ca:	6878      	ldr	r0, [r7, #4]
 80029cc:	f006 fb40 	bl	8009050 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	2203      	movs	r2, #3
 80029d4:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80029d8:	68bb      	ldr	r3, [r7, #8]
 80029da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d102      	bne.n	80029ea <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	2200      	movs	r2, #0
 80029e8:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	4618      	mov	r0, r3
 80029f0:	f003 fa2b 	bl	8005e4a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	603b      	str	r3, [r7, #0]
 80029fa:	687e      	ldr	r6, [r7, #4]
 80029fc:	466d      	mov	r5, sp
 80029fe:	f106 0410 	add.w	r4, r6, #16
 8002a02:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002a04:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002a06:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002a08:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002a0a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002a0e:	e885 0003 	stmia.w	r5, {r0, r1}
 8002a12:	1d33      	adds	r3, r6, #4
 8002a14:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002a16:	6838      	ldr	r0, [r7, #0]
 8002a18:	f003 f902 	bl	8005c20 <USB_CoreInit>
 8002a1c:	4603      	mov	r3, r0
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d005      	beq.n	8002a2e <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	2202      	movs	r2, #2
 8002a26:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002a2a:	2301      	movs	r3, #1
 8002a2c:	e0d0      	b.n	8002bd0 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	2100      	movs	r1, #0
 8002a34:	4618      	mov	r0, r3
 8002a36:	f003 fa19 	bl	8005e6c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002a3a:	2300      	movs	r3, #0
 8002a3c:	73fb      	strb	r3, [r7, #15]
 8002a3e:	e04a      	b.n	8002ad6 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002a40:	7bfa      	ldrb	r2, [r7, #15]
 8002a42:	6879      	ldr	r1, [r7, #4]
 8002a44:	4613      	mov	r3, r2
 8002a46:	00db      	lsls	r3, r3, #3
 8002a48:	1a9b      	subs	r3, r3, r2
 8002a4a:	009b      	lsls	r3, r3, #2
 8002a4c:	440b      	add	r3, r1
 8002a4e:	333d      	adds	r3, #61	; 0x3d
 8002a50:	2201      	movs	r2, #1
 8002a52:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002a54:	7bfa      	ldrb	r2, [r7, #15]
 8002a56:	6879      	ldr	r1, [r7, #4]
 8002a58:	4613      	mov	r3, r2
 8002a5a:	00db      	lsls	r3, r3, #3
 8002a5c:	1a9b      	subs	r3, r3, r2
 8002a5e:	009b      	lsls	r3, r3, #2
 8002a60:	440b      	add	r3, r1
 8002a62:	333c      	adds	r3, #60	; 0x3c
 8002a64:	7bfa      	ldrb	r2, [r7, #15]
 8002a66:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002a68:	7bfa      	ldrb	r2, [r7, #15]
 8002a6a:	7bfb      	ldrb	r3, [r7, #15]
 8002a6c:	b298      	uxth	r0, r3
 8002a6e:	6879      	ldr	r1, [r7, #4]
 8002a70:	4613      	mov	r3, r2
 8002a72:	00db      	lsls	r3, r3, #3
 8002a74:	1a9b      	subs	r3, r3, r2
 8002a76:	009b      	lsls	r3, r3, #2
 8002a78:	440b      	add	r3, r1
 8002a7a:	3342      	adds	r3, #66	; 0x42
 8002a7c:	4602      	mov	r2, r0
 8002a7e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002a80:	7bfa      	ldrb	r2, [r7, #15]
 8002a82:	6879      	ldr	r1, [r7, #4]
 8002a84:	4613      	mov	r3, r2
 8002a86:	00db      	lsls	r3, r3, #3
 8002a88:	1a9b      	subs	r3, r3, r2
 8002a8a:	009b      	lsls	r3, r3, #2
 8002a8c:	440b      	add	r3, r1
 8002a8e:	333f      	adds	r3, #63	; 0x3f
 8002a90:	2200      	movs	r2, #0
 8002a92:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002a94:	7bfa      	ldrb	r2, [r7, #15]
 8002a96:	6879      	ldr	r1, [r7, #4]
 8002a98:	4613      	mov	r3, r2
 8002a9a:	00db      	lsls	r3, r3, #3
 8002a9c:	1a9b      	subs	r3, r3, r2
 8002a9e:	009b      	lsls	r3, r3, #2
 8002aa0:	440b      	add	r3, r1
 8002aa2:	3344      	adds	r3, #68	; 0x44
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002aa8:	7bfa      	ldrb	r2, [r7, #15]
 8002aaa:	6879      	ldr	r1, [r7, #4]
 8002aac:	4613      	mov	r3, r2
 8002aae:	00db      	lsls	r3, r3, #3
 8002ab0:	1a9b      	subs	r3, r3, r2
 8002ab2:	009b      	lsls	r3, r3, #2
 8002ab4:	440b      	add	r3, r1
 8002ab6:	3348      	adds	r3, #72	; 0x48
 8002ab8:	2200      	movs	r2, #0
 8002aba:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002abc:	7bfa      	ldrb	r2, [r7, #15]
 8002abe:	6879      	ldr	r1, [r7, #4]
 8002ac0:	4613      	mov	r3, r2
 8002ac2:	00db      	lsls	r3, r3, #3
 8002ac4:	1a9b      	subs	r3, r3, r2
 8002ac6:	009b      	lsls	r3, r3, #2
 8002ac8:	440b      	add	r3, r1
 8002aca:	3350      	adds	r3, #80	; 0x50
 8002acc:	2200      	movs	r2, #0
 8002ace:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002ad0:	7bfb      	ldrb	r3, [r7, #15]
 8002ad2:	3301      	adds	r3, #1
 8002ad4:	73fb      	strb	r3, [r7, #15]
 8002ad6:	7bfa      	ldrb	r2, [r7, #15]
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	685b      	ldr	r3, [r3, #4]
 8002adc:	429a      	cmp	r2, r3
 8002ade:	d3af      	bcc.n	8002a40 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002ae0:	2300      	movs	r3, #0
 8002ae2:	73fb      	strb	r3, [r7, #15]
 8002ae4:	e044      	b.n	8002b70 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002ae6:	7bfa      	ldrb	r2, [r7, #15]
 8002ae8:	6879      	ldr	r1, [r7, #4]
 8002aea:	4613      	mov	r3, r2
 8002aec:	00db      	lsls	r3, r3, #3
 8002aee:	1a9b      	subs	r3, r3, r2
 8002af0:	009b      	lsls	r3, r3, #2
 8002af2:	440b      	add	r3, r1
 8002af4:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8002af8:	2200      	movs	r2, #0
 8002afa:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002afc:	7bfa      	ldrb	r2, [r7, #15]
 8002afe:	6879      	ldr	r1, [r7, #4]
 8002b00:	4613      	mov	r3, r2
 8002b02:	00db      	lsls	r3, r3, #3
 8002b04:	1a9b      	subs	r3, r3, r2
 8002b06:	009b      	lsls	r3, r3, #2
 8002b08:	440b      	add	r3, r1
 8002b0a:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8002b0e:	7bfa      	ldrb	r2, [r7, #15]
 8002b10:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002b12:	7bfa      	ldrb	r2, [r7, #15]
 8002b14:	6879      	ldr	r1, [r7, #4]
 8002b16:	4613      	mov	r3, r2
 8002b18:	00db      	lsls	r3, r3, #3
 8002b1a:	1a9b      	subs	r3, r3, r2
 8002b1c:	009b      	lsls	r3, r3, #2
 8002b1e:	440b      	add	r3, r1
 8002b20:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8002b24:	2200      	movs	r2, #0
 8002b26:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002b28:	7bfa      	ldrb	r2, [r7, #15]
 8002b2a:	6879      	ldr	r1, [r7, #4]
 8002b2c:	4613      	mov	r3, r2
 8002b2e:	00db      	lsls	r3, r3, #3
 8002b30:	1a9b      	subs	r3, r3, r2
 8002b32:	009b      	lsls	r3, r3, #2
 8002b34:	440b      	add	r3, r1
 8002b36:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002b3e:	7bfa      	ldrb	r2, [r7, #15]
 8002b40:	6879      	ldr	r1, [r7, #4]
 8002b42:	4613      	mov	r3, r2
 8002b44:	00db      	lsls	r3, r3, #3
 8002b46:	1a9b      	subs	r3, r3, r2
 8002b48:	009b      	lsls	r3, r3, #2
 8002b4a:	440b      	add	r3, r1
 8002b4c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002b50:	2200      	movs	r2, #0
 8002b52:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002b54:	7bfa      	ldrb	r2, [r7, #15]
 8002b56:	6879      	ldr	r1, [r7, #4]
 8002b58:	4613      	mov	r3, r2
 8002b5a:	00db      	lsls	r3, r3, #3
 8002b5c:	1a9b      	subs	r3, r3, r2
 8002b5e:	009b      	lsls	r3, r3, #2
 8002b60:	440b      	add	r3, r1
 8002b62:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002b66:	2200      	movs	r2, #0
 8002b68:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002b6a:	7bfb      	ldrb	r3, [r7, #15]
 8002b6c:	3301      	adds	r3, #1
 8002b6e:	73fb      	strb	r3, [r7, #15]
 8002b70:	7bfa      	ldrb	r2, [r7, #15]
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	685b      	ldr	r3, [r3, #4]
 8002b76:	429a      	cmp	r2, r3
 8002b78:	d3b5      	bcc.n	8002ae6 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	603b      	str	r3, [r7, #0]
 8002b80:	687e      	ldr	r6, [r7, #4]
 8002b82:	466d      	mov	r5, sp
 8002b84:	f106 0410 	add.w	r4, r6, #16
 8002b88:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002b8a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002b8c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002b8e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002b90:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002b94:	e885 0003 	stmia.w	r5, {r0, r1}
 8002b98:	1d33      	adds	r3, r6, #4
 8002b9a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002b9c:	6838      	ldr	r0, [r7, #0]
 8002b9e:	f003 f9b1 	bl	8005f04 <USB_DevInit>
 8002ba2:	4603      	mov	r3, r0
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d005      	beq.n	8002bb4 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	2202      	movs	r2, #2
 8002bac:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002bb0:	2301      	movs	r3, #1
 8002bb2:	e00d      	b.n	8002bd0 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	2200      	movs	r2, #0
 8002bb8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	2201      	movs	r2, #1
 8002bc0:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	4618      	mov	r0, r3
 8002bca:	f004 fa2d 	bl	8007028 <USB_DevDisconnect>

  return HAL_OK;
 8002bce:	2300      	movs	r3, #0
}
 8002bd0:	4618      	mov	r0, r3
 8002bd2:	3714      	adds	r7, #20
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002bd8 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	b084      	sub	sp, #16
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002bec:	2b01      	cmp	r3, #1
 8002bee:	d101      	bne.n	8002bf4 <HAL_PCD_Start+0x1c>
 8002bf0:	2302      	movs	r3, #2
 8002bf2:	e020      	b.n	8002c36 <HAL_PCD_Start+0x5e>
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	2201      	movs	r2, #1
 8002bf8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c00:	2b01      	cmp	r3, #1
 8002c02:	d109      	bne.n	8002c18 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002c08:	2b01      	cmp	r3, #1
 8002c0a:	d005      	beq.n	8002c18 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c10:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	4618      	mov	r0, r3
 8002c1e:	f003 f903 	bl	8005e28 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	4618      	mov	r0, r3
 8002c28:	f004 f9dd 	bl	8006fe6 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	2200      	movs	r2, #0
 8002c30:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002c34:	2300      	movs	r3, #0
}
 8002c36:	4618      	mov	r0, r3
 8002c38:	3710      	adds	r7, #16
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	bd80      	pop	{r7, pc}

08002c3e <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002c3e:	b590      	push	{r4, r7, lr}
 8002c40:	b08d      	sub	sp, #52	; 0x34
 8002c42:	af00      	add	r7, sp, #0
 8002c44:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002c4c:	6a3b      	ldr	r3, [r7, #32]
 8002c4e:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t temp;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	4618      	mov	r0, r3
 8002c56:	f004 fa9b 	bl	8007190 <USB_GetMode>
 8002c5a:	4603      	mov	r3, r0
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	f040 839d 	bne.w	800339c <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	4618      	mov	r0, r3
 8002c68:	f004 f9ff 	bl	800706a <USB_ReadInterrupts>
 8002c6c:	4603      	mov	r3, r0
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	f000 8393 	beq.w	800339a <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	4618      	mov	r0, r3
 8002c7a:	f004 f9f6 	bl	800706a <USB_ReadInterrupts>
 8002c7e:	4603      	mov	r3, r0
 8002c80:	f003 0302 	and.w	r3, r3, #2
 8002c84:	2b02      	cmp	r3, #2
 8002c86:	d107      	bne.n	8002c98 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	695a      	ldr	r2, [r3, #20]
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f002 0202 	and.w	r2, r2, #2
 8002c96:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	4618      	mov	r0, r3
 8002c9e:	f004 f9e4 	bl	800706a <USB_ReadInterrupts>
 8002ca2:	4603      	mov	r3, r0
 8002ca4:	f003 0310 	and.w	r3, r3, #16
 8002ca8:	2b10      	cmp	r3, #16
 8002caa:	d161      	bne.n	8002d70 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	699a      	ldr	r2, [r3, #24]
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f022 0210 	bic.w	r2, r2, #16
 8002cba:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8002cbc:	6a3b      	ldr	r3, [r7, #32]
 8002cbe:	6a1b      	ldr	r3, [r3, #32]
 8002cc0:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8002cc2:	69bb      	ldr	r3, [r7, #24]
 8002cc4:	f003 020f 	and.w	r2, r3, #15
 8002cc8:	4613      	mov	r3, r2
 8002cca:	00db      	lsls	r3, r3, #3
 8002ccc:	1a9b      	subs	r3, r3, r2
 8002cce:	009b      	lsls	r3, r3, #2
 8002cd0:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002cd4:	687a      	ldr	r2, [r7, #4]
 8002cd6:	4413      	add	r3, r2
 8002cd8:	3304      	adds	r3, #4
 8002cda:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002cdc:	69bb      	ldr	r3, [r7, #24]
 8002cde:	0c5b      	lsrs	r3, r3, #17
 8002ce0:	f003 030f 	and.w	r3, r3, #15
 8002ce4:	2b02      	cmp	r3, #2
 8002ce6:	d124      	bne.n	8002d32 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002ce8:	69ba      	ldr	r2, [r7, #24]
 8002cea:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8002cee:	4013      	ands	r3, r2
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d035      	beq.n	8002d60 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002cf4:	697b      	ldr	r3, [r7, #20]
 8002cf6:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002cf8:	69bb      	ldr	r3, [r7, #24]
 8002cfa:	091b      	lsrs	r3, r3, #4
 8002cfc:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002cfe:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002d02:	b29b      	uxth	r3, r3
 8002d04:	461a      	mov	r2, r3
 8002d06:	6a38      	ldr	r0, [r7, #32]
 8002d08:	f004 f81b 	bl	8006d42 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002d0c:	697b      	ldr	r3, [r7, #20]
 8002d0e:	68da      	ldr	r2, [r3, #12]
 8002d10:	69bb      	ldr	r3, [r7, #24]
 8002d12:	091b      	lsrs	r3, r3, #4
 8002d14:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002d18:	441a      	add	r2, r3
 8002d1a:	697b      	ldr	r3, [r7, #20]
 8002d1c:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002d1e:	697b      	ldr	r3, [r7, #20]
 8002d20:	699a      	ldr	r2, [r3, #24]
 8002d22:	69bb      	ldr	r3, [r7, #24]
 8002d24:	091b      	lsrs	r3, r3, #4
 8002d26:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002d2a:	441a      	add	r2, r3
 8002d2c:	697b      	ldr	r3, [r7, #20]
 8002d2e:	619a      	str	r2, [r3, #24]
 8002d30:	e016      	b.n	8002d60 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8002d32:	69bb      	ldr	r3, [r7, #24]
 8002d34:	0c5b      	lsrs	r3, r3, #17
 8002d36:	f003 030f 	and.w	r3, r3, #15
 8002d3a:	2b06      	cmp	r3, #6
 8002d3c:	d110      	bne.n	8002d60 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002d44:	2208      	movs	r2, #8
 8002d46:	4619      	mov	r1, r3
 8002d48:	6a38      	ldr	r0, [r7, #32]
 8002d4a:	f003 fffa 	bl	8006d42 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002d4e:	697b      	ldr	r3, [r7, #20]
 8002d50:	699a      	ldr	r2, [r3, #24]
 8002d52:	69bb      	ldr	r3, [r7, #24]
 8002d54:	091b      	lsrs	r3, r3, #4
 8002d56:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002d5a:	441a      	add	r2, r3
 8002d5c:	697b      	ldr	r3, [r7, #20]
 8002d5e:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	699a      	ldr	r2, [r3, #24]
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f042 0210 	orr.w	r2, r2, #16
 8002d6e:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	4618      	mov	r0, r3
 8002d76:	f004 f978 	bl	800706a <USB_ReadInterrupts>
 8002d7a:	4603      	mov	r3, r0
 8002d7c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002d80:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002d84:	d16e      	bne.n	8002e64 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8002d86:	2300      	movs	r3, #0
 8002d88:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	4618      	mov	r0, r3
 8002d90:	f004 f97e 	bl	8007090 <USB_ReadDevAllOutEpInterrupt>
 8002d94:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8002d96:	e062      	b.n	8002e5e <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002d98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d9a:	f003 0301 	and.w	r3, r3, #1
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d057      	beq.n	8002e52 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002da8:	b2d2      	uxtb	r2, r2
 8002daa:	4611      	mov	r1, r2
 8002dac:	4618      	mov	r0, r3
 8002dae:	f004 f9a3 	bl	80070f8 <USB_ReadDevOutEPInterrupt>
 8002db2:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002db4:	693b      	ldr	r3, [r7, #16]
 8002db6:	f003 0301 	and.w	r3, r3, #1
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d00c      	beq.n	8002dd8 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002dbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dc0:	015a      	lsls	r2, r3, #5
 8002dc2:	69fb      	ldr	r3, [r7, #28]
 8002dc4:	4413      	add	r3, r2
 8002dc6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002dca:	461a      	mov	r2, r3
 8002dcc:	2301      	movs	r3, #1
 8002dce:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002dd0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002dd2:	6878      	ldr	r0, [r7, #4]
 8002dd4:	f000 fdb0 	bl	8003938 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002dd8:	693b      	ldr	r3, [r7, #16]
 8002dda:	f003 0308 	and.w	r3, r3, #8
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d00c      	beq.n	8002dfc <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002de2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002de4:	015a      	lsls	r2, r3, #5
 8002de6:	69fb      	ldr	r3, [r7, #28]
 8002de8:	4413      	add	r3, r2
 8002dea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002dee:	461a      	mov	r2, r3
 8002df0:	2308      	movs	r3, #8
 8002df2:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002df4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002df6:	6878      	ldr	r0, [r7, #4]
 8002df8:	f000 feaa 	bl	8003b50 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002dfc:	693b      	ldr	r3, [r7, #16]
 8002dfe:	f003 0310 	and.w	r3, r3, #16
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d008      	beq.n	8002e18 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002e06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e08:	015a      	lsls	r2, r3, #5
 8002e0a:	69fb      	ldr	r3, [r7, #28]
 8002e0c:	4413      	add	r3, r2
 8002e0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e12:	461a      	mov	r2, r3
 8002e14:	2310      	movs	r3, #16
 8002e16:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002e18:	693b      	ldr	r3, [r7, #16]
 8002e1a:	f003 0320 	and.w	r3, r3, #32
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d008      	beq.n	8002e34 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002e22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e24:	015a      	lsls	r2, r3, #5
 8002e26:	69fb      	ldr	r3, [r7, #28]
 8002e28:	4413      	add	r3, r2
 8002e2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e2e:	461a      	mov	r2, r3
 8002e30:	2320      	movs	r3, #32
 8002e32:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002e34:	693b      	ldr	r3, [r7, #16]
 8002e36:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d009      	beq.n	8002e52 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002e3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e40:	015a      	lsls	r2, r3, #5
 8002e42:	69fb      	ldr	r3, [r7, #28]
 8002e44:	4413      	add	r3, r2
 8002e46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e4a:	461a      	mov	r2, r3
 8002e4c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002e50:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002e52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e54:	3301      	adds	r3, #1
 8002e56:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002e58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e5a:	085b      	lsrs	r3, r3, #1
 8002e5c:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002e5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d199      	bne.n	8002d98 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	4618      	mov	r0, r3
 8002e6a:	f004 f8fe 	bl	800706a <USB_ReadInterrupts>
 8002e6e:	4603      	mov	r3, r0
 8002e70:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002e74:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002e78:	f040 80c0 	bne.w	8002ffc <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	4618      	mov	r0, r3
 8002e82:	f004 f91f 	bl	80070c4 <USB_ReadDevAllInEpInterrupt>
 8002e86:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8002e88:	2300      	movs	r3, #0
 8002e8a:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8002e8c:	e0b2      	b.n	8002ff4 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002e8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e90:	f003 0301 	and.w	r3, r3, #1
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	f000 80a7 	beq.w	8002fe8 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ea0:	b2d2      	uxtb	r2, r2
 8002ea2:	4611      	mov	r1, r2
 8002ea4:	4618      	mov	r0, r3
 8002ea6:	f004 f945 	bl	8007134 <USB_ReadDevInEPInterrupt>
 8002eaa:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002eac:	693b      	ldr	r3, [r7, #16]
 8002eae:	f003 0301 	and.w	r3, r3, #1
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d057      	beq.n	8002f66 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002eb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eb8:	f003 030f 	and.w	r3, r3, #15
 8002ebc:	2201      	movs	r2, #1
 8002ebe:	fa02 f303 	lsl.w	r3, r2, r3
 8002ec2:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002ec4:	69fb      	ldr	r3, [r7, #28]
 8002ec6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002eca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	43db      	mvns	r3, r3
 8002ed0:	69f9      	ldr	r1, [r7, #28]
 8002ed2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002ed6:	4013      	ands	r3, r2
 8002ed8:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002eda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002edc:	015a      	lsls	r2, r3, #5
 8002ede:	69fb      	ldr	r3, [r7, #28]
 8002ee0:	4413      	add	r3, r2
 8002ee2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002ee6:	461a      	mov	r2, r3
 8002ee8:	2301      	movs	r3, #1
 8002eea:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	691b      	ldr	r3, [r3, #16]
 8002ef0:	2b01      	cmp	r3, #1
 8002ef2:	d132      	bne.n	8002f5a <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002ef4:	6879      	ldr	r1, [r7, #4]
 8002ef6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ef8:	4613      	mov	r3, r2
 8002efa:	00db      	lsls	r3, r3, #3
 8002efc:	1a9b      	subs	r3, r3, r2
 8002efe:	009b      	lsls	r3, r3, #2
 8002f00:	440b      	add	r3, r1
 8002f02:	3348      	adds	r3, #72	; 0x48
 8002f04:	6819      	ldr	r1, [r3, #0]
 8002f06:	6878      	ldr	r0, [r7, #4]
 8002f08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f0a:	4613      	mov	r3, r2
 8002f0c:	00db      	lsls	r3, r3, #3
 8002f0e:	1a9b      	subs	r3, r3, r2
 8002f10:	009b      	lsls	r3, r3, #2
 8002f12:	4403      	add	r3, r0
 8002f14:	3344      	adds	r3, #68	; 0x44
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	4419      	add	r1, r3
 8002f1a:	6878      	ldr	r0, [r7, #4]
 8002f1c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f1e:	4613      	mov	r3, r2
 8002f20:	00db      	lsls	r3, r3, #3
 8002f22:	1a9b      	subs	r3, r3, r2
 8002f24:	009b      	lsls	r3, r3, #2
 8002f26:	4403      	add	r3, r0
 8002f28:	3348      	adds	r3, #72	; 0x48
 8002f2a:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002f2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d113      	bne.n	8002f5a <HAL_PCD_IRQHandler+0x31c>
 8002f32:	6879      	ldr	r1, [r7, #4]
 8002f34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f36:	4613      	mov	r3, r2
 8002f38:	00db      	lsls	r3, r3, #3
 8002f3a:	1a9b      	subs	r3, r3, r2
 8002f3c:	009b      	lsls	r3, r3, #2
 8002f3e:	440b      	add	r3, r1
 8002f40:	3350      	adds	r3, #80	; 0x50
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d108      	bne.n	8002f5a <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	6818      	ldr	r0, [r3, #0]
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002f52:	461a      	mov	r2, r3
 8002f54:	2101      	movs	r1, #1
 8002f56:	f004 f94d 	bl	80071f4 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002f5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f5c:	b2db      	uxtb	r3, r3
 8002f5e:	4619      	mov	r1, r3
 8002f60:	6878      	ldr	r0, [r7, #4]
 8002f62:	f006 f8f6 	bl	8009152 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002f66:	693b      	ldr	r3, [r7, #16]
 8002f68:	f003 0308 	and.w	r3, r3, #8
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d008      	beq.n	8002f82 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002f70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f72:	015a      	lsls	r2, r3, #5
 8002f74:	69fb      	ldr	r3, [r7, #28]
 8002f76:	4413      	add	r3, r2
 8002f78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002f7c:	461a      	mov	r2, r3
 8002f7e:	2308      	movs	r3, #8
 8002f80:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002f82:	693b      	ldr	r3, [r7, #16]
 8002f84:	f003 0310 	and.w	r3, r3, #16
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d008      	beq.n	8002f9e <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002f8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f8e:	015a      	lsls	r2, r3, #5
 8002f90:	69fb      	ldr	r3, [r7, #28]
 8002f92:	4413      	add	r3, r2
 8002f94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002f98:	461a      	mov	r2, r3
 8002f9a:	2310      	movs	r3, #16
 8002f9c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002f9e:	693b      	ldr	r3, [r7, #16]
 8002fa0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d008      	beq.n	8002fba <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002fa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002faa:	015a      	lsls	r2, r3, #5
 8002fac:	69fb      	ldr	r3, [r7, #28]
 8002fae:	4413      	add	r3, r2
 8002fb0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002fb4:	461a      	mov	r2, r3
 8002fb6:	2340      	movs	r3, #64	; 0x40
 8002fb8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002fba:	693b      	ldr	r3, [r7, #16]
 8002fbc:	f003 0302 	and.w	r3, r3, #2
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d008      	beq.n	8002fd6 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002fc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fc6:	015a      	lsls	r2, r3, #5
 8002fc8:	69fb      	ldr	r3, [r7, #28]
 8002fca:	4413      	add	r3, r2
 8002fcc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002fd0:	461a      	mov	r2, r3
 8002fd2:	2302      	movs	r3, #2
 8002fd4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002fd6:	693b      	ldr	r3, [r7, #16]
 8002fd8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d003      	beq.n	8002fe8 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002fe0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002fe2:	6878      	ldr	r0, [r7, #4]
 8002fe4:	f000 fc1b 	bl	800381e <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002fe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fea:	3301      	adds	r3, #1
 8002fec:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002fee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ff0:	085b      	lsrs	r3, r3, #1
 8002ff2:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002ff4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	f47f af49 	bne.w	8002e8e <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	4618      	mov	r0, r3
 8003002:	f004 f832 	bl	800706a <USB_ReadInterrupts>
 8003006:	4603      	mov	r3, r0
 8003008:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800300c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003010:	d122      	bne.n	8003058 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003012:	69fb      	ldr	r3, [r7, #28]
 8003014:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003018:	685b      	ldr	r3, [r3, #4]
 800301a:	69fa      	ldr	r2, [r7, #28]
 800301c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003020:	f023 0301 	bic.w	r3, r3, #1
 8003024:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 800302c:	2b01      	cmp	r3, #1
 800302e:	d108      	bne.n	8003042 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	2200      	movs	r2, #0
 8003034:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003038:	2100      	movs	r1, #0
 800303a:	6878      	ldr	r0, [r7, #4]
 800303c:	f000 fe26 	bl	8003c8c <HAL_PCDEx_LPM_Callback>
 8003040:	e002      	b.n	8003048 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8003042:	6878      	ldr	r0, [r7, #4]
 8003044:	f006 f8fc 	bl	8009240 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	695a      	ldr	r2, [r3, #20]
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8003056:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	4618      	mov	r0, r3
 800305e:	f004 f804 	bl	800706a <USB_ReadInterrupts>
 8003062:	4603      	mov	r3, r0
 8003064:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003068:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800306c:	d112      	bne.n	8003094 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800306e:	69fb      	ldr	r3, [r7, #28]
 8003070:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003074:	689b      	ldr	r3, [r3, #8]
 8003076:	f003 0301 	and.w	r3, r3, #1
 800307a:	2b01      	cmp	r3, #1
 800307c:	d102      	bne.n	8003084 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800307e:	6878      	ldr	r0, [r7, #4]
 8003080:	f006 f8b8 	bl	80091f4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	695a      	ldr	r2, [r3, #20]
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8003092:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	4618      	mov	r0, r3
 800309a:	f003 ffe6 	bl	800706a <USB_ReadInterrupts>
 800309e:	4603      	mov	r3, r0
 80030a0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80030a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80030a8:	f040 80c7 	bne.w	800323a <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80030ac:	69fb      	ldr	r3, [r7, #28]
 80030ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80030b2:	685b      	ldr	r3, [r3, #4]
 80030b4:	69fa      	ldr	r2, [r7, #28]
 80030b6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80030ba:	f023 0301 	bic.w	r3, r3, #1
 80030be:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	2110      	movs	r1, #16
 80030c6:	4618      	mov	r0, r3
 80030c8:	f003 f880 	bl	80061cc <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80030cc:	2300      	movs	r3, #0
 80030ce:	62fb      	str	r3, [r7, #44]	; 0x2c
 80030d0:	e056      	b.n	8003180 <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80030d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030d4:	015a      	lsls	r2, r3, #5
 80030d6:	69fb      	ldr	r3, [r7, #28]
 80030d8:	4413      	add	r3, r2
 80030da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80030de:	461a      	mov	r2, r3
 80030e0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80030e4:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80030e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030e8:	015a      	lsls	r2, r3, #5
 80030ea:	69fb      	ldr	r3, [r7, #28]
 80030ec:	4413      	add	r3, r2
 80030ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80030f6:	0151      	lsls	r1, r2, #5
 80030f8:	69fa      	ldr	r2, [r7, #28]
 80030fa:	440a      	add	r2, r1
 80030fc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003100:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003104:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8003106:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003108:	015a      	lsls	r2, r3, #5
 800310a:	69fb      	ldr	r3, [r7, #28]
 800310c:	4413      	add	r3, r2
 800310e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003116:	0151      	lsls	r1, r2, #5
 8003118:	69fa      	ldr	r2, [r7, #28]
 800311a:	440a      	add	r2, r1
 800311c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003120:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003124:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003126:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003128:	015a      	lsls	r2, r3, #5
 800312a:	69fb      	ldr	r3, [r7, #28]
 800312c:	4413      	add	r3, r2
 800312e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003132:	461a      	mov	r2, r3
 8003134:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003138:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800313a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800313c:	015a      	lsls	r2, r3, #5
 800313e:	69fb      	ldr	r3, [r7, #28]
 8003140:	4413      	add	r3, r2
 8003142:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800314a:	0151      	lsls	r1, r2, #5
 800314c:	69fa      	ldr	r2, [r7, #28]
 800314e:	440a      	add	r2, r1
 8003150:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003154:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003158:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800315a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800315c:	015a      	lsls	r2, r3, #5
 800315e:	69fb      	ldr	r3, [r7, #28]
 8003160:	4413      	add	r3, r2
 8003162:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800316a:	0151      	lsls	r1, r2, #5
 800316c:	69fa      	ldr	r2, [r7, #28]
 800316e:	440a      	add	r2, r1
 8003170:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003174:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003178:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800317a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800317c:	3301      	adds	r3, #1
 800317e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	685b      	ldr	r3, [r3, #4]
 8003184:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003186:	429a      	cmp	r2, r3
 8003188:	d3a3      	bcc.n	80030d2 <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800318a:	69fb      	ldr	r3, [r7, #28]
 800318c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003190:	69db      	ldr	r3, [r3, #28]
 8003192:	69fa      	ldr	r2, [r7, #28]
 8003194:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003198:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800319c:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d016      	beq.n	80031d4 <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80031a6:	69fb      	ldr	r3, [r7, #28]
 80031a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80031ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80031b0:	69fa      	ldr	r2, [r7, #28]
 80031b2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80031b6:	f043 030b 	orr.w	r3, r3, #11
 80031ba:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80031be:	69fb      	ldr	r3, [r7, #28]
 80031c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80031c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031c6:	69fa      	ldr	r2, [r7, #28]
 80031c8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80031cc:	f043 030b 	orr.w	r3, r3, #11
 80031d0:	6453      	str	r3, [r2, #68]	; 0x44
 80031d2:	e015      	b.n	8003200 <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80031d4:	69fb      	ldr	r3, [r7, #28]
 80031d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80031da:	695b      	ldr	r3, [r3, #20]
 80031dc:	69fa      	ldr	r2, [r7, #28]
 80031de:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80031e2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80031e6:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80031ea:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80031ec:	69fb      	ldr	r3, [r7, #28]
 80031ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80031f2:	691b      	ldr	r3, [r3, #16]
 80031f4:	69fa      	ldr	r2, [r7, #28]
 80031f6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80031fa:	f043 030b 	orr.w	r3, r3, #11
 80031fe:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003200:	69fb      	ldr	r3, [r7, #28]
 8003202:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	69fa      	ldr	r2, [r7, #28]
 800320a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800320e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8003212:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	6818      	ldr	r0, [r3, #0]
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	691b      	ldr	r3, [r3, #16]
 800321c:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003224:	461a      	mov	r2, r3
 8003226:	f003 ffe5 	bl	80071f4 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	695a      	ldr	r2, [r3, #20]
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8003238:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	4618      	mov	r0, r3
 8003240:	f003 ff13 	bl	800706a <USB_ReadInterrupts>
 8003244:	4603      	mov	r3, r0
 8003246:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800324a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800324e:	d124      	bne.n	800329a <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	4618      	mov	r0, r3
 8003256:	f003 ffa9 	bl	80071ac <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	4618      	mov	r0, r3
 8003260:	f003 f811 	bl	8006286 <USB_GetDevSpeed>
 8003264:	4603      	mov	r3, r0
 8003266:	461a      	mov	r2, r3
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681c      	ldr	r4, [r3, #0]
 8003270:	f001 f958 	bl	8004524 <HAL_RCC_GetHCLKFreq>
 8003274:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800327a:	b2db      	uxtb	r3, r3
 800327c:	461a      	mov	r2, r3
 800327e:	4620      	mov	r0, r4
 8003280:	f002 fd30 	bl	8005ce4 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003284:	6878      	ldr	r0, [r7, #4]
 8003286:	f005 ff8c 	bl	80091a2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	695a      	ldr	r2, [r3, #20]
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8003298:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	4618      	mov	r0, r3
 80032a0:	f003 fee3 	bl	800706a <USB_ReadInterrupts>
 80032a4:	4603      	mov	r3, r0
 80032a6:	f003 0308 	and.w	r3, r3, #8
 80032aa:	2b08      	cmp	r3, #8
 80032ac:	d10a      	bne.n	80032c4 <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80032ae:	6878      	ldr	r0, [r7, #4]
 80032b0:	f005 ff69 	bl	8009186 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	695a      	ldr	r2, [r3, #20]
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f002 0208 	and.w	r2, r2, #8
 80032c2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	4618      	mov	r0, r3
 80032ca:	f003 fece 	bl	800706a <USB_ReadInterrupts>
 80032ce:	4603      	mov	r3, r0
 80032d0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80032d4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80032d8:	d10f      	bne.n	80032fa <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80032da:	2300      	movs	r3, #0
 80032dc:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80032de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032e0:	b2db      	uxtb	r3, r3
 80032e2:	4619      	mov	r1, r3
 80032e4:	6878      	ldr	r0, [r7, #4]
 80032e6:	f005 ffcb 	bl	8009280 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	695a      	ldr	r2, [r3, #20]
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80032f8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	4618      	mov	r0, r3
 8003300:	f003 feb3 	bl	800706a <USB_ReadInterrupts>
 8003304:	4603      	mov	r3, r0
 8003306:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800330a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800330e:	d10f      	bne.n	8003330 <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8003310:	2300      	movs	r3, #0
 8003312:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8003314:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003316:	b2db      	uxtb	r3, r3
 8003318:	4619      	mov	r1, r3
 800331a:	6878      	ldr	r0, [r7, #4]
 800331c:	f005 ff9e 	bl	800925c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	695a      	ldr	r2, [r3, #20]
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800332e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	4618      	mov	r0, r3
 8003336:	f003 fe98 	bl	800706a <USB_ReadInterrupts>
 800333a:	4603      	mov	r3, r0
 800333c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003340:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003344:	d10a      	bne.n	800335c <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003346:	6878      	ldr	r0, [r7, #4]
 8003348:	f005 ffac 	bl	80092a4 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	695a      	ldr	r2, [r3, #20]
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800335a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	4618      	mov	r0, r3
 8003362:	f003 fe82 	bl	800706a <USB_ReadInterrupts>
 8003366:	4603      	mov	r3, r0
 8003368:	f003 0304 	and.w	r3, r3, #4
 800336c:	2b04      	cmp	r3, #4
 800336e:	d115      	bne.n	800339c <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	685b      	ldr	r3, [r3, #4]
 8003376:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003378:	69bb      	ldr	r3, [r7, #24]
 800337a:	f003 0304 	and.w	r3, r3, #4
 800337e:	2b00      	cmp	r3, #0
 8003380:	d002      	beq.n	8003388 <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003382:	6878      	ldr	r0, [r7, #4]
 8003384:	f005 ff9c 	bl	80092c0 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	6859      	ldr	r1, [r3, #4]
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	69ba      	ldr	r2, [r7, #24]
 8003394:	430a      	orrs	r2, r1
 8003396:	605a      	str	r2, [r3, #4]
 8003398:	e000      	b.n	800339c <HAL_PCD_IRQHandler+0x75e>
      return;
 800339a:	bf00      	nop
    }
  }
}
 800339c:	3734      	adds	r7, #52	; 0x34
 800339e:	46bd      	mov	sp, r7
 80033a0:	bd90      	pop	{r4, r7, pc}

080033a2 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80033a2:	b580      	push	{r7, lr}
 80033a4:	b082      	sub	sp, #8
 80033a6:	af00      	add	r7, sp, #0
 80033a8:	6078      	str	r0, [r7, #4]
 80033aa:	460b      	mov	r3, r1
 80033ac:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80033b4:	2b01      	cmp	r3, #1
 80033b6:	d101      	bne.n	80033bc <HAL_PCD_SetAddress+0x1a>
 80033b8:	2302      	movs	r3, #2
 80033ba:	e013      	b.n	80033e4 <HAL_PCD_SetAddress+0x42>
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	2201      	movs	r2, #1
 80033c0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	78fa      	ldrb	r2, [r7, #3]
 80033c8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	78fa      	ldrb	r2, [r7, #3]
 80033d2:	4611      	mov	r1, r2
 80033d4:	4618      	mov	r0, r3
 80033d6:	f003 fde0 	bl	8006f9a <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	2200      	movs	r2, #0
 80033de:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80033e2:	2300      	movs	r3, #0
}
 80033e4:	4618      	mov	r0, r3
 80033e6:	3708      	adds	r7, #8
 80033e8:	46bd      	mov	sp, r7
 80033ea:	bd80      	pop	{r7, pc}

080033ec <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80033ec:	b580      	push	{r7, lr}
 80033ee:	b084      	sub	sp, #16
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	6078      	str	r0, [r7, #4]
 80033f4:	4608      	mov	r0, r1
 80033f6:	4611      	mov	r1, r2
 80033f8:	461a      	mov	r2, r3
 80033fa:	4603      	mov	r3, r0
 80033fc:	70fb      	strb	r3, [r7, #3]
 80033fe:	460b      	mov	r3, r1
 8003400:	803b      	strh	r3, [r7, #0]
 8003402:	4613      	mov	r3, r2
 8003404:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003406:	2300      	movs	r3, #0
 8003408:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800340a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800340e:	2b00      	cmp	r3, #0
 8003410:	da0f      	bge.n	8003432 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003412:	78fb      	ldrb	r3, [r7, #3]
 8003414:	f003 020f 	and.w	r2, r3, #15
 8003418:	4613      	mov	r3, r2
 800341a:	00db      	lsls	r3, r3, #3
 800341c:	1a9b      	subs	r3, r3, r2
 800341e:	009b      	lsls	r3, r3, #2
 8003420:	3338      	adds	r3, #56	; 0x38
 8003422:	687a      	ldr	r2, [r7, #4]
 8003424:	4413      	add	r3, r2
 8003426:	3304      	adds	r3, #4
 8003428:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	2201      	movs	r2, #1
 800342e:	705a      	strb	r2, [r3, #1]
 8003430:	e00f      	b.n	8003452 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003432:	78fb      	ldrb	r3, [r7, #3]
 8003434:	f003 020f 	and.w	r2, r3, #15
 8003438:	4613      	mov	r3, r2
 800343a:	00db      	lsls	r3, r3, #3
 800343c:	1a9b      	subs	r3, r3, r2
 800343e:	009b      	lsls	r3, r3, #2
 8003440:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003444:	687a      	ldr	r2, [r7, #4]
 8003446:	4413      	add	r3, r2
 8003448:	3304      	adds	r3, #4
 800344a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	2200      	movs	r2, #0
 8003450:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003452:	78fb      	ldrb	r3, [r7, #3]
 8003454:	f003 030f 	and.w	r3, r3, #15
 8003458:	b2da      	uxtb	r2, r3
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800345e:	883a      	ldrh	r2, [r7, #0]
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	78ba      	ldrb	r2, [r7, #2]
 8003468:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	785b      	ldrb	r3, [r3, #1]
 800346e:	2b00      	cmp	r3, #0
 8003470:	d004      	beq.n	800347c <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	781b      	ldrb	r3, [r3, #0]
 8003476:	b29a      	uxth	r2, r3
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800347c:	78bb      	ldrb	r3, [r7, #2]
 800347e:	2b02      	cmp	r3, #2
 8003480:	d102      	bne.n	8003488 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	2200      	movs	r2, #0
 8003486:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800348e:	2b01      	cmp	r3, #1
 8003490:	d101      	bne.n	8003496 <HAL_PCD_EP_Open+0xaa>
 8003492:	2302      	movs	r3, #2
 8003494:	e00e      	b.n	80034b4 <HAL_PCD_EP_Open+0xc8>
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	2201      	movs	r2, #1
 800349a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	68f9      	ldr	r1, [r7, #12]
 80034a4:	4618      	mov	r0, r3
 80034a6:	f002 ff13 	bl	80062d0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	2200      	movs	r2, #0
 80034ae:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 80034b2:	7afb      	ldrb	r3, [r7, #11]
}
 80034b4:	4618      	mov	r0, r3
 80034b6:	3710      	adds	r7, #16
 80034b8:	46bd      	mov	sp, r7
 80034ba:	bd80      	pop	{r7, pc}

080034bc <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80034bc:	b580      	push	{r7, lr}
 80034be:	b084      	sub	sp, #16
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	6078      	str	r0, [r7, #4]
 80034c4:	460b      	mov	r3, r1
 80034c6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80034c8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	da0f      	bge.n	80034f0 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80034d0:	78fb      	ldrb	r3, [r7, #3]
 80034d2:	f003 020f 	and.w	r2, r3, #15
 80034d6:	4613      	mov	r3, r2
 80034d8:	00db      	lsls	r3, r3, #3
 80034da:	1a9b      	subs	r3, r3, r2
 80034dc:	009b      	lsls	r3, r3, #2
 80034de:	3338      	adds	r3, #56	; 0x38
 80034e0:	687a      	ldr	r2, [r7, #4]
 80034e2:	4413      	add	r3, r2
 80034e4:	3304      	adds	r3, #4
 80034e6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	2201      	movs	r2, #1
 80034ec:	705a      	strb	r2, [r3, #1]
 80034ee:	e00f      	b.n	8003510 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80034f0:	78fb      	ldrb	r3, [r7, #3]
 80034f2:	f003 020f 	and.w	r2, r3, #15
 80034f6:	4613      	mov	r3, r2
 80034f8:	00db      	lsls	r3, r3, #3
 80034fa:	1a9b      	subs	r3, r3, r2
 80034fc:	009b      	lsls	r3, r3, #2
 80034fe:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003502:	687a      	ldr	r2, [r7, #4]
 8003504:	4413      	add	r3, r2
 8003506:	3304      	adds	r3, #4
 8003508:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	2200      	movs	r2, #0
 800350e:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8003510:	78fb      	ldrb	r3, [r7, #3]
 8003512:	f003 030f 	and.w	r3, r3, #15
 8003516:	b2da      	uxtb	r2, r3
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003522:	2b01      	cmp	r3, #1
 8003524:	d101      	bne.n	800352a <HAL_PCD_EP_Close+0x6e>
 8003526:	2302      	movs	r3, #2
 8003528:	e00e      	b.n	8003548 <HAL_PCD_EP_Close+0x8c>
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	2201      	movs	r2, #1
 800352e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	68f9      	ldr	r1, [r7, #12]
 8003538:	4618      	mov	r0, r3
 800353a:	f002 ff51 	bl	80063e0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	2200      	movs	r2, #0
 8003542:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8003546:	2300      	movs	r3, #0
}
 8003548:	4618      	mov	r0, r3
 800354a:	3710      	adds	r7, #16
 800354c:	46bd      	mov	sp, r7
 800354e:	bd80      	pop	{r7, pc}

08003550 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003550:	b580      	push	{r7, lr}
 8003552:	b086      	sub	sp, #24
 8003554:	af00      	add	r7, sp, #0
 8003556:	60f8      	str	r0, [r7, #12]
 8003558:	607a      	str	r2, [r7, #4]
 800355a:	603b      	str	r3, [r7, #0]
 800355c:	460b      	mov	r3, r1
 800355e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003560:	7afb      	ldrb	r3, [r7, #11]
 8003562:	f003 020f 	and.w	r2, r3, #15
 8003566:	4613      	mov	r3, r2
 8003568:	00db      	lsls	r3, r3, #3
 800356a:	1a9b      	subs	r3, r3, r2
 800356c:	009b      	lsls	r3, r3, #2
 800356e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003572:	68fa      	ldr	r2, [r7, #12]
 8003574:	4413      	add	r3, r2
 8003576:	3304      	adds	r3, #4
 8003578:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800357a:	697b      	ldr	r3, [r7, #20]
 800357c:	687a      	ldr	r2, [r7, #4]
 800357e:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003580:	697b      	ldr	r3, [r7, #20]
 8003582:	683a      	ldr	r2, [r7, #0]
 8003584:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8003586:	697b      	ldr	r3, [r7, #20]
 8003588:	2200      	movs	r2, #0
 800358a:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 800358c:	697b      	ldr	r3, [r7, #20]
 800358e:	2200      	movs	r2, #0
 8003590:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003592:	7afb      	ldrb	r3, [r7, #11]
 8003594:	f003 030f 	and.w	r3, r3, #15
 8003598:	b2da      	uxtb	r2, r3
 800359a:	697b      	ldr	r3, [r7, #20]
 800359c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	691b      	ldr	r3, [r3, #16]
 80035a2:	2b01      	cmp	r3, #1
 80035a4:	d102      	bne.n	80035ac <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80035a6:	687a      	ldr	r2, [r7, #4]
 80035a8:	697b      	ldr	r3, [r7, #20]
 80035aa:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80035ac:	7afb      	ldrb	r3, [r7, #11]
 80035ae:	f003 030f 	and.w	r3, r3, #15
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d109      	bne.n	80035ca <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	6818      	ldr	r0, [r3, #0]
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	691b      	ldr	r3, [r3, #16]
 80035be:	b2db      	uxtb	r3, r3
 80035c0:	461a      	mov	r2, r3
 80035c2:	6979      	ldr	r1, [r7, #20]
 80035c4:	f003 fa2c 	bl	8006a20 <USB_EP0StartXfer>
 80035c8:	e008      	b.n	80035dc <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	6818      	ldr	r0, [r3, #0]
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	691b      	ldr	r3, [r3, #16]
 80035d2:	b2db      	uxtb	r3, r3
 80035d4:	461a      	mov	r2, r3
 80035d6:	6979      	ldr	r1, [r7, #20]
 80035d8:	f002 ffde 	bl	8006598 <USB_EPStartXfer>
  }

  return HAL_OK;
 80035dc:	2300      	movs	r3, #0
}
 80035de:	4618      	mov	r0, r3
 80035e0:	3718      	adds	r7, #24
 80035e2:	46bd      	mov	sp, r7
 80035e4:	bd80      	pop	{r7, pc}

080035e6 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80035e6:	b480      	push	{r7}
 80035e8:	b083      	sub	sp, #12
 80035ea:	af00      	add	r7, sp, #0
 80035ec:	6078      	str	r0, [r7, #4]
 80035ee:	460b      	mov	r3, r1
 80035f0:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80035f2:	78fb      	ldrb	r3, [r7, #3]
 80035f4:	f003 020f 	and.w	r2, r3, #15
 80035f8:	6879      	ldr	r1, [r7, #4]
 80035fa:	4613      	mov	r3, r2
 80035fc:	00db      	lsls	r3, r3, #3
 80035fe:	1a9b      	subs	r3, r3, r2
 8003600:	009b      	lsls	r3, r3, #2
 8003602:	440b      	add	r3, r1
 8003604:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8003608:	681b      	ldr	r3, [r3, #0]
}
 800360a:	4618      	mov	r0, r3
 800360c:	370c      	adds	r7, #12
 800360e:	46bd      	mov	sp, r7
 8003610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003614:	4770      	bx	lr

08003616 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003616:	b580      	push	{r7, lr}
 8003618:	b086      	sub	sp, #24
 800361a:	af00      	add	r7, sp, #0
 800361c:	60f8      	str	r0, [r7, #12]
 800361e:	607a      	str	r2, [r7, #4]
 8003620:	603b      	str	r3, [r7, #0]
 8003622:	460b      	mov	r3, r1
 8003624:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003626:	7afb      	ldrb	r3, [r7, #11]
 8003628:	f003 020f 	and.w	r2, r3, #15
 800362c:	4613      	mov	r3, r2
 800362e:	00db      	lsls	r3, r3, #3
 8003630:	1a9b      	subs	r3, r3, r2
 8003632:	009b      	lsls	r3, r3, #2
 8003634:	3338      	adds	r3, #56	; 0x38
 8003636:	68fa      	ldr	r2, [r7, #12]
 8003638:	4413      	add	r3, r2
 800363a:	3304      	adds	r3, #4
 800363c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800363e:	697b      	ldr	r3, [r7, #20]
 8003640:	687a      	ldr	r2, [r7, #4]
 8003642:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003644:	697b      	ldr	r3, [r7, #20]
 8003646:	683a      	ldr	r2, [r7, #0]
 8003648:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800364a:	697b      	ldr	r3, [r7, #20]
 800364c:	2200      	movs	r2, #0
 800364e:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8003650:	697b      	ldr	r3, [r7, #20]
 8003652:	2201      	movs	r2, #1
 8003654:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003656:	7afb      	ldrb	r3, [r7, #11]
 8003658:	f003 030f 	and.w	r3, r3, #15
 800365c:	b2da      	uxtb	r2, r3
 800365e:	697b      	ldr	r3, [r7, #20]
 8003660:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	691b      	ldr	r3, [r3, #16]
 8003666:	2b01      	cmp	r3, #1
 8003668:	d102      	bne.n	8003670 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800366a:	687a      	ldr	r2, [r7, #4]
 800366c:	697b      	ldr	r3, [r7, #20]
 800366e:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003670:	7afb      	ldrb	r3, [r7, #11]
 8003672:	f003 030f 	and.w	r3, r3, #15
 8003676:	2b00      	cmp	r3, #0
 8003678:	d109      	bne.n	800368e <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	6818      	ldr	r0, [r3, #0]
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	691b      	ldr	r3, [r3, #16]
 8003682:	b2db      	uxtb	r3, r3
 8003684:	461a      	mov	r2, r3
 8003686:	6979      	ldr	r1, [r7, #20]
 8003688:	f003 f9ca 	bl	8006a20 <USB_EP0StartXfer>
 800368c:	e008      	b.n	80036a0 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	6818      	ldr	r0, [r3, #0]
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	691b      	ldr	r3, [r3, #16]
 8003696:	b2db      	uxtb	r3, r3
 8003698:	461a      	mov	r2, r3
 800369a:	6979      	ldr	r1, [r7, #20]
 800369c:	f002 ff7c 	bl	8006598 <USB_EPStartXfer>
  }

  return HAL_OK;
 80036a0:	2300      	movs	r3, #0
}
 80036a2:	4618      	mov	r0, r3
 80036a4:	3718      	adds	r7, #24
 80036a6:	46bd      	mov	sp, r7
 80036a8:	bd80      	pop	{r7, pc}

080036aa <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80036aa:	b580      	push	{r7, lr}
 80036ac:	b084      	sub	sp, #16
 80036ae:	af00      	add	r7, sp, #0
 80036b0:	6078      	str	r0, [r7, #4]
 80036b2:	460b      	mov	r3, r1
 80036b4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80036b6:	78fb      	ldrb	r3, [r7, #3]
 80036b8:	f003 020f 	and.w	r2, r3, #15
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	685b      	ldr	r3, [r3, #4]
 80036c0:	429a      	cmp	r2, r3
 80036c2:	d901      	bls.n	80036c8 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80036c4:	2301      	movs	r3, #1
 80036c6:	e050      	b.n	800376a <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80036c8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	da0f      	bge.n	80036f0 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80036d0:	78fb      	ldrb	r3, [r7, #3]
 80036d2:	f003 020f 	and.w	r2, r3, #15
 80036d6:	4613      	mov	r3, r2
 80036d8:	00db      	lsls	r3, r3, #3
 80036da:	1a9b      	subs	r3, r3, r2
 80036dc:	009b      	lsls	r3, r3, #2
 80036de:	3338      	adds	r3, #56	; 0x38
 80036e0:	687a      	ldr	r2, [r7, #4]
 80036e2:	4413      	add	r3, r2
 80036e4:	3304      	adds	r3, #4
 80036e6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	2201      	movs	r2, #1
 80036ec:	705a      	strb	r2, [r3, #1]
 80036ee:	e00d      	b.n	800370c <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80036f0:	78fa      	ldrb	r2, [r7, #3]
 80036f2:	4613      	mov	r3, r2
 80036f4:	00db      	lsls	r3, r3, #3
 80036f6:	1a9b      	subs	r3, r3, r2
 80036f8:	009b      	lsls	r3, r3, #2
 80036fa:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80036fe:	687a      	ldr	r2, [r7, #4]
 8003700:	4413      	add	r3, r2
 8003702:	3304      	adds	r3, #4
 8003704:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	2200      	movs	r2, #0
 800370a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	2201      	movs	r2, #1
 8003710:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003712:	78fb      	ldrb	r3, [r7, #3]
 8003714:	f003 030f 	and.w	r3, r3, #15
 8003718:	b2da      	uxtb	r2, r3
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003724:	2b01      	cmp	r3, #1
 8003726:	d101      	bne.n	800372c <HAL_PCD_EP_SetStall+0x82>
 8003728:	2302      	movs	r3, #2
 800372a:	e01e      	b.n	800376a <HAL_PCD_EP_SetStall+0xc0>
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	2201      	movs	r2, #1
 8003730:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	68f9      	ldr	r1, [r7, #12]
 800373a:	4618      	mov	r0, r3
 800373c:	f003 fb59 	bl	8006df2 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003740:	78fb      	ldrb	r3, [r7, #3]
 8003742:	f003 030f 	and.w	r3, r3, #15
 8003746:	2b00      	cmp	r3, #0
 8003748:	d10a      	bne.n	8003760 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	6818      	ldr	r0, [r3, #0]
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	691b      	ldr	r3, [r3, #16]
 8003752:	b2d9      	uxtb	r1, r3
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800375a:	461a      	mov	r2, r3
 800375c:	f003 fd4a 	bl	80071f4 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	2200      	movs	r2, #0
 8003764:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003768:	2300      	movs	r3, #0
}
 800376a:	4618      	mov	r0, r3
 800376c:	3710      	adds	r7, #16
 800376e:	46bd      	mov	sp, r7
 8003770:	bd80      	pop	{r7, pc}

08003772 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003772:	b580      	push	{r7, lr}
 8003774:	b084      	sub	sp, #16
 8003776:	af00      	add	r7, sp, #0
 8003778:	6078      	str	r0, [r7, #4]
 800377a:	460b      	mov	r3, r1
 800377c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800377e:	78fb      	ldrb	r3, [r7, #3]
 8003780:	f003 020f 	and.w	r2, r3, #15
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	685b      	ldr	r3, [r3, #4]
 8003788:	429a      	cmp	r2, r3
 800378a:	d901      	bls.n	8003790 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800378c:	2301      	movs	r3, #1
 800378e:	e042      	b.n	8003816 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003790:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003794:	2b00      	cmp	r3, #0
 8003796:	da0f      	bge.n	80037b8 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003798:	78fb      	ldrb	r3, [r7, #3]
 800379a:	f003 020f 	and.w	r2, r3, #15
 800379e:	4613      	mov	r3, r2
 80037a0:	00db      	lsls	r3, r3, #3
 80037a2:	1a9b      	subs	r3, r3, r2
 80037a4:	009b      	lsls	r3, r3, #2
 80037a6:	3338      	adds	r3, #56	; 0x38
 80037a8:	687a      	ldr	r2, [r7, #4]
 80037aa:	4413      	add	r3, r2
 80037ac:	3304      	adds	r3, #4
 80037ae:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	2201      	movs	r2, #1
 80037b4:	705a      	strb	r2, [r3, #1]
 80037b6:	e00f      	b.n	80037d8 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80037b8:	78fb      	ldrb	r3, [r7, #3]
 80037ba:	f003 020f 	and.w	r2, r3, #15
 80037be:	4613      	mov	r3, r2
 80037c0:	00db      	lsls	r3, r3, #3
 80037c2:	1a9b      	subs	r3, r3, r2
 80037c4:	009b      	lsls	r3, r3, #2
 80037c6:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80037ca:	687a      	ldr	r2, [r7, #4]
 80037cc:	4413      	add	r3, r2
 80037ce:	3304      	adds	r3, #4
 80037d0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	2200      	movs	r2, #0
 80037d6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	2200      	movs	r2, #0
 80037dc:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80037de:	78fb      	ldrb	r3, [r7, #3]
 80037e0:	f003 030f 	and.w	r3, r3, #15
 80037e4:	b2da      	uxtb	r2, r3
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80037f0:	2b01      	cmp	r3, #1
 80037f2:	d101      	bne.n	80037f8 <HAL_PCD_EP_ClrStall+0x86>
 80037f4:	2302      	movs	r3, #2
 80037f6:	e00e      	b.n	8003816 <HAL_PCD_EP_ClrStall+0xa4>
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	2201      	movs	r2, #1
 80037fc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	68f9      	ldr	r1, [r7, #12]
 8003806:	4618      	mov	r0, r3
 8003808:	f003 fb61 	bl	8006ece <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	2200      	movs	r2, #0
 8003810:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003814:	2300      	movs	r3, #0
}
 8003816:	4618      	mov	r0, r3
 8003818:	3710      	adds	r7, #16
 800381a:	46bd      	mov	sp, r7
 800381c:	bd80      	pop	{r7, pc}

0800381e <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800381e:	b580      	push	{r7, lr}
 8003820:	b08a      	sub	sp, #40	; 0x28
 8003822:	af02      	add	r7, sp, #8
 8003824:	6078      	str	r0, [r7, #4]
 8003826:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800382e:	697b      	ldr	r3, [r7, #20]
 8003830:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003832:	683a      	ldr	r2, [r7, #0]
 8003834:	4613      	mov	r3, r2
 8003836:	00db      	lsls	r3, r3, #3
 8003838:	1a9b      	subs	r3, r3, r2
 800383a:	009b      	lsls	r3, r3, #2
 800383c:	3338      	adds	r3, #56	; 0x38
 800383e:	687a      	ldr	r2, [r7, #4]
 8003840:	4413      	add	r3, r2
 8003842:	3304      	adds	r3, #4
 8003844:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	699a      	ldr	r2, [r3, #24]
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	695b      	ldr	r3, [r3, #20]
 800384e:	429a      	cmp	r2, r3
 8003850:	d901      	bls.n	8003856 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003852:	2301      	movs	r3, #1
 8003854:	e06c      	b.n	8003930 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	695a      	ldr	r2, [r3, #20]
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	699b      	ldr	r3, [r3, #24]
 800385e:	1ad3      	subs	r3, r2, r3
 8003860:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	689b      	ldr	r3, [r3, #8]
 8003866:	69fa      	ldr	r2, [r7, #28]
 8003868:	429a      	cmp	r2, r3
 800386a:	d902      	bls.n	8003872 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	689b      	ldr	r3, [r3, #8]
 8003870:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003872:	69fb      	ldr	r3, [r7, #28]
 8003874:	3303      	adds	r3, #3
 8003876:	089b      	lsrs	r3, r3, #2
 8003878:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800387a:	e02b      	b.n	80038d4 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	695a      	ldr	r2, [r3, #20]
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	699b      	ldr	r3, [r3, #24]
 8003884:	1ad3      	subs	r3, r2, r3
 8003886:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	689b      	ldr	r3, [r3, #8]
 800388c:	69fa      	ldr	r2, [r7, #28]
 800388e:	429a      	cmp	r2, r3
 8003890:	d902      	bls.n	8003898 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	689b      	ldr	r3, [r3, #8]
 8003896:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003898:	69fb      	ldr	r3, [r7, #28]
 800389a:	3303      	adds	r3, #3
 800389c:	089b      	lsrs	r3, r3, #2
 800389e:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	68d9      	ldr	r1, [r3, #12]
 80038a4:	683b      	ldr	r3, [r7, #0]
 80038a6:	b2da      	uxtb	r2, r3
 80038a8:	69fb      	ldr	r3, [r7, #28]
 80038aa:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80038b0:	b2db      	uxtb	r3, r3
 80038b2:	9300      	str	r3, [sp, #0]
 80038b4:	4603      	mov	r3, r0
 80038b6:	6978      	ldr	r0, [r7, #20]
 80038b8:	f003 fa05 	bl	8006cc6 <USB_WritePacket>

    ep->xfer_buff  += len;
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	68da      	ldr	r2, [r3, #12]
 80038c0:	69fb      	ldr	r3, [r7, #28]
 80038c2:	441a      	add	r2, r3
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	699a      	ldr	r2, [r3, #24]
 80038cc:	69fb      	ldr	r3, [r7, #28]
 80038ce:	441a      	add	r2, r3
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80038d4:	683b      	ldr	r3, [r7, #0]
 80038d6:	015a      	lsls	r2, r3, #5
 80038d8:	693b      	ldr	r3, [r7, #16]
 80038da:	4413      	add	r3, r2
 80038dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80038e0:	699b      	ldr	r3, [r3, #24]
 80038e2:	b29b      	uxth	r3, r3
 80038e4:	69ba      	ldr	r2, [r7, #24]
 80038e6:	429a      	cmp	r2, r3
 80038e8:	d809      	bhi.n	80038fe <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	699a      	ldr	r2, [r3, #24]
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80038f2:	429a      	cmp	r2, r3
 80038f4:	d203      	bcs.n	80038fe <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	695b      	ldr	r3, [r3, #20]
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d1be      	bne.n	800387c <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	695a      	ldr	r2, [r3, #20]
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	699b      	ldr	r3, [r3, #24]
 8003906:	429a      	cmp	r2, r3
 8003908:	d811      	bhi.n	800392e <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800390a:	683b      	ldr	r3, [r7, #0]
 800390c:	f003 030f 	and.w	r3, r3, #15
 8003910:	2201      	movs	r2, #1
 8003912:	fa02 f303 	lsl.w	r3, r2, r3
 8003916:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003918:	693b      	ldr	r3, [r7, #16]
 800391a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800391e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003920:	68bb      	ldr	r3, [r7, #8]
 8003922:	43db      	mvns	r3, r3
 8003924:	6939      	ldr	r1, [r7, #16]
 8003926:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800392a:	4013      	ands	r3, r2
 800392c:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800392e:	2300      	movs	r3, #0
}
 8003930:	4618      	mov	r0, r3
 8003932:	3720      	adds	r7, #32
 8003934:	46bd      	mov	sp, r7
 8003936:	bd80      	pop	{r7, pc}

08003938 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003938:	b580      	push	{r7, lr}
 800393a:	b086      	sub	sp, #24
 800393c:	af00      	add	r7, sp, #0
 800393e:	6078      	str	r0, [r7, #4]
 8003940:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003948:	697b      	ldr	r3, [r7, #20]
 800394a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800394c:	697b      	ldr	r3, [r7, #20]
 800394e:	333c      	adds	r3, #60	; 0x3c
 8003950:	3304      	adds	r3, #4
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003956:	683b      	ldr	r3, [r7, #0]
 8003958:	015a      	lsls	r2, r3, #5
 800395a:	693b      	ldr	r3, [r7, #16]
 800395c:	4413      	add	r3, r2
 800395e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003962:	689b      	ldr	r3, [r3, #8]
 8003964:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	691b      	ldr	r3, [r3, #16]
 800396a:	2b01      	cmp	r3, #1
 800396c:	f040 80a0 	bne.w	8003ab0 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003970:	68bb      	ldr	r3, [r7, #8]
 8003972:	f003 0308 	and.w	r3, r3, #8
 8003976:	2b00      	cmp	r3, #0
 8003978:	d015      	beq.n	80039a6 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	4a72      	ldr	r2, [pc, #456]	; (8003b48 <PCD_EP_OutXfrComplete_int+0x210>)
 800397e:	4293      	cmp	r3, r2
 8003980:	f240 80dd 	bls.w	8003b3e <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003984:	68bb      	ldr	r3, [r7, #8]
 8003986:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800398a:	2b00      	cmp	r3, #0
 800398c:	f000 80d7 	beq.w	8003b3e <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003990:	683b      	ldr	r3, [r7, #0]
 8003992:	015a      	lsls	r2, r3, #5
 8003994:	693b      	ldr	r3, [r7, #16]
 8003996:	4413      	add	r3, r2
 8003998:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800399c:	461a      	mov	r2, r3
 800399e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80039a2:	6093      	str	r3, [r2, #8]
 80039a4:	e0cb      	b.n	8003b3e <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80039a6:	68bb      	ldr	r3, [r7, #8]
 80039a8:	f003 0320 	and.w	r3, r3, #32
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d009      	beq.n	80039c4 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80039b0:	683b      	ldr	r3, [r7, #0]
 80039b2:	015a      	lsls	r2, r3, #5
 80039b4:	693b      	ldr	r3, [r7, #16]
 80039b6:	4413      	add	r3, r2
 80039b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80039bc:	461a      	mov	r2, r3
 80039be:	2320      	movs	r3, #32
 80039c0:	6093      	str	r3, [r2, #8]
 80039c2:	e0bc      	b.n	8003b3e <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80039c4:	68bb      	ldr	r3, [r7, #8]
 80039c6:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	f040 80b7 	bne.w	8003b3e <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	4a5d      	ldr	r2, [pc, #372]	; (8003b48 <PCD_EP_OutXfrComplete_int+0x210>)
 80039d4:	4293      	cmp	r3, r2
 80039d6:	d90f      	bls.n	80039f8 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80039d8:	68bb      	ldr	r3, [r7, #8]
 80039da:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d00a      	beq.n	80039f8 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80039e2:	683b      	ldr	r3, [r7, #0]
 80039e4:	015a      	lsls	r2, r3, #5
 80039e6:	693b      	ldr	r3, [r7, #16]
 80039e8:	4413      	add	r3, r2
 80039ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80039ee:	461a      	mov	r2, r3
 80039f0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80039f4:	6093      	str	r3, [r2, #8]
 80039f6:	e0a2      	b.n	8003b3e <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 80039f8:	6879      	ldr	r1, [r7, #4]
 80039fa:	683a      	ldr	r2, [r7, #0]
 80039fc:	4613      	mov	r3, r2
 80039fe:	00db      	lsls	r3, r3, #3
 8003a00:	1a9b      	subs	r3, r3, r2
 8003a02:	009b      	lsls	r3, r3, #2
 8003a04:	440b      	add	r3, r1
 8003a06:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003a0a:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003a0c:	683b      	ldr	r3, [r7, #0]
 8003a0e:	0159      	lsls	r1, r3, #5
 8003a10:	693b      	ldr	r3, [r7, #16]
 8003a12:	440b      	add	r3, r1
 8003a14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a18:	691b      	ldr	r3, [r3, #16]
 8003a1a:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8003a1e:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8003a20:	6878      	ldr	r0, [r7, #4]
 8003a22:	683a      	ldr	r2, [r7, #0]
 8003a24:	4613      	mov	r3, r2
 8003a26:	00db      	lsls	r3, r3, #3
 8003a28:	1a9b      	subs	r3, r3, r2
 8003a2a:	009b      	lsls	r3, r3, #2
 8003a2c:	4403      	add	r3, r0
 8003a2e:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8003a32:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8003a34:	6879      	ldr	r1, [r7, #4]
 8003a36:	683a      	ldr	r2, [r7, #0]
 8003a38:	4613      	mov	r3, r2
 8003a3a:	00db      	lsls	r3, r3, #3
 8003a3c:	1a9b      	subs	r3, r3, r2
 8003a3e:	009b      	lsls	r3, r3, #2
 8003a40:	440b      	add	r3, r1
 8003a42:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003a46:	6819      	ldr	r1, [r3, #0]
 8003a48:	6878      	ldr	r0, [r7, #4]
 8003a4a:	683a      	ldr	r2, [r7, #0]
 8003a4c:	4613      	mov	r3, r2
 8003a4e:	00db      	lsls	r3, r3, #3
 8003a50:	1a9b      	subs	r3, r3, r2
 8003a52:	009b      	lsls	r3, r3, #2
 8003a54:	4403      	add	r3, r0
 8003a56:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	4419      	add	r1, r3
 8003a5e:	6878      	ldr	r0, [r7, #4]
 8003a60:	683a      	ldr	r2, [r7, #0]
 8003a62:	4613      	mov	r3, r2
 8003a64:	00db      	lsls	r3, r3, #3
 8003a66:	1a9b      	subs	r3, r3, r2
 8003a68:	009b      	lsls	r3, r3, #2
 8003a6a:	4403      	add	r3, r0
 8003a6c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003a70:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003a72:	683b      	ldr	r3, [r7, #0]
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d114      	bne.n	8003aa2 <PCD_EP_OutXfrComplete_int+0x16a>
 8003a78:	6879      	ldr	r1, [r7, #4]
 8003a7a:	683a      	ldr	r2, [r7, #0]
 8003a7c:	4613      	mov	r3, r2
 8003a7e:	00db      	lsls	r3, r3, #3
 8003a80:	1a9b      	subs	r3, r3, r2
 8003a82:	009b      	lsls	r3, r3, #2
 8003a84:	440b      	add	r3, r1
 8003a86:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d108      	bne.n	8003aa2 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	6818      	ldr	r0, [r3, #0]
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003a9a:	461a      	mov	r2, r3
 8003a9c:	2101      	movs	r1, #1
 8003a9e:	f003 fba9 	bl	80071f4 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003aa2:	683b      	ldr	r3, [r7, #0]
 8003aa4:	b2db      	uxtb	r3, r3
 8003aa6:	4619      	mov	r1, r3
 8003aa8:	6878      	ldr	r0, [r7, #4]
 8003aaa:	f005 fb37 	bl	800911c <HAL_PCD_DataOutStageCallback>
 8003aae:	e046      	b.n	8003b3e <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	4a26      	ldr	r2, [pc, #152]	; (8003b4c <PCD_EP_OutXfrComplete_int+0x214>)
 8003ab4:	4293      	cmp	r3, r2
 8003ab6:	d124      	bne.n	8003b02 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003ab8:	68bb      	ldr	r3, [r7, #8]
 8003aba:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d00a      	beq.n	8003ad8 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003ac2:	683b      	ldr	r3, [r7, #0]
 8003ac4:	015a      	lsls	r2, r3, #5
 8003ac6:	693b      	ldr	r3, [r7, #16]
 8003ac8:	4413      	add	r3, r2
 8003aca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ace:	461a      	mov	r2, r3
 8003ad0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003ad4:	6093      	str	r3, [r2, #8]
 8003ad6:	e032      	b.n	8003b3e <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003ad8:	68bb      	ldr	r3, [r7, #8]
 8003ada:	f003 0320 	and.w	r3, r3, #32
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d008      	beq.n	8003af4 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003ae2:	683b      	ldr	r3, [r7, #0]
 8003ae4:	015a      	lsls	r2, r3, #5
 8003ae6:	693b      	ldr	r3, [r7, #16]
 8003ae8:	4413      	add	r3, r2
 8003aea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003aee:	461a      	mov	r2, r3
 8003af0:	2320      	movs	r3, #32
 8003af2:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003af4:	683b      	ldr	r3, [r7, #0]
 8003af6:	b2db      	uxtb	r3, r3
 8003af8:	4619      	mov	r1, r3
 8003afa:	6878      	ldr	r0, [r7, #4]
 8003afc:	f005 fb0e 	bl	800911c <HAL_PCD_DataOutStageCallback>
 8003b00:	e01d      	b.n	8003b3e <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003b02:	683b      	ldr	r3, [r7, #0]
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d114      	bne.n	8003b32 <PCD_EP_OutXfrComplete_int+0x1fa>
 8003b08:	6879      	ldr	r1, [r7, #4]
 8003b0a:	683a      	ldr	r2, [r7, #0]
 8003b0c:	4613      	mov	r3, r2
 8003b0e:	00db      	lsls	r3, r3, #3
 8003b10:	1a9b      	subs	r3, r3, r2
 8003b12:	009b      	lsls	r3, r3, #2
 8003b14:	440b      	add	r3, r1
 8003b16:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d108      	bne.n	8003b32 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	6818      	ldr	r0, [r3, #0]
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003b2a:	461a      	mov	r2, r3
 8003b2c:	2100      	movs	r1, #0
 8003b2e:	f003 fb61 	bl	80071f4 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003b32:	683b      	ldr	r3, [r7, #0]
 8003b34:	b2db      	uxtb	r3, r3
 8003b36:	4619      	mov	r1, r3
 8003b38:	6878      	ldr	r0, [r7, #4]
 8003b3a:	f005 faef 	bl	800911c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003b3e:	2300      	movs	r3, #0
}
 8003b40:	4618      	mov	r0, r3
 8003b42:	3718      	adds	r7, #24
 8003b44:	46bd      	mov	sp, r7
 8003b46:	bd80      	pop	{r7, pc}
 8003b48:	4f54300a 	.word	0x4f54300a
 8003b4c:	4f54310a 	.word	0x4f54310a

08003b50 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003b50:	b580      	push	{r7, lr}
 8003b52:	b086      	sub	sp, #24
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	6078      	str	r0, [r7, #4]
 8003b58:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003b60:	697b      	ldr	r3, [r7, #20]
 8003b62:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003b64:	697b      	ldr	r3, [r7, #20]
 8003b66:	333c      	adds	r3, #60	; 0x3c
 8003b68:	3304      	adds	r3, #4
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003b6e:	683b      	ldr	r3, [r7, #0]
 8003b70:	015a      	lsls	r2, r3, #5
 8003b72:	693b      	ldr	r3, [r7, #16]
 8003b74:	4413      	add	r3, r2
 8003b76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b7a:	689b      	ldr	r3, [r3, #8]
 8003b7c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	4a15      	ldr	r2, [pc, #84]	; (8003bd8 <PCD_EP_OutSetupPacket_int+0x88>)
 8003b82:	4293      	cmp	r3, r2
 8003b84:	d90e      	bls.n	8003ba4 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003b86:	68bb      	ldr	r3, [r7, #8]
 8003b88:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d009      	beq.n	8003ba4 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003b90:	683b      	ldr	r3, [r7, #0]
 8003b92:	015a      	lsls	r2, r3, #5
 8003b94:	693b      	ldr	r3, [r7, #16]
 8003b96:	4413      	add	r3, r2
 8003b98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b9c:	461a      	mov	r2, r3
 8003b9e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003ba2:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003ba4:	6878      	ldr	r0, [r7, #4]
 8003ba6:	f005 faa7 	bl	80090f8 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	4a0a      	ldr	r2, [pc, #40]	; (8003bd8 <PCD_EP_OutSetupPacket_int+0x88>)
 8003bae:	4293      	cmp	r3, r2
 8003bb0:	d90c      	bls.n	8003bcc <PCD_EP_OutSetupPacket_int+0x7c>
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	691b      	ldr	r3, [r3, #16]
 8003bb6:	2b01      	cmp	r3, #1
 8003bb8:	d108      	bne.n	8003bcc <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	6818      	ldr	r0, [r3, #0]
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003bc4:	461a      	mov	r2, r3
 8003bc6:	2101      	movs	r1, #1
 8003bc8:	f003 fb14 	bl	80071f4 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003bcc:	2300      	movs	r3, #0
}
 8003bce:	4618      	mov	r0, r3
 8003bd0:	3718      	adds	r7, #24
 8003bd2:	46bd      	mov	sp, r7
 8003bd4:	bd80      	pop	{r7, pc}
 8003bd6:	bf00      	nop
 8003bd8:	4f54300a 	.word	0x4f54300a

08003bdc <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003bdc:	b480      	push	{r7}
 8003bde:	b085      	sub	sp, #20
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	6078      	str	r0, [r7, #4]
 8003be4:	460b      	mov	r3, r1
 8003be6:	70fb      	strb	r3, [r7, #3]
 8003be8:	4613      	mov	r3, r2
 8003bea:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bf2:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003bf4:	78fb      	ldrb	r3, [r7, #3]
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d107      	bne.n	8003c0a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003bfa:	883b      	ldrh	r3, [r7, #0]
 8003bfc:	0419      	lsls	r1, r3, #16
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	68ba      	ldr	r2, [r7, #8]
 8003c04:	430a      	orrs	r2, r1
 8003c06:	629a      	str	r2, [r3, #40]	; 0x28
 8003c08:	e028      	b.n	8003c5c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c10:	0c1b      	lsrs	r3, r3, #16
 8003c12:	68ba      	ldr	r2, [r7, #8]
 8003c14:	4413      	add	r3, r2
 8003c16:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003c18:	2300      	movs	r3, #0
 8003c1a:	73fb      	strb	r3, [r7, #15]
 8003c1c:	e00d      	b.n	8003c3a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681a      	ldr	r2, [r3, #0]
 8003c22:	7bfb      	ldrb	r3, [r7, #15]
 8003c24:	3340      	adds	r3, #64	; 0x40
 8003c26:	009b      	lsls	r3, r3, #2
 8003c28:	4413      	add	r3, r2
 8003c2a:	685b      	ldr	r3, [r3, #4]
 8003c2c:	0c1b      	lsrs	r3, r3, #16
 8003c2e:	68ba      	ldr	r2, [r7, #8]
 8003c30:	4413      	add	r3, r2
 8003c32:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003c34:	7bfb      	ldrb	r3, [r7, #15]
 8003c36:	3301      	adds	r3, #1
 8003c38:	73fb      	strb	r3, [r7, #15]
 8003c3a:	7bfa      	ldrb	r2, [r7, #15]
 8003c3c:	78fb      	ldrb	r3, [r7, #3]
 8003c3e:	3b01      	subs	r3, #1
 8003c40:	429a      	cmp	r2, r3
 8003c42:	d3ec      	bcc.n	8003c1e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003c44:	883b      	ldrh	r3, [r7, #0]
 8003c46:	0418      	lsls	r0, r3, #16
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	6819      	ldr	r1, [r3, #0]
 8003c4c:	78fb      	ldrb	r3, [r7, #3]
 8003c4e:	3b01      	subs	r3, #1
 8003c50:	68ba      	ldr	r2, [r7, #8]
 8003c52:	4302      	orrs	r2, r0
 8003c54:	3340      	adds	r3, #64	; 0x40
 8003c56:	009b      	lsls	r3, r3, #2
 8003c58:	440b      	add	r3, r1
 8003c5a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003c5c:	2300      	movs	r3, #0
}
 8003c5e:	4618      	mov	r0, r3
 8003c60:	3714      	adds	r7, #20
 8003c62:	46bd      	mov	sp, r7
 8003c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c68:	4770      	bx	lr

08003c6a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8003c6a:	b480      	push	{r7}
 8003c6c:	b083      	sub	sp, #12
 8003c6e:	af00      	add	r7, sp, #0
 8003c70:	6078      	str	r0, [r7, #4]
 8003c72:	460b      	mov	r3, r1
 8003c74:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	887a      	ldrh	r2, [r7, #2]
 8003c7c:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003c7e:	2300      	movs	r3, #0
}
 8003c80:	4618      	mov	r0, r3
 8003c82:	370c      	adds	r7, #12
 8003c84:	46bd      	mov	sp, r7
 8003c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c8a:	4770      	bx	lr

08003c8c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003c8c:	b480      	push	{r7}
 8003c8e:	b083      	sub	sp, #12
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	6078      	str	r0, [r7, #4]
 8003c94:	460b      	mov	r3, r1
 8003c96:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003c98:	bf00      	nop
 8003c9a:	370c      	adds	r7, #12
 8003c9c:	46bd      	mov	sp, r7
 8003c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca2:	4770      	bx	lr

08003ca4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003ca4:	b580      	push	{r7, lr}
 8003ca6:	b086      	sub	sp, #24
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d101      	bne.n	8003cb6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003cb2:	2301      	movs	r3, #1
 8003cb4:	e264      	b.n	8004180 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	f003 0301 	and.w	r3, r3, #1
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d075      	beq.n	8003dae <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003cc2:	4ba3      	ldr	r3, [pc, #652]	; (8003f50 <HAL_RCC_OscConfig+0x2ac>)
 8003cc4:	689b      	ldr	r3, [r3, #8]
 8003cc6:	f003 030c 	and.w	r3, r3, #12
 8003cca:	2b04      	cmp	r3, #4
 8003ccc:	d00c      	beq.n	8003ce8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003cce:	4ba0      	ldr	r3, [pc, #640]	; (8003f50 <HAL_RCC_OscConfig+0x2ac>)
 8003cd0:	689b      	ldr	r3, [r3, #8]
 8003cd2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003cd6:	2b08      	cmp	r3, #8
 8003cd8:	d112      	bne.n	8003d00 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003cda:	4b9d      	ldr	r3, [pc, #628]	; (8003f50 <HAL_RCC_OscConfig+0x2ac>)
 8003cdc:	685b      	ldr	r3, [r3, #4]
 8003cde:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ce2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003ce6:	d10b      	bne.n	8003d00 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ce8:	4b99      	ldr	r3, [pc, #612]	; (8003f50 <HAL_RCC_OscConfig+0x2ac>)
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d05b      	beq.n	8003dac <HAL_RCC_OscConfig+0x108>
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	685b      	ldr	r3, [r3, #4]
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d157      	bne.n	8003dac <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003cfc:	2301      	movs	r3, #1
 8003cfe:	e23f      	b.n	8004180 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	685b      	ldr	r3, [r3, #4]
 8003d04:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d08:	d106      	bne.n	8003d18 <HAL_RCC_OscConfig+0x74>
 8003d0a:	4b91      	ldr	r3, [pc, #580]	; (8003f50 <HAL_RCC_OscConfig+0x2ac>)
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	4a90      	ldr	r2, [pc, #576]	; (8003f50 <HAL_RCC_OscConfig+0x2ac>)
 8003d10:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d14:	6013      	str	r3, [r2, #0]
 8003d16:	e01d      	b.n	8003d54 <HAL_RCC_OscConfig+0xb0>
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	685b      	ldr	r3, [r3, #4]
 8003d1c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003d20:	d10c      	bne.n	8003d3c <HAL_RCC_OscConfig+0x98>
 8003d22:	4b8b      	ldr	r3, [pc, #556]	; (8003f50 <HAL_RCC_OscConfig+0x2ac>)
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	4a8a      	ldr	r2, [pc, #552]	; (8003f50 <HAL_RCC_OscConfig+0x2ac>)
 8003d28:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003d2c:	6013      	str	r3, [r2, #0]
 8003d2e:	4b88      	ldr	r3, [pc, #544]	; (8003f50 <HAL_RCC_OscConfig+0x2ac>)
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	4a87      	ldr	r2, [pc, #540]	; (8003f50 <HAL_RCC_OscConfig+0x2ac>)
 8003d34:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d38:	6013      	str	r3, [r2, #0]
 8003d3a:	e00b      	b.n	8003d54 <HAL_RCC_OscConfig+0xb0>
 8003d3c:	4b84      	ldr	r3, [pc, #528]	; (8003f50 <HAL_RCC_OscConfig+0x2ac>)
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	4a83      	ldr	r2, [pc, #524]	; (8003f50 <HAL_RCC_OscConfig+0x2ac>)
 8003d42:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d46:	6013      	str	r3, [r2, #0]
 8003d48:	4b81      	ldr	r3, [pc, #516]	; (8003f50 <HAL_RCC_OscConfig+0x2ac>)
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	4a80      	ldr	r2, [pc, #512]	; (8003f50 <HAL_RCC_OscConfig+0x2ac>)
 8003d4e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003d52:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	685b      	ldr	r3, [r3, #4]
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d013      	beq.n	8003d84 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d5c:	f7fd fd18 	bl	8001790 <HAL_GetTick>
 8003d60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d62:	e008      	b.n	8003d76 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003d64:	f7fd fd14 	bl	8001790 <HAL_GetTick>
 8003d68:	4602      	mov	r2, r0
 8003d6a:	693b      	ldr	r3, [r7, #16]
 8003d6c:	1ad3      	subs	r3, r2, r3
 8003d6e:	2b64      	cmp	r3, #100	; 0x64
 8003d70:	d901      	bls.n	8003d76 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003d72:	2303      	movs	r3, #3
 8003d74:	e204      	b.n	8004180 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d76:	4b76      	ldr	r3, [pc, #472]	; (8003f50 <HAL_RCC_OscConfig+0x2ac>)
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d0f0      	beq.n	8003d64 <HAL_RCC_OscConfig+0xc0>
 8003d82:	e014      	b.n	8003dae <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d84:	f7fd fd04 	bl	8001790 <HAL_GetTick>
 8003d88:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003d8a:	e008      	b.n	8003d9e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003d8c:	f7fd fd00 	bl	8001790 <HAL_GetTick>
 8003d90:	4602      	mov	r2, r0
 8003d92:	693b      	ldr	r3, [r7, #16]
 8003d94:	1ad3      	subs	r3, r2, r3
 8003d96:	2b64      	cmp	r3, #100	; 0x64
 8003d98:	d901      	bls.n	8003d9e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003d9a:	2303      	movs	r3, #3
 8003d9c:	e1f0      	b.n	8004180 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003d9e:	4b6c      	ldr	r3, [pc, #432]	; (8003f50 <HAL_RCC_OscConfig+0x2ac>)
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d1f0      	bne.n	8003d8c <HAL_RCC_OscConfig+0xe8>
 8003daa:	e000      	b.n	8003dae <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003dac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f003 0302 	and.w	r3, r3, #2
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d063      	beq.n	8003e82 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003dba:	4b65      	ldr	r3, [pc, #404]	; (8003f50 <HAL_RCC_OscConfig+0x2ac>)
 8003dbc:	689b      	ldr	r3, [r3, #8]
 8003dbe:	f003 030c 	and.w	r3, r3, #12
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d00b      	beq.n	8003dde <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003dc6:	4b62      	ldr	r3, [pc, #392]	; (8003f50 <HAL_RCC_OscConfig+0x2ac>)
 8003dc8:	689b      	ldr	r3, [r3, #8]
 8003dca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003dce:	2b08      	cmp	r3, #8
 8003dd0:	d11c      	bne.n	8003e0c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003dd2:	4b5f      	ldr	r3, [pc, #380]	; (8003f50 <HAL_RCC_OscConfig+0x2ac>)
 8003dd4:	685b      	ldr	r3, [r3, #4]
 8003dd6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d116      	bne.n	8003e0c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003dde:	4b5c      	ldr	r3, [pc, #368]	; (8003f50 <HAL_RCC_OscConfig+0x2ac>)
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f003 0302 	and.w	r3, r3, #2
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d005      	beq.n	8003df6 <HAL_RCC_OscConfig+0x152>
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	68db      	ldr	r3, [r3, #12]
 8003dee:	2b01      	cmp	r3, #1
 8003df0:	d001      	beq.n	8003df6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003df2:	2301      	movs	r3, #1
 8003df4:	e1c4      	b.n	8004180 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003df6:	4b56      	ldr	r3, [pc, #344]	; (8003f50 <HAL_RCC_OscConfig+0x2ac>)
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	691b      	ldr	r3, [r3, #16]
 8003e02:	00db      	lsls	r3, r3, #3
 8003e04:	4952      	ldr	r1, [pc, #328]	; (8003f50 <HAL_RCC_OscConfig+0x2ac>)
 8003e06:	4313      	orrs	r3, r2
 8003e08:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e0a:	e03a      	b.n	8003e82 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	68db      	ldr	r3, [r3, #12]
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d020      	beq.n	8003e56 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003e14:	4b4f      	ldr	r3, [pc, #316]	; (8003f54 <HAL_RCC_OscConfig+0x2b0>)
 8003e16:	2201      	movs	r2, #1
 8003e18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e1a:	f7fd fcb9 	bl	8001790 <HAL_GetTick>
 8003e1e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e20:	e008      	b.n	8003e34 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003e22:	f7fd fcb5 	bl	8001790 <HAL_GetTick>
 8003e26:	4602      	mov	r2, r0
 8003e28:	693b      	ldr	r3, [r7, #16]
 8003e2a:	1ad3      	subs	r3, r2, r3
 8003e2c:	2b02      	cmp	r3, #2
 8003e2e:	d901      	bls.n	8003e34 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003e30:	2303      	movs	r3, #3
 8003e32:	e1a5      	b.n	8004180 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e34:	4b46      	ldr	r3, [pc, #280]	; (8003f50 <HAL_RCC_OscConfig+0x2ac>)
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f003 0302 	and.w	r3, r3, #2
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d0f0      	beq.n	8003e22 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e40:	4b43      	ldr	r3, [pc, #268]	; (8003f50 <HAL_RCC_OscConfig+0x2ac>)
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	691b      	ldr	r3, [r3, #16]
 8003e4c:	00db      	lsls	r3, r3, #3
 8003e4e:	4940      	ldr	r1, [pc, #256]	; (8003f50 <HAL_RCC_OscConfig+0x2ac>)
 8003e50:	4313      	orrs	r3, r2
 8003e52:	600b      	str	r3, [r1, #0]
 8003e54:	e015      	b.n	8003e82 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003e56:	4b3f      	ldr	r3, [pc, #252]	; (8003f54 <HAL_RCC_OscConfig+0x2b0>)
 8003e58:	2200      	movs	r2, #0
 8003e5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e5c:	f7fd fc98 	bl	8001790 <HAL_GetTick>
 8003e60:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e62:	e008      	b.n	8003e76 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003e64:	f7fd fc94 	bl	8001790 <HAL_GetTick>
 8003e68:	4602      	mov	r2, r0
 8003e6a:	693b      	ldr	r3, [r7, #16]
 8003e6c:	1ad3      	subs	r3, r2, r3
 8003e6e:	2b02      	cmp	r3, #2
 8003e70:	d901      	bls.n	8003e76 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003e72:	2303      	movs	r3, #3
 8003e74:	e184      	b.n	8004180 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e76:	4b36      	ldr	r3, [pc, #216]	; (8003f50 <HAL_RCC_OscConfig+0x2ac>)
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f003 0302 	and.w	r3, r3, #2
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d1f0      	bne.n	8003e64 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f003 0308 	and.w	r3, r3, #8
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d030      	beq.n	8003ef0 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	695b      	ldr	r3, [r3, #20]
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d016      	beq.n	8003ec4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003e96:	4b30      	ldr	r3, [pc, #192]	; (8003f58 <HAL_RCC_OscConfig+0x2b4>)
 8003e98:	2201      	movs	r2, #1
 8003e9a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e9c:	f7fd fc78 	bl	8001790 <HAL_GetTick>
 8003ea0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003ea2:	e008      	b.n	8003eb6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003ea4:	f7fd fc74 	bl	8001790 <HAL_GetTick>
 8003ea8:	4602      	mov	r2, r0
 8003eaa:	693b      	ldr	r3, [r7, #16]
 8003eac:	1ad3      	subs	r3, r2, r3
 8003eae:	2b02      	cmp	r3, #2
 8003eb0:	d901      	bls.n	8003eb6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003eb2:	2303      	movs	r3, #3
 8003eb4:	e164      	b.n	8004180 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003eb6:	4b26      	ldr	r3, [pc, #152]	; (8003f50 <HAL_RCC_OscConfig+0x2ac>)
 8003eb8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003eba:	f003 0302 	and.w	r3, r3, #2
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d0f0      	beq.n	8003ea4 <HAL_RCC_OscConfig+0x200>
 8003ec2:	e015      	b.n	8003ef0 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003ec4:	4b24      	ldr	r3, [pc, #144]	; (8003f58 <HAL_RCC_OscConfig+0x2b4>)
 8003ec6:	2200      	movs	r2, #0
 8003ec8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003eca:	f7fd fc61 	bl	8001790 <HAL_GetTick>
 8003ece:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ed0:	e008      	b.n	8003ee4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003ed2:	f7fd fc5d 	bl	8001790 <HAL_GetTick>
 8003ed6:	4602      	mov	r2, r0
 8003ed8:	693b      	ldr	r3, [r7, #16]
 8003eda:	1ad3      	subs	r3, r2, r3
 8003edc:	2b02      	cmp	r3, #2
 8003ede:	d901      	bls.n	8003ee4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003ee0:	2303      	movs	r3, #3
 8003ee2:	e14d      	b.n	8004180 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ee4:	4b1a      	ldr	r3, [pc, #104]	; (8003f50 <HAL_RCC_OscConfig+0x2ac>)
 8003ee6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ee8:	f003 0302 	and.w	r3, r3, #2
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d1f0      	bne.n	8003ed2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f003 0304 	and.w	r3, r3, #4
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	f000 80a0 	beq.w	800403e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003efe:	2300      	movs	r3, #0
 8003f00:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003f02:	4b13      	ldr	r3, [pc, #76]	; (8003f50 <HAL_RCC_OscConfig+0x2ac>)
 8003f04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d10f      	bne.n	8003f2e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003f0e:	2300      	movs	r3, #0
 8003f10:	60bb      	str	r3, [r7, #8]
 8003f12:	4b0f      	ldr	r3, [pc, #60]	; (8003f50 <HAL_RCC_OscConfig+0x2ac>)
 8003f14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f16:	4a0e      	ldr	r2, [pc, #56]	; (8003f50 <HAL_RCC_OscConfig+0x2ac>)
 8003f18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f1c:	6413      	str	r3, [r2, #64]	; 0x40
 8003f1e:	4b0c      	ldr	r3, [pc, #48]	; (8003f50 <HAL_RCC_OscConfig+0x2ac>)
 8003f20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f26:	60bb      	str	r3, [r7, #8]
 8003f28:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003f2a:	2301      	movs	r3, #1
 8003f2c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f2e:	4b0b      	ldr	r3, [pc, #44]	; (8003f5c <HAL_RCC_OscConfig+0x2b8>)
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d121      	bne.n	8003f7e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003f3a:	4b08      	ldr	r3, [pc, #32]	; (8003f5c <HAL_RCC_OscConfig+0x2b8>)
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	4a07      	ldr	r2, [pc, #28]	; (8003f5c <HAL_RCC_OscConfig+0x2b8>)
 8003f40:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f44:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003f46:	f7fd fc23 	bl	8001790 <HAL_GetTick>
 8003f4a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f4c:	e011      	b.n	8003f72 <HAL_RCC_OscConfig+0x2ce>
 8003f4e:	bf00      	nop
 8003f50:	40023800 	.word	0x40023800
 8003f54:	42470000 	.word	0x42470000
 8003f58:	42470e80 	.word	0x42470e80
 8003f5c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f60:	f7fd fc16 	bl	8001790 <HAL_GetTick>
 8003f64:	4602      	mov	r2, r0
 8003f66:	693b      	ldr	r3, [r7, #16]
 8003f68:	1ad3      	subs	r3, r2, r3
 8003f6a:	2b02      	cmp	r3, #2
 8003f6c:	d901      	bls.n	8003f72 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003f6e:	2303      	movs	r3, #3
 8003f70:	e106      	b.n	8004180 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f72:	4b85      	ldr	r3, [pc, #532]	; (8004188 <HAL_RCC_OscConfig+0x4e4>)
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d0f0      	beq.n	8003f60 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	689b      	ldr	r3, [r3, #8]
 8003f82:	2b01      	cmp	r3, #1
 8003f84:	d106      	bne.n	8003f94 <HAL_RCC_OscConfig+0x2f0>
 8003f86:	4b81      	ldr	r3, [pc, #516]	; (800418c <HAL_RCC_OscConfig+0x4e8>)
 8003f88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f8a:	4a80      	ldr	r2, [pc, #512]	; (800418c <HAL_RCC_OscConfig+0x4e8>)
 8003f8c:	f043 0301 	orr.w	r3, r3, #1
 8003f90:	6713      	str	r3, [r2, #112]	; 0x70
 8003f92:	e01c      	b.n	8003fce <HAL_RCC_OscConfig+0x32a>
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	689b      	ldr	r3, [r3, #8]
 8003f98:	2b05      	cmp	r3, #5
 8003f9a:	d10c      	bne.n	8003fb6 <HAL_RCC_OscConfig+0x312>
 8003f9c:	4b7b      	ldr	r3, [pc, #492]	; (800418c <HAL_RCC_OscConfig+0x4e8>)
 8003f9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fa0:	4a7a      	ldr	r2, [pc, #488]	; (800418c <HAL_RCC_OscConfig+0x4e8>)
 8003fa2:	f043 0304 	orr.w	r3, r3, #4
 8003fa6:	6713      	str	r3, [r2, #112]	; 0x70
 8003fa8:	4b78      	ldr	r3, [pc, #480]	; (800418c <HAL_RCC_OscConfig+0x4e8>)
 8003faa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fac:	4a77      	ldr	r2, [pc, #476]	; (800418c <HAL_RCC_OscConfig+0x4e8>)
 8003fae:	f043 0301 	orr.w	r3, r3, #1
 8003fb2:	6713      	str	r3, [r2, #112]	; 0x70
 8003fb4:	e00b      	b.n	8003fce <HAL_RCC_OscConfig+0x32a>
 8003fb6:	4b75      	ldr	r3, [pc, #468]	; (800418c <HAL_RCC_OscConfig+0x4e8>)
 8003fb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fba:	4a74      	ldr	r2, [pc, #464]	; (800418c <HAL_RCC_OscConfig+0x4e8>)
 8003fbc:	f023 0301 	bic.w	r3, r3, #1
 8003fc0:	6713      	str	r3, [r2, #112]	; 0x70
 8003fc2:	4b72      	ldr	r3, [pc, #456]	; (800418c <HAL_RCC_OscConfig+0x4e8>)
 8003fc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fc6:	4a71      	ldr	r2, [pc, #452]	; (800418c <HAL_RCC_OscConfig+0x4e8>)
 8003fc8:	f023 0304 	bic.w	r3, r3, #4
 8003fcc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	689b      	ldr	r3, [r3, #8]
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d015      	beq.n	8004002 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fd6:	f7fd fbdb 	bl	8001790 <HAL_GetTick>
 8003fda:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003fdc:	e00a      	b.n	8003ff4 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003fde:	f7fd fbd7 	bl	8001790 <HAL_GetTick>
 8003fe2:	4602      	mov	r2, r0
 8003fe4:	693b      	ldr	r3, [r7, #16]
 8003fe6:	1ad3      	subs	r3, r2, r3
 8003fe8:	f241 3288 	movw	r2, #5000	; 0x1388
 8003fec:	4293      	cmp	r3, r2
 8003fee:	d901      	bls.n	8003ff4 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003ff0:	2303      	movs	r3, #3
 8003ff2:	e0c5      	b.n	8004180 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ff4:	4b65      	ldr	r3, [pc, #404]	; (800418c <HAL_RCC_OscConfig+0x4e8>)
 8003ff6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ff8:	f003 0302 	and.w	r3, r3, #2
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d0ee      	beq.n	8003fde <HAL_RCC_OscConfig+0x33a>
 8004000:	e014      	b.n	800402c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004002:	f7fd fbc5 	bl	8001790 <HAL_GetTick>
 8004006:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004008:	e00a      	b.n	8004020 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800400a:	f7fd fbc1 	bl	8001790 <HAL_GetTick>
 800400e:	4602      	mov	r2, r0
 8004010:	693b      	ldr	r3, [r7, #16]
 8004012:	1ad3      	subs	r3, r2, r3
 8004014:	f241 3288 	movw	r2, #5000	; 0x1388
 8004018:	4293      	cmp	r3, r2
 800401a:	d901      	bls.n	8004020 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800401c:	2303      	movs	r3, #3
 800401e:	e0af      	b.n	8004180 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004020:	4b5a      	ldr	r3, [pc, #360]	; (800418c <HAL_RCC_OscConfig+0x4e8>)
 8004022:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004024:	f003 0302 	and.w	r3, r3, #2
 8004028:	2b00      	cmp	r3, #0
 800402a:	d1ee      	bne.n	800400a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800402c:	7dfb      	ldrb	r3, [r7, #23]
 800402e:	2b01      	cmp	r3, #1
 8004030:	d105      	bne.n	800403e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004032:	4b56      	ldr	r3, [pc, #344]	; (800418c <HAL_RCC_OscConfig+0x4e8>)
 8004034:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004036:	4a55      	ldr	r2, [pc, #340]	; (800418c <HAL_RCC_OscConfig+0x4e8>)
 8004038:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800403c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	699b      	ldr	r3, [r3, #24]
 8004042:	2b00      	cmp	r3, #0
 8004044:	f000 809b 	beq.w	800417e <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004048:	4b50      	ldr	r3, [pc, #320]	; (800418c <HAL_RCC_OscConfig+0x4e8>)
 800404a:	689b      	ldr	r3, [r3, #8]
 800404c:	f003 030c 	and.w	r3, r3, #12
 8004050:	2b08      	cmp	r3, #8
 8004052:	d05c      	beq.n	800410e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	699b      	ldr	r3, [r3, #24]
 8004058:	2b02      	cmp	r3, #2
 800405a:	d141      	bne.n	80040e0 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800405c:	4b4c      	ldr	r3, [pc, #304]	; (8004190 <HAL_RCC_OscConfig+0x4ec>)
 800405e:	2200      	movs	r2, #0
 8004060:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004062:	f7fd fb95 	bl	8001790 <HAL_GetTick>
 8004066:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004068:	e008      	b.n	800407c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800406a:	f7fd fb91 	bl	8001790 <HAL_GetTick>
 800406e:	4602      	mov	r2, r0
 8004070:	693b      	ldr	r3, [r7, #16]
 8004072:	1ad3      	subs	r3, r2, r3
 8004074:	2b02      	cmp	r3, #2
 8004076:	d901      	bls.n	800407c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8004078:	2303      	movs	r3, #3
 800407a:	e081      	b.n	8004180 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800407c:	4b43      	ldr	r3, [pc, #268]	; (800418c <HAL_RCC_OscConfig+0x4e8>)
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004084:	2b00      	cmp	r3, #0
 8004086:	d1f0      	bne.n	800406a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	69da      	ldr	r2, [r3, #28]
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	6a1b      	ldr	r3, [r3, #32]
 8004090:	431a      	orrs	r2, r3
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004096:	019b      	lsls	r3, r3, #6
 8004098:	431a      	orrs	r2, r3
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800409e:	085b      	lsrs	r3, r3, #1
 80040a0:	3b01      	subs	r3, #1
 80040a2:	041b      	lsls	r3, r3, #16
 80040a4:	431a      	orrs	r2, r3
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040aa:	061b      	lsls	r3, r3, #24
 80040ac:	4937      	ldr	r1, [pc, #220]	; (800418c <HAL_RCC_OscConfig+0x4e8>)
 80040ae:	4313      	orrs	r3, r2
 80040b0:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80040b2:	4b37      	ldr	r3, [pc, #220]	; (8004190 <HAL_RCC_OscConfig+0x4ec>)
 80040b4:	2201      	movs	r2, #1
 80040b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040b8:	f7fd fb6a 	bl	8001790 <HAL_GetTick>
 80040bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80040be:	e008      	b.n	80040d2 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80040c0:	f7fd fb66 	bl	8001790 <HAL_GetTick>
 80040c4:	4602      	mov	r2, r0
 80040c6:	693b      	ldr	r3, [r7, #16]
 80040c8:	1ad3      	subs	r3, r2, r3
 80040ca:	2b02      	cmp	r3, #2
 80040cc:	d901      	bls.n	80040d2 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80040ce:	2303      	movs	r3, #3
 80040d0:	e056      	b.n	8004180 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80040d2:	4b2e      	ldr	r3, [pc, #184]	; (800418c <HAL_RCC_OscConfig+0x4e8>)
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d0f0      	beq.n	80040c0 <HAL_RCC_OscConfig+0x41c>
 80040de:	e04e      	b.n	800417e <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80040e0:	4b2b      	ldr	r3, [pc, #172]	; (8004190 <HAL_RCC_OscConfig+0x4ec>)
 80040e2:	2200      	movs	r2, #0
 80040e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040e6:	f7fd fb53 	bl	8001790 <HAL_GetTick>
 80040ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80040ec:	e008      	b.n	8004100 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80040ee:	f7fd fb4f 	bl	8001790 <HAL_GetTick>
 80040f2:	4602      	mov	r2, r0
 80040f4:	693b      	ldr	r3, [r7, #16]
 80040f6:	1ad3      	subs	r3, r2, r3
 80040f8:	2b02      	cmp	r3, #2
 80040fa:	d901      	bls.n	8004100 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80040fc:	2303      	movs	r3, #3
 80040fe:	e03f      	b.n	8004180 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004100:	4b22      	ldr	r3, [pc, #136]	; (800418c <HAL_RCC_OscConfig+0x4e8>)
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004108:	2b00      	cmp	r3, #0
 800410a:	d1f0      	bne.n	80040ee <HAL_RCC_OscConfig+0x44a>
 800410c:	e037      	b.n	800417e <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	699b      	ldr	r3, [r3, #24]
 8004112:	2b01      	cmp	r3, #1
 8004114:	d101      	bne.n	800411a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8004116:	2301      	movs	r3, #1
 8004118:	e032      	b.n	8004180 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800411a:	4b1c      	ldr	r3, [pc, #112]	; (800418c <HAL_RCC_OscConfig+0x4e8>)
 800411c:	685b      	ldr	r3, [r3, #4]
 800411e:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	699b      	ldr	r3, [r3, #24]
 8004124:	2b01      	cmp	r3, #1
 8004126:	d028      	beq.n	800417a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004132:	429a      	cmp	r2, r3
 8004134:	d121      	bne.n	800417a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004140:	429a      	cmp	r2, r3
 8004142:	d11a      	bne.n	800417a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004144:	68fa      	ldr	r2, [r7, #12]
 8004146:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800414a:	4013      	ands	r3, r2
 800414c:	687a      	ldr	r2, [r7, #4]
 800414e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004150:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004152:	4293      	cmp	r3, r2
 8004154:	d111      	bne.n	800417a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004160:	085b      	lsrs	r3, r3, #1
 8004162:	3b01      	subs	r3, #1
 8004164:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004166:	429a      	cmp	r2, r3
 8004168:	d107      	bne.n	800417a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004174:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004176:	429a      	cmp	r2, r3
 8004178:	d001      	beq.n	800417e <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800417a:	2301      	movs	r3, #1
 800417c:	e000      	b.n	8004180 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800417e:	2300      	movs	r3, #0
}
 8004180:	4618      	mov	r0, r3
 8004182:	3718      	adds	r7, #24
 8004184:	46bd      	mov	sp, r7
 8004186:	bd80      	pop	{r7, pc}
 8004188:	40007000 	.word	0x40007000
 800418c:	40023800 	.word	0x40023800
 8004190:	42470060 	.word	0x42470060

08004194 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004194:	b580      	push	{r7, lr}
 8004196:	b084      	sub	sp, #16
 8004198:	af00      	add	r7, sp, #0
 800419a:	6078      	str	r0, [r7, #4]
 800419c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d101      	bne.n	80041a8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80041a4:	2301      	movs	r3, #1
 80041a6:	e0cc      	b.n	8004342 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80041a8:	4b68      	ldr	r3, [pc, #416]	; (800434c <HAL_RCC_ClockConfig+0x1b8>)
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	f003 0307 	and.w	r3, r3, #7
 80041b0:	683a      	ldr	r2, [r7, #0]
 80041b2:	429a      	cmp	r2, r3
 80041b4:	d90c      	bls.n	80041d0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80041b6:	4b65      	ldr	r3, [pc, #404]	; (800434c <HAL_RCC_ClockConfig+0x1b8>)
 80041b8:	683a      	ldr	r2, [r7, #0]
 80041ba:	b2d2      	uxtb	r2, r2
 80041bc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80041be:	4b63      	ldr	r3, [pc, #396]	; (800434c <HAL_RCC_ClockConfig+0x1b8>)
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f003 0307 	and.w	r3, r3, #7
 80041c6:	683a      	ldr	r2, [r7, #0]
 80041c8:	429a      	cmp	r2, r3
 80041ca:	d001      	beq.n	80041d0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80041cc:	2301      	movs	r3, #1
 80041ce:	e0b8      	b.n	8004342 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	f003 0302 	and.w	r3, r3, #2
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d020      	beq.n	800421e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	f003 0304 	and.w	r3, r3, #4
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d005      	beq.n	80041f4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80041e8:	4b59      	ldr	r3, [pc, #356]	; (8004350 <HAL_RCC_ClockConfig+0x1bc>)
 80041ea:	689b      	ldr	r3, [r3, #8]
 80041ec:	4a58      	ldr	r2, [pc, #352]	; (8004350 <HAL_RCC_ClockConfig+0x1bc>)
 80041ee:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80041f2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	f003 0308 	and.w	r3, r3, #8
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d005      	beq.n	800420c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004200:	4b53      	ldr	r3, [pc, #332]	; (8004350 <HAL_RCC_ClockConfig+0x1bc>)
 8004202:	689b      	ldr	r3, [r3, #8]
 8004204:	4a52      	ldr	r2, [pc, #328]	; (8004350 <HAL_RCC_ClockConfig+0x1bc>)
 8004206:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800420a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800420c:	4b50      	ldr	r3, [pc, #320]	; (8004350 <HAL_RCC_ClockConfig+0x1bc>)
 800420e:	689b      	ldr	r3, [r3, #8]
 8004210:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	689b      	ldr	r3, [r3, #8]
 8004218:	494d      	ldr	r1, [pc, #308]	; (8004350 <HAL_RCC_ClockConfig+0x1bc>)
 800421a:	4313      	orrs	r3, r2
 800421c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f003 0301 	and.w	r3, r3, #1
 8004226:	2b00      	cmp	r3, #0
 8004228:	d044      	beq.n	80042b4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	685b      	ldr	r3, [r3, #4]
 800422e:	2b01      	cmp	r3, #1
 8004230:	d107      	bne.n	8004242 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004232:	4b47      	ldr	r3, [pc, #284]	; (8004350 <HAL_RCC_ClockConfig+0x1bc>)
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800423a:	2b00      	cmp	r3, #0
 800423c:	d119      	bne.n	8004272 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800423e:	2301      	movs	r3, #1
 8004240:	e07f      	b.n	8004342 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	685b      	ldr	r3, [r3, #4]
 8004246:	2b02      	cmp	r3, #2
 8004248:	d003      	beq.n	8004252 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800424e:	2b03      	cmp	r3, #3
 8004250:	d107      	bne.n	8004262 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004252:	4b3f      	ldr	r3, [pc, #252]	; (8004350 <HAL_RCC_ClockConfig+0x1bc>)
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800425a:	2b00      	cmp	r3, #0
 800425c:	d109      	bne.n	8004272 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800425e:	2301      	movs	r3, #1
 8004260:	e06f      	b.n	8004342 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004262:	4b3b      	ldr	r3, [pc, #236]	; (8004350 <HAL_RCC_ClockConfig+0x1bc>)
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f003 0302 	and.w	r3, r3, #2
 800426a:	2b00      	cmp	r3, #0
 800426c:	d101      	bne.n	8004272 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800426e:	2301      	movs	r3, #1
 8004270:	e067      	b.n	8004342 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004272:	4b37      	ldr	r3, [pc, #220]	; (8004350 <HAL_RCC_ClockConfig+0x1bc>)
 8004274:	689b      	ldr	r3, [r3, #8]
 8004276:	f023 0203 	bic.w	r2, r3, #3
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	685b      	ldr	r3, [r3, #4]
 800427e:	4934      	ldr	r1, [pc, #208]	; (8004350 <HAL_RCC_ClockConfig+0x1bc>)
 8004280:	4313      	orrs	r3, r2
 8004282:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004284:	f7fd fa84 	bl	8001790 <HAL_GetTick>
 8004288:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800428a:	e00a      	b.n	80042a2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800428c:	f7fd fa80 	bl	8001790 <HAL_GetTick>
 8004290:	4602      	mov	r2, r0
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	1ad3      	subs	r3, r2, r3
 8004296:	f241 3288 	movw	r2, #5000	; 0x1388
 800429a:	4293      	cmp	r3, r2
 800429c:	d901      	bls.n	80042a2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800429e:	2303      	movs	r3, #3
 80042a0:	e04f      	b.n	8004342 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80042a2:	4b2b      	ldr	r3, [pc, #172]	; (8004350 <HAL_RCC_ClockConfig+0x1bc>)
 80042a4:	689b      	ldr	r3, [r3, #8]
 80042a6:	f003 020c 	and.w	r2, r3, #12
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	685b      	ldr	r3, [r3, #4]
 80042ae:	009b      	lsls	r3, r3, #2
 80042b0:	429a      	cmp	r2, r3
 80042b2:	d1eb      	bne.n	800428c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80042b4:	4b25      	ldr	r3, [pc, #148]	; (800434c <HAL_RCC_ClockConfig+0x1b8>)
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f003 0307 	and.w	r3, r3, #7
 80042bc:	683a      	ldr	r2, [r7, #0]
 80042be:	429a      	cmp	r2, r3
 80042c0:	d20c      	bcs.n	80042dc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80042c2:	4b22      	ldr	r3, [pc, #136]	; (800434c <HAL_RCC_ClockConfig+0x1b8>)
 80042c4:	683a      	ldr	r2, [r7, #0]
 80042c6:	b2d2      	uxtb	r2, r2
 80042c8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80042ca:	4b20      	ldr	r3, [pc, #128]	; (800434c <HAL_RCC_ClockConfig+0x1b8>)
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f003 0307 	and.w	r3, r3, #7
 80042d2:	683a      	ldr	r2, [r7, #0]
 80042d4:	429a      	cmp	r2, r3
 80042d6:	d001      	beq.n	80042dc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80042d8:	2301      	movs	r3, #1
 80042da:	e032      	b.n	8004342 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	f003 0304 	and.w	r3, r3, #4
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d008      	beq.n	80042fa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80042e8:	4b19      	ldr	r3, [pc, #100]	; (8004350 <HAL_RCC_ClockConfig+0x1bc>)
 80042ea:	689b      	ldr	r3, [r3, #8]
 80042ec:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	68db      	ldr	r3, [r3, #12]
 80042f4:	4916      	ldr	r1, [pc, #88]	; (8004350 <HAL_RCC_ClockConfig+0x1bc>)
 80042f6:	4313      	orrs	r3, r2
 80042f8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f003 0308 	and.w	r3, r3, #8
 8004302:	2b00      	cmp	r3, #0
 8004304:	d009      	beq.n	800431a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004306:	4b12      	ldr	r3, [pc, #72]	; (8004350 <HAL_RCC_ClockConfig+0x1bc>)
 8004308:	689b      	ldr	r3, [r3, #8]
 800430a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	691b      	ldr	r3, [r3, #16]
 8004312:	00db      	lsls	r3, r3, #3
 8004314:	490e      	ldr	r1, [pc, #56]	; (8004350 <HAL_RCC_ClockConfig+0x1bc>)
 8004316:	4313      	orrs	r3, r2
 8004318:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800431a:	f000 f821 	bl	8004360 <HAL_RCC_GetSysClockFreq>
 800431e:	4602      	mov	r2, r0
 8004320:	4b0b      	ldr	r3, [pc, #44]	; (8004350 <HAL_RCC_ClockConfig+0x1bc>)
 8004322:	689b      	ldr	r3, [r3, #8]
 8004324:	091b      	lsrs	r3, r3, #4
 8004326:	f003 030f 	and.w	r3, r3, #15
 800432a:	490a      	ldr	r1, [pc, #40]	; (8004354 <HAL_RCC_ClockConfig+0x1c0>)
 800432c:	5ccb      	ldrb	r3, [r1, r3]
 800432e:	fa22 f303 	lsr.w	r3, r2, r3
 8004332:	4a09      	ldr	r2, [pc, #36]	; (8004358 <HAL_RCC_ClockConfig+0x1c4>)
 8004334:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004336:	4b09      	ldr	r3, [pc, #36]	; (800435c <HAL_RCC_ClockConfig+0x1c8>)
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	4618      	mov	r0, r3
 800433c:	f7fd f9e4 	bl	8001708 <HAL_InitTick>

  return HAL_OK;
 8004340:	2300      	movs	r3, #0
}
 8004342:	4618      	mov	r0, r3
 8004344:	3710      	adds	r7, #16
 8004346:	46bd      	mov	sp, r7
 8004348:	bd80      	pop	{r7, pc}
 800434a:	bf00      	nop
 800434c:	40023c00 	.word	0x40023c00
 8004350:	40023800 	.word	0x40023800
 8004354:	08009730 	.word	0x08009730
 8004358:	20000000 	.word	0x20000000
 800435c:	20000004 	.word	0x20000004

08004360 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004360:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8004364:	b084      	sub	sp, #16
 8004366:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004368:	2300      	movs	r3, #0
 800436a:	607b      	str	r3, [r7, #4]
 800436c:	2300      	movs	r3, #0
 800436e:	60fb      	str	r3, [r7, #12]
 8004370:	2300      	movs	r3, #0
 8004372:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004374:	2300      	movs	r3, #0
 8004376:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004378:	4b67      	ldr	r3, [pc, #412]	; (8004518 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800437a:	689b      	ldr	r3, [r3, #8]
 800437c:	f003 030c 	and.w	r3, r3, #12
 8004380:	2b08      	cmp	r3, #8
 8004382:	d00d      	beq.n	80043a0 <HAL_RCC_GetSysClockFreq+0x40>
 8004384:	2b08      	cmp	r3, #8
 8004386:	f200 80bd 	bhi.w	8004504 <HAL_RCC_GetSysClockFreq+0x1a4>
 800438a:	2b00      	cmp	r3, #0
 800438c:	d002      	beq.n	8004394 <HAL_RCC_GetSysClockFreq+0x34>
 800438e:	2b04      	cmp	r3, #4
 8004390:	d003      	beq.n	800439a <HAL_RCC_GetSysClockFreq+0x3a>
 8004392:	e0b7      	b.n	8004504 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004394:	4b61      	ldr	r3, [pc, #388]	; (800451c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8004396:	60bb      	str	r3, [r7, #8]
       break;
 8004398:	e0b7      	b.n	800450a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800439a:	4b61      	ldr	r3, [pc, #388]	; (8004520 <HAL_RCC_GetSysClockFreq+0x1c0>)
 800439c:	60bb      	str	r3, [r7, #8]
      break;
 800439e:	e0b4      	b.n	800450a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80043a0:	4b5d      	ldr	r3, [pc, #372]	; (8004518 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80043a2:	685b      	ldr	r3, [r3, #4]
 80043a4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80043a8:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80043aa:	4b5b      	ldr	r3, [pc, #364]	; (8004518 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80043ac:	685b      	ldr	r3, [r3, #4]
 80043ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d04d      	beq.n	8004452 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80043b6:	4b58      	ldr	r3, [pc, #352]	; (8004518 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80043b8:	685b      	ldr	r3, [r3, #4]
 80043ba:	099b      	lsrs	r3, r3, #6
 80043bc:	461a      	mov	r2, r3
 80043be:	f04f 0300 	mov.w	r3, #0
 80043c2:	f240 10ff 	movw	r0, #511	; 0x1ff
 80043c6:	f04f 0100 	mov.w	r1, #0
 80043ca:	ea02 0800 	and.w	r8, r2, r0
 80043ce:	ea03 0901 	and.w	r9, r3, r1
 80043d2:	4640      	mov	r0, r8
 80043d4:	4649      	mov	r1, r9
 80043d6:	f04f 0200 	mov.w	r2, #0
 80043da:	f04f 0300 	mov.w	r3, #0
 80043de:	014b      	lsls	r3, r1, #5
 80043e0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80043e4:	0142      	lsls	r2, r0, #5
 80043e6:	4610      	mov	r0, r2
 80043e8:	4619      	mov	r1, r3
 80043ea:	ebb0 0008 	subs.w	r0, r0, r8
 80043ee:	eb61 0109 	sbc.w	r1, r1, r9
 80043f2:	f04f 0200 	mov.w	r2, #0
 80043f6:	f04f 0300 	mov.w	r3, #0
 80043fa:	018b      	lsls	r3, r1, #6
 80043fc:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004400:	0182      	lsls	r2, r0, #6
 8004402:	1a12      	subs	r2, r2, r0
 8004404:	eb63 0301 	sbc.w	r3, r3, r1
 8004408:	f04f 0000 	mov.w	r0, #0
 800440c:	f04f 0100 	mov.w	r1, #0
 8004410:	00d9      	lsls	r1, r3, #3
 8004412:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004416:	00d0      	lsls	r0, r2, #3
 8004418:	4602      	mov	r2, r0
 800441a:	460b      	mov	r3, r1
 800441c:	eb12 0208 	adds.w	r2, r2, r8
 8004420:	eb43 0309 	adc.w	r3, r3, r9
 8004424:	f04f 0000 	mov.w	r0, #0
 8004428:	f04f 0100 	mov.w	r1, #0
 800442c:	0259      	lsls	r1, r3, #9
 800442e:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8004432:	0250      	lsls	r0, r2, #9
 8004434:	4602      	mov	r2, r0
 8004436:	460b      	mov	r3, r1
 8004438:	4610      	mov	r0, r2
 800443a:	4619      	mov	r1, r3
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	461a      	mov	r2, r3
 8004440:	f04f 0300 	mov.w	r3, #0
 8004444:	f7fb fec6 	bl	80001d4 <__aeabi_uldivmod>
 8004448:	4602      	mov	r2, r0
 800444a:	460b      	mov	r3, r1
 800444c:	4613      	mov	r3, r2
 800444e:	60fb      	str	r3, [r7, #12]
 8004450:	e04a      	b.n	80044e8 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004452:	4b31      	ldr	r3, [pc, #196]	; (8004518 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004454:	685b      	ldr	r3, [r3, #4]
 8004456:	099b      	lsrs	r3, r3, #6
 8004458:	461a      	mov	r2, r3
 800445a:	f04f 0300 	mov.w	r3, #0
 800445e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004462:	f04f 0100 	mov.w	r1, #0
 8004466:	ea02 0400 	and.w	r4, r2, r0
 800446a:	ea03 0501 	and.w	r5, r3, r1
 800446e:	4620      	mov	r0, r4
 8004470:	4629      	mov	r1, r5
 8004472:	f04f 0200 	mov.w	r2, #0
 8004476:	f04f 0300 	mov.w	r3, #0
 800447a:	014b      	lsls	r3, r1, #5
 800447c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004480:	0142      	lsls	r2, r0, #5
 8004482:	4610      	mov	r0, r2
 8004484:	4619      	mov	r1, r3
 8004486:	1b00      	subs	r0, r0, r4
 8004488:	eb61 0105 	sbc.w	r1, r1, r5
 800448c:	f04f 0200 	mov.w	r2, #0
 8004490:	f04f 0300 	mov.w	r3, #0
 8004494:	018b      	lsls	r3, r1, #6
 8004496:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800449a:	0182      	lsls	r2, r0, #6
 800449c:	1a12      	subs	r2, r2, r0
 800449e:	eb63 0301 	sbc.w	r3, r3, r1
 80044a2:	f04f 0000 	mov.w	r0, #0
 80044a6:	f04f 0100 	mov.w	r1, #0
 80044aa:	00d9      	lsls	r1, r3, #3
 80044ac:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80044b0:	00d0      	lsls	r0, r2, #3
 80044b2:	4602      	mov	r2, r0
 80044b4:	460b      	mov	r3, r1
 80044b6:	1912      	adds	r2, r2, r4
 80044b8:	eb45 0303 	adc.w	r3, r5, r3
 80044bc:	f04f 0000 	mov.w	r0, #0
 80044c0:	f04f 0100 	mov.w	r1, #0
 80044c4:	0299      	lsls	r1, r3, #10
 80044c6:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80044ca:	0290      	lsls	r0, r2, #10
 80044cc:	4602      	mov	r2, r0
 80044ce:	460b      	mov	r3, r1
 80044d0:	4610      	mov	r0, r2
 80044d2:	4619      	mov	r1, r3
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	461a      	mov	r2, r3
 80044d8:	f04f 0300 	mov.w	r3, #0
 80044dc:	f7fb fe7a 	bl	80001d4 <__aeabi_uldivmod>
 80044e0:	4602      	mov	r2, r0
 80044e2:	460b      	mov	r3, r1
 80044e4:	4613      	mov	r3, r2
 80044e6:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80044e8:	4b0b      	ldr	r3, [pc, #44]	; (8004518 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80044ea:	685b      	ldr	r3, [r3, #4]
 80044ec:	0c1b      	lsrs	r3, r3, #16
 80044ee:	f003 0303 	and.w	r3, r3, #3
 80044f2:	3301      	adds	r3, #1
 80044f4:	005b      	lsls	r3, r3, #1
 80044f6:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80044f8:	68fa      	ldr	r2, [r7, #12]
 80044fa:	683b      	ldr	r3, [r7, #0]
 80044fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004500:	60bb      	str	r3, [r7, #8]
      break;
 8004502:	e002      	b.n	800450a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004504:	4b05      	ldr	r3, [pc, #20]	; (800451c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8004506:	60bb      	str	r3, [r7, #8]
      break;
 8004508:	bf00      	nop
    }
  }
  return sysclockfreq;
 800450a:	68bb      	ldr	r3, [r7, #8]
}
 800450c:	4618      	mov	r0, r3
 800450e:	3710      	adds	r7, #16
 8004510:	46bd      	mov	sp, r7
 8004512:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8004516:	bf00      	nop
 8004518:	40023800 	.word	0x40023800
 800451c:	00f42400 	.word	0x00f42400
 8004520:	007a1200 	.word	0x007a1200

08004524 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004524:	b480      	push	{r7}
 8004526:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004528:	4b03      	ldr	r3, [pc, #12]	; (8004538 <HAL_RCC_GetHCLKFreq+0x14>)
 800452a:	681b      	ldr	r3, [r3, #0]
}
 800452c:	4618      	mov	r0, r3
 800452e:	46bd      	mov	sp, r7
 8004530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004534:	4770      	bx	lr
 8004536:	bf00      	nop
 8004538:	20000000 	.word	0x20000000

0800453c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800453c:	b580      	push	{r7, lr}
 800453e:	b082      	sub	sp, #8
 8004540:	af00      	add	r7, sp, #0
 8004542:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	2b00      	cmp	r3, #0
 8004548:	d101      	bne.n	800454e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800454a:	2301      	movs	r3, #1
 800454c:	e041      	b.n	80045d2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004554:	b2db      	uxtb	r3, r3
 8004556:	2b00      	cmp	r3, #0
 8004558:	d106      	bne.n	8004568 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	2200      	movs	r2, #0
 800455e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004562:	6878      	ldr	r0, [r7, #4]
 8004564:	f7fc ff78 	bl	8001458 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	2202      	movs	r2, #2
 800456c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681a      	ldr	r2, [r3, #0]
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	3304      	adds	r3, #4
 8004578:	4619      	mov	r1, r3
 800457a:	4610      	mov	r0, r2
 800457c:	f000 fe92 	bl	80052a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	2201      	movs	r2, #1
 8004584:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	2201      	movs	r2, #1
 800458c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	2201      	movs	r2, #1
 8004594:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	2201      	movs	r2, #1
 800459c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	2201      	movs	r2, #1
 80045a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	2201      	movs	r2, #1
 80045ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	2201      	movs	r2, #1
 80045b4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	2201      	movs	r2, #1
 80045bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	2201      	movs	r2, #1
 80045c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	2201      	movs	r2, #1
 80045cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80045d0:	2300      	movs	r3, #0
}
 80045d2:	4618      	mov	r0, r3
 80045d4:	3708      	adds	r7, #8
 80045d6:	46bd      	mov	sp, r7
 80045d8:	bd80      	pop	{r7, pc}

080045da <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80045da:	b580      	push	{r7, lr}
 80045dc:	b082      	sub	sp, #8
 80045de:	af00      	add	r7, sp, #0
 80045e0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d101      	bne.n	80045ec <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80045e8:	2301      	movs	r3, #1
 80045ea:	e041      	b.n	8004670 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045f2:	b2db      	uxtb	r3, r3
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d106      	bne.n	8004606 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	2200      	movs	r2, #0
 80045fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004600:	6878      	ldr	r0, [r7, #4]
 8004602:	f000 f839 	bl	8004678 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	2202      	movs	r2, #2
 800460a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681a      	ldr	r2, [r3, #0]
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	3304      	adds	r3, #4
 8004616:	4619      	mov	r1, r3
 8004618:	4610      	mov	r0, r2
 800461a:	f000 fe43 	bl	80052a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	2201      	movs	r2, #1
 8004622:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	2201      	movs	r2, #1
 800462a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	2201      	movs	r2, #1
 8004632:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	2201      	movs	r2, #1
 800463a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	2201      	movs	r2, #1
 8004642:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	2201      	movs	r2, #1
 800464a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	2201      	movs	r2, #1
 8004652:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	2201      	movs	r2, #1
 800465a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	2201      	movs	r2, #1
 8004662:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	2201      	movs	r2, #1
 800466a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800466e:	2300      	movs	r3, #0
}
 8004670:	4618      	mov	r0, r3
 8004672:	3708      	adds	r7, #8
 8004674:	46bd      	mov	sp, r7
 8004676:	bd80      	pop	{r7, pc}

08004678 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004678:	b480      	push	{r7}
 800467a:	b083      	sub	sp, #12
 800467c:	af00      	add	r7, sp, #0
 800467e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004680:	bf00      	nop
 8004682:	370c      	adds	r7, #12
 8004684:	46bd      	mov	sp, r7
 8004686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800468a:	4770      	bx	lr

0800468c <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800468c:	b580      	push	{r7, lr}
 800468e:	b084      	sub	sp, #16
 8004690:	af00      	add	r7, sp, #0
 8004692:	6078      	str	r0, [r7, #4]
 8004694:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004696:	2300      	movs	r3, #0
 8004698:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800469a:	683b      	ldr	r3, [r7, #0]
 800469c:	2b00      	cmp	r3, #0
 800469e:	d109      	bne.n	80046b4 <HAL_TIM_PWM_Start_IT+0x28>
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80046a6:	b2db      	uxtb	r3, r3
 80046a8:	2b01      	cmp	r3, #1
 80046aa:	bf14      	ite	ne
 80046ac:	2301      	movne	r3, #1
 80046ae:	2300      	moveq	r3, #0
 80046b0:	b2db      	uxtb	r3, r3
 80046b2:	e022      	b.n	80046fa <HAL_TIM_PWM_Start_IT+0x6e>
 80046b4:	683b      	ldr	r3, [r7, #0]
 80046b6:	2b04      	cmp	r3, #4
 80046b8:	d109      	bne.n	80046ce <HAL_TIM_PWM_Start_IT+0x42>
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80046c0:	b2db      	uxtb	r3, r3
 80046c2:	2b01      	cmp	r3, #1
 80046c4:	bf14      	ite	ne
 80046c6:	2301      	movne	r3, #1
 80046c8:	2300      	moveq	r3, #0
 80046ca:	b2db      	uxtb	r3, r3
 80046cc:	e015      	b.n	80046fa <HAL_TIM_PWM_Start_IT+0x6e>
 80046ce:	683b      	ldr	r3, [r7, #0]
 80046d0:	2b08      	cmp	r3, #8
 80046d2:	d109      	bne.n	80046e8 <HAL_TIM_PWM_Start_IT+0x5c>
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80046da:	b2db      	uxtb	r3, r3
 80046dc:	2b01      	cmp	r3, #1
 80046de:	bf14      	ite	ne
 80046e0:	2301      	movne	r3, #1
 80046e2:	2300      	moveq	r3, #0
 80046e4:	b2db      	uxtb	r3, r3
 80046e6:	e008      	b.n	80046fa <HAL_TIM_PWM_Start_IT+0x6e>
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80046ee:	b2db      	uxtb	r3, r3
 80046f0:	2b01      	cmp	r3, #1
 80046f2:	bf14      	ite	ne
 80046f4:	2301      	movne	r3, #1
 80046f6:	2300      	moveq	r3, #0
 80046f8:	b2db      	uxtb	r3, r3
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d001      	beq.n	8004702 <HAL_TIM_PWM_Start_IT+0x76>
  {
    return HAL_ERROR;
 80046fe:	2301      	movs	r3, #1
 8004700:	e0b3      	b.n	800486a <HAL_TIM_PWM_Start_IT+0x1de>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004702:	683b      	ldr	r3, [r7, #0]
 8004704:	2b00      	cmp	r3, #0
 8004706:	d104      	bne.n	8004712 <HAL_TIM_PWM_Start_IT+0x86>
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	2202      	movs	r2, #2
 800470c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004710:	e013      	b.n	800473a <HAL_TIM_PWM_Start_IT+0xae>
 8004712:	683b      	ldr	r3, [r7, #0]
 8004714:	2b04      	cmp	r3, #4
 8004716:	d104      	bne.n	8004722 <HAL_TIM_PWM_Start_IT+0x96>
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	2202      	movs	r2, #2
 800471c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004720:	e00b      	b.n	800473a <HAL_TIM_PWM_Start_IT+0xae>
 8004722:	683b      	ldr	r3, [r7, #0]
 8004724:	2b08      	cmp	r3, #8
 8004726:	d104      	bne.n	8004732 <HAL_TIM_PWM_Start_IT+0xa6>
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	2202      	movs	r2, #2
 800472c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004730:	e003      	b.n	800473a <HAL_TIM_PWM_Start_IT+0xae>
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	2202      	movs	r2, #2
 8004736:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800473a:	683b      	ldr	r3, [r7, #0]
 800473c:	2b0c      	cmp	r3, #12
 800473e:	d841      	bhi.n	80047c4 <HAL_TIM_PWM_Start_IT+0x138>
 8004740:	a201      	add	r2, pc, #4	; (adr r2, 8004748 <HAL_TIM_PWM_Start_IT+0xbc>)
 8004742:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004746:	bf00      	nop
 8004748:	0800477d 	.word	0x0800477d
 800474c:	080047c5 	.word	0x080047c5
 8004750:	080047c5 	.word	0x080047c5
 8004754:	080047c5 	.word	0x080047c5
 8004758:	0800478f 	.word	0x0800478f
 800475c:	080047c5 	.word	0x080047c5
 8004760:	080047c5 	.word	0x080047c5
 8004764:	080047c5 	.word	0x080047c5
 8004768:	080047a1 	.word	0x080047a1
 800476c:	080047c5 	.word	0x080047c5
 8004770:	080047c5 	.word	0x080047c5
 8004774:	080047c5 	.word	0x080047c5
 8004778:	080047b3 	.word	0x080047b3
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	68da      	ldr	r2, [r3, #12]
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	f042 0202 	orr.w	r2, r2, #2
 800478a:	60da      	str	r2, [r3, #12]
      break;
 800478c:	e01d      	b.n	80047ca <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	68da      	ldr	r2, [r3, #12]
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	f042 0204 	orr.w	r2, r2, #4
 800479c:	60da      	str	r2, [r3, #12]
      break;
 800479e:	e014      	b.n	80047ca <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	68da      	ldr	r2, [r3, #12]
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	f042 0208 	orr.w	r2, r2, #8
 80047ae:	60da      	str	r2, [r3, #12]
      break;
 80047b0:	e00b      	b.n	80047ca <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	68da      	ldr	r2, [r3, #12]
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	f042 0210 	orr.w	r2, r2, #16
 80047c0:	60da      	str	r2, [r3, #12]
      break;
 80047c2:	e002      	b.n	80047ca <HAL_TIM_PWM_Start_IT+0x13e>
    }

    default:
      status = HAL_ERROR;
 80047c4:	2301      	movs	r3, #1
 80047c6:	73fb      	strb	r3, [r7, #15]
      break;
 80047c8:	bf00      	nop
  }

  if (status == HAL_OK)
 80047ca:	7bfb      	ldrb	r3, [r7, #15]
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d14b      	bne.n	8004868 <HAL_TIM_PWM_Start_IT+0x1dc>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	2201      	movs	r2, #1
 80047d6:	6839      	ldr	r1, [r7, #0]
 80047d8:	4618      	mov	r0, r3
 80047da:	f001 f927 	bl	8005a2c <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	4a24      	ldr	r2, [pc, #144]	; (8004874 <HAL_TIM_PWM_Start_IT+0x1e8>)
 80047e4:	4293      	cmp	r3, r2
 80047e6:	d107      	bne.n	80047f8 <HAL_TIM_PWM_Start_IT+0x16c>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80047f6:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	4a1d      	ldr	r2, [pc, #116]	; (8004874 <HAL_TIM_PWM_Start_IT+0x1e8>)
 80047fe:	4293      	cmp	r3, r2
 8004800:	d018      	beq.n	8004834 <HAL_TIM_PWM_Start_IT+0x1a8>
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800480a:	d013      	beq.n	8004834 <HAL_TIM_PWM_Start_IT+0x1a8>
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	4a19      	ldr	r2, [pc, #100]	; (8004878 <HAL_TIM_PWM_Start_IT+0x1ec>)
 8004812:	4293      	cmp	r3, r2
 8004814:	d00e      	beq.n	8004834 <HAL_TIM_PWM_Start_IT+0x1a8>
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	4a18      	ldr	r2, [pc, #96]	; (800487c <HAL_TIM_PWM_Start_IT+0x1f0>)
 800481c:	4293      	cmp	r3, r2
 800481e:	d009      	beq.n	8004834 <HAL_TIM_PWM_Start_IT+0x1a8>
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	4a16      	ldr	r2, [pc, #88]	; (8004880 <HAL_TIM_PWM_Start_IT+0x1f4>)
 8004826:	4293      	cmp	r3, r2
 8004828:	d004      	beq.n	8004834 <HAL_TIM_PWM_Start_IT+0x1a8>
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	4a15      	ldr	r2, [pc, #84]	; (8004884 <HAL_TIM_PWM_Start_IT+0x1f8>)
 8004830:	4293      	cmp	r3, r2
 8004832:	d111      	bne.n	8004858 <HAL_TIM_PWM_Start_IT+0x1cc>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	689b      	ldr	r3, [r3, #8]
 800483a:	f003 0307 	and.w	r3, r3, #7
 800483e:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004840:	68bb      	ldr	r3, [r7, #8]
 8004842:	2b06      	cmp	r3, #6
 8004844:	d010      	beq.n	8004868 <HAL_TIM_PWM_Start_IT+0x1dc>
      {
        __HAL_TIM_ENABLE(htim);
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	681a      	ldr	r2, [r3, #0]
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	f042 0201 	orr.w	r2, r2, #1
 8004854:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004856:	e007      	b.n	8004868 <HAL_TIM_PWM_Start_IT+0x1dc>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	681a      	ldr	r2, [r3, #0]
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	f042 0201 	orr.w	r2, r2, #1
 8004866:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8004868:	7bfb      	ldrb	r3, [r7, #15]
}
 800486a:	4618      	mov	r0, r3
 800486c:	3710      	adds	r7, #16
 800486e:	46bd      	mov	sp, r7
 8004870:	bd80      	pop	{r7, pc}
 8004872:	bf00      	nop
 8004874:	40010000 	.word	0x40010000
 8004878:	40000400 	.word	0x40000400
 800487c:	40000800 	.word	0x40000800
 8004880:	40000c00 	.word	0x40000c00
 8004884:	40014000 	.word	0x40014000

08004888 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8004888:	b580      	push	{r7, lr}
 800488a:	b082      	sub	sp, #8
 800488c:	af00      	add	r7, sp, #0
 800488e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	2b00      	cmp	r3, #0
 8004894:	d101      	bne.n	800489a <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8004896:	2301      	movs	r3, #1
 8004898:	e041      	b.n	800491e <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048a0:	b2db      	uxtb	r3, r3
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d106      	bne.n	80048b4 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	2200      	movs	r2, #0
 80048aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80048ae:	6878      	ldr	r0, [r7, #4]
 80048b0:	f000 f839 	bl	8004926 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	2202      	movs	r2, #2
 80048b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681a      	ldr	r2, [r3, #0]
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	3304      	adds	r3, #4
 80048c4:	4619      	mov	r1, r3
 80048c6:	4610      	mov	r0, r2
 80048c8:	f000 fcec 	bl	80052a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	2201      	movs	r2, #1
 80048d0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	2201      	movs	r2, #1
 80048d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	2201      	movs	r2, #1
 80048e0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	2201      	movs	r2, #1
 80048e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	2201      	movs	r2, #1
 80048f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	2201      	movs	r2, #1
 80048f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	2201      	movs	r2, #1
 8004900:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	2201      	movs	r2, #1
 8004908:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	2201      	movs	r2, #1
 8004910:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	2201      	movs	r2, #1
 8004918:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800491c:	2300      	movs	r3, #0
}
 800491e:	4618      	mov	r0, r3
 8004920:	3708      	adds	r7, #8
 8004922:	46bd      	mov	sp, r7
 8004924:	bd80      	pop	{r7, pc}

08004926 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8004926:	b480      	push	{r7}
 8004928:	b083      	sub	sp, #12
 800492a:	af00      	add	r7, sp, #0
 800492c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 800492e:	bf00      	nop
 8004930:	370c      	adds	r7, #12
 8004932:	46bd      	mov	sp, r7
 8004934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004938:	4770      	bx	lr
	...

0800493c <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800493c:	b580      	push	{r7, lr}
 800493e:	b084      	sub	sp, #16
 8004940:	af00      	add	r7, sp, #0
 8004942:	6078      	str	r0, [r7, #4]
 8004944:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004946:	2300      	movs	r3, #0
 8004948:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800494a:	683b      	ldr	r3, [r7, #0]
 800494c:	2b00      	cmp	r3, #0
 800494e:	d104      	bne.n	800495a <HAL_TIM_IC_Start_IT+0x1e>
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004956:	b2db      	uxtb	r3, r3
 8004958:	e013      	b.n	8004982 <HAL_TIM_IC_Start_IT+0x46>
 800495a:	683b      	ldr	r3, [r7, #0]
 800495c:	2b04      	cmp	r3, #4
 800495e:	d104      	bne.n	800496a <HAL_TIM_IC_Start_IT+0x2e>
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004966:	b2db      	uxtb	r3, r3
 8004968:	e00b      	b.n	8004982 <HAL_TIM_IC_Start_IT+0x46>
 800496a:	683b      	ldr	r3, [r7, #0]
 800496c:	2b08      	cmp	r3, #8
 800496e:	d104      	bne.n	800497a <HAL_TIM_IC_Start_IT+0x3e>
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004976:	b2db      	uxtb	r3, r3
 8004978:	e003      	b.n	8004982 <HAL_TIM_IC_Start_IT+0x46>
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004980:	b2db      	uxtb	r3, r3
 8004982:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8004984:	683b      	ldr	r3, [r7, #0]
 8004986:	2b00      	cmp	r3, #0
 8004988:	d104      	bne.n	8004994 <HAL_TIM_IC_Start_IT+0x58>
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004990:	b2db      	uxtb	r3, r3
 8004992:	e013      	b.n	80049bc <HAL_TIM_IC_Start_IT+0x80>
 8004994:	683b      	ldr	r3, [r7, #0]
 8004996:	2b04      	cmp	r3, #4
 8004998:	d104      	bne.n	80049a4 <HAL_TIM_IC_Start_IT+0x68>
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80049a0:	b2db      	uxtb	r3, r3
 80049a2:	e00b      	b.n	80049bc <HAL_TIM_IC_Start_IT+0x80>
 80049a4:	683b      	ldr	r3, [r7, #0]
 80049a6:	2b08      	cmp	r3, #8
 80049a8:	d104      	bne.n	80049b4 <HAL_TIM_IC_Start_IT+0x78>
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80049b0:	b2db      	uxtb	r3, r3
 80049b2:	e003      	b.n	80049bc <HAL_TIM_IC_Start_IT+0x80>
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80049ba:	b2db      	uxtb	r3, r3
 80049bc:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 80049be:	7bbb      	ldrb	r3, [r7, #14]
 80049c0:	2b01      	cmp	r3, #1
 80049c2:	d102      	bne.n	80049ca <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 80049c4:	7b7b      	ldrb	r3, [r7, #13]
 80049c6:	2b01      	cmp	r3, #1
 80049c8:	d001      	beq.n	80049ce <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 80049ca:	2301      	movs	r3, #1
 80049cc:	e0c2      	b.n	8004b54 <HAL_TIM_IC_Start_IT+0x218>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80049ce:	683b      	ldr	r3, [r7, #0]
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d104      	bne.n	80049de <HAL_TIM_IC_Start_IT+0xa2>
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	2202      	movs	r2, #2
 80049d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80049dc:	e013      	b.n	8004a06 <HAL_TIM_IC_Start_IT+0xca>
 80049de:	683b      	ldr	r3, [r7, #0]
 80049e0:	2b04      	cmp	r3, #4
 80049e2:	d104      	bne.n	80049ee <HAL_TIM_IC_Start_IT+0xb2>
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	2202      	movs	r2, #2
 80049e8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80049ec:	e00b      	b.n	8004a06 <HAL_TIM_IC_Start_IT+0xca>
 80049ee:	683b      	ldr	r3, [r7, #0]
 80049f0:	2b08      	cmp	r3, #8
 80049f2:	d104      	bne.n	80049fe <HAL_TIM_IC_Start_IT+0xc2>
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	2202      	movs	r2, #2
 80049f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80049fc:	e003      	b.n	8004a06 <HAL_TIM_IC_Start_IT+0xca>
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	2202      	movs	r2, #2
 8004a02:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004a06:	683b      	ldr	r3, [r7, #0]
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d104      	bne.n	8004a16 <HAL_TIM_IC_Start_IT+0xda>
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	2202      	movs	r2, #2
 8004a10:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004a14:	e013      	b.n	8004a3e <HAL_TIM_IC_Start_IT+0x102>
 8004a16:	683b      	ldr	r3, [r7, #0]
 8004a18:	2b04      	cmp	r3, #4
 8004a1a:	d104      	bne.n	8004a26 <HAL_TIM_IC_Start_IT+0xea>
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	2202      	movs	r2, #2
 8004a20:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004a24:	e00b      	b.n	8004a3e <HAL_TIM_IC_Start_IT+0x102>
 8004a26:	683b      	ldr	r3, [r7, #0]
 8004a28:	2b08      	cmp	r3, #8
 8004a2a:	d104      	bne.n	8004a36 <HAL_TIM_IC_Start_IT+0xfa>
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	2202      	movs	r2, #2
 8004a30:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004a34:	e003      	b.n	8004a3e <HAL_TIM_IC_Start_IT+0x102>
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	2202      	movs	r2, #2
 8004a3a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004a3e:	683b      	ldr	r3, [r7, #0]
 8004a40:	2b0c      	cmp	r3, #12
 8004a42:	d841      	bhi.n	8004ac8 <HAL_TIM_IC_Start_IT+0x18c>
 8004a44:	a201      	add	r2, pc, #4	; (adr r2, 8004a4c <HAL_TIM_IC_Start_IT+0x110>)
 8004a46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a4a:	bf00      	nop
 8004a4c:	08004a81 	.word	0x08004a81
 8004a50:	08004ac9 	.word	0x08004ac9
 8004a54:	08004ac9 	.word	0x08004ac9
 8004a58:	08004ac9 	.word	0x08004ac9
 8004a5c:	08004a93 	.word	0x08004a93
 8004a60:	08004ac9 	.word	0x08004ac9
 8004a64:	08004ac9 	.word	0x08004ac9
 8004a68:	08004ac9 	.word	0x08004ac9
 8004a6c:	08004aa5 	.word	0x08004aa5
 8004a70:	08004ac9 	.word	0x08004ac9
 8004a74:	08004ac9 	.word	0x08004ac9
 8004a78:	08004ac9 	.word	0x08004ac9
 8004a7c:	08004ab7 	.word	0x08004ab7
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	68da      	ldr	r2, [r3, #12]
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	f042 0202 	orr.w	r2, r2, #2
 8004a8e:	60da      	str	r2, [r3, #12]
      break;
 8004a90:	e01d      	b.n	8004ace <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	68da      	ldr	r2, [r3, #12]
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	f042 0204 	orr.w	r2, r2, #4
 8004aa0:	60da      	str	r2, [r3, #12]
      break;
 8004aa2:	e014      	b.n	8004ace <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	68da      	ldr	r2, [r3, #12]
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	f042 0208 	orr.w	r2, r2, #8
 8004ab2:	60da      	str	r2, [r3, #12]
      break;
 8004ab4:	e00b      	b.n	8004ace <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	68da      	ldr	r2, [r3, #12]
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	f042 0210 	orr.w	r2, r2, #16
 8004ac4:	60da      	str	r2, [r3, #12]
      break;
 8004ac6:	e002      	b.n	8004ace <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8004ac8:	2301      	movs	r3, #1
 8004aca:	73fb      	strb	r3, [r7, #15]
      break;
 8004acc:	bf00      	nop
  }

  if (status == HAL_OK)
 8004ace:	7bfb      	ldrb	r3, [r7, #15]
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d13e      	bne.n	8004b52 <HAL_TIM_IC_Start_IT+0x216>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	2201      	movs	r2, #1
 8004ada:	6839      	ldr	r1, [r7, #0]
 8004adc:	4618      	mov	r0, r3
 8004ade:	f000 ffa5 	bl	8005a2c <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	4a1d      	ldr	r2, [pc, #116]	; (8004b5c <HAL_TIM_IC_Start_IT+0x220>)
 8004ae8:	4293      	cmp	r3, r2
 8004aea:	d018      	beq.n	8004b1e <HAL_TIM_IC_Start_IT+0x1e2>
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004af4:	d013      	beq.n	8004b1e <HAL_TIM_IC_Start_IT+0x1e2>
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	4a19      	ldr	r2, [pc, #100]	; (8004b60 <HAL_TIM_IC_Start_IT+0x224>)
 8004afc:	4293      	cmp	r3, r2
 8004afe:	d00e      	beq.n	8004b1e <HAL_TIM_IC_Start_IT+0x1e2>
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	4a17      	ldr	r2, [pc, #92]	; (8004b64 <HAL_TIM_IC_Start_IT+0x228>)
 8004b06:	4293      	cmp	r3, r2
 8004b08:	d009      	beq.n	8004b1e <HAL_TIM_IC_Start_IT+0x1e2>
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	4a16      	ldr	r2, [pc, #88]	; (8004b68 <HAL_TIM_IC_Start_IT+0x22c>)
 8004b10:	4293      	cmp	r3, r2
 8004b12:	d004      	beq.n	8004b1e <HAL_TIM_IC_Start_IT+0x1e2>
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	4a14      	ldr	r2, [pc, #80]	; (8004b6c <HAL_TIM_IC_Start_IT+0x230>)
 8004b1a:	4293      	cmp	r3, r2
 8004b1c:	d111      	bne.n	8004b42 <HAL_TIM_IC_Start_IT+0x206>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	689b      	ldr	r3, [r3, #8]
 8004b24:	f003 0307 	and.w	r3, r3, #7
 8004b28:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b2a:	68bb      	ldr	r3, [r7, #8]
 8004b2c:	2b06      	cmp	r3, #6
 8004b2e:	d010      	beq.n	8004b52 <HAL_TIM_IC_Start_IT+0x216>
      {
        __HAL_TIM_ENABLE(htim);
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	681a      	ldr	r2, [r3, #0]
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	f042 0201 	orr.w	r2, r2, #1
 8004b3e:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b40:	e007      	b.n	8004b52 <HAL_TIM_IC_Start_IT+0x216>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	681a      	ldr	r2, [r3, #0]
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	f042 0201 	orr.w	r2, r2, #1
 8004b50:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8004b52:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b54:	4618      	mov	r0, r3
 8004b56:	3710      	adds	r7, #16
 8004b58:	46bd      	mov	sp, r7
 8004b5a:	bd80      	pop	{r7, pc}
 8004b5c:	40010000 	.word	0x40010000
 8004b60:	40000400 	.word	0x40000400
 8004b64:	40000800 	.word	0x40000800
 8004b68:	40000c00 	.word	0x40000c00
 8004b6c:	40014000 	.word	0x40014000

08004b70 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004b70:	b580      	push	{r7, lr}
 8004b72:	b082      	sub	sp, #8
 8004b74:	af00      	add	r7, sp, #0
 8004b76:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	691b      	ldr	r3, [r3, #16]
 8004b7e:	f003 0302 	and.w	r3, r3, #2
 8004b82:	2b02      	cmp	r3, #2
 8004b84:	d122      	bne.n	8004bcc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	68db      	ldr	r3, [r3, #12]
 8004b8c:	f003 0302 	and.w	r3, r3, #2
 8004b90:	2b02      	cmp	r3, #2
 8004b92:	d11b      	bne.n	8004bcc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	f06f 0202 	mvn.w	r2, #2
 8004b9c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	2201      	movs	r2, #1
 8004ba2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	699b      	ldr	r3, [r3, #24]
 8004baa:	f003 0303 	and.w	r3, r3, #3
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d003      	beq.n	8004bba <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004bb2:	6878      	ldr	r0, [r7, #4]
 8004bb4:	f7fc fb72 	bl	800129c <HAL_TIM_IC_CaptureCallback>
 8004bb8:	e005      	b.n	8004bc6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004bba:	6878      	ldr	r0, [r7, #4]
 8004bbc:	f000 fb54 	bl	8005268 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004bc0:	6878      	ldr	r0, [r7, #4]
 8004bc2:	f000 fb5b 	bl	800527c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	2200      	movs	r2, #0
 8004bca:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	691b      	ldr	r3, [r3, #16]
 8004bd2:	f003 0304 	and.w	r3, r3, #4
 8004bd6:	2b04      	cmp	r3, #4
 8004bd8:	d122      	bne.n	8004c20 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	68db      	ldr	r3, [r3, #12]
 8004be0:	f003 0304 	and.w	r3, r3, #4
 8004be4:	2b04      	cmp	r3, #4
 8004be6:	d11b      	bne.n	8004c20 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	f06f 0204 	mvn.w	r2, #4
 8004bf0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	2202      	movs	r2, #2
 8004bf6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	699b      	ldr	r3, [r3, #24]
 8004bfe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d003      	beq.n	8004c0e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c06:	6878      	ldr	r0, [r7, #4]
 8004c08:	f7fc fb48 	bl	800129c <HAL_TIM_IC_CaptureCallback>
 8004c0c:	e005      	b.n	8004c1a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c0e:	6878      	ldr	r0, [r7, #4]
 8004c10:	f000 fb2a 	bl	8005268 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c14:	6878      	ldr	r0, [r7, #4]
 8004c16:	f000 fb31 	bl	800527c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	2200      	movs	r2, #0
 8004c1e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	691b      	ldr	r3, [r3, #16]
 8004c26:	f003 0308 	and.w	r3, r3, #8
 8004c2a:	2b08      	cmp	r3, #8
 8004c2c:	d122      	bne.n	8004c74 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	68db      	ldr	r3, [r3, #12]
 8004c34:	f003 0308 	and.w	r3, r3, #8
 8004c38:	2b08      	cmp	r3, #8
 8004c3a:	d11b      	bne.n	8004c74 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	f06f 0208 	mvn.w	r2, #8
 8004c44:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	2204      	movs	r2, #4
 8004c4a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	69db      	ldr	r3, [r3, #28]
 8004c52:	f003 0303 	and.w	r3, r3, #3
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d003      	beq.n	8004c62 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c5a:	6878      	ldr	r0, [r7, #4]
 8004c5c:	f7fc fb1e 	bl	800129c <HAL_TIM_IC_CaptureCallback>
 8004c60:	e005      	b.n	8004c6e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c62:	6878      	ldr	r0, [r7, #4]
 8004c64:	f000 fb00 	bl	8005268 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c68:	6878      	ldr	r0, [r7, #4]
 8004c6a:	f000 fb07 	bl	800527c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	2200      	movs	r2, #0
 8004c72:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	691b      	ldr	r3, [r3, #16]
 8004c7a:	f003 0310 	and.w	r3, r3, #16
 8004c7e:	2b10      	cmp	r3, #16
 8004c80:	d122      	bne.n	8004cc8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	68db      	ldr	r3, [r3, #12]
 8004c88:	f003 0310 	and.w	r3, r3, #16
 8004c8c:	2b10      	cmp	r3, #16
 8004c8e:	d11b      	bne.n	8004cc8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	f06f 0210 	mvn.w	r2, #16
 8004c98:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	2208      	movs	r2, #8
 8004c9e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	69db      	ldr	r3, [r3, #28]
 8004ca6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d003      	beq.n	8004cb6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004cae:	6878      	ldr	r0, [r7, #4]
 8004cb0:	f7fc faf4 	bl	800129c <HAL_TIM_IC_CaptureCallback>
 8004cb4:	e005      	b.n	8004cc2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004cb6:	6878      	ldr	r0, [r7, #4]
 8004cb8:	f000 fad6 	bl	8005268 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004cbc:	6878      	ldr	r0, [r7, #4]
 8004cbe:	f000 fadd 	bl	800527c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	2200      	movs	r2, #0
 8004cc6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	691b      	ldr	r3, [r3, #16]
 8004cce:	f003 0301 	and.w	r3, r3, #1
 8004cd2:	2b01      	cmp	r3, #1
 8004cd4:	d10e      	bne.n	8004cf4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	68db      	ldr	r3, [r3, #12]
 8004cdc:	f003 0301 	and.w	r3, r3, #1
 8004ce0:	2b01      	cmp	r3, #1
 8004ce2:	d107      	bne.n	8004cf4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	f06f 0201 	mvn.w	r2, #1
 8004cec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004cee:	6878      	ldr	r0, [r7, #4]
 8004cf0:	f000 fab0 	bl	8005254 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	691b      	ldr	r3, [r3, #16]
 8004cfa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004cfe:	2b80      	cmp	r3, #128	; 0x80
 8004d00:	d10e      	bne.n	8004d20 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	68db      	ldr	r3, [r3, #12]
 8004d08:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d0c:	2b80      	cmp	r3, #128	; 0x80
 8004d0e:	d107      	bne.n	8004d20 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004d18:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004d1a:	6878      	ldr	r0, [r7, #4]
 8004d1c:	f000 ff76 	bl	8005c0c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	691b      	ldr	r3, [r3, #16]
 8004d26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d2a:	2b40      	cmp	r3, #64	; 0x40
 8004d2c:	d10e      	bne.n	8004d4c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	68db      	ldr	r3, [r3, #12]
 8004d34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d38:	2b40      	cmp	r3, #64	; 0x40
 8004d3a:	d107      	bne.n	8004d4c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004d44:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004d46:	6878      	ldr	r0, [r7, #4]
 8004d48:	f000 faa2 	bl	8005290 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	691b      	ldr	r3, [r3, #16]
 8004d52:	f003 0320 	and.w	r3, r3, #32
 8004d56:	2b20      	cmp	r3, #32
 8004d58:	d10e      	bne.n	8004d78 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	68db      	ldr	r3, [r3, #12]
 8004d60:	f003 0320 	and.w	r3, r3, #32
 8004d64:	2b20      	cmp	r3, #32
 8004d66:	d107      	bne.n	8004d78 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	f06f 0220 	mvn.w	r2, #32
 8004d70:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004d72:	6878      	ldr	r0, [r7, #4]
 8004d74:	f000 ff40 	bl	8005bf8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004d78:	bf00      	nop
 8004d7a:	3708      	adds	r7, #8
 8004d7c:	46bd      	mov	sp, r7
 8004d7e:	bd80      	pop	{r7, pc}

08004d80 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8004d80:	b580      	push	{r7, lr}
 8004d82:	b086      	sub	sp, #24
 8004d84:	af00      	add	r7, sp, #0
 8004d86:	60f8      	str	r0, [r7, #12]
 8004d88:	60b9      	str	r1, [r7, #8]
 8004d8a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004d8c:	2300      	movs	r3, #0
 8004d8e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d96:	2b01      	cmp	r3, #1
 8004d98:	d101      	bne.n	8004d9e <HAL_TIM_IC_ConfigChannel+0x1e>
 8004d9a:	2302      	movs	r3, #2
 8004d9c:	e088      	b.n	8004eb0 <HAL_TIM_IC_ConfigChannel+0x130>
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	2201      	movs	r2, #1
 8004da2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d11b      	bne.n	8004de4 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	6818      	ldr	r0, [r3, #0]
 8004db0:	68bb      	ldr	r3, [r7, #8]
 8004db2:	6819      	ldr	r1, [r3, #0]
 8004db4:	68bb      	ldr	r3, [r7, #8]
 8004db6:	685a      	ldr	r2, [r3, #4]
 8004db8:	68bb      	ldr	r3, [r7, #8]
 8004dba:	68db      	ldr	r3, [r3, #12]
 8004dbc:	f000 fc7e 	bl	80056bc <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	699a      	ldr	r2, [r3, #24]
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	f022 020c 	bic.w	r2, r2, #12
 8004dce:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	6999      	ldr	r1, [r3, #24]
 8004dd6:	68bb      	ldr	r3, [r7, #8]
 8004dd8:	689a      	ldr	r2, [r3, #8]
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	430a      	orrs	r2, r1
 8004de0:	619a      	str	r2, [r3, #24]
 8004de2:	e060      	b.n	8004ea6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	2b04      	cmp	r3, #4
 8004de8:	d11c      	bne.n	8004e24 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	6818      	ldr	r0, [r3, #0]
 8004dee:	68bb      	ldr	r3, [r7, #8]
 8004df0:	6819      	ldr	r1, [r3, #0]
 8004df2:	68bb      	ldr	r3, [r7, #8]
 8004df4:	685a      	ldr	r2, [r3, #4]
 8004df6:	68bb      	ldr	r3, [r7, #8]
 8004df8:	68db      	ldr	r3, [r3, #12]
 8004dfa:	f000 fcf6 	bl	80057ea <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	699a      	ldr	r2, [r3, #24]
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004e0c:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	6999      	ldr	r1, [r3, #24]
 8004e14:	68bb      	ldr	r3, [r7, #8]
 8004e16:	689b      	ldr	r3, [r3, #8]
 8004e18:	021a      	lsls	r2, r3, #8
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	430a      	orrs	r2, r1
 8004e20:	619a      	str	r2, [r3, #24]
 8004e22:	e040      	b.n	8004ea6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	2b08      	cmp	r3, #8
 8004e28:	d11b      	bne.n	8004e62 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	6818      	ldr	r0, [r3, #0]
 8004e2e:	68bb      	ldr	r3, [r7, #8]
 8004e30:	6819      	ldr	r1, [r3, #0]
 8004e32:	68bb      	ldr	r3, [r7, #8]
 8004e34:	685a      	ldr	r2, [r3, #4]
 8004e36:	68bb      	ldr	r3, [r7, #8]
 8004e38:	68db      	ldr	r3, [r3, #12]
 8004e3a:	f000 fd43 	bl	80058c4 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	69da      	ldr	r2, [r3, #28]
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	f022 020c 	bic.w	r2, r2, #12
 8004e4c:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	69d9      	ldr	r1, [r3, #28]
 8004e54:	68bb      	ldr	r3, [r7, #8]
 8004e56:	689a      	ldr	r2, [r3, #8]
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	430a      	orrs	r2, r1
 8004e5e:	61da      	str	r2, [r3, #28]
 8004e60:	e021      	b.n	8004ea6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	2b0c      	cmp	r3, #12
 8004e66:	d11c      	bne.n	8004ea2 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	6818      	ldr	r0, [r3, #0]
 8004e6c:	68bb      	ldr	r3, [r7, #8]
 8004e6e:	6819      	ldr	r1, [r3, #0]
 8004e70:	68bb      	ldr	r3, [r7, #8]
 8004e72:	685a      	ldr	r2, [r3, #4]
 8004e74:	68bb      	ldr	r3, [r7, #8]
 8004e76:	68db      	ldr	r3, [r3, #12]
 8004e78:	f000 fd60 	bl	800593c <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	69da      	ldr	r2, [r3, #28]
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004e8a:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	69d9      	ldr	r1, [r3, #28]
 8004e92:	68bb      	ldr	r3, [r7, #8]
 8004e94:	689b      	ldr	r3, [r3, #8]
 8004e96:	021a      	lsls	r2, r3, #8
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	430a      	orrs	r2, r1
 8004e9e:	61da      	str	r2, [r3, #28]
 8004ea0:	e001      	b.n	8004ea6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8004ea2:	2301      	movs	r3, #1
 8004ea4:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	2200      	movs	r2, #0
 8004eaa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004eae:	7dfb      	ldrb	r3, [r7, #23]
}
 8004eb0:	4618      	mov	r0, r3
 8004eb2:	3718      	adds	r7, #24
 8004eb4:	46bd      	mov	sp, r7
 8004eb6:	bd80      	pop	{r7, pc}

08004eb8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004eb8:	b580      	push	{r7, lr}
 8004eba:	b086      	sub	sp, #24
 8004ebc:	af00      	add	r7, sp, #0
 8004ebe:	60f8      	str	r0, [r7, #12]
 8004ec0:	60b9      	str	r1, [r7, #8]
 8004ec2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004ec4:	2300      	movs	r3, #0
 8004ec6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ece:	2b01      	cmp	r3, #1
 8004ed0:	d101      	bne.n	8004ed6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004ed2:	2302      	movs	r3, #2
 8004ed4:	e0ae      	b.n	8005034 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	2201      	movs	r2, #1
 8004eda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	2b0c      	cmp	r3, #12
 8004ee2:	f200 809f 	bhi.w	8005024 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004ee6:	a201      	add	r2, pc, #4	; (adr r2, 8004eec <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004ee8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004eec:	08004f21 	.word	0x08004f21
 8004ef0:	08005025 	.word	0x08005025
 8004ef4:	08005025 	.word	0x08005025
 8004ef8:	08005025 	.word	0x08005025
 8004efc:	08004f61 	.word	0x08004f61
 8004f00:	08005025 	.word	0x08005025
 8004f04:	08005025 	.word	0x08005025
 8004f08:	08005025 	.word	0x08005025
 8004f0c:	08004fa3 	.word	0x08004fa3
 8004f10:	08005025 	.word	0x08005025
 8004f14:	08005025 	.word	0x08005025
 8004f18:	08005025 	.word	0x08005025
 8004f1c:	08004fe3 	.word	0x08004fe3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	68b9      	ldr	r1, [r7, #8]
 8004f26:	4618      	mov	r0, r3
 8004f28:	f000 fa3c 	bl	80053a4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	699a      	ldr	r2, [r3, #24]
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	f042 0208 	orr.w	r2, r2, #8
 8004f3a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	699a      	ldr	r2, [r3, #24]
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	f022 0204 	bic.w	r2, r2, #4
 8004f4a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	6999      	ldr	r1, [r3, #24]
 8004f52:	68bb      	ldr	r3, [r7, #8]
 8004f54:	691a      	ldr	r2, [r3, #16]
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	430a      	orrs	r2, r1
 8004f5c:	619a      	str	r2, [r3, #24]
      break;
 8004f5e:	e064      	b.n	800502a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	68b9      	ldr	r1, [r7, #8]
 8004f66:	4618      	mov	r0, r3
 8004f68:	f000 fa82 	bl	8005470 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	699a      	ldr	r2, [r3, #24]
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004f7a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	699a      	ldr	r2, [r3, #24]
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004f8a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	6999      	ldr	r1, [r3, #24]
 8004f92:	68bb      	ldr	r3, [r7, #8]
 8004f94:	691b      	ldr	r3, [r3, #16]
 8004f96:	021a      	lsls	r2, r3, #8
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	430a      	orrs	r2, r1
 8004f9e:	619a      	str	r2, [r3, #24]
      break;
 8004fa0:	e043      	b.n	800502a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	68b9      	ldr	r1, [r7, #8]
 8004fa8:	4618      	mov	r0, r3
 8004faa:	f000 facd 	bl	8005548 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	69da      	ldr	r2, [r3, #28]
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	f042 0208 	orr.w	r2, r2, #8
 8004fbc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	69da      	ldr	r2, [r3, #28]
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	f022 0204 	bic.w	r2, r2, #4
 8004fcc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	69d9      	ldr	r1, [r3, #28]
 8004fd4:	68bb      	ldr	r3, [r7, #8]
 8004fd6:	691a      	ldr	r2, [r3, #16]
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	430a      	orrs	r2, r1
 8004fde:	61da      	str	r2, [r3, #28]
      break;
 8004fe0:	e023      	b.n	800502a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	68b9      	ldr	r1, [r7, #8]
 8004fe8:	4618      	mov	r0, r3
 8004fea:	f000 fb17 	bl	800561c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	69da      	ldr	r2, [r3, #28]
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004ffc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	69da      	ldr	r2, [r3, #28]
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800500c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	69d9      	ldr	r1, [r3, #28]
 8005014:	68bb      	ldr	r3, [r7, #8]
 8005016:	691b      	ldr	r3, [r3, #16]
 8005018:	021a      	lsls	r2, r3, #8
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	430a      	orrs	r2, r1
 8005020:	61da      	str	r2, [r3, #28]
      break;
 8005022:	e002      	b.n	800502a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005024:	2301      	movs	r3, #1
 8005026:	75fb      	strb	r3, [r7, #23]
      break;
 8005028:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	2200      	movs	r2, #0
 800502e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005032:	7dfb      	ldrb	r3, [r7, #23]
}
 8005034:	4618      	mov	r0, r3
 8005036:	3718      	adds	r7, #24
 8005038:	46bd      	mov	sp, r7
 800503a:	bd80      	pop	{r7, pc}

0800503c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800503c:	b580      	push	{r7, lr}
 800503e:	b084      	sub	sp, #16
 8005040:	af00      	add	r7, sp, #0
 8005042:	6078      	str	r0, [r7, #4]
 8005044:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005046:	2300      	movs	r3, #0
 8005048:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005050:	2b01      	cmp	r3, #1
 8005052:	d101      	bne.n	8005058 <HAL_TIM_ConfigClockSource+0x1c>
 8005054:	2302      	movs	r3, #2
 8005056:	e0b4      	b.n	80051c2 <HAL_TIM_ConfigClockSource+0x186>
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	2201      	movs	r2, #1
 800505c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	2202      	movs	r2, #2
 8005064:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	689b      	ldr	r3, [r3, #8]
 800506e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005070:	68bb      	ldr	r3, [r7, #8]
 8005072:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005076:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005078:	68bb      	ldr	r3, [r7, #8]
 800507a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800507e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	68ba      	ldr	r2, [r7, #8]
 8005086:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005088:	683b      	ldr	r3, [r7, #0]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005090:	d03e      	beq.n	8005110 <HAL_TIM_ConfigClockSource+0xd4>
 8005092:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005096:	f200 8087 	bhi.w	80051a8 <HAL_TIM_ConfigClockSource+0x16c>
 800509a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800509e:	f000 8086 	beq.w	80051ae <HAL_TIM_ConfigClockSource+0x172>
 80050a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80050a6:	d87f      	bhi.n	80051a8 <HAL_TIM_ConfigClockSource+0x16c>
 80050a8:	2b70      	cmp	r3, #112	; 0x70
 80050aa:	d01a      	beq.n	80050e2 <HAL_TIM_ConfigClockSource+0xa6>
 80050ac:	2b70      	cmp	r3, #112	; 0x70
 80050ae:	d87b      	bhi.n	80051a8 <HAL_TIM_ConfigClockSource+0x16c>
 80050b0:	2b60      	cmp	r3, #96	; 0x60
 80050b2:	d050      	beq.n	8005156 <HAL_TIM_ConfigClockSource+0x11a>
 80050b4:	2b60      	cmp	r3, #96	; 0x60
 80050b6:	d877      	bhi.n	80051a8 <HAL_TIM_ConfigClockSource+0x16c>
 80050b8:	2b50      	cmp	r3, #80	; 0x50
 80050ba:	d03c      	beq.n	8005136 <HAL_TIM_ConfigClockSource+0xfa>
 80050bc:	2b50      	cmp	r3, #80	; 0x50
 80050be:	d873      	bhi.n	80051a8 <HAL_TIM_ConfigClockSource+0x16c>
 80050c0:	2b40      	cmp	r3, #64	; 0x40
 80050c2:	d058      	beq.n	8005176 <HAL_TIM_ConfigClockSource+0x13a>
 80050c4:	2b40      	cmp	r3, #64	; 0x40
 80050c6:	d86f      	bhi.n	80051a8 <HAL_TIM_ConfigClockSource+0x16c>
 80050c8:	2b30      	cmp	r3, #48	; 0x30
 80050ca:	d064      	beq.n	8005196 <HAL_TIM_ConfigClockSource+0x15a>
 80050cc:	2b30      	cmp	r3, #48	; 0x30
 80050ce:	d86b      	bhi.n	80051a8 <HAL_TIM_ConfigClockSource+0x16c>
 80050d0:	2b20      	cmp	r3, #32
 80050d2:	d060      	beq.n	8005196 <HAL_TIM_ConfigClockSource+0x15a>
 80050d4:	2b20      	cmp	r3, #32
 80050d6:	d867      	bhi.n	80051a8 <HAL_TIM_ConfigClockSource+0x16c>
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d05c      	beq.n	8005196 <HAL_TIM_ConfigClockSource+0x15a>
 80050dc:	2b10      	cmp	r3, #16
 80050de:	d05a      	beq.n	8005196 <HAL_TIM_ConfigClockSource+0x15a>
 80050e0:	e062      	b.n	80051a8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	6818      	ldr	r0, [r3, #0]
 80050e6:	683b      	ldr	r3, [r7, #0]
 80050e8:	6899      	ldr	r1, [r3, #8]
 80050ea:	683b      	ldr	r3, [r7, #0]
 80050ec:	685a      	ldr	r2, [r3, #4]
 80050ee:	683b      	ldr	r3, [r7, #0]
 80050f0:	68db      	ldr	r3, [r3, #12]
 80050f2:	f000 fc7b 	bl	80059ec <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	689b      	ldr	r3, [r3, #8]
 80050fc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80050fe:	68bb      	ldr	r3, [r7, #8]
 8005100:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005104:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	68ba      	ldr	r2, [r7, #8]
 800510c:	609a      	str	r2, [r3, #8]
      break;
 800510e:	e04f      	b.n	80051b0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	6818      	ldr	r0, [r3, #0]
 8005114:	683b      	ldr	r3, [r7, #0]
 8005116:	6899      	ldr	r1, [r3, #8]
 8005118:	683b      	ldr	r3, [r7, #0]
 800511a:	685a      	ldr	r2, [r3, #4]
 800511c:	683b      	ldr	r3, [r7, #0]
 800511e:	68db      	ldr	r3, [r3, #12]
 8005120:	f000 fc64 	bl	80059ec <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	689a      	ldr	r2, [r3, #8]
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005132:	609a      	str	r2, [r3, #8]
      break;
 8005134:	e03c      	b.n	80051b0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	6818      	ldr	r0, [r3, #0]
 800513a:	683b      	ldr	r3, [r7, #0]
 800513c:	6859      	ldr	r1, [r3, #4]
 800513e:	683b      	ldr	r3, [r7, #0]
 8005140:	68db      	ldr	r3, [r3, #12]
 8005142:	461a      	mov	r2, r3
 8005144:	f000 fb22 	bl	800578c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	2150      	movs	r1, #80	; 0x50
 800514e:	4618      	mov	r0, r3
 8005150:	f000 fc31 	bl	80059b6 <TIM_ITRx_SetConfig>
      break;
 8005154:	e02c      	b.n	80051b0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	6818      	ldr	r0, [r3, #0]
 800515a:	683b      	ldr	r3, [r7, #0]
 800515c:	6859      	ldr	r1, [r3, #4]
 800515e:	683b      	ldr	r3, [r7, #0]
 8005160:	68db      	ldr	r3, [r3, #12]
 8005162:	461a      	mov	r2, r3
 8005164:	f000 fb7e 	bl	8005864 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	2160      	movs	r1, #96	; 0x60
 800516e:	4618      	mov	r0, r3
 8005170:	f000 fc21 	bl	80059b6 <TIM_ITRx_SetConfig>
      break;
 8005174:	e01c      	b.n	80051b0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	6818      	ldr	r0, [r3, #0]
 800517a:	683b      	ldr	r3, [r7, #0]
 800517c:	6859      	ldr	r1, [r3, #4]
 800517e:	683b      	ldr	r3, [r7, #0]
 8005180:	68db      	ldr	r3, [r3, #12]
 8005182:	461a      	mov	r2, r3
 8005184:	f000 fb02 	bl	800578c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	2140      	movs	r1, #64	; 0x40
 800518e:	4618      	mov	r0, r3
 8005190:	f000 fc11 	bl	80059b6 <TIM_ITRx_SetConfig>
      break;
 8005194:	e00c      	b.n	80051b0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681a      	ldr	r2, [r3, #0]
 800519a:	683b      	ldr	r3, [r7, #0]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	4619      	mov	r1, r3
 80051a0:	4610      	mov	r0, r2
 80051a2:	f000 fc08 	bl	80059b6 <TIM_ITRx_SetConfig>
      break;
 80051a6:	e003      	b.n	80051b0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80051a8:	2301      	movs	r3, #1
 80051aa:	73fb      	strb	r3, [r7, #15]
      break;
 80051ac:	e000      	b.n	80051b0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80051ae:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	2201      	movs	r2, #1
 80051b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	2200      	movs	r2, #0
 80051bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80051c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80051c2:	4618      	mov	r0, r3
 80051c4:	3710      	adds	r7, #16
 80051c6:	46bd      	mov	sp, r7
 80051c8:	bd80      	pop	{r7, pc}
	...

080051cc <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80051cc:	b480      	push	{r7}
 80051ce:	b085      	sub	sp, #20
 80051d0:	af00      	add	r7, sp, #0
 80051d2:	6078      	str	r0, [r7, #4]
 80051d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 80051d6:	2300      	movs	r3, #0
 80051d8:	60fb      	str	r3, [r7, #12]
 80051da:	683b      	ldr	r3, [r7, #0]
 80051dc:	2b0c      	cmp	r3, #12
 80051de:	d831      	bhi.n	8005244 <HAL_TIM_ReadCapturedValue+0x78>
 80051e0:	a201      	add	r2, pc, #4	; (adr r2, 80051e8 <HAL_TIM_ReadCapturedValue+0x1c>)
 80051e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051e6:	bf00      	nop
 80051e8:	0800521d 	.word	0x0800521d
 80051ec:	08005245 	.word	0x08005245
 80051f0:	08005245 	.word	0x08005245
 80051f4:	08005245 	.word	0x08005245
 80051f8:	08005227 	.word	0x08005227
 80051fc:	08005245 	.word	0x08005245
 8005200:	08005245 	.word	0x08005245
 8005204:	08005245 	.word	0x08005245
 8005208:	08005231 	.word	0x08005231
 800520c:	08005245 	.word	0x08005245
 8005210:	08005245 	.word	0x08005245
 8005214:	08005245 	.word	0x08005245
 8005218:	0800523b 	.word	0x0800523b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005222:	60fb      	str	r3, [r7, #12]

      break;
 8005224:	e00f      	b.n	8005246 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800522c:	60fb      	str	r3, [r7, #12]

      break;
 800522e:	e00a      	b.n	8005246 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005236:	60fb      	str	r3, [r7, #12]

      break;
 8005238:	e005      	b.n	8005246 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005240:	60fb      	str	r3, [r7, #12]

      break;
 8005242:	e000      	b.n	8005246 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8005244:	bf00      	nop
  }

  return tmpreg;
 8005246:	68fb      	ldr	r3, [r7, #12]
}
 8005248:	4618      	mov	r0, r3
 800524a:	3714      	adds	r7, #20
 800524c:	46bd      	mov	sp, r7
 800524e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005252:	4770      	bx	lr

08005254 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005254:	b480      	push	{r7}
 8005256:	b083      	sub	sp, #12
 8005258:	af00      	add	r7, sp, #0
 800525a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800525c:	bf00      	nop
 800525e:	370c      	adds	r7, #12
 8005260:	46bd      	mov	sp, r7
 8005262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005266:	4770      	bx	lr

08005268 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005268:	b480      	push	{r7}
 800526a:	b083      	sub	sp, #12
 800526c:	af00      	add	r7, sp, #0
 800526e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005270:	bf00      	nop
 8005272:	370c      	adds	r7, #12
 8005274:	46bd      	mov	sp, r7
 8005276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800527a:	4770      	bx	lr

0800527c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800527c:	b480      	push	{r7}
 800527e:	b083      	sub	sp, #12
 8005280:	af00      	add	r7, sp, #0
 8005282:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005284:	bf00      	nop
 8005286:	370c      	adds	r7, #12
 8005288:	46bd      	mov	sp, r7
 800528a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800528e:	4770      	bx	lr

08005290 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005290:	b480      	push	{r7}
 8005292:	b083      	sub	sp, #12
 8005294:	af00      	add	r7, sp, #0
 8005296:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005298:	bf00      	nop
 800529a:	370c      	adds	r7, #12
 800529c:	46bd      	mov	sp, r7
 800529e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a2:	4770      	bx	lr

080052a4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80052a4:	b480      	push	{r7}
 80052a6:	b085      	sub	sp, #20
 80052a8:	af00      	add	r7, sp, #0
 80052aa:	6078      	str	r0, [r7, #4]
 80052ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	4a34      	ldr	r2, [pc, #208]	; (8005388 <TIM_Base_SetConfig+0xe4>)
 80052b8:	4293      	cmp	r3, r2
 80052ba:	d00f      	beq.n	80052dc <TIM_Base_SetConfig+0x38>
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80052c2:	d00b      	beq.n	80052dc <TIM_Base_SetConfig+0x38>
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	4a31      	ldr	r2, [pc, #196]	; (800538c <TIM_Base_SetConfig+0xe8>)
 80052c8:	4293      	cmp	r3, r2
 80052ca:	d007      	beq.n	80052dc <TIM_Base_SetConfig+0x38>
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	4a30      	ldr	r2, [pc, #192]	; (8005390 <TIM_Base_SetConfig+0xec>)
 80052d0:	4293      	cmp	r3, r2
 80052d2:	d003      	beq.n	80052dc <TIM_Base_SetConfig+0x38>
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	4a2f      	ldr	r2, [pc, #188]	; (8005394 <TIM_Base_SetConfig+0xf0>)
 80052d8:	4293      	cmp	r3, r2
 80052da:	d108      	bne.n	80052ee <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052e2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80052e4:	683b      	ldr	r3, [r7, #0]
 80052e6:	685b      	ldr	r3, [r3, #4]
 80052e8:	68fa      	ldr	r2, [r7, #12]
 80052ea:	4313      	orrs	r3, r2
 80052ec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	4a25      	ldr	r2, [pc, #148]	; (8005388 <TIM_Base_SetConfig+0xe4>)
 80052f2:	4293      	cmp	r3, r2
 80052f4:	d01b      	beq.n	800532e <TIM_Base_SetConfig+0x8a>
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80052fc:	d017      	beq.n	800532e <TIM_Base_SetConfig+0x8a>
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	4a22      	ldr	r2, [pc, #136]	; (800538c <TIM_Base_SetConfig+0xe8>)
 8005302:	4293      	cmp	r3, r2
 8005304:	d013      	beq.n	800532e <TIM_Base_SetConfig+0x8a>
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	4a21      	ldr	r2, [pc, #132]	; (8005390 <TIM_Base_SetConfig+0xec>)
 800530a:	4293      	cmp	r3, r2
 800530c:	d00f      	beq.n	800532e <TIM_Base_SetConfig+0x8a>
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	4a20      	ldr	r2, [pc, #128]	; (8005394 <TIM_Base_SetConfig+0xf0>)
 8005312:	4293      	cmp	r3, r2
 8005314:	d00b      	beq.n	800532e <TIM_Base_SetConfig+0x8a>
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	4a1f      	ldr	r2, [pc, #124]	; (8005398 <TIM_Base_SetConfig+0xf4>)
 800531a:	4293      	cmp	r3, r2
 800531c:	d007      	beq.n	800532e <TIM_Base_SetConfig+0x8a>
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	4a1e      	ldr	r2, [pc, #120]	; (800539c <TIM_Base_SetConfig+0xf8>)
 8005322:	4293      	cmp	r3, r2
 8005324:	d003      	beq.n	800532e <TIM_Base_SetConfig+0x8a>
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	4a1d      	ldr	r2, [pc, #116]	; (80053a0 <TIM_Base_SetConfig+0xfc>)
 800532a:	4293      	cmp	r3, r2
 800532c:	d108      	bne.n	8005340 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005334:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005336:	683b      	ldr	r3, [r7, #0]
 8005338:	68db      	ldr	r3, [r3, #12]
 800533a:	68fa      	ldr	r2, [r7, #12]
 800533c:	4313      	orrs	r3, r2
 800533e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005346:	683b      	ldr	r3, [r7, #0]
 8005348:	695b      	ldr	r3, [r3, #20]
 800534a:	4313      	orrs	r3, r2
 800534c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	68fa      	ldr	r2, [r7, #12]
 8005352:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005354:	683b      	ldr	r3, [r7, #0]
 8005356:	689a      	ldr	r2, [r3, #8]
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800535c:	683b      	ldr	r3, [r7, #0]
 800535e:	681a      	ldr	r2, [r3, #0]
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	4a08      	ldr	r2, [pc, #32]	; (8005388 <TIM_Base_SetConfig+0xe4>)
 8005368:	4293      	cmp	r3, r2
 800536a:	d103      	bne.n	8005374 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800536c:	683b      	ldr	r3, [r7, #0]
 800536e:	691a      	ldr	r2, [r3, #16]
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	2201      	movs	r2, #1
 8005378:	615a      	str	r2, [r3, #20]
}
 800537a:	bf00      	nop
 800537c:	3714      	adds	r7, #20
 800537e:	46bd      	mov	sp, r7
 8005380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005384:	4770      	bx	lr
 8005386:	bf00      	nop
 8005388:	40010000 	.word	0x40010000
 800538c:	40000400 	.word	0x40000400
 8005390:	40000800 	.word	0x40000800
 8005394:	40000c00 	.word	0x40000c00
 8005398:	40014000 	.word	0x40014000
 800539c:	40014400 	.word	0x40014400
 80053a0:	40014800 	.word	0x40014800

080053a4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80053a4:	b480      	push	{r7}
 80053a6:	b087      	sub	sp, #28
 80053a8:	af00      	add	r7, sp, #0
 80053aa:	6078      	str	r0, [r7, #4]
 80053ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	6a1b      	ldr	r3, [r3, #32]
 80053b2:	f023 0201 	bic.w	r2, r3, #1
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	6a1b      	ldr	r3, [r3, #32]
 80053be:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	685b      	ldr	r3, [r3, #4]
 80053c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	699b      	ldr	r3, [r3, #24]
 80053ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	f023 0303 	bic.w	r3, r3, #3
 80053da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80053dc:	683b      	ldr	r3, [r7, #0]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	68fa      	ldr	r2, [r7, #12]
 80053e2:	4313      	orrs	r3, r2
 80053e4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80053e6:	697b      	ldr	r3, [r7, #20]
 80053e8:	f023 0302 	bic.w	r3, r3, #2
 80053ec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80053ee:	683b      	ldr	r3, [r7, #0]
 80053f0:	689b      	ldr	r3, [r3, #8]
 80053f2:	697a      	ldr	r2, [r7, #20]
 80053f4:	4313      	orrs	r3, r2
 80053f6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	4a1c      	ldr	r2, [pc, #112]	; (800546c <TIM_OC1_SetConfig+0xc8>)
 80053fc:	4293      	cmp	r3, r2
 80053fe:	d10c      	bne.n	800541a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005400:	697b      	ldr	r3, [r7, #20]
 8005402:	f023 0308 	bic.w	r3, r3, #8
 8005406:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005408:	683b      	ldr	r3, [r7, #0]
 800540a:	68db      	ldr	r3, [r3, #12]
 800540c:	697a      	ldr	r2, [r7, #20]
 800540e:	4313      	orrs	r3, r2
 8005410:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005412:	697b      	ldr	r3, [r7, #20]
 8005414:	f023 0304 	bic.w	r3, r3, #4
 8005418:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	4a13      	ldr	r2, [pc, #76]	; (800546c <TIM_OC1_SetConfig+0xc8>)
 800541e:	4293      	cmp	r3, r2
 8005420:	d111      	bne.n	8005446 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005422:	693b      	ldr	r3, [r7, #16]
 8005424:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005428:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800542a:	693b      	ldr	r3, [r7, #16]
 800542c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005430:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005432:	683b      	ldr	r3, [r7, #0]
 8005434:	695b      	ldr	r3, [r3, #20]
 8005436:	693a      	ldr	r2, [r7, #16]
 8005438:	4313      	orrs	r3, r2
 800543a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800543c:	683b      	ldr	r3, [r7, #0]
 800543e:	699b      	ldr	r3, [r3, #24]
 8005440:	693a      	ldr	r2, [r7, #16]
 8005442:	4313      	orrs	r3, r2
 8005444:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	693a      	ldr	r2, [r7, #16]
 800544a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	68fa      	ldr	r2, [r7, #12]
 8005450:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005452:	683b      	ldr	r3, [r7, #0]
 8005454:	685a      	ldr	r2, [r3, #4]
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	697a      	ldr	r2, [r7, #20]
 800545e:	621a      	str	r2, [r3, #32]
}
 8005460:	bf00      	nop
 8005462:	371c      	adds	r7, #28
 8005464:	46bd      	mov	sp, r7
 8005466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800546a:	4770      	bx	lr
 800546c:	40010000 	.word	0x40010000

08005470 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005470:	b480      	push	{r7}
 8005472:	b087      	sub	sp, #28
 8005474:	af00      	add	r7, sp, #0
 8005476:	6078      	str	r0, [r7, #4]
 8005478:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	6a1b      	ldr	r3, [r3, #32]
 800547e:	f023 0210 	bic.w	r2, r3, #16
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	6a1b      	ldr	r3, [r3, #32]
 800548a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	685b      	ldr	r3, [r3, #4]
 8005490:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	699b      	ldr	r3, [r3, #24]
 8005496:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800549e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80054a6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80054a8:	683b      	ldr	r3, [r7, #0]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	021b      	lsls	r3, r3, #8
 80054ae:	68fa      	ldr	r2, [r7, #12]
 80054b0:	4313      	orrs	r3, r2
 80054b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80054b4:	697b      	ldr	r3, [r7, #20]
 80054b6:	f023 0320 	bic.w	r3, r3, #32
 80054ba:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80054bc:	683b      	ldr	r3, [r7, #0]
 80054be:	689b      	ldr	r3, [r3, #8]
 80054c0:	011b      	lsls	r3, r3, #4
 80054c2:	697a      	ldr	r2, [r7, #20]
 80054c4:	4313      	orrs	r3, r2
 80054c6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	4a1e      	ldr	r2, [pc, #120]	; (8005544 <TIM_OC2_SetConfig+0xd4>)
 80054cc:	4293      	cmp	r3, r2
 80054ce:	d10d      	bne.n	80054ec <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80054d0:	697b      	ldr	r3, [r7, #20]
 80054d2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80054d6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80054d8:	683b      	ldr	r3, [r7, #0]
 80054da:	68db      	ldr	r3, [r3, #12]
 80054dc:	011b      	lsls	r3, r3, #4
 80054de:	697a      	ldr	r2, [r7, #20]
 80054e0:	4313      	orrs	r3, r2
 80054e2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80054e4:	697b      	ldr	r3, [r7, #20]
 80054e6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80054ea:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	4a15      	ldr	r2, [pc, #84]	; (8005544 <TIM_OC2_SetConfig+0xd4>)
 80054f0:	4293      	cmp	r3, r2
 80054f2:	d113      	bne.n	800551c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80054f4:	693b      	ldr	r3, [r7, #16]
 80054f6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80054fa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80054fc:	693b      	ldr	r3, [r7, #16]
 80054fe:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005502:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005504:	683b      	ldr	r3, [r7, #0]
 8005506:	695b      	ldr	r3, [r3, #20]
 8005508:	009b      	lsls	r3, r3, #2
 800550a:	693a      	ldr	r2, [r7, #16]
 800550c:	4313      	orrs	r3, r2
 800550e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005510:	683b      	ldr	r3, [r7, #0]
 8005512:	699b      	ldr	r3, [r3, #24]
 8005514:	009b      	lsls	r3, r3, #2
 8005516:	693a      	ldr	r2, [r7, #16]
 8005518:	4313      	orrs	r3, r2
 800551a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	693a      	ldr	r2, [r7, #16]
 8005520:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	68fa      	ldr	r2, [r7, #12]
 8005526:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005528:	683b      	ldr	r3, [r7, #0]
 800552a:	685a      	ldr	r2, [r3, #4]
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	697a      	ldr	r2, [r7, #20]
 8005534:	621a      	str	r2, [r3, #32]
}
 8005536:	bf00      	nop
 8005538:	371c      	adds	r7, #28
 800553a:	46bd      	mov	sp, r7
 800553c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005540:	4770      	bx	lr
 8005542:	bf00      	nop
 8005544:	40010000 	.word	0x40010000

08005548 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005548:	b480      	push	{r7}
 800554a:	b087      	sub	sp, #28
 800554c:	af00      	add	r7, sp, #0
 800554e:	6078      	str	r0, [r7, #4]
 8005550:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	6a1b      	ldr	r3, [r3, #32]
 8005556:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	6a1b      	ldr	r3, [r3, #32]
 8005562:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	685b      	ldr	r3, [r3, #4]
 8005568:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	69db      	ldr	r3, [r3, #28]
 800556e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005576:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	f023 0303 	bic.w	r3, r3, #3
 800557e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005580:	683b      	ldr	r3, [r7, #0]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	68fa      	ldr	r2, [r7, #12]
 8005586:	4313      	orrs	r3, r2
 8005588:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800558a:	697b      	ldr	r3, [r7, #20]
 800558c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005590:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005592:	683b      	ldr	r3, [r7, #0]
 8005594:	689b      	ldr	r3, [r3, #8]
 8005596:	021b      	lsls	r3, r3, #8
 8005598:	697a      	ldr	r2, [r7, #20]
 800559a:	4313      	orrs	r3, r2
 800559c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	4a1d      	ldr	r2, [pc, #116]	; (8005618 <TIM_OC3_SetConfig+0xd0>)
 80055a2:	4293      	cmp	r3, r2
 80055a4:	d10d      	bne.n	80055c2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80055a6:	697b      	ldr	r3, [r7, #20]
 80055a8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80055ac:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80055ae:	683b      	ldr	r3, [r7, #0]
 80055b0:	68db      	ldr	r3, [r3, #12]
 80055b2:	021b      	lsls	r3, r3, #8
 80055b4:	697a      	ldr	r2, [r7, #20]
 80055b6:	4313      	orrs	r3, r2
 80055b8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80055ba:	697b      	ldr	r3, [r7, #20]
 80055bc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80055c0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	4a14      	ldr	r2, [pc, #80]	; (8005618 <TIM_OC3_SetConfig+0xd0>)
 80055c6:	4293      	cmp	r3, r2
 80055c8:	d113      	bne.n	80055f2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80055ca:	693b      	ldr	r3, [r7, #16]
 80055cc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80055d0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80055d2:	693b      	ldr	r3, [r7, #16]
 80055d4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80055d8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80055da:	683b      	ldr	r3, [r7, #0]
 80055dc:	695b      	ldr	r3, [r3, #20]
 80055de:	011b      	lsls	r3, r3, #4
 80055e0:	693a      	ldr	r2, [r7, #16]
 80055e2:	4313      	orrs	r3, r2
 80055e4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80055e6:	683b      	ldr	r3, [r7, #0]
 80055e8:	699b      	ldr	r3, [r3, #24]
 80055ea:	011b      	lsls	r3, r3, #4
 80055ec:	693a      	ldr	r2, [r7, #16]
 80055ee:	4313      	orrs	r3, r2
 80055f0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	693a      	ldr	r2, [r7, #16]
 80055f6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	68fa      	ldr	r2, [r7, #12]
 80055fc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80055fe:	683b      	ldr	r3, [r7, #0]
 8005600:	685a      	ldr	r2, [r3, #4]
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	697a      	ldr	r2, [r7, #20]
 800560a:	621a      	str	r2, [r3, #32]
}
 800560c:	bf00      	nop
 800560e:	371c      	adds	r7, #28
 8005610:	46bd      	mov	sp, r7
 8005612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005616:	4770      	bx	lr
 8005618:	40010000 	.word	0x40010000

0800561c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800561c:	b480      	push	{r7}
 800561e:	b087      	sub	sp, #28
 8005620:	af00      	add	r7, sp, #0
 8005622:	6078      	str	r0, [r7, #4]
 8005624:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	6a1b      	ldr	r3, [r3, #32]
 800562a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	6a1b      	ldr	r3, [r3, #32]
 8005636:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	685b      	ldr	r3, [r3, #4]
 800563c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	69db      	ldr	r3, [r3, #28]
 8005642:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800564a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005652:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005654:	683b      	ldr	r3, [r7, #0]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	021b      	lsls	r3, r3, #8
 800565a:	68fa      	ldr	r2, [r7, #12]
 800565c:	4313      	orrs	r3, r2
 800565e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005660:	693b      	ldr	r3, [r7, #16]
 8005662:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005666:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005668:	683b      	ldr	r3, [r7, #0]
 800566a:	689b      	ldr	r3, [r3, #8]
 800566c:	031b      	lsls	r3, r3, #12
 800566e:	693a      	ldr	r2, [r7, #16]
 8005670:	4313      	orrs	r3, r2
 8005672:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	4a10      	ldr	r2, [pc, #64]	; (80056b8 <TIM_OC4_SetConfig+0x9c>)
 8005678:	4293      	cmp	r3, r2
 800567a:	d109      	bne.n	8005690 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800567c:	697b      	ldr	r3, [r7, #20]
 800567e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005682:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005684:	683b      	ldr	r3, [r7, #0]
 8005686:	695b      	ldr	r3, [r3, #20]
 8005688:	019b      	lsls	r3, r3, #6
 800568a:	697a      	ldr	r2, [r7, #20]
 800568c:	4313      	orrs	r3, r2
 800568e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	697a      	ldr	r2, [r7, #20]
 8005694:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	68fa      	ldr	r2, [r7, #12]
 800569a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800569c:	683b      	ldr	r3, [r7, #0]
 800569e:	685a      	ldr	r2, [r3, #4]
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	693a      	ldr	r2, [r7, #16]
 80056a8:	621a      	str	r2, [r3, #32]
}
 80056aa:	bf00      	nop
 80056ac:	371c      	adds	r7, #28
 80056ae:	46bd      	mov	sp, r7
 80056b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b4:	4770      	bx	lr
 80056b6:	bf00      	nop
 80056b8:	40010000 	.word	0x40010000

080056bc <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80056bc:	b480      	push	{r7}
 80056be:	b087      	sub	sp, #28
 80056c0:	af00      	add	r7, sp, #0
 80056c2:	60f8      	str	r0, [r7, #12]
 80056c4:	60b9      	str	r1, [r7, #8]
 80056c6:	607a      	str	r2, [r7, #4]
 80056c8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	6a1b      	ldr	r3, [r3, #32]
 80056ce:	f023 0201 	bic.w	r2, r3, #1
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	699b      	ldr	r3, [r3, #24]
 80056da:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	6a1b      	ldr	r3, [r3, #32]
 80056e0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	4a24      	ldr	r2, [pc, #144]	; (8005778 <TIM_TI1_SetConfig+0xbc>)
 80056e6:	4293      	cmp	r3, r2
 80056e8:	d013      	beq.n	8005712 <TIM_TI1_SetConfig+0x56>
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80056f0:	d00f      	beq.n	8005712 <TIM_TI1_SetConfig+0x56>
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	4a21      	ldr	r2, [pc, #132]	; (800577c <TIM_TI1_SetConfig+0xc0>)
 80056f6:	4293      	cmp	r3, r2
 80056f8:	d00b      	beq.n	8005712 <TIM_TI1_SetConfig+0x56>
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	4a20      	ldr	r2, [pc, #128]	; (8005780 <TIM_TI1_SetConfig+0xc4>)
 80056fe:	4293      	cmp	r3, r2
 8005700:	d007      	beq.n	8005712 <TIM_TI1_SetConfig+0x56>
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	4a1f      	ldr	r2, [pc, #124]	; (8005784 <TIM_TI1_SetConfig+0xc8>)
 8005706:	4293      	cmp	r3, r2
 8005708:	d003      	beq.n	8005712 <TIM_TI1_SetConfig+0x56>
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	4a1e      	ldr	r2, [pc, #120]	; (8005788 <TIM_TI1_SetConfig+0xcc>)
 800570e:	4293      	cmp	r3, r2
 8005710:	d101      	bne.n	8005716 <TIM_TI1_SetConfig+0x5a>
 8005712:	2301      	movs	r3, #1
 8005714:	e000      	b.n	8005718 <TIM_TI1_SetConfig+0x5c>
 8005716:	2300      	movs	r3, #0
 8005718:	2b00      	cmp	r3, #0
 800571a:	d008      	beq.n	800572e <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800571c:	697b      	ldr	r3, [r7, #20]
 800571e:	f023 0303 	bic.w	r3, r3, #3
 8005722:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8005724:	697a      	ldr	r2, [r7, #20]
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	4313      	orrs	r3, r2
 800572a:	617b      	str	r3, [r7, #20]
 800572c:	e003      	b.n	8005736 <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800572e:	697b      	ldr	r3, [r7, #20]
 8005730:	f043 0301 	orr.w	r3, r3, #1
 8005734:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005736:	697b      	ldr	r3, [r7, #20]
 8005738:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800573c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800573e:	683b      	ldr	r3, [r7, #0]
 8005740:	011b      	lsls	r3, r3, #4
 8005742:	b2db      	uxtb	r3, r3
 8005744:	697a      	ldr	r2, [r7, #20]
 8005746:	4313      	orrs	r3, r2
 8005748:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800574a:	693b      	ldr	r3, [r7, #16]
 800574c:	f023 030a 	bic.w	r3, r3, #10
 8005750:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8005752:	68bb      	ldr	r3, [r7, #8]
 8005754:	f003 030a 	and.w	r3, r3, #10
 8005758:	693a      	ldr	r2, [r7, #16]
 800575a:	4313      	orrs	r3, r2
 800575c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	697a      	ldr	r2, [r7, #20]
 8005762:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	693a      	ldr	r2, [r7, #16]
 8005768:	621a      	str	r2, [r3, #32]
}
 800576a:	bf00      	nop
 800576c:	371c      	adds	r7, #28
 800576e:	46bd      	mov	sp, r7
 8005770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005774:	4770      	bx	lr
 8005776:	bf00      	nop
 8005778:	40010000 	.word	0x40010000
 800577c:	40000400 	.word	0x40000400
 8005780:	40000800 	.word	0x40000800
 8005784:	40000c00 	.word	0x40000c00
 8005788:	40014000 	.word	0x40014000

0800578c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800578c:	b480      	push	{r7}
 800578e:	b087      	sub	sp, #28
 8005790:	af00      	add	r7, sp, #0
 8005792:	60f8      	str	r0, [r7, #12]
 8005794:	60b9      	str	r1, [r7, #8]
 8005796:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	6a1b      	ldr	r3, [r3, #32]
 800579c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	6a1b      	ldr	r3, [r3, #32]
 80057a2:	f023 0201 	bic.w	r2, r3, #1
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	699b      	ldr	r3, [r3, #24]
 80057ae:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80057b0:	693b      	ldr	r3, [r7, #16]
 80057b2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80057b6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	011b      	lsls	r3, r3, #4
 80057bc:	693a      	ldr	r2, [r7, #16]
 80057be:	4313      	orrs	r3, r2
 80057c0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80057c2:	697b      	ldr	r3, [r7, #20]
 80057c4:	f023 030a 	bic.w	r3, r3, #10
 80057c8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80057ca:	697a      	ldr	r2, [r7, #20]
 80057cc:	68bb      	ldr	r3, [r7, #8]
 80057ce:	4313      	orrs	r3, r2
 80057d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	693a      	ldr	r2, [r7, #16]
 80057d6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	697a      	ldr	r2, [r7, #20]
 80057dc:	621a      	str	r2, [r3, #32]
}
 80057de:	bf00      	nop
 80057e0:	371c      	adds	r7, #28
 80057e2:	46bd      	mov	sp, r7
 80057e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e8:	4770      	bx	lr

080057ea <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80057ea:	b480      	push	{r7}
 80057ec:	b087      	sub	sp, #28
 80057ee:	af00      	add	r7, sp, #0
 80057f0:	60f8      	str	r0, [r7, #12]
 80057f2:	60b9      	str	r1, [r7, #8]
 80057f4:	607a      	str	r2, [r7, #4]
 80057f6:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	6a1b      	ldr	r3, [r3, #32]
 80057fc:	f023 0210 	bic.w	r2, r3, #16
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	699b      	ldr	r3, [r3, #24]
 8005808:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	6a1b      	ldr	r3, [r3, #32]
 800580e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8005810:	697b      	ldr	r3, [r7, #20]
 8005812:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005816:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	021b      	lsls	r3, r3, #8
 800581c:	697a      	ldr	r2, [r7, #20]
 800581e:	4313      	orrs	r3, r2
 8005820:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005822:	697b      	ldr	r3, [r7, #20]
 8005824:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005828:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800582a:	683b      	ldr	r3, [r7, #0]
 800582c:	031b      	lsls	r3, r3, #12
 800582e:	b29b      	uxth	r3, r3
 8005830:	697a      	ldr	r2, [r7, #20]
 8005832:	4313      	orrs	r3, r2
 8005834:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005836:	693b      	ldr	r3, [r7, #16]
 8005838:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800583c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800583e:	68bb      	ldr	r3, [r7, #8]
 8005840:	011b      	lsls	r3, r3, #4
 8005842:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8005846:	693a      	ldr	r2, [r7, #16]
 8005848:	4313      	orrs	r3, r2
 800584a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	697a      	ldr	r2, [r7, #20]
 8005850:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	693a      	ldr	r2, [r7, #16]
 8005856:	621a      	str	r2, [r3, #32]
}
 8005858:	bf00      	nop
 800585a:	371c      	adds	r7, #28
 800585c:	46bd      	mov	sp, r7
 800585e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005862:	4770      	bx	lr

08005864 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005864:	b480      	push	{r7}
 8005866:	b087      	sub	sp, #28
 8005868:	af00      	add	r7, sp, #0
 800586a:	60f8      	str	r0, [r7, #12]
 800586c:	60b9      	str	r1, [r7, #8]
 800586e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	6a1b      	ldr	r3, [r3, #32]
 8005874:	f023 0210 	bic.w	r2, r3, #16
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	699b      	ldr	r3, [r3, #24]
 8005880:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	6a1b      	ldr	r3, [r3, #32]
 8005886:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005888:	697b      	ldr	r3, [r7, #20]
 800588a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800588e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	031b      	lsls	r3, r3, #12
 8005894:	697a      	ldr	r2, [r7, #20]
 8005896:	4313      	orrs	r3, r2
 8005898:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800589a:	693b      	ldr	r3, [r7, #16]
 800589c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80058a0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80058a2:	68bb      	ldr	r3, [r7, #8]
 80058a4:	011b      	lsls	r3, r3, #4
 80058a6:	693a      	ldr	r2, [r7, #16]
 80058a8:	4313      	orrs	r3, r2
 80058aa:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	697a      	ldr	r2, [r7, #20]
 80058b0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	693a      	ldr	r2, [r7, #16]
 80058b6:	621a      	str	r2, [r3, #32]
}
 80058b8:	bf00      	nop
 80058ba:	371c      	adds	r7, #28
 80058bc:	46bd      	mov	sp, r7
 80058be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c2:	4770      	bx	lr

080058c4 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80058c4:	b480      	push	{r7}
 80058c6:	b087      	sub	sp, #28
 80058c8:	af00      	add	r7, sp, #0
 80058ca:	60f8      	str	r0, [r7, #12]
 80058cc:	60b9      	str	r1, [r7, #8]
 80058ce:	607a      	str	r2, [r7, #4]
 80058d0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	6a1b      	ldr	r3, [r3, #32]
 80058d6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	69db      	ldr	r3, [r3, #28]
 80058e2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	6a1b      	ldr	r3, [r3, #32]
 80058e8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80058ea:	697b      	ldr	r3, [r7, #20]
 80058ec:	f023 0303 	bic.w	r3, r3, #3
 80058f0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 80058f2:	697a      	ldr	r2, [r7, #20]
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	4313      	orrs	r3, r2
 80058f8:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80058fa:	697b      	ldr	r3, [r7, #20]
 80058fc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005900:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8005902:	683b      	ldr	r3, [r7, #0]
 8005904:	011b      	lsls	r3, r3, #4
 8005906:	b2db      	uxtb	r3, r3
 8005908:	697a      	ldr	r2, [r7, #20]
 800590a:	4313      	orrs	r3, r2
 800590c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800590e:	693b      	ldr	r3, [r7, #16]
 8005910:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8005914:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8005916:	68bb      	ldr	r3, [r7, #8]
 8005918:	021b      	lsls	r3, r3, #8
 800591a:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800591e:	693a      	ldr	r2, [r7, #16]
 8005920:	4313      	orrs	r3, r2
 8005922:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	697a      	ldr	r2, [r7, #20]
 8005928:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	693a      	ldr	r2, [r7, #16]
 800592e:	621a      	str	r2, [r3, #32]
}
 8005930:	bf00      	nop
 8005932:	371c      	adds	r7, #28
 8005934:	46bd      	mov	sp, r7
 8005936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800593a:	4770      	bx	lr

0800593c <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800593c:	b480      	push	{r7}
 800593e:	b087      	sub	sp, #28
 8005940:	af00      	add	r7, sp, #0
 8005942:	60f8      	str	r0, [r7, #12]
 8005944:	60b9      	str	r1, [r7, #8]
 8005946:	607a      	str	r2, [r7, #4]
 8005948:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	6a1b      	ldr	r3, [r3, #32]
 800594e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	69db      	ldr	r3, [r3, #28]
 800595a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	6a1b      	ldr	r3, [r3, #32]
 8005960:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8005962:	697b      	ldr	r3, [r7, #20]
 8005964:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005968:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	021b      	lsls	r3, r3, #8
 800596e:	697a      	ldr	r2, [r7, #20]
 8005970:	4313      	orrs	r3, r2
 8005972:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8005974:	697b      	ldr	r3, [r7, #20]
 8005976:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800597a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800597c:	683b      	ldr	r3, [r7, #0]
 800597e:	031b      	lsls	r3, r3, #12
 8005980:	b29b      	uxth	r3, r3
 8005982:	697a      	ldr	r2, [r7, #20]
 8005984:	4313      	orrs	r3, r2
 8005986:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8005988:	693b      	ldr	r3, [r7, #16]
 800598a:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800598e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8005990:	68bb      	ldr	r3, [r7, #8]
 8005992:	031b      	lsls	r3, r3, #12
 8005994:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8005998:	693a      	ldr	r2, [r7, #16]
 800599a:	4313      	orrs	r3, r2
 800599c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	697a      	ldr	r2, [r7, #20]
 80059a2:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	693a      	ldr	r2, [r7, #16]
 80059a8:	621a      	str	r2, [r3, #32]
}
 80059aa:	bf00      	nop
 80059ac:	371c      	adds	r7, #28
 80059ae:	46bd      	mov	sp, r7
 80059b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b4:	4770      	bx	lr

080059b6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80059b6:	b480      	push	{r7}
 80059b8:	b085      	sub	sp, #20
 80059ba:	af00      	add	r7, sp, #0
 80059bc:	6078      	str	r0, [r7, #4]
 80059be:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	689b      	ldr	r3, [r3, #8]
 80059c4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80059cc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80059ce:	683a      	ldr	r2, [r7, #0]
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	4313      	orrs	r3, r2
 80059d4:	f043 0307 	orr.w	r3, r3, #7
 80059d8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	68fa      	ldr	r2, [r7, #12]
 80059de:	609a      	str	r2, [r3, #8]
}
 80059e0:	bf00      	nop
 80059e2:	3714      	adds	r7, #20
 80059e4:	46bd      	mov	sp, r7
 80059e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ea:	4770      	bx	lr

080059ec <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80059ec:	b480      	push	{r7}
 80059ee:	b087      	sub	sp, #28
 80059f0:	af00      	add	r7, sp, #0
 80059f2:	60f8      	str	r0, [r7, #12]
 80059f4:	60b9      	str	r1, [r7, #8]
 80059f6:	607a      	str	r2, [r7, #4]
 80059f8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	689b      	ldr	r3, [r3, #8]
 80059fe:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005a00:	697b      	ldr	r3, [r7, #20]
 8005a02:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005a06:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005a08:	683b      	ldr	r3, [r7, #0]
 8005a0a:	021a      	lsls	r2, r3, #8
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	431a      	orrs	r2, r3
 8005a10:	68bb      	ldr	r3, [r7, #8]
 8005a12:	4313      	orrs	r3, r2
 8005a14:	697a      	ldr	r2, [r7, #20]
 8005a16:	4313      	orrs	r3, r2
 8005a18:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	697a      	ldr	r2, [r7, #20]
 8005a1e:	609a      	str	r2, [r3, #8]
}
 8005a20:	bf00      	nop
 8005a22:	371c      	adds	r7, #28
 8005a24:	46bd      	mov	sp, r7
 8005a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a2a:	4770      	bx	lr

08005a2c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005a2c:	b480      	push	{r7}
 8005a2e:	b087      	sub	sp, #28
 8005a30:	af00      	add	r7, sp, #0
 8005a32:	60f8      	str	r0, [r7, #12]
 8005a34:	60b9      	str	r1, [r7, #8]
 8005a36:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005a38:	68bb      	ldr	r3, [r7, #8]
 8005a3a:	f003 031f 	and.w	r3, r3, #31
 8005a3e:	2201      	movs	r2, #1
 8005a40:	fa02 f303 	lsl.w	r3, r2, r3
 8005a44:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	6a1a      	ldr	r2, [r3, #32]
 8005a4a:	697b      	ldr	r3, [r7, #20]
 8005a4c:	43db      	mvns	r3, r3
 8005a4e:	401a      	ands	r2, r3
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	6a1a      	ldr	r2, [r3, #32]
 8005a58:	68bb      	ldr	r3, [r7, #8]
 8005a5a:	f003 031f 	and.w	r3, r3, #31
 8005a5e:	6879      	ldr	r1, [r7, #4]
 8005a60:	fa01 f303 	lsl.w	r3, r1, r3
 8005a64:	431a      	orrs	r2, r3
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	621a      	str	r2, [r3, #32]
}
 8005a6a:	bf00      	nop
 8005a6c:	371c      	adds	r7, #28
 8005a6e:	46bd      	mov	sp, r7
 8005a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a74:	4770      	bx	lr
	...

08005a78 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005a78:	b480      	push	{r7}
 8005a7a:	b085      	sub	sp, #20
 8005a7c:	af00      	add	r7, sp, #0
 8005a7e:	6078      	str	r0, [r7, #4]
 8005a80:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005a88:	2b01      	cmp	r3, #1
 8005a8a:	d101      	bne.n	8005a90 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005a8c:	2302      	movs	r3, #2
 8005a8e:	e050      	b.n	8005b32 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	2201      	movs	r2, #1
 8005a94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	2202      	movs	r2, #2
 8005a9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	685b      	ldr	r3, [r3, #4]
 8005aa6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	689b      	ldr	r3, [r3, #8]
 8005aae:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ab6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005ab8:	683b      	ldr	r3, [r7, #0]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	68fa      	ldr	r2, [r7, #12]
 8005abe:	4313      	orrs	r3, r2
 8005ac0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	68fa      	ldr	r2, [r7, #12]
 8005ac8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	4a1c      	ldr	r2, [pc, #112]	; (8005b40 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005ad0:	4293      	cmp	r3, r2
 8005ad2:	d018      	beq.n	8005b06 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005adc:	d013      	beq.n	8005b06 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	4a18      	ldr	r2, [pc, #96]	; (8005b44 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005ae4:	4293      	cmp	r3, r2
 8005ae6:	d00e      	beq.n	8005b06 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	4a16      	ldr	r2, [pc, #88]	; (8005b48 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005aee:	4293      	cmp	r3, r2
 8005af0:	d009      	beq.n	8005b06 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	4a15      	ldr	r2, [pc, #84]	; (8005b4c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005af8:	4293      	cmp	r3, r2
 8005afa:	d004      	beq.n	8005b06 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	4a13      	ldr	r2, [pc, #76]	; (8005b50 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8005b02:	4293      	cmp	r3, r2
 8005b04:	d10c      	bne.n	8005b20 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005b06:	68bb      	ldr	r3, [r7, #8]
 8005b08:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005b0c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005b0e:	683b      	ldr	r3, [r7, #0]
 8005b10:	685b      	ldr	r3, [r3, #4]
 8005b12:	68ba      	ldr	r2, [r7, #8]
 8005b14:	4313      	orrs	r3, r2
 8005b16:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	68ba      	ldr	r2, [r7, #8]
 8005b1e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	2201      	movs	r2, #1
 8005b24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	2200      	movs	r2, #0
 8005b2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005b30:	2300      	movs	r3, #0
}
 8005b32:	4618      	mov	r0, r3
 8005b34:	3714      	adds	r7, #20
 8005b36:	46bd      	mov	sp, r7
 8005b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b3c:	4770      	bx	lr
 8005b3e:	bf00      	nop
 8005b40:	40010000 	.word	0x40010000
 8005b44:	40000400 	.word	0x40000400
 8005b48:	40000800 	.word	0x40000800
 8005b4c:	40000c00 	.word	0x40000c00
 8005b50:	40014000 	.word	0x40014000

08005b54 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005b54:	b480      	push	{r7}
 8005b56:	b085      	sub	sp, #20
 8005b58:	af00      	add	r7, sp, #0
 8005b5a:	6078      	str	r0, [r7, #4]
 8005b5c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005b5e:	2300      	movs	r3, #0
 8005b60:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005b68:	2b01      	cmp	r3, #1
 8005b6a:	d101      	bne.n	8005b70 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005b6c:	2302      	movs	r3, #2
 8005b6e:	e03d      	b.n	8005bec <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	2201      	movs	r2, #1
 8005b74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005b7e:	683b      	ldr	r3, [r7, #0]
 8005b80:	68db      	ldr	r3, [r3, #12]
 8005b82:	4313      	orrs	r3, r2
 8005b84:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005b8c:	683b      	ldr	r3, [r7, #0]
 8005b8e:	689b      	ldr	r3, [r3, #8]
 8005b90:	4313      	orrs	r3, r2
 8005b92:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005b9a:	683b      	ldr	r3, [r7, #0]
 8005b9c:	685b      	ldr	r3, [r3, #4]
 8005b9e:	4313      	orrs	r3, r2
 8005ba0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005ba8:	683b      	ldr	r3, [r7, #0]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	4313      	orrs	r3, r2
 8005bae:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005bb6:	683b      	ldr	r3, [r7, #0]
 8005bb8:	691b      	ldr	r3, [r3, #16]
 8005bba:	4313      	orrs	r3, r2
 8005bbc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005bc4:	683b      	ldr	r3, [r7, #0]
 8005bc6:	695b      	ldr	r3, [r3, #20]
 8005bc8:	4313      	orrs	r3, r2
 8005bca:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005bd2:	683b      	ldr	r3, [r7, #0]
 8005bd4:	69db      	ldr	r3, [r3, #28]
 8005bd6:	4313      	orrs	r3, r2
 8005bd8:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	68fa      	ldr	r2, [r7, #12]
 8005be0:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	2200      	movs	r2, #0
 8005be6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005bea:	2300      	movs	r3, #0
}
 8005bec:	4618      	mov	r0, r3
 8005bee:	3714      	adds	r7, #20
 8005bf0:	46bd      	mov	sp, r7
 8005bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf6:	4770      	bx	lr

08005bf8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005bf8:	b480      	push	{r7}
 8005bfa:	b083      	sub	sp, #12
 8005bfc:	af00      	add	r7, sp, #0
 8005bfe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005c00:	bf00      	nop
 8005c02:	370c      	adds	r7, #12
 8005c04:	46bd      	mov	sp, r7
 8005c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c0a:	4770      	bx	lr

08005c0c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005c0c:	b480      	push	{r7}
 8005c0e:	b083      	sub	sp, #12
 8005c10:	af00      	add	r7, sp, #0
 8005c12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005c14:	bf00      	nop
 8005c16:	370c      	adds	r7, #12
 8005c18:	46bd      	mov	sp, r7
 8005c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c1e:	4770      	bx	lr

08005c20 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005c20:	b084      	sub	sp, #16
 8005c22:	b580      	push	{r7, lr}
 8005c24:	b084      	sub	sp, #16
 8005c26:	af00      	add	r7, sp, #0
 8005c28:	6078      	str	r0, [r7, #4]
 8005c2a:	f107 001c 	add.w	r0, r7, #28
 8005c2e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005c32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c34:	2b01      	cmp	r3, #1
 8005c36:	d122      	bne.n	8005c7e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c3c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	68db      	ldr	r3, [r3, #12]
 8005c48:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8005c4c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005c50:	687a      	ldr	r2, [r7, #4]
 8005c52:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	68db      	ldr	r3, [r3, #12]
 8005c58:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005c60:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005c62:	2b01      	cmp	r3, #1
 8005c64:	d105      	bne.n	8005c72 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	68db      	ldr	r3, [r3, #12]
 8005c6a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005c72:	6878      	ldr	r0, [r7, #4]
 8005c74:	f001 fb1c 	bl	80072b0 <USB_CoreReset>
 8005c78:	4603      	mov	r3, r0
 8005c7a:	73fb      	strb	r3, [r7, #15]
 8005c7c:	e01a      	b.n	8005cb4 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	68db      	ldr	r3, [r3, #12]
 8005c82:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005c8a:	6878      	ldr	r0, [r7, #4]
 8005c8c:	f001 fb10 	bl	80072b0 <USB_CoreReset>
 8005c90:	4603      	mov	r3, r0
 8005c92:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005c94:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d106      	bne.n	8005ca8 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c9e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	639a      	str	r2, [r3, #56]	; 0x38
 8005ca6:	e005      	b.n	8005cb4 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cac:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005cb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cb6:	2b01      	cmp	r3, #1
 8005cb8:	d10b      	bne.n	8005cd2 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	689b      	ldr	r3, [r3, #8]
 8005cbe:	f043 0206 	orr.w	r2, r3, #6
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	689b      	ldr	r3, [r3, #8]
 8005cca:	f043 0220 	orr.w	r2, r3, #32
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005cd2:	7bfb      	ldrb	r3, [r7, #15]
}
 8005cd4:	4618      	mov	r0, r3
 8005cd6:	3710      	adds	r7, #16
 8005cd8:	46bd      	mov	sp, r7
 8005cda:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005cde:	b004      	add	sp, #16
 8005ce0:	4770      	bx	lr
	...

08005ce4 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8005ce4:	b480      	push	{r7}
 8005ce6:	b087      	sub	sp, #28
 8005ce8:	af00      	add	r7, sp, #0
 8005cea:	60f8      	str	r0, [r7, #12]
 8005cec:	60b9      	str	r1, [r7, #8]
 8005cee:	4613      	mov	r3, r2
 8005cf0:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8005cf2:	79fb      	ldrb	r3, [r7, #7]
 8005cf4:	2b02      	cmp	r3, #2
 8005cf6:	d165      	bne.n	8005dc4 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8005cf8:	68bb      	ldr	r3, [r7, #8]
 8005cfa:	4a41      	ldr	r2, [pc, #260]	; (8005e00 <USB_SetTurnaroundTime+0x11c>)
 8005cfc:	4293      	cmp	r3, r2
 8005cfe:	d906      	bls.n	8005d0e <USB_SetTurnaroundTime+0x2a>
 8005d00:	68bb      	ldr	r3, [r7, #8]
 8005d02:	4a40      	ldr	r2, [pc, #256]	; (8005e04 <USB_SetTurnaroundTime+0x120>)
 8005d04:	4293      	cmp	r3, r2
 8005d06:	d202      	bcs.n	8005d0e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8005d08:	230f      	movs	r3, #15
 8005d0a:	617b      	str	r3, [r7, #20]
 8005d0c:	e062      	b.n	8005dd4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8005d0e:	68bb      	ldr	r3, [r7, #8]
 8005d10:	4a3c      	ldr	r2, [pc, #240]	; (8005e04 <USB_SetTurnaroundTime+0x120>)
 8005d12:	4293      	cmp	r3, r2
 8005d14:	d306      	bcc.n	8005d24 <USB_SetTurnaroundTime+0x40>
 8005d16:	68bb      	ldr	r3, [r7, #8]
 8005d18:	4a3b      	ldr	r2, [pc, #236]	; (8005e08 <USB_SetTurnaroundTime+0x124>)
 8005d1a:	4293      	cmp	r3, r2
 8005d1c:	d202      	bcs.n	8005d24 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8005d1e:	230e      	movs	r3, #14
 8005d20:	617b      	str	r3, [r7, #20]
 8005d22:	e057      	b.n	8005dd4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8005d24:	68bb      	ldr	r3, [r7, #8]
 8005d26:	4a38      	ldr	r2, [pc, #224]	; (8005e08 <USB_SetTurnaroundTime+0x124>)
 8005d28:	4293      	cmp	r3, r2
 8005d2a:	d306      	bcc.n	8005d3a <USB_SetTurnaroundTime+0x56>
 8005d2c:	68bb      	ldr	r3, [r7, #8]
 8005d2e:	4a37      	ldr	r2, [pc, #220]	; (8005e0c <USB_SetTurnaroundTime+0x128>)
 8005d30:	4293      	cmp	r3, r2
 8005d32:	d202      	bcs.n	8005d3a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8005d34:	230d      	movs	r3, #13
 8005d36:	617b      	str	r3, [r7, #20]
 8005d38:	e04c      	b.n	8005dd4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8005d3a:	68bb      	ldr	r3, [r7, #8]
 8005d3c:	4a33      	ldr	r2, [pc, #204]	; (8005e0c <USB_SetTurnaroundTime+0x128>)
 8005d3e:	4293      	cmp	r3, r2
 8005d40:	d306      	bcc.n	8005d50 <USB_SetTurnaroundTime+0x6c>
 8005d42:	68bb      	ldr	r3, [r7, #8]
 8005d44:	4a32      	ldr	r2, [pc, #200]	; (8005e10 <USB_SetTurnaroundTime+0x12c>)
 8005d46:	4293      	cmp	r3, r2
 8005d48:	d802      	bhi.n	8005d50 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8005d4a:	230c      	movs	r3, #12
 8005d4c:	617b      	str	r3, [r7, #20]
 8005d4e:	e041      	b.n	8005dd4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8005d50:	68bb      	ldr	r3, [r7, #8]
 8005d52:	4a2f      	ldr	r2, [pc, #188]	; (8005e10 <USB_SetTurnaroundTime+0x12c>)
 8005d54:	4293      	cmp	r3, r2
 8005d56:	d906      	bls.n	8005d66 <USB_SetTurnaroundTime+0x82>
 8005d58:	68bb      	ldr	r3, [r7, #8]
 8005d5a:	4a2e      	ldr	r2, [pc, #184]	; (8005e14 <USB_SetTurnaroundTime+0x130>)
 8005d5c:	4293      	cmp	r3, r2
 8005d5e:	d802      	bhi.n	8005d66 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8005d60:	230b      	movs	r3, #11
 8005d62:	617b      	str	r3, [r7, #20]
 8005d64:	e036      	b.n	8005dd4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8005d66:	68bb      	ldr	r3, [r7, #8]
 8005d68:	4a2a      	ldr	r2, [pc, #168]	; (8005e14 <USB_SetTurnaroundTime+0x130>)
 8005d6a:	4293      	cmp	r3, r2
 8005d6c:	d906      	bls.n	8005d7c <USB_SetTurnaroundTime+0x98>
 8005d6e:	68bb      	ldr	r3, [r7, #8]
 8005d70:	4a29      	ldr	r2, [pc, #164]	; (8005e18 <USB_SetTurnaroundTime+0x134>)
 8005d72:	4293      	cmp	r3, r2
 8005d74:	d802      	bhi.n	8005d7c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8005d76:	230a      	movs	r3, #10
 8005d78:	617b      	str	r3, [r7, #20]
 8005d7a:	e02b      	b.n	8005dd4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8005d7c:	68bb      	ldr	r3, [r7, #8]
 8005d7e:	4a26      	ldr	r2, [pc, #152]	; (8005e18 <USB_SetTurnaroundTime+0x134>)
 8005d80:	4293      	cmp	r3, r2
 8005d82:	d906      	bls.n	8005d92 <USB_SetTurnaroundTime+0xae>
 8005d84:	68bb      	ldr	r3, [r7, #8]
 8005d86:	4a25      	ldr	r2, [pc, #148]	; (8005e1c <USB_SetTurnaroundTime+0x138>)
 8005d88:	4293      	cmp	r3, r2
 8005d8a:	d202      	bcs.n	8005d92 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8005d8c:	2309      	movs	r3, #9
 8005d8e:	617b      	str	r3, [r7, #20]
 8005d90:	e020      	b.n	8005dd4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8005d92:	68bb      	ldr	r3, [r7, #8]
 8005d94:	4a21      	ldr	r2, [pc, #132]	; (8005e1c <USB_SetTurnaroundTime+0x138>)
 8005d96:	4293      	cmp	r3, r2
 8005d98:	d306      	bcc.n	8005da8 <USB_SetTurnaroundTime+0xc4>
 8005d9a:	68bb      	ldr	r3, [r7, #8]
 8005d9c:	4a20      	ldr	r2, [pc, #128]	; (8005e20 <USB_SetTurnaroundTime+0x13c>)
 8005d9e:	4293      	cmp	r3, r2
 8005da0:	d802      	bhi.n	8005da8 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8005da2:	2308      	movs	r3, #8
 8005da4:	617b      	str	r3, [r7, #20]
 8005da6:	e015      	b.n	8005dd4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8005da8:	68bb      	ldr	r3, [r7, #8]
 8005daa:	4a1d      	ldr	r2, [pc, #116]	; (8005e20 <USB_SetTurnaroundTime+0x13c>)
 8005dac:	4293      	cmp	r3, r2
 8005dae:	d906      	bls.n	8005dbe <USB_SetTurnaroundTime+0xda>
 8005db0:	68bb      	ldr	r3, [r7, #8]
 8005db2:	4a1c      	ldr	r2, [pc, #112]	; (8005e24 <USB_SetTurnaroundTime+0x140>)
 8005db4:	4293      	cmp	r3, r2
 8005db6:	d202      	bcs.n	8005dbe <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8005db8:	2307      	movs	r3, #7
 8005dba:	617b      	str	r3, [r7, #20]
 8005dbc:	e00a      	b.n	8005dd4 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8005dbe:	2306      	movs	r3, #6
 8005dc0:	617b      	str	r3, [r7, #20]
 8005dc2:	e007      	b.n	8005dd4 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8005dc4:	79fb      	ldrb	r3, [r7, #7]
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d102      	bne.n	8005dd0 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8005dca:	2309      	movs	r3, #9
 8005dcc:	617b      	str	r3, [r7, #20]
 8005dce:	e001      	b.n	8005dd4 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8005dd0:	2309      	movs	r3, #9
 8005dd2:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	68db      	ldr	r3, [r3, #12]
 8005dd8:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	68da      	ldr	r2, [r3, #12]
 8005de4:	697b      	ldr	r3, [r7, #20]
 8005de6:	029b      	lsls	r3, r3, #10
 8005de8:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8005dec:	431a      	orrs	r2, r3
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005df2:	2300      	movs	r3, #0
}
 8005df4:	4618      	mov	r0, r3
 8005df6:	371c      	adds	r7, #28
 8005df8:	46bd      	mov	sp, r7
 8005dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dfe:	4770      	bx	lr
 8005e00:	00d8acbf 	.word	0x00d8acbf
 8005e04:	00e4e1c0 	.word	0x00e4e1c0
 8005e08:	00f42400 	.word	0x00f42400
 8005e0c:	01067380 	.word	0x01067380
 8005e10:	011a499f 	.word	0x011a499f
 8005e14:	01312cff 	.word	0x01312cff
 8005e18:	014ca43f 	.word	0x014ca43f
 8005e1c:	016e3600 	.word	0x016e3600
 8005e20:	01a6ab1f 	.word	0x01a6ab1f
 8005e24:	01e84800 	.word	0x01e84800

08005e28 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005e28:	b480      	push	{r7}
 8005e2a:	b083      	sub	sp, #12
 8005e2c:	af00      	add	r7, sp, #0
 8005e2e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	689b      	ldr	r3, [r3, #8]
 8005e34:	f043 0201 	orr.w	r2, r3, #1
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005e3c:	2300      	movs	r3, #0
}
 8005e3e:	4618      	mov	r0, r3
 8005e40:	370c      	adds	r7, #12
 8005e42:	46bd      	mov	sp, r7
 8005e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e48:	4770      	bx	lr

08005e4a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005e4a:	b480      	push	{r7}
 8005e4c:	b083      	sub	sp, #12
 8005e4e:	af00      	add	r7, sp, #0
 8005e50:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	689b      	ldr	r3, [r3, #8]
 8005e56:	f023 0201 	bic.w	r2, r3, #1
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005e5e:	2300      	movs	r3, #0
}
 8005e60:	4618      	mov	r0, r3
 8005e62:	370c      	adds	r7, #12
 8005e64:	46bd      	mov	sp, r7
 8005e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e6a:	4770      	bx	lr

08005e6c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005e6c:	b580      	push	{r7, lr}
 8005e6e:	b084      	sub	sp, #16
 8005e70:	af00      	add	r7, sp, #0
 8005e72:	6078      	str	r0, [r7, #4]
 8005e74:	460b      	mov	r3, r1
 8005e76:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005e78:	2300      	movs	r3, #0
 8005e7a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	68db      	ldr	r3, [r3, #12]
 8005e80:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005e88:	78fb      	ldrb	r3, [r7, #3]
 8005e8a:	2b01      	cmp	r3, #1
 8005e8c:	d115      	bne.n	8005eba <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	68db      	ldr	r3, [r3, #12]
 8005e92:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005e9a:	2001      	movs	r0, #1
 8005e9c:	f7fb fc84 	bl	80017a8 <HAL_Delay>
      ms++;
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	3301      	adds	r3, #1
 8005ea4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8005ea6:	6878      	ldr	r0, [r7, #4]
 8005ea8:	f001 f972 	bl	8007190 <USB_GetMode>
 8005eac:	4603      	mov	r3, r0
 8005eae:	2b01      	cmp	r3, #1
 8005eb0:	d01e      	beq.n	8005ef0 <USB_SetCurrentMode+0x84>
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	2b31      	cmp	r3, #49	; 0x31
 8005eb6:	d9f0      	bls.n	8005e9a <USB_SetCurrentMode+0x2e>
 8005eb8:	e01a      	b.n	8005ef0 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005eba:	78fb      	ldrb	r3, [r7, #3]
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d115      	bne.n	8005eec <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	68db      	ldr	r3, [r3, #12]
 8005ec4:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005ecc:	2001      	movs	r0, #1
 8005ece:	f7fb fc6b 	bl	80017a8 <HAL_Delay>
      ms++;
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	3301      	adds	r3, #1
 8005ed6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8005ed8:	6878      	ldr	r0, [r7, #4]
 8005eda:	f001 f959 	bl	8007190 <USB_GetMode>
 8005ede:	4603      	mov	r3, r0
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d005      	beq.n	8005ef0 <USB_SetCurrentMode+0x84>
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	2b31      	cmp	r3, #49	; 0x31
 8005ee8:	d9f0      	bls.n	8005ecc <USB_SetCurrentMode+0x60>
 8005eea:	e001      	b.n	8005ef0 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005eec:	2301      	movs	r3, #1
 8005eee:	e005      	b.n	8005efc <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	2b32      	cmp	r3, #50	; 0x32
 8005ef4:	d101      	bne.n	8005efa <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005ef6:	2301      	movs	r3, #1
 8005ef8:	e000      	b.n	8005efc <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005efa:	2300      	movs	r3, #0
}
 8005efc:	4618      	mov	r0, r3
 8005efe:	3710      	adds	r7, #16
 8005f00:	46bd      	mov	sp, r7
 8005f02:	bd80      	pop	{r7, pc}

08005f04 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005f04:	b084      	sub	sp, #16
 8005f06:	b580      	push	{r7, lr}
 8005f08:	b086      	sub	sp, #24
 8005f0a:	af00      	add	r7, sp, #0
 8005f0c:	6078      	str	r0, [r7, #4]
 8005f0e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005f12:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005f16:	2300      	movs	r3, #0
 8005f18:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005f1e:	2300      	movs	r3, #0
 8005f20:	613b      	str	r3, [r7, #16]
 8005f22:	e009      	b.n	8005f38 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005f24:	687a      	ldr	r2, [r7, #4]
 8005f26:	693b      	ldr	r3, [r7, #16]
 8005f28:	3340      	adds	r3, #64	; 0x40
 8005f2a:	009b      	lsls	r3, r3, #2
 8005f2c:	4413      	add	r3, r2
 8005f2e:	2200      	movs	r2, #0
 8005f30:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005f32:	693b      	ldr	r3, [r7, #16]
 8005f34:	3301      	adds	r3, #1
 8005f36:	613b      	str	r3, [r7, #16]
 8005f38:	693b      	ldr	r3, [r7, #16]
 8005f3a:	2b0e      	cmp	r3, #14
 8005f3c:	d9f2      	bls.n	8005f24 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005f3e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d11c      	bne.n	8005f7e <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f4a:	685b      	ldr	r3, [r3, #4]
 8005f4c:	68fa      	ldr	r2, [r7, #12]
 8005f4e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005f52:	f043 0302 	orr.w	r3, r3, #2
 8005f56:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f5c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f68:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f74:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	639a      	str	r2, [r3, #56]	; 0x38
 8005f7c:	e00b      	b.n	8005f96 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f82:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f8e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005f9c:	461a      	mov	r2, r3
 8005f9e:	2300      	movs	r3, #0
 8005fa0:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005fa8:	4619      	mov	r1, r3
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005fb0:	461a      	mov	r2, r3
 8005fb2:	680b      	ldr	r3, [r1, #0]
 8005fb4:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005fb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fb8:	2b01      	cmp	r3, #1
 8005fba:	d10c      	bne.n	8005fd6 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005fbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d104      	bne.n	8005fcc <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005fc2:	2100      	movs	r1, #0
 8005fc4:	6878      	ldr	r0, [r7, #4]
 8005fc6:	f000 f945 	bl	8006254 <USB_SetDevSpeed>
 8005fca:	e008      	b.n	8005fde <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005fcc:	2101      	movs	r1, #1
 8005fce:	6878      	ldr	r0, [r7, #4]
 8005fd0:	f000 f940 	bl	8006254 <USB_SetDevSpeed>
 8005fd4:	e003      	b.n	8005fde <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005fd6:	2103      	movs	r1, #3
 8005fd8:	6878      	ldr	r0, [r7, #4]
 8005fda:	f000 f93b 	bl	8006254 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005fde:	2110      	movs	r1, #16
 8005fe0:	6878      	ldr	r0, [r7, #4]
 8005fe2:	f000 f8f3 	bl	80061cc <USB_FlushTxFifo>
 8005fe6:	4603      	mov	r3, r0
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d001      	beq.n	8005ff0 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8005fec:	2301      	movs	r3, #1
 8005fee:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005ff0:	6878      	ldr	r0, [r7, #4]
 8005ff2:	f000 f90f 	bl	8006214 <USB_FlushRxFifo>
 8005ff6:	4603      	mov	r3, r0
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d001      	beq.n	8006000 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8005ffc:	2301      	movs	r3, #1
 8005ffe:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006006:	461a      	mov	r2, r3
 8006008:	2300      	movs	r3, #0
 800600a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006012:	461a      	mov	r2, r3
 8006014:	2300      	movs	r3, #0
 8006016:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800601e:	461a      	mov	r2, r3
 8006020:	2300      	movs	r3, #0
 8006022:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006024:	2300      	movs	r3, #0
 8006026:	613b      	str	r3, [r7, #16]
 8006028:	e043      	b.n	80060b2 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800602a:	693b      	ldr	r3, [r7, #16]
 800602c:	015a      	lsls	r2, r3, #5
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	4413      	add	r3, r2
 8006032:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800603c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006040:	d118      	bne.n	8006074 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8006042:	693b      	ldr	r3, [r7, #16]
 8006044:	2b00      	cmp	r3, #0
 8006046:	d10a      	bne.n	800605e <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006048:	693b      	ldr	r3, [r7, #16]
 800604a:	015a      	lsls	r2, r3, #5
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	4413      	add	r3, r2
 8006050:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006054:	461a      	mov	r2, r3
 8006056:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800605a:	6013      	str	r3, [r2, #0]
 800605c:	e013      	b.n	8006086 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800605e:	693b      	ldr	r3, [r7, #16]
 8006060:	015a      	lsls	r2, r3, #5
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	4413      	add	r3, r2
 8006066:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800606a:	461a      	mov	r2, r3
 800606c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006070:	6013      	str	r3, [r2, #0]
 8006072:	e008      	b.n	8006086 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006074:	693b      	ldr	r3, [r7, #16]
 8006076:	015a      	lsls	r2, r3, #5
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	4413      	add	r3, r2
 800607c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006080:	461a      	mov	r2, r3
 8006082:	2300      	movs	r3, #0
 8006084:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006086:	693b      	ldr	r3, [r7, #16]
 8006088:	015a      	lsls	r2, r3, #5
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	4413      	add	r3, r2
 800608e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006092:	461a      	mov	r2, r3
 8006094:	2300      	movs	r3, #0
 8006096:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006098:	693b      	ldr	r3, [r7, #16]
 800609a:	015a      	lsls	r2, r3, #5
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	4413      	add	r3, r2
 80060a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060a4:	461a      	mov	r2, r3
 80060a6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80060aa:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80060ac:	693b      	ldr	r3, [r7, #16]
 80060ae:	3301      	adds	r3, #1
 80060b0:	613b      	str	r3, [r7, #16]
 80060b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060b4:	693a      	ldr	r2, [r7, #16]
 80060b6:	429a      	cmp	r2, r3
 80060b8:	d3b7      	bcc.n	800602a <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80060ba:	2300      	movs	r3, #0
 80060bc:	613b      	str	r3, [r7, #16]
 80060be:	e043      	b.n	8006148 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80060c0:	693b      	ldr	r3, [r7, #16]
 80060c2:	015a      	lsls	r2, r3, #5
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	4413      	add	r3, r2
 80060c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80060d2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80060d6:	d118      	bne.n	800610a <USB_DevInit+0x206>
    {
      if (i == 0U)
 80060d8:	693b      	ldr	r3, [r7, #16]
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d10a      	bne.n	80060f4 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80060de:	693b      	ldr	r3, [r7, #16]
 80060e0:	015a      	lsls	r2, r3, #5
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	4413      	add	r3, r2
 80060e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060ea:	461a      	mov	r2, r3
 80060ec:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80060f0:	6013      	str	r3, [r2, #0]
 80060f2:	e013      	b.n	800611c <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80060f4:	693b      	ldr	r3, [r7, #16]
 80060f6:	015a      	lsls	r2, r3, #5
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	4413      	add	r3, r2
 80060fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006100:	461a      	mov	r2, r3
 8006102:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006106:	6013      	str	r3, [r2, #0]
 8006108:	e008      	b.n	800611c <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800610a:	693b      	ldr	r3, [r7, #16]
 800610c:	015a      	lsls	r2, r3, #5
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	4413      	add	r3, r2
 8006112:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006116:	461a      	mov	r2, r3
 8006118:	2300      	movs	r3, #0
 800611a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800611c:	693b      	ldr	r3, [r7, #16]
 800611e:	015a      	lsls	r2, r3, #5
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	4413      	add	r3, r2
 8006124:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006128:	461a      	mov	r2, r3
 800612a:	2300      	movs	r3, #0
 800612c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800612e:	693b      	ldr	r3, [r7, #16]
 8006130:	015a      	lsls	r2, r3, #5
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	4413      	add	r3, r2
 8006136:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800613a:	461a      	mov	r2, r3
 800613c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006140:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006142:	693b      	ldr	r3, [r7, #16]
 8006144:	3301      	adds	r3, #1
 8006146:	613b      	str	r3, [r7, #16]
 8006148:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800614a:	693a      	ldr	r2, [r7, #16]
 800614c:	429a      	cmp	r2, r3
 800614e:	d3b7      	bcc.n	80060c0 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006156:	691b      	ldr	r3, [r3, #16]
 8006158:	68fa      	ldr	r2, [r7, #12]
 800615a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800615e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006162:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	2200      	movs	r2, #0
 8006168:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8006170:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006172:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006174:	2b00      	cmp	r3, #0
 8006176:	d105      	bne.n	8006184 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	699b      	ldr	r3, [r3, #24]
 800617c:	f043 0210 	orr.w	r2, r3, #16
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	699a      	ldr	r2, [r3, #24]
 8006188:	4b0f      	ldr	r3, [pc, #60]	; (80061c8 <USB_DevInit+0x2c4>)
 800618a:	4313      	orrs	r3, r2
 800618c:	687a      	ldr	r2, [r7, #4]
 800618e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006190:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006192:	2b00      	cmp	r3, #0
 8006194:	d005      	beq.n	80061a2 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	699b      	ldr	r3, [r3, #24]
 800619a:	f043 0208 	orr.w	r2, r3, #8
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80061a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80061a4:	2b01      	cmp	r3, #1
 80061a6:	d107      	bne.n	80061b8 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	699b      	ldr	r3, [r3, #24]
 80061ac:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80061b0:	f043 0304 	orr.w	r3, r3, #4
 80061b4:	687a      	ldr	r2, [r7, #4]
 80061b6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80061b8:	7dfb      	ldrb	r3, [r7, #23]
}
 80061ba:	4618      	mov	r0, r3
 80061bc:	3718      	adds	r7, #24
 80061be:	46bd      	mov	sp, r7
 80061c0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80061c4:	b004      	add	sp, #16
 80061c6:	4770      	bx	lr
 80061c8:	803c3800 	.word	0x803c3800

080061cc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80061cc:	b480      	push	{r7}
 80061ce:	b085      	sub	sp, #20
 80061d0:	af00      	add	r7, sp, #0
 80061d2:	6078      	str	r0, [r7, #4]
 80061d4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80061d6:	2300      	movs	r3, #0
 80061d8:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80061da:	683b      	ldr	r3, [r7, #0]
 80061dc:	019b      	lsls	r3, r3, #6
 80061de:	f043 0220 	orr.w	r2, r3, #32
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	3301      	adds	r3, #1
 80061ea:	60fb      	str	r3, [r7, #12]
 80061ec:	4a08      	ldr	r2, [pc, #32]	; (8006210 <USB_FlushTxFifo+0x44>)
 80061ee:	4293      	cmp	r3, r2
 80061f0:	d901      	bls.n	80061f6 <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 80061f2:	2303      	movs	r3, #3
 80061f4:	e006      	b.n	8006204 <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	691b      	ldr	r3, [r3, #16]
 80061fa:	f003 0320 	and.w	r3, r3, #32
 80061fe:	2b20      	cmp	r3, #32
 8006200:	d0f1      	beq.n	80061e6 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8006202:	2300      	movs	r3, #0
}
 8006204:	4618      	mov	r0, r3
 8006206:	3714      	adds	r7, #20
 8006208:	46bd      	mov	sp, r7
 800620a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800620e:	4770      	bx	lr
 8006210:	00030d40 	.word	0x00030d40

08006214 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006214:	b480      	push	{r7}
 8006216:	b085      	sub	sp, #20
 8006218:	af00      	add	r7, sp, #0
 800621a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800621c:	2300      	movs	r3, #0
 800621e:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	2210      	movs	r2, #16
 8006224:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	3301      	adds	r3, #1
 800622a:	60fb      	str	r3, [r7, #12]
 800622c:	4a08      	ldr	r2, [pc, #32]	; (8006250 <USB_FlushRxFifo+0x3c>)
 800622e:	4293      	cmp	r3, r2
 8006230:	d901      	bls.n	8006236 <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 8006232:	2303      	movs	r3, #3
 8006234:	e006      	b.n	8006244 <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	691b      	ldr	r3, [r3, #16]
 800623a:	f003 0310 	and.w	r3, r3, #16
 800623e:	2b10      	cmp	r3, #16
 8006240:	d0f1      	beq.n	8006226 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8006242:	2300      	movs	r3, #0
}
 8006244:	4618      	mov	r0, r3
 8006246:	3714      	adds	r7, #20
 8006248:	46bd      	mov	sp, r7
 800624a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800624e:	4770      	bx	lr
 8006250:	00030d40 	.word	0x00030d40

08006254 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006254:	b480      	push	{r7}
 8006256:	b085      	sub	sp, #20
 8006258:	af00      	add	r7, sp, #0
 800625a:	6078      	str	r0, [r7, #4]
 800625c:	460b      	mov	r3, r1
 800625e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800626a:	681a      	ldr	r2, [r3, #0]
 800626c:	78fb      	ldrb	r3, [r7, #3]
 800626e:	68f9      	ldr	r1, [r7, #12]
 8006270:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006274:	4313      	orrs	r3, r2
 8006276:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006278:	2300      	movs	r3, #0
}
 800627a:	4618      	mov	r0, r3
 800627c:	3714      	adds	r7, #20
 800627e:	46bd      	mov	sp, r7
 8006280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006284:	4770      	bx	lr

08006286 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8006286:	b480      	push	{r7}
 8006288:	b087      	sub	sp, #28
 800628a:	af00      	add	r7, sp, #0
 800628c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8006292:	693b      	ldr	r3, [r7, #16]
 8006294:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006298:	689b      	ldr	r3, [r3, #8]
 800629a:	f003 0306 	and.w	r3, r3, #6
 800629e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d102      	bne.n	80062ac <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80062a6:	2300      	movs	r3, #0
 80062a8:	75fb      	strb	r3, [r7, #23]
 80062aa:	e00a      	b.n	80062c2 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	2b02      	cmp	r3, #2
 80062b0:	d002      	beq.n	80062b8 <USB_GetDevSpeed+0x32>
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	2b06      	cmp	r3, #6
 80062b6:	d102      	bne.n	80062be <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80062b8:	2302      	movs	r3, #2
 80062ba:	75fb      	strb	r3, [r7, #23]
 80062bc:	e001      	b.n	80062c2 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80062be:	230f      	movs	r3, #15
 80062c0:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80062c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80062c4:	4618      	mov	r0, r3
 80062c6:	371c      	adds	r7, #28
 80062c8:	46bd      	mov	sp, r7
 80062ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ce:	4770      	bx	lr

080062d0 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80062d0:	b480      	push	{r7}
 80062d2:	b085      	sub	sp, #20
 80062d4:	af00      	add	r7, sp, #0
 80062d6:	6078      	str	r0, [r7, #4]
 80062d8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80062de:	683b      	ldr	r3, [r7, #0]
 80062e0:	781b      	ldrb	r3, [r3, #0]
 80062e2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80062e4:	683b      	ldr	r3, [r7, #0]
 80062e6:	785b      	ldrb	r3, [r3, #1]
 80062e8:	2b01      	cmp	r3, #1
 80062ea:	d13a      	bne.n	8006362 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80062f2:	69da      	ldr	r2, [r3, #28]
 80062f4:	683b      	ldr	r3, [r7, #0]
 80062f6:	781b      	ldrb	r3, [r3, #0]
 80062f8:	f003 030f 	and.w	r3, r3, #15
 80062fc:	2101      	movs	r1, #1
 80062fe:	fa01 f303 	lsl.w	r3, r1, r3
 8006302:	b29b      	uxth	r3, r3
 8006304:	68f9      	ldr	r1, [r7, #12]
 8006306:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800630a:	4313      	orrs	r3, r2
 800630c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800630e:	68bb      	ldr	r3, [r7, #8]
 8006310:	015a      	lsls	r2, r3, #5
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	4413      	add	r3, r2
 8006316:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006320:	2b00      	cmp	r3, #0
 8006322:	d155      	bne.n	80063d0 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006324:	68bb      	ldr	r3, [r7, #8]
 8006326:	015a      	lsls	r2, r3, #5
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	4413      	add	r3, r2
 800632c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006330:	681a      	ldr	r2, [r3, #0]
 8006332:	683b      	ldr	r3, [r7, #0]
 8006334:	689b      	ldr	r3, [r3, #8]
 8006336:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800633a:	683b      	ldr	r3, [r7, #0]
 800633c:	78db      	ldrb	r3, [r3, #3]
 800633e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006340:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006342:	68bb      	ldr	r3, [r7, #8]
 8006344:	059b      	lsls	r3, r3, #22
 8006346:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006348:	4313      	orrs	r3, r2
 800634a:	68ba      	ldr	r2, [r7, #8]
 800634c:	0151      	lsls	r1, r2, #5
 800634e:	68fa      	ldr	r2, [r7, #12]
 8006350:	440a      	add	r2, r1
 8006352:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006356:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800635a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800635e:	6013      	str	r3, [r2, #0]
 8006360:	e036      	b.n	80063d0 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006368:	69da      	ldr	r2, [r3, #28]
 800636a:	683b      	ldr	r3, [r7, #0]
 800636c:	781b      	ldrb	r3, [r3, #0]
 800636e:	f003 030f 	and.w	r3, r3, #15
 8006372:	2101      	movs	r1, #1
 8006374:	fa01 f303 	lsl.w	r3, r1, r3
 8006378:	041b      	lsls	r3, r3, #16
 800637a:	68f9      	ldr	r1, [r7, #12]
 800637c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006380:	4313      	orrs	r3, r2
 8006382:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8006384:	68bb      	ldr	r3, [r7, #8]
 8006386:	015a      	lsls	r2, r3, #5
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	4413      	add	r3, r2
 800638c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006396:	2b00      	cmp	r3, #0
 8006398:	d11a      	bne.n	80063d0 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800639a:	68bb      	ldr	r3, [r7, #8]
 800639c:	015a      	lsls	r2, r3, #5
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	4413      	add	r3, r2
 80063a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063a6:	681a      	ldr	r2, [r3, #0]
 80063a8:	683b      	ldr	r3, [r7, #0]
 80063aa:	689b      	ldr	r3, [r3, #8]
 80063ac:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80063b0:	683b      	ldr	r3, [r7, #0]
 80063b2:	78db      	ldrb	r3, [r3, #3]
 80063b4:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80063b6:	430b      	orrs	r3, r1
 80063b8:	4313      	orrs	r3, r2
 80063ba:	68ba      	ldr	r2, [r7, #8]
 80063bc:	0151      	lsls	r1, r2, #5
 80063be:	68fa      	ldr	r2, [r7, #12]
 80063c0:	440a      	add	r2, r1
 80063c2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80063c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80063ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80063ce:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80063d0:	2300      	movs	r3, #0
}
 80063d2:	4618      	mov	r0, r3
 80063d4:	3714      	adds	r7, #20
 80063d6:	46bd      	mov	sp, r7
 80063d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063dc:	4770      	bx	lr
	...

080063e0 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80063e0:	b480      	push	{r7}
 80063e2:	b085      	sub	sp, #20
 80063e4:	af00      	add	r7, sp, #0
 80063e6:	6078      	str	r0, [r7, #4]
 80063e8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80063ee:	683b      	ldr	r3, [r7, #0]
 80063f0:	781b      	ldrb	r3, [r3, #0]
 80063f2:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80063f4:	683b      	ldr	r3, [r7, #0]
 80063f6:	785b      	ldrb	r3, [r3, #1]
 80063f8:	2b01      	cmp	r3, #1
 80063fa:	d161      	bne.n	80064c0 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80063fc:	68bb      	ldr	r3, [r7, #8]
 80063fe:	015a      	lsls	r2, r3, #5
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	4413      	add	r3, r2
 8006404:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800640e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006412:	d11f      	bne.n	8006454 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8006414:	68bb      	ldr	r3, [r7, #8]
 8006416:	015a      	lsls	r2, r3, #5
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	4413      	add	r3, r2
 800641c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	68ba      	ldr	r2, [r7, #8]
 8006424:	0151      	lsls	r1, r2, #5
 8006426:	68fa      	ldr	r2, [r7, #12]
 8006428:	440a      	add	r2, r1
 800642a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800642e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006432:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8006434:	68bb      	ldr	r3, [r7, #8]
 8006436:	015a      	lsls	r2, r3, #5
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	4413      	add	r3, r2
 800643c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	68ba      	ldr	r2, [r7, #8]
 8006444:	0151      	lsls	r1, r2, #5
 8006446:	68fa      	ldr	r2, [r7, #12]
 8006448:	440a      	add	r2, r1
 800644a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800644e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006452:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800645a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800645c:	683b      	ldr	r3, [r7, #0]
 800645e:	781b      	ldrb	r3, [r3, #0]
 8006460:	f003 030f 	and.w	r3, r3, #15
 8006464:	2101      	movs	r1, #1
 8006466:	fa01 f303 	lsl.w	r3, r1, r3
 800646a:	b29b      	uxth	r3, r3
 800646c:	43db      	mvns	r3, r3
 800646e:	68f9      	ldr	r1, [r7, #12]
 8006470:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006474:	4013      	ands	r3, r2
 8006476:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800647e:	69da      	ldr	r2, [r3, #28]
 8006480:	683b      	ldr	r3, [r7, #0]
 8006482:	781b      	ldrb	r3, [r3, #0]
 8006484:	f003 030f 	and.w	r3, r3, #15
 8006488:	2101      	movs	r1, #1
 800648a:	fa01 f303 	lsl.w	r3, r1, r3
 800648e:	b29b      	uxth	r3, r3
 8006490:	43db      	mvns	r3, r3
 8006492:	68f9      	ldr	r1, [r7, #12]
 8006494:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006498:	4013      	ands	r3, r2
 800649a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800649c:	68bb      	ldr	r3, [r7, #8]
 800649e:	015a      	lsls	r2, r3, #5
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	4413      	add	r3, r2
 80064a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80064a8:	681a      	ldr	r2, [r3, #0]
 80064aa:	68bb      	ldr	r3, [r7, #8]
 80064ac:	0159      	lsls	r1, r3, #5
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	440b      	add	r3, r1
 80064b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80064b6:	4619      	mov	r1, r3
 80064b8:	4b35      	ldr	r3, [pc, #212]	; (8006590 <USB_DeactivateEndpoint+0x1b0>)
 80064ba:	4013      	ands	r3, r2
 80064bc:	600b      	str	r3, [r1, #0]
 80064be:	e060      	b.n	8006582 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80064c0:	68bb      	ldr	r3, [r7, #8]
 80064c2:	015a      	lsls	r2, r3, #5
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	4413      	add	r3, r2
 80064c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80064d2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80064d6:	d11f      	bne.n	8006518 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80064d8:	68bb      	ldr	r3, [r7, #8]
 80064da:	015a      	lsls	r2, r3, #5
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	4413      	add	r3, r2
 80064e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	68ba      	ldr	r2, [r7, #8]
 80064e8:	0151      	lsls	r1, r2, #5
 80064ea:	68fa      	ldr	r2, [r7, #12]
 80064ec:	440a      	add	r2, r1
 80064ee:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80064f2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80064f6:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80064f8:	68bb      	ldr	r3, [r7, #8]
 80064fa:	015a      	lsls	r2, r3, #5
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	4413      	add	r3, r2
 8006500:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	68ba      	ldr	r2, [r7, #8]
 8006508:	0151      	lsls	r1, r2, #5
 800650a:	68fa      	ldr	r2, [r7, #12]
 800650c:	440a      	add	r2, r1
 800650e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006512:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006516:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800651e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006520:	683b      	ldr	r3, [r7, #0]
 8006522:	781b      	ldrb	r3, [r3, #0]
 8006524:	f003 030f 	and.w	r3, r3, #15
 8006528:	2101      	movs	r1, #1
 800652a:	fa01 f303 	lsl.w	r3, r1, r3
 800652e:	041b      	lsls	r3, r3, #16
 8006530:	43db      	mvns	r3, r3
 8006532:	68f9      	ldr	r1, [r7, #12]
 8006534:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006538:	4013      	ands	r3, r2
 800653a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006542:	69da      	ldr	r2, [r3, #28]
 8006544:	683b      	ldr	r3, [r7, #0]
 8006546:	781b      	ldrb	r3, [r3, #0]
 8006548:	f003 030f 	and.w	r3, r3, #15
 800654c:	2101      	movs	r1, #1
 800654e:	fa01 f303 	lsl.w	r3, r1, r3
 8006552:	041b      	lsls	r3, r3, #16
 8006554:	43db      	mvns	r3, r3
 8006556:	68f9      	ldr	r1, [r7, #12]
 8006558:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800655c:	4013      	ands	r3, r2
 800655e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8006560:	68bb      	ldr	r3, [r7, #8]
 8006562:	015a      	lsls	r2, r3, #5
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	4413      	add	r3, r2
 8006568:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800656c:	681a      	ldr	r2, [r3, #0]
 800656e:	68bb      	ldr	r3, [r7, #8]
 8006570:	0159      	lsls	r1, r3, #5
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	440b      	add	r3, r1
 8006576:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800657a:	4619      	mov	r1, r3
 800657c:	4b05      	ldr	r3, [pc, #20]	; (8006594 <USB_DeactivateEndpoint+0x1b4>)
 800657e:	4013      	ands	r3, r2
 8006580:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8006582:	2300      	movs	r3, #0
}
 8006584:	4618      	mov	r0, r3
 8006586:	3714      	adds	r7, #20
 8006588:	46bd      	mov	sp, r7
 800658a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800658e:	4770      	bx	lr
 8006590:	ec337800 	.word	0xec337800
 8006594:	eff37800 	.word	0xeff37800

08006598 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006598:	b580      	push	{r7, lr}
 800659a:	b08a      	sub	sp, #40	; 0x28
 800659c:	af02      	add	r7, sp, #8
 800659e:	60f8      	str	r0, [r7, #12]
 80065a0:	60b9      	str	r1, [r7, #8]
 80065a2:	4613      	mov	r3, r2
 80065a4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80065aa:	68bb      	ldr	r3, [r7, #8]
 80065ac:	781b      	ldrb	r3, [r3, #0]
 80065ae:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80065b0:	68bb      	ldr	r3, [r7, #8]
 80065b2:	785b      	ldrb	r3, [r3, #1]
 80065b4:	2b01      	cmp	r3, #1
 80065b6:	f040 815c 	bne.w	8006872 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80065ba:	68bb      	ldr	r3, [r7, #8]
 80065bc:	695b      	ldr	r3, [r3, #20]
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d132      	bne.n	8006628 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80065c2:	69bb      	ldr	r3, [r7, #24]
 80065c4:	015a      	lsls	r2, r3, #5
 80065c6:	69fb      	ldr	r3, [r7, #28]
 80065c8:	4413      	add	r3, r2
 80065ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80065ce:	691b      	ldr	r3, [r3, #16]
 80065d0:	69ba      	ldr	r2, [r7, #24]
 80065d2:	0151      	lsls	r1, r2, #5
 80065d4:	69fa      	ldr	r2, [r7, #28]
 80065d6:	440a      	add	r2, r1
 80065d8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80065dc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80065e0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80065e4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80065e6:	69bb      	ldr	r3, [r7, #24]
 80065e8:	015a      	lsls	r2, r3, #5
 80065ea:	69fb      	ldr	r3, [r7, #28]
 80065ec:	4413      	add	r3, r2
 80065ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80065f2:	691b      	ldr	r3, [r3, #16]
 80065f4:	69ba      	ldr	r2, [r7, #24]
 80065f6:	0151      	lsls	r1, r2, #5
 80065f8:	69fa      	ldr	r2, [r7, #28]
 80065fa:	440a      	add	r2, r1
 80065fc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006600:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006604:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006606:	69bb      	ldr	r3, [r7, #24]
 8006608:	015a      	lsls	r2, r3, #5
 800660a:	69fb      	ldr	r3, [r7, #28]
 800660c:	4413      	add	r3, r2
 800660e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006612:	691b      	ldr	r3, [r3, #16]
 8006614:	69ba      	ldr	r2, [r7, #24]
 8006616:	0151      	lsls	r1, r2, #5
 8006618:	69fa      	ldr	r2, [r7, #28]
 800661a:	440a      	add	r2, r1
 800661c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006620:	0cdb      	lsrs	r3, r3, #19
 8006622:	04db      	lsls	r3, r3, #19
 8006624:	6113      	str	r3, [r2, #16]
 8006626:	e074      	b.n	8006712 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006628:	69bb      	ldr	r3, [r7, #24]
 800662a:	015a      	lsls	r2, r3, #5
 800662c:	69fb      	ldr	r3, [r7, #28]
 800662e:	4413      	add	r3, r2
 8006630:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006634:	691b      	ldr	r3, [r3, #16]
 8006636:	69ba      	ldr	r2, [r7, #24]
 8006638:	0151      	lsls	r1, r2, #5
 800663a:	69fa      	ldr	r2, [r7, #28]
 800663c:	440a      	add	r2, r1
 800663e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006642:	0cdb      	lsrs	r3, r3, #19
 8006644:	04db      	lsls	r3, r3, #19
 8006646:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006648:	69bb      	ldr	r3, [r7, #24]
 800664a:	015a      	lsls	r2, r3, #5
 800664c:	69fb      	ldr	r3, [r7, #28]
 800664e:	4413      	add	r3, r2
 8006650:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006654:	691b      	ldr	r3, [r3, #16]
 8006656:	69ba      	ldr	r2, [r7, #24]
 8006658:	0151      	lsls	r1, r2, #5
 800665a:	69fa      	ldr	r2, [r7, #28]
 800665c:	440a      	add	r2, r1
 800665e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006662:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006666:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800666a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800666c:	69bb      	ldr	r3, [r7, #24]
 800666e:	015a      	lsls	r2, r3, #5
 8006670:	69fb      	ldr	r3, [r7, #28]
 8006672:	4413      	add	r3, r2
 8006674:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006678:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800667a:	68bb      	ldr	r3, [r7, #8]
 800667c:	6959      	ldr	r1, [r3, #20]
 800667e:	68bb      	ldr	r3, [r7, #8]
 8006680:	689b      	ldr	r3, [r3, #8]
 8006682:	440b      	add	r3, r1
 8006684:	1e59      	subs	r1, r3, #1
 8006686:	68bb      	ldr	r3, [r7, #8]
 8006688:	689b      	ldr	r3, [r3, #8]
 800668a:	fbb1 f3f3 	udiv	r3, r1, r3
 800668e:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8006690:	4b9d      	ldr	r3, [pc, #628]	; (8006908 <USB_EPStartXfer+0x370>)
 8006692:	400b      	ands	r3, r1
 8006694:	69b9      	ldr	r1, [r7, #24]
 8006696:	0148      	lsls	r0, r1, #5
 8006698:	69f9      	ldr	r1, [r7, #28]
 800669a:	4401      	add	r1, r0
 800669c:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80066a0:	4313      	orrs	r3, r2
 80066a2:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80066a4:	69bb      	ldr	r3, [r7, #24]
 80066a6:	015a      	lsls	r2, r3, #5
 80066a8:	69fb      	ldr	r3, [r7, #28]
 80066aa:	4413      	add	r3, r2
 80066ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066b0:	691a      	ldr	r2, [r3, #16]
 80066b2:	68bb      	ldr	r3, [r7, #8]
 80066b4:	695b      	ldr	r3, [r3, #20]
 80066b6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80066ba:	69b9      	ldr	r1, [r7, #24]
 80066bc:	0148      	lsls	r0, r1, #5
 80066be:	69f9      	ldr	r1, [r7, #28]
 80066c0:	4401      	add	r1, r0
 80066c2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80066c6:	4313      	orrs	r3, r2
 80066c8:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80066ca:	68bb      	ldr	r3, [r7, #8]
 80066cc:	78db      	ldrb	r3, [r3, #3]
 80066ce:	2b01      	cmp	r3, #1
 80066d0:	d11f      	bne.n	8006712 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80066d2:	69bb      	ldr	r3, [r7, #24]
 80066d4:	015a      	lsls	r2, r3, #5
 80066d6:	69fb      	ldr	r3, [r7, #28]
 80066d8:	4413      	add	r3, r2
 80066da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066de:	691b      	ldr	r3, [r3, #16]
 80066e0:	69ba      	ldr	r2, [r7, #24]
 80066e2:	0151      	lsls	r1, r2, #5
 80066e4:	69fa      	ldr	r2, [r7, #28]
 80066e6:	440a      	add	r2, r1
 80066e8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80066ec:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80066f0:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80066f2:	69bb      	ldr	r3, [r7, #24]
 80066f4:	015a      	lsls	r2, r3, #5
 80066f6:	69fb      	ldr	r3, [r7, #28]
 80066f8:	4413      	add	r3, r2
 80066fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066fe:	691b      	ldr	r3, [r3, #16]
 8006700:	69ba      	ldr	r2, [r7, #24]
 8006702:	0151      	lsls	r1, r2, #5
 8006704:	69fa      	ldr	r2, [r7, #28]
 8006706:	440a      	add	r2, r1
 8006708:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800670c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006710:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8006712:	79fb      	ldrb	r3, [r7, #7]
 8006714:	2b01      	cmp	r3, #1
 8006716:	d14b      	bne.n	80067b0 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006718:	68bb      	ldr	r3, [r7, #8]
 800671a:	691b      	ldr	r3, [r3, #16]
 800671c:	2b00      	cmp	r3, #0
 800671e:	d009      	beq.n	8006734 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006720:	69bb      	ldr	r3, [r7, #24]
 8006722:	015a      	lsls	r2, r3, #5
 8006724:	69fb      	ldr	r3, [r7, #28]
 8006726:	4413      	add	r3, r2
 8006728:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800672c:	461a      	mov	r2, r3
 800672e:	68bb      	ldr	r3, [r7, #8]
 8006730:	691b      	ldr	r3, [r3, #16]
 8006732:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8006734:	68bb      	ldr	r3, [r7, #8]
 8006736:	78db      	ldrb	r3, [r3, #3]
 8006738:	2b01      	cmp	r3, #1
 800673a:	d128      	bne.n	800678e <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800673c:	69fb      	ldr	r3, [r7, #28]
 800673e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006742:	689b      	ldr	r3, [r3, #8]
 8006744:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006748:	2b00      	cmp	r3, #0
 800674a:	d110      	bne.n	800676e <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800674c:	69bb      	ldr	r3, [r7, #24]
 800674e:	015a      	lsls	r2, r3, #5
 8006750:	69fb      	ldr	r3, [r7, #28]
 8006752:	4413      	add	r3, r2
 8006754:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	69ba      	ldr	r2, [r7, #24]
 800675c:	0151      	lsls	r1, r2, #5
 800675e:	69fa      	ldr	r2, [r7, #28]
 8006760:	440a      	add	r2, r1
 8006762:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006766:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800676a:	6013      	str	r3, [r2, #0]
 800676c:	e00f      	b.n	800678e <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800676e:	69bb      	ldr	r3, [r7, #24]
 8006770:	015a      	lsls	r2, r3, #5
 8006772:	69fb      	ldr	r3, [r7, #28]
 8006774:	4413      	add	r3, r2
 8006776:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	69ba      	ldr	r2, [r7, #24]
 800677e:	0151      	lsls	r1, r2, #5
 8006780:	69fa      	ldr	r2, [r7, #28]
 8006782:	440a      	add	r2, r1
 8006784:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006788:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800678c:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800678e:	69bb      	ldr	r3, [r7, #24]
 8006790:	015a      	lsls	r2, r3, #5
 8006792:	69fb      	ldr	r3, [r7, #28]
 8006794:	4413      	add	r3, r2
 8006796:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	69ba      	ldr	r2, [r7, #24]
 800679e:	0151      	lsls	r1, r2, #5
 80067a0:	69fa      	ldr	r2, [r7, #28]
 80067a2:	440a      	add	r2, r1
 80067a4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80067a8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80067ac:	6013      	str	r3, [r2, #0]
 80067ae:	e12f      	b.n	8006a10 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80067b0:	69bb      	ldr	r3, [r7, #24]
 80067b2:	015a      	lsls	r2, r3, #5
 80067b4:	69fb      	ldr	r3, [r7, #28]
 80067b6:	4413      	add	r3, r2
 80067b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	69ba      	ldr	r2, [r7, #24]
 80067c0:	0151      	lsls	r1, r2, #5
 80067c2:	69fa      	ldr	r2, [r7, #28]
 80067c4:	440a      	add	r2, r1
 80067c6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80067ca:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80067ce:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80067d0:	68bb      	ldr	r3, [r7, #8]
 80067d2:	78db      	ldrb	r3, [r3, #3]
 80067d4:	2b01      	cmp	r3, #1
 80067d6:	d015      	beq.n	8006804 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80067d8:	68bb      	ldr	r3, [r7, #8]
 80067da:	695b      	ldr	r3, [r3, #20]
 80067dc:	2b00      	cmp	r3, #0
 80067de:	f000 8117 	beq.w	8006a10 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80067e2:	69fb      	ldr	r3, [r7, #28]
 80067e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80067e8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80067ea:	68bb      	ldr	r3, [r7, #8]
 80067ec:	781b      	ldrb	r3, [r3, #0]
 80067ee:	f003 030f 	and.w	r3, r3, #15
 80067f2:	2101      	movs	r1, #1
 80067f4:	fa01 f303 	lsl.w	r3, r1, r3
 80067f8:	69f9      	ldr	r1, [r7, #28]
 80067fa:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80067fe:	4313      	orrs	r3, r2
 8006800:	634b      	str	r3, [r1, #52]	; 0x34
 8006802:	e105      	b.n	8006a10 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006804:	69fb      	ldr	r3, [r7, #28]
 8006806:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800680a:	689b      	ldr	r3, [r3, #8]
 800680c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006810:	2b00      	cmp	r3, #0
 8006812:	d110      	bne.n	8006836 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006814:	69bb      	ldr	r3, [r7, #24]
 8006816:	015a      	lsls	r2, r3, #5
 8006818:	69fb      	ldr	r3, [r7, #28]
 800681a:	4413      	add	r3, r2
 800681c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	69ba      	ldr	r2, [r7, #24]
 8006824:	0151      	lsls	r1, r2, #5
 8006826:	69fa      	ldr	r2, [r7, #28]
 8006828:	440a      	add	r2, r1
 800682a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800682e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006832:	6013      	str	r3, [r2, #0]
 8006834:	e00f      	b.n	8006856 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006836:	69bb      	ldr	r3, [r7, #24]
 8006838:	015a      	lsls	r2, r3, #5
 800683a:	69fb      	ldr	r3, [r7, #28]
 800683c:	4413      	add	r3, r2
 800683e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	69ba      	ldr	r2, [r7, #24]
 8006846:	0151      	lsls	r1, r2, #5
 8006848:	69fa      	ldr	r2, [r7, #28]
 800684a:	440a      	add	r2, r1
 800684c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006850:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006854:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8006856:	68bb      	ldr	r3, [r7, #8]
 8006858:	68d9      	ldr	r1, [r3, #12]
 800685a:	68bb      	ldr	r3, [r7, #8]
 800685c:	781a      	ldrb	r2, [r3, #0]
 800685e:	68bb      	ldr	r3, [r7, #8]
 8006860:	695b      	ldr	r3, [r3, #20]
 8006862:	b298      	uxth	r0, r3
 8006864:	79fb      	ldrb	r3, [r7, #7]
 8006866:	9300      	str	r3, [sp, #0]
 8006868:	4603      	mov	r3, r0
 800686a:	68f8      	ldr	r0, [r7, #12]
 800686c:	f000 fa2b 	bl	8006cc6 <USB_WritePacket>
 8006870:	e0ce      	b.n	8006a10 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8006872:	69bb      	ldr	r3, [r7, #24]
 8006874:	015a      	lsls	r2, r3, #5
 8006876:	69fb      	ldr	r3, [r7, #28]
 8006878:	4413      	add	r3, r2
 800687a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800687e:	691b      	ldr	r3, [r3, #16]
 8006880:	69ba      	ldr	r2, [r7, #24]
 8006882:	0151      	lsls	r1, r2, #5
 8006884:	69fa      	ldr	r2, [r7, #28]
 8006886:	440a      	add	r2, r1
 8006888:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800688c:	0cdb      	lsrs	r3, r3, #19
 800688e:	04db      	lsls	r3, r3, #19
 8006890:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8006892:	69bb      	ldr	r3, [r7, #24]
 8006894:	015a      	lsls	r2, r3, #5
 8006896:	69fb      	ldr	r3, [r7, #28]
 8006898:	4413      	add	r3, r2
 800689a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800689e:	691b      	ldr	r3, [r3, #16]
 80068a0:	69ba      	ldr	r2, [r7, #24]
 80068a2:	0151      	lsls	r1, r2, #5
 80068a4:	69fa      	ldr	r2, [r7, #28]
 80068a6:	440a      	add	r2, r1
 80068a8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80068ac:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80068b0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80068b4:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 80068b6:	68bb      	ldr	r3, [r7, #8]
 80068b8:	695b      	ldr	r3, [r3, #20]
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d126      	bne.n	800690c <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80068be:	69bb      	ldr	r3, [r7, #24]
 80068c0:	015a      	lsls	r2, r3, #5
 80068c2:	69fb      	ldr	r3, [r7, #28]
 80068c4:	4413      	add	r3, r2
 80068c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80068ca:	691a      	ldr	r2, [r3, #16]
 80068cc:	68bb      	ldr	r3, [r7, #8]
 80068ce:	689b      	ldr	r3, [r3, #8]
 80068d0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80068d4:	69b9      	ldr	r1, [r7, #24]
 80068d6:	0148      	lsls	r0, r1, #5
 80068d8:	69f9      	ldr	r1, [r7, #28]
 80068da:	4401      	add	r1, r0
 80068dc:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80068e0:	4313      	orrs	r3, r2
 80068e2:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80068e4:	69bb      	ldr	r3, [r7, #24]
 80068e6:	015a      	lsls	r2, r3, #5
 80068e8:	69fb      	ldr	r3, [r7, #28]
 80068ea:	4413      	add	r3, r2
 80068ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80068f0:	691b      	ldr	r3, [r3, #16]
 80068f2:	69ba      	ldr	r2, [r7, #24]
 80068f4:	0151      	lsls	r1, r2, #5
 80068f6:	69fa      	ldr	r2, [r7, #28]
 80068f8:	440a      	add	r2, r1
 80068fa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80068fe:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006902:	6113      	str	r3, [r2, #16]
 8006904:	e036      	b.n	8006974 <USB_EPStartXfer+0x3dc>
 8006906:	bf00      	nop
 8006908:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800690c:	68bb      	ldr	r3, [r7, #8]
 800690e:	695a      	ldr	r2, [r3, #20]
 8006910:	68bb      	ldr	r3, [r7, #8]
 8006912:	689b      	ldr	r3, [r3, #8]
 8006914:	4413      	add	r3, r2
 8006916:	1e5a      	subs	r2, r3, #1
 8006918:	68bb      	ldr	r3, [r7, #8]
 800691a:	689b      	ldr	r3, [r3, #8]
 800691c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006920:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8006922:	69bb      	ldr	r3, [r7, #24]
 8006924:	015a      	lsls	r2, r3, #5
 8006926:	69fb      	ldr	r3, [r7, #28]
 8006928:	4413      	add	r3, r2
 800692a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800692e:	691a      	ldr	r2, [r3, #16]
 8006930:	8afb      	ldrh	r3, [r7, #22]
 8006932:	04d9      	lsls	r1, r3, #19
 8006934:	4b39      	ldr	r3, [pc, #228]	; (8006a1c <USB_EPStartXfer+0x484>)
 8006936:	400b      	ands	r3, r1
 8006938:	69b9      	ldr	r1, [r7, #24]
 800693a:	0148      	lsls	r0, r1, #5
 800693c:	69f9      	ldr	r1, [r7, #28]
 800693e:	4401      	add	r1, r0
 8006940:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006944:	4313      	orrs	r3, r2
 8006946:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8006948:	69bb      	ldr	r3, [r7, #24]
 800694a:	015a      	lsls	r2, r3, #5
 800694c:	69fb      	ldr	r3, [r7, #28]
 800694e:	4413      	add	r3, r2
 8006950:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006954:	691a      	ldr	r2, [r3, #16]
 8006956:	68bb      	ldr	r3, [r7, #8]
 8006958:	689b      	ldr	r3, [r3, #8]
 800695a:	8af9      	ldrh	r1, [r7, #22]
 800695c:	fb01 f303 	mul.w	r3, r1, r3
 8006960:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006964:	69b9      	ldr	r1, [r7, #24]
 8006966:	0148      	lsls	r0, r1, #5
 8006968:	69f9      	ldr	r1, [r7, #28]
 800696a:	4401      	add	r1, r0
 800696c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006970:	4313      	orrs	r3, r2
 8006972:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8006974:	79fb      	ldrb	r3, [r7, #7]
 8006976:	2b01      	cmp	r3, #1
 8006978:	d10d      	bne.n	8006996 <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800697a:	68bb      	ldr	r3, [r7, #8]
 800697c:	68db      	ldr	r3, [r3, #12]
 800697e:	2b00      	cmp	r3, #0
 8006980:	d009      	beq.n	8006996 <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8006982:	68bb      	ldr	r3, [r7, #8]
 8006984:	68d9      	ldr	r1, [r3, #12]
 8006986:	69bb      	ldr	r3, [r7, #24]
 8006988:	015a      	lsls	r2, r3, #5
 800698a:	69fb      	ldr	r3, [r7, #28]
 800698c:	4413      	add	r3, r2
 800698e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006992:	460a      	mov	r2, r1
 8006994:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8006996:	68bb      	ldr	r3, [r7, #8]
 8006998:	78db      	ldrb	r3, [r3, #3]
 800699a:	2b01      	cmp	r3, #1
 800699c:	d128      	bne.n	80069f0 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800699e:	69fb      	ldr	r3, [r7, #28]
 80069a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80069a4:	689b      	ldr	r3, [r3, #8]
 80069a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d110      	bne.n	80069d0 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80069ae:	69bb      	ldr	r3, [r7, #24]
 80069b0:	015a      	lsls	r2, r3, #5
 80069b2:	69fb      	ldr	r3, [r7, #28]
 80069b4:	4413      	add	r3, r2
 80069b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	69ba      	ldr	r2, [r7, #24]
 80069be:	0151      	lsls	r1, r2, #5
 80069c0:	69fa      	ldr	r2, [r7, #28]
 80069c2:	440a      	add	r2, r1
 80069c4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80069c8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80069cc:	6013      	str	r3, [r2, #0]
 80069ce:	e00f      	b.n	80069f0 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80069d0:	69bb      	ldr	r3, [r7, #24]
 80069d2:	015a      	lsls	r2, r3, #5
 80069d4:	69fb      	ldr	r3, [r7, #28]
 80069d6:	4413      	add	r3, r2
 80069d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	69ba      	ldr	r2, [r7, #24]
 80069e0:	0151      	lsls	r1, r2, #5
 80069e2:	69fa      	ldr	r2, [r7, #28]
 80069e4:	440a      	add	r2, r1
 80069e6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80069ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80069ee:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80069f0:	69bb      	ldr	r3, [r7, #24]
 80069f2:	015a      	lsls	r2, r3, #5
 80069f4:	69fb      	ldr	r3, [r7, #28]
 80069f6:	4413      	add	r3, r2
 80069f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	69ba      	ldr	r2, [r7, #24]
 8006a00:	0151      	lsls	r1, r2, #5
 8006a02:	69fa      	ldr	r2, [r7, #28]
 8006a04:	440a      	add	r2, r1
 8006a06:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006a0a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006a0e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006a10:	2300      	movs	r3, #0
}
 8006a12:	4618      	mov	r0, r3
 8006a14:	3720      	adds	r7, #32
 8006a16:	46bd      	mov	sp, r7
 8006a18:	bd80      	pop	{r7, pc}
 8006a1a:	bf00      	nop
 8006a1c:	1ff80000 	.word	0x1ff80000

08006a20 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006a20:	b480      	push	{r7}
 8006a22:	b087      	sub	sp, #28
 8006a24:	af00      	add	r7, sp, #0
 8006a26:	60f8      	str	r0, [r7, #12]
 8006a28:	60b9      	str	r1, [r7, #8]
 8006a2a:	4613      	mov	r3, r2
 8006a2c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8006a32:	68bb      	ldr	r3, [r7, #8]
 8006a34:	781b      	ldrb	r3, [r3, #0]
 8006a36:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006a38:	68bb      	ldr	r3, [r7, #8]
 8006a3a:	785b      	ldrb	r3, [r3, #1]
 8006a3c:	2b01      	cmp	r3, #1
 8006a3e:	f040 80cd 	bne.w	8006bdc <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8006a42:	68bb      	ldr	r3, [r7, #8]
 8006a44:	695b      	ldr	r3, [r3, #20]
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d132      	bne.n	8006ab0 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006a4a:	693b      	ldr	r3, [r7, #16]
 8006a4c:	015a      	lsls	r2, r3, #5
 8006a4e:	697b      	ldr	r3, [r7, #20]
 8006a50:	4413      	add	r3, r2
 8006a52:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a56:	691b      	ldr	r3, [r3, #16]
 8006a58:	693a      	ldr	r2, [r7, #16]
 8006a5a:	0151      	lsls	r1, r2, #5
 8006a5c:	697a      	ldr	r2, [r7, #20]
 8006a5e:	440a      	add	r2, r1
 8006a60:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006a64:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006a68:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006a6c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006a6e:	693b      	ldr	r3, [r7, #16]
 8006a70:	015a      	lsls	r2, r3, #5
 8006a72:	697b      	ldr	r3, [r7, #20]
 8006a74:	4413      	add	r3, r2
 8006a76:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a7a:	691b      	ldr	r3, [r3, #16]
 8006a7c:	693a      	ldr	r2, [r7, #16]
 8006a7e:	0151      	lsls	r1, r2, #5
 8006a80:	697a      	ldr	r2, [r7, #20]
 8006a82:	440a      	add	r2, r1
 8006a84:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006a88:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006a8c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006a8e:	693b      	ldr	r3, [r7, #16]
 8006a90:	015a      	lsls	r2, r3, #5
 8006a92:	697b      	ldr	r3, [r7, #20]
 8006a94:	4413      	add	r3, r2
 8006a96:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a9a:	691b      	ldr	r3, [r3, #16]
 8006a9c:	693a      	ldr	r2, [r7, #16]
 8006a9e:	0151      	lsls	r1, r2, #5
 8006aa0:	697a      	ldr	r2, [r7, #20]
 8006aa2:	440a      	add	r2, r1
 8006aa4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006aa8:	0cdb      	lsrs	r3, r3, #19
 8006aaa:	04db      	lsls	r3, r3, #19
 8006aac:	6113      	str	r3, [r2, #16]
 8006aae:	e04e      	b.n	8006b4e <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006ab0:	693b      	ldr	r3, [r7, #16]
 8006ab2:	015a      	lsls	r2, r3, #5
 8006ab4:	697b      	ldr	r3, [r7, #20]
 8006ab6:	4413      	add	r3, r2
 8006ab8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006abc:	691b      	ldr	r3, [r3, #16]
 8006abe:	693a      	ldr	r2, [r7, #16]
 8006ac0:	0151      	lsls	r1, r2, #5
 8006ac2:	697a      	ldr	r2, [r7, #20]
 8006ac4:	440a      	add	r2, r1
 8006ac6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006aca:	0cdb      	lsrs	r3, r3, #19
 8006acc:	04db      	lsls	r3, r3, #19
 8006ace:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006ad0:	693b      	ldr	r3, [r7, #16]
 8006ad2:	015a      	lsls	r2, r3, #5
 8006ad4:	697b      	ldr	r3, [r7, #20]
 8006ad6:	4413      	add	r3, r2
 8006ad8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006adc:	691b      	ldr	r3, [r3, #16]
 8006ade:	693a      	ldr	r2, [r7, #16]
 8006ae0:	0151      	lsls	r1, r2, #5
 8006ae2:	697a      	ldr	r2, [r7, #20]
 8006ae4:	440a      	add	r2, r1
 8006ae6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006aea:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006aee:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006af2:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8006af4:	68bb      	ldr	r3, [r7, #8]
 8006af6:	695a      	ldr	r2, [r3, #20]
 8006af8:	68bb      	ldr	r3, [r7, #8]
 8006afa:	689b      	ldr	r3, [r3, #8]
 8006afc:	429a      	cmp	r2, r3
 8006afe:	d903      	bls.n	8006b08 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8006b00:	68bb      	ldr	r3, [r7, #8]
 8006b02:	689a      	ldr	r2, [r3, #8]
 8006b04:	68bb      	ldr	r3, [r7, #8]
 8006b06:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006b08:	693b      	ldr	r3, [r7, #16]
 8006b0a:	015a      	lsls	r2, r3, #5
 8006b0c:	697b      	ldr	r3, [r7, #20]
 8006b0e:	4413      	add	r3, r2
 8006b10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b14:	691b      	ldr	r3, [r3, #16]
 8006b16:	693a      	ldr	r2, [r7, #16]
 8006b18:	0151      	lsls	r1, r2, #5
 8006b1a:	697a      	ldr	r2, [r7, #20]
 8006b1c:	440a      	add	r2, r1
 8006b1e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006b22:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006b26:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006b28:	693b      	ldr	r3, [r7, #16]
 8006b2a:	015a      	lsls	r2, r3, #5
 8006b2c:	697b      	ldr	r3, [r7, #20]
 8006b2e:	4413      	add	r3, r2
 8006b30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b34:	691a      	ldr	r2, [r3, #16]
 8006b36:	68bb      	ldr	r3, [r7, #8]
 8006b38:	695b      	ldr	r3, [r3, #20]
 8006b3a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006b3e:	6939      	ldr	r1, [r7, #16]
 8006b40:	0148      	lsls	r0, r1, #5
 8006b42:	6979      	ldr	r1, [r7, #20]
 8006b44:	4401      	add	r1, r0
 8006b46:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006b4a:	4313      	orrs	r3, r2
 8006b4c:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8006b4e:	79fb      	ldrb	r3, [r7, #7]
 8006b50:	2b01      	cmp	r3, #1
 8006b52:	d11e      	bne.n	8006b92 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006b54:	68bb      	ldr	r3, [r7, #8]
 8006b56:	691b      	ldr	r3, [r3, #16]
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d009      	beq.n	8006b70 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006b5c:	693b      	ldr	r3, [r7, #16]
 8006b5e:	015a      	lsls	r2, r3, #5
 8006b60:	697b      	ldr	r3, [r7, #20]
 8006b62:	4413      	add	r3, r2
 8006b64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b68:	461a      	mov	r2, r3
 8006b6a:	68bb      	ldr	r3, [r7, #8]
 8006b6c:	691b      	ldr	r3, [r3, #16]
 8006b6e:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006b70:	693b      	ldr	r3, [r7, #16]
 8006b72:	015a      	lsls	r2, r3, #5
 8006b74:	697b      	ldr	r3, [r7, #20]
 8006b76:	4413      	add	r3, r2
 8006b78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	693a      	ldr	r2, [r7, #16]
 8006b80:	0151      	lsls	r1, r2, #5
 8006b82:	697a      	ldr	r2, [r7, #20]
 8006b84:	440a      	add	r2, r1
 8006b86:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006b8a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006b8e:	6013      	str	r3, [r2, #0]
 8006b90:	e092      	b.n	8006cb8 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006b92:	693b      	ldr	r3, [r7, #16]
 8006b94:	015a      	lsls	r2, r3, #5
 8006b96:	697b      	ldr	r3, [r7, #20]
 8006b98:	4413      	add	r3, r2
 8006b9a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	693a      	ldr	r2, [r7, #16]
 8006ba2:	0151      	lsls	r1, r2, #5
 8006ba4:	697a      	ldr	r2, [r7, #20]
 8006ba6:	440a      	add	r2, r1
 8006ba8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006bac:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006bb0:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8006bb2:	68bb      	ldr	r3, [r7, #8]
 8006bb4:	695b      	ldr	r3, [r3, #20]
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d07e      	beq.n	8006cb8 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8006bba:	697b      	ldr	r3, [r7, #20]
 8006bbc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006bc0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006bc2:	68bb      	ldr	r3, [r7, #8]
 8006bc4:	781b      	ldrb	r3, [r3, #0]
 8006bc6:	f003 030f 	and.w	r3, r3, #15
 8006bca:	2101      	movs	r1, #1
 8006bcc:	fa01 f303 	lsl.w	r3, r1, r3
 8006bd0:	6979      	ldr	r1, [r7, #20]
 8006bd2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006bd6:	4313      	orrs	r3, r2
 8006bd8:	634b      	str	r3, [r1, #52]	; 0x34
 8006bda:	e06d      	b.n	8006cb8 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8006bdc:	693b      	ldr	r3, [r7, #16]
 8006bde:	015a      	lsls	r2, r3, #5
 8006be0:	697b      	ldr	r3, [r7, #20]
 8006be2:	4413      	add	r3, r2
 8006be4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006be8:	691b      	ldr	r3, [r3, #16]
 8006bea:	693a      	ldr	r2, [r7, #16]
 8006bec:	0151      	lsls	r1, r2, #5
 8006bee:	697a      	ldr	r2, [r7, #20]
 8006bf0:	440a      	add	r2, r1
 8006bf2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006bf6:	0cdb      	lsrs	r3, r3, #19
 8006bf8:	04db      	lsls	r3, r3, #19
 8006bfa:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8006bfc:	693b      	ldr	r3, [r7, #16]
 8006bfe:	015a      	lsls	r2, r3, #5
 8006c00:	697b      	ldr	r3, [r7, #20]
 8006c02:	4413      	add	r3, r2
 8006c04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c08:	691b      	ldr	r3, [r3, #16]
 8006c0a:	693a      	ldr	r2, [r7, #16]
 8006c0c:	0151      	lsls	r1, r2, #5
 8006c0e:	697a      	ldr	r2, [r7, #20]
 8006c10:	440a      	add	r2, r1
 8006c12:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006c16:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006c1a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006c1e:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8006c20:	68bb      	ldr	r3, [r7, #8]
 8006c22:	695b      	ldr	r3, [r3, #20]
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d003      	beq.n	8006c30 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8006c28:	68bb      	ldr	r3, [r7, #8]
 8006c2a:	689a      	ldr	r2, [r3, #8]
 8006c2c:	68bb      	ldr	r3, [r7, #8]
 8006c2e:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006c30:	693b      	ldr	r3, [r7, #16]
 8006c32:	015a      	lsls	r2, r3, #5
 8006c34:	697b      	ldr	r3, [r7, #20]
 8006c36:	4413      	add	r3, r2
 8006c38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c3c:	691b      	ldr	r3, [r3, #16]
 8006c3e:	693a      	ldr	r2, [r7, #16]
 8006c40:	0151      	lsls	r1, r2, #5
 8006c42:	697a      	ldr	r2, [r7, #20]
 8006c44:	440a      	add	r2, r1
 8006c46:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006c4a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006c4e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8006c50:	693b      	ldr	r3, [r7, #16]
 8006c52:	015a      	lsls	r2, r3, #5
 8006c54:	697b      	ldr	r3, [r7, #20]
 8006c56:	4413      	add	r3, r2
 8006c58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c5c:	691a      	ldr	r2, [r3, #16]
 8006c5e:	68bb      	ldr	r3, [r7, #8]
 8006c60:	689b      	ldr	r3, [r3, #8]
 8006c62:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006c66:	6939      	ldr	r1, [r7, #16]
 8006c68:	0148      	lsls	r0, r1, #5
 8006c6a:	6979      	ldr	r1, [r7, #20]
 8006c6c:	4401      	add	r1, r0
 8006c6e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006c72:	4313      	orrs	r3, r2
 8006c74:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8006c76:	79fb      	ldrb	r3, [r7, #7]
 8006c78:	2b01      	cmp	r3, #1
 8006c7a:	d10d      	bne.n	8006c98 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8006c7c:	68bb      	ldr	r3, [r7, #8]
 8006c7e:	68db      	ldr	r3, [r3, #12]
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d009      	beq.n	8006c98 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8006c84:	68bb      	ldr	r3, [r7, #8]
 8006c86:	68d9      	ldr	r1, [r3, #12]
 8006c88:	693b      	ldr	r3, [r7, #16]
 8006c8a:	015a      	lsls	r2, r3, #5
 8006c8c:	697b      	ldr	r3, [r7, #20]
 8006c8e:	4413      	add	r3, r2
 8006c90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c94:	460a      	mov	r2, r1
 8006c96:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006c98:	693b      	ldr	r3, [r7, #16]
 8006c9a:	015a      	lsls	r2, r3, #5
 8006c9c:	697b      	ldr	r3, [r7, #20]
 8006c9e:	4413      	add	r3, r2
 8006ca0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	693a      	ldr	r2, [r7, #16]
 8006ca8:	0151      	lsls	r1, r2, #5
 8006caa:	697a      	ldr	r2, [r7, #20]
 8006cac:	440a      	add	r2, r1
 8006cae:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006cb2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006cb6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006cb8:	2300      	movs	r3, #0
}
 8006cba:	4618      	mov	r0, r3
 8006cbc:	371c      	adds	r7, #28
 8006cbe:	46bd      	mov	sp, r7
 8006cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cc4:	4770      	bx	lr

08006cc6 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8006cc6:	b480      	push	{r7}
 8006cc8:	b089      	sub	sp, #36	; 0x24
 8006cca:	af00      	add	r7, sp, #0
 8006ccc:	60f8      	str	r0, [r7, #12]
 8006cce:	60b9      	str	r1, [r7, #8]
 8006cd0:	4611      	mov	r1, r2
 8006cd2:	461a      	mov	r2, r3
 8006cd4:	460b      	mov	r3, r1
 8006cd6:	71fb      	strb	r3, [r7, #7]
 8006cd8:	4613      	mov	r3, r2
 8006cda:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8006ce0:	68bb      	ldr	r3, [r7, #8]
 8006ce2:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8006ce4:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d123      	bne.n	8006d34 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8006cec:	88bb      	ldrh	r3, [r7, #4]
 8006cee:	3303      	adds	r3, #3
 8006cf0:	089b      	lsrs	r3, r3, #2
 8006cf2:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8006cf4:	2300      	movs	r3, #0
 8006cf6:	61bb      	str	r3, [r7, #24]
 8006cf8:	e018      	b.n	8006d2c <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006cfa:	79fb      	ldrb	r3, [r7, #7]
 8006cfc:	031a      	lsls	r2, r3, #12
 8006cfe:	697b      	ldr	r3, [r7, #20]
 8006d00:	4413      	add	r3, r2
 8006d02:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006d06:	461a      	mov	r2, r3
 8006d08:	69fb      	ldr	r3, [r7, #28]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	6013      	str	r3, [r2, #0]
      pSrc++;
 8006d0e:	69fb      	ldr	r3, [r7, #28]
 8006d10:	3301      	adds	r3, #1
 8006d12:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006d14:	69fb      	ldr	r3, [r7, #28]
 8006d16:	3301      	adds	r3, #1
 8006d18:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006d1a:	69fb      	ldr	r3, [r7, #28]
 8006d1c:	3301      	adds	r3, #1
 8006d1e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006d20:	69fb      	ldr	r3, [r7, #28]
 8006d22:	3301      	adds	r3, #1
 8006d24:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8006d26:	69bb      	ldr	r3, [r7, #24]
 8006d28:	3301      	adds	r3, #1
 8006d2a:	61bb      	str	r3, [r7, #24]
 8006d2c:	69ba      	ldr	r2, [r7, #24]
 8006d2e:	693b      	ldr	r3, [r7, #16]
 8006d30:	429a      	cmp	r2, r3
 8006d32:	d3e2      	bcc.n	8006cfa <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8006d34:	2300      	movs	r3, #0
}
 8006d36:	4618      	mov	r0, r3
 8006d38:	3724      	adds	r7, #36	; 0x24
 8006d3a:	46bd      	mov	sp, r7
 8006d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d40:	4770      	bx	lr

08006d42 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006d42:	b480      	push	{r7}
 8006d44:	b08b      	sub	sp, #44	; 0x2c
 8006d46:	af00      	add	r7, sp, #0
 8006d48:	60f8      	str	r0, [r7, #12]
 8006d4a:	60b9      	str	r1, [r7, #8]
 8006d4c:	4613      	mov	r3, r2
 8006d4e:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8006d54:	68bb      	ldr	r3, [r7, #8]
 8006d56:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8006d58:	88fb      	ldrh	r3, [r7, #6]
 8006d5a:	089b      	lsrs	r3, r3, #2
 8006d5c:	b29b      	uxth	r3, r3
 8006d5e:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8006d60:	88fb      	ldrh	r3, [r7, #6]
 8006d62:	f003 0303 	and.w	r3, r3, #3
 8006d66:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8006d68:	2300      	movs	r3, #0
 8006d6a:	623b      	str	r3, [r7, #32]
 8006d6c:	e014      	b.n	8006d98 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006d6e:	69bb      	ldr	r3, [r7, #24]
 8006d70:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006d74:	681a      	ldr	r2, [r3, #0]
 8006d76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d78:	601a      	str	r2, [r3, #0]
    pDest++;
 8006d7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d7c:	3301      	adds	r3, #1
 8006d7e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006d80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d82:	3301      	adds	r3, #1
 8006d84:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006d86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d88:	3301      	adds	r3, #1
 8006d8a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006d8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d8e:	3301      	adds	r3, #1
 8006d90:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8006d92:	6a3b      	ldr	r3, [r7, #32]
 8006d94:	3301      	adds	r3, #1
 8006d96:	623b      	str	r3, [r7, #32]
 8006d98:	6a3a      	ldr	r2, [r7, #32]
 8006d9a:	697b      	ldr	r3, [r7, #20]
 8006d9c:	429a      	cmp	r2, r3
 8006d9e:	d3e6      	bcc.n	8006d6e <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8006da0:	8bfb      	ldrh	r3, [r7, #30]
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d01e      	beq.n	8006de4 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8006da6:	2300      	movs	r3, #0
 8006da8:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8006daa:	69bb      	ldr	r3, [r7, #24]
 8006dac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006db0:	461a      	mov	r2, r3
 8006db2:	f107 0310 	add.w	r3, r7, #16
 8006db6:	6812      	ldr	r2, [r2, #0]
 8006db8:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8006dba:	693a      	ldr	r2, [r7, #16]
 8006dbc:	6a3b      	ldr	r3, [r7, #32]
 8006dbe:	b2db      	uxtb	r3, r3
 8006dc0:	00db      	lsls	r3, r3, #3
 8006dc2:	fa22 f303 	lsr.w	r3, r2, r3
 8006dc6:	b2da      	uxtb	r2, r3
 8006dc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dca:	701a      	strb	r2, [r3, #0]
      i++;
 8006dcc:	6a3b      	ldr	r3, [r7, #32]
 8006dce:	3301      	adds	r3, #1
 8006dd0:	623b      	str	r3, [r7, #32]
      pDest++;
 8006dd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dd4:	3301      	adds	r3, #1
 8006dd6:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8006dd8:	8bfb      	ldrh	r3, [r7, #30]
 8006dda:	3b01      	subs	r3, #1
 8006ddc:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8006dde:	8bfb      	ldrh	r3, [r7, #30]
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d1ea      	bne.n	8006dba <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8006de4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006de6:	4618      	mov	r0, r3
 8006de8:	372c      	adds	r7, #44	; 0x2c
 8006dea:	46bd      	mov	sp, r7
 8006dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006df0:	4770      	bx	lr

08006df2 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006df2:	b480      	push	{r7}
 8006df4:	b085      	sub	sp, #20
 8006df6:	af00      	add	r7, sp, #0
 8006df8:	6078      	str	r0, [r7, #4]
 8006dfa:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006e00:	683b      	ldr	r3, [r7, #0]
 8006e02:	781b      	ldrb	r3, [r3, #0]
 8006e04:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006e06:	683b      	ldr	r3, [r7, #0]
 8006e08:	785b      	ldrb	r3, [r3, #1]
 8006e0a:	2b01      	cmp	r3, #1
 8006e0c:	d12c      	bne.n	8006e68 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006e0e:	68bb      	ldr	r3, [r7, #8]
 8006e10:	015a      	lsls	r2, r3, #5
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	4413      	add	r3, r2
 8006e16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	db12      	blt.n	8006e46 <USB_EPSetStall+0x54>
 8006e20:	68bb      	ldr	r3, [r7, #8]
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d00f      	beq.n	8006e46 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8006e26:	68bb      	ldr	r3, [r7, #8]
 8006e28:	015a      	lsls	r2, r3, #5
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	4413      	add	r3, r2
 8006e2e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	68ba      	ldr	r2, [r7, #8]
 8006e36:	0151      	lsls	r1, r2, #5
 8006e38:	68fa      	ldr	r2, [r7, #12]
 8006e3a:	440a      	add	r2, r1
 8006e3c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006e40:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006e44:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8006e46:	68bb      	ldr	r3, [r7, #8]
 8006e48:	015a      	lsls	r2, r3, #5
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	4413      	add	r3, r2
 8006e4e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	68ba      	ldr	r2, [r7, #8]
 8006e56:	0151      	lsls	r1, r2, #5
 8006e58:	68fa      	ldr	r2, [r7, #12]
 8006e5a:	440a      	add	r2, r1
 8006e5c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006e60:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006e64:	6013      	str	r3, [r2, #0]
 8006e66:	e02b      	b.n	8006ec0 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006e68:	68bb      	ldr	r3, [r7, #8]
 8006e6a:	015a      	lsls	r2, r3, #5
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	4413      	add	r3, r2
 8006e70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	db12      	blt.n	8006ea0 <USB_EPSetStall+0xae>
 8006e7a:	68bb      	ldr	r3, [r7, #8]
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d00f      	beq.n	8006ea0 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8006e80:	68bb      	ldr	r3, [r7, #8]
 8006e82:	015a      	lsls	r2, r3, #5
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	4413      	add	r3, r2
 8006e88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	68ba      	ldr	r2, [r7, #8]
 8006e90:	0151      	lsls	r1, r2, #5
 8006e92:	68fa      	ldr	r2, [r7, #12]
 8006e94:	440a      	add	r2, r1
 8006e96:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006e9a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006e9e:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8006ea0:	68bb      	ldr	r3, [r7, #8]
 8006ea2:	015a      	lsls	r2, r3, #5
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	4413      	add	r3, r2
 8006ea8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	68ba      	ldr	r2, [r7, #8]
 8006eb0:	0151      	lsls	r1, r2, #5
 8006eb2:	68fa      	ldr	r2, [r7, #12]
 8006eb4:	440a      	add	r2, r1
 8006eb6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006eba:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006ebe:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006ec0:	2300      	movs	r3, #0
}
 8006ec2:	4618      	mov	r0, r3
 8006ec4:	3714      	adds	r7, #20
 8006ec6:	46bd      	mov	sp, r7
 8006ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ecc:	4770      	bx	lr

08006ece <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006ece:	b480      	push	{r7}
 8006ed0:	b085      	sub	sp, #20
 8006ed2:	af00      	add	r7, sp, #0
 8006ed4:	6078      	str	r0, [r7, #4]
 8006ed6:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006edc:	683b      	ldr	r3, [r7, #0]
 8006ede:	781b      	ldrb	r3, [r3, #0]
 8006ee0:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006ee2:	683b      	ldr	r3, [r7, #0]
 8006ee4:	785b      	ldrb	r3, [r3, #1]
 8006ee6:	2b01      	cmp	r3, #1
 8006ee8:	d128      	bne.n	8006f3c <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006eea:	68bb      	ldr	r3, [r7, #8]
 8006eec:	015a      	lsls	r2, r3, #5
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	4413      	add	r3, r2
 8006ef2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	68ba      	ldr	r2, [r7, #8]
 8006efa:	0151      	lsls	r1, r2, #5
 8006efc:	68fa      	ldr	r2, [r7, #12]
 8006efe:	440a      	add	r2, r1
 8006f00:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006f04:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006f08:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006f0a:	683b      	ldr	r3, [r7, #0]
 8006f0c:	78db      	ldrb	r3, [r3, #3]
 8006f0e:	2b03      	cmp	r3, #3
 8006f10:	d003      	beq.n	8006f1a <USB_EPClearStall+0x4c>
 8006f12:	683b      	ldr	r3, [r7, #0]
 8006f14:	78db      	ldrb	r3, [r3, #3]
 8006f16:	2b02      	cmp	r3, #2
 8006f18:	d138      	bne.n	8006f8c <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006f1a:	68bb      	ldr	r3, [r7, #8]
 8006f1c:	015a      	lsls	r2, r3, #5
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	4413      	add	r3, r2
 8006f22:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	68ba      	ldr	r2, [r7, #8]
 8006f2a:	0151      	lsls	r1, r2, #5
 8006f2c:	68fa      	ldr	r2, [r7, #12]
 8006f2e:	440a      	add	r2, r1
 8006f30:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006f34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006f38:	6013      	str	r3, [r2, #0]
 8006f3a:	e027      	b.n	8006f8c <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8006f3c:	68bb      	ldr	r3, [r7, #8]
 8006f3e:	015a      	lsls	r2, r3, #5
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	4413      	add	r3, r2
 8006f44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	68ba      	ldr	r2, [r7, #8]
 8006f4c:	0151      	lsls	r1, r2, #5
 8006f4e:	68fa      	ldr	r2, [r7, #12]
 8006f50:	440a      	add	r2, r1
 8006f52:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006f56:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006f5a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006f5c:	683b      	ldr	r3, [r7, #0]
 8006f5e:	78db      	ldrb	r3, [r3, #3]
 8006f60:	2b03      	cmp	r3, #3
 8006f62:	d003      	beq.n	8006f6c <USB_EPClearStall+0x9e>
 8006f64:	683b      	ldr	r3, [r7, #0]
 8006f66:	78db      	ldrb	r3, [r3, #3]
 8006f68:	2b02      	cmp	r3, #2
 8006f6a:	d10f      	bne.n	8006f8c <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006f6c:	68bb      	ldr	r3, [r7, #8]
 8006f6e:	015a      	lsls	r2, r3, #5
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	4413      	add	r3, r2
 8006f74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	68ba      	ldr	r2, [r7, #8]
 8006f7c:	0151      	lsls	r1, r2, #5
 8006f7e:	68fa      	ldr	r2, [r7, #12]
 8006f80:	440a      	add	r2, r1
 8006f82:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006f86:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006f8a:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8006f8c:	2300      	movs	r3, #0
}
 8006f8e:	4618      	mov	r0, r3
 8006f90:	3714      	adds	r7, #20
 8006f92:	46bd      	mov	sp, r7
 8006f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f98:	4770      	bx	lr

08006f9a <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8006f9a:	b480      	push	{r7}
 8006f9c:	b085      	sub	sp, #20
 8006f9e:	af00      	add	r7, sp, #0
 8006fa0:	6078      	str	r0, [r7, #4]
 8006fa2:	460b      	mov	r3, r1
 8006fa4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	68fa      	ldr	r2, [r7, #12]
 8006fb4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006fb8:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8006fbc:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006fc4:	681a      	ldr	r2, [r3, #0]
 8006fc6:	78fb      	ldrb	r3, [r7, #3]
 8006fc8:	011b      	lsls	r3, r3, #4
 8006fca:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8006fce:	68f9      	ldr	r1, [r7, #12]
 8006fd0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006fd4:	4313      	orrs	r3, r2
 8006fd6:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8006fd8:	2300      	movs	r3, #0
}
 8006fda:	4618      	mov	r0, r3
 8006fdc:	3714      	adds	r7, #20
 8006fde:	46bd      	mov	sp, r7
 8006fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe4:	4770      	bx	lr

08006fe6 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006fe6:	b480      	push	{r7}
 8006fe8:	b085      	sub	sp, #20
 8006fea:	af00      	add	r7, sp, #0
 8006fec:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	68fa      	ldr	r2, [r7, #12]
 8006ffc:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007000:	f023 0303 	bic.w	r3, r3, #3
 8007004:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800700c:	685b      	ldr	r3, [r3, #4]
 800700e:	68fa      	ldr	r2, [r7, #12]
 8007010:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007014:	f023 0302 	bic.w	r3, r3, #2
 8007018:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800701a:	2300      	movs	r3, #0
}
 800701c:	4618      	mov	r0, r3
 800701e:	3714      	adds	r7, #20
 8007020:	46bd      	mov	sp, r7
 8007022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007026:	4770      	bx	lr

08007028 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007028:	b480      	push	{r7}
 800702a:	b085      	sub	sp, #20
 800702c:	af00      	add	r7, sp, #0
 800702e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	68fa      	ldr	r2, [r7, #12]
 800703e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007042:	f023 0303 	bic.w	r3, r3, #3
 8007046:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800704e:	685b      	ldr	r3, [r3, #4]
 8007050:	68fa      	ldr	r2, [r7, #12]
 8007052:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007056:	f043 0302 	orr.w	r3, r3, #2
 800705a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800705c:	2300      	movs	r3, #0
}
 800705e:	4618      	mov	r0, r3
 8007060:	3714      	adds	r7, #20
 8007062:	46bd      	mov	sp, r7
 8007064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007068:	4770      	bx	lr

0800706a <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800706a:	b480      	push	{r7}
 800706c:	b085      	sub	sp, #20
 800706e:	af00      	add	r7, sp, #0
 8007070:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	695b      	ldr	r3, [r3, #20]
 8007076:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	699b      	ldr	r3, [r3, #24]
 800707c:	68fa      	ldr	r2, [r7, #12]
 800707e:	4013      	ands	r3, r2
 8007080:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8007082:	68fb      	ldr	r3, [r7, #12]
}
 8007084:	4618      	mov	r0, r3
 8007086:	3714      	adds	r7, #20
 8007088:	46bd      	mov	sp, r7
 800708a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800708e:	4770      	bx	lr

08007090 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007090:	b480      	push	{r7}
 8007092:	b085      	sub	sp, #20
 8007094:	af00      	add	r7, sp, #0
 8007096:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80070a2:	699b      	ldr	r3, [r3, #24]
 80070a4:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80070ac:	69db      	ldr	r3, [r3, #28]
 80070ae:	68ba      	ldr	r2, [r7, #8]
 80070b0:	4013      	ands	r3, r2
 80070b2:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80070b4:	68bb      	ldr	r3, [r7, #8]
 80070b6:	0c1b      	lsrs	r3, r3, #16
}
 80070b8:	4618      	mov	r0, r3
 80070ba:	3714      	adds	r7, #20
 80070bc:	46bd      	mov	sp, r7
 80070be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070c2:	4770      	bx	lr

080070c4 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80070c4:	b480      	push	{r7}
 80070c6:	b085      	sub	sp, #20
 80070c8:	af00      	add	r7, sp, #0
 80070ca:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80070d6:	699b      	ldr	r3, [r3, #24]
 80070d8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80070e0:	69db      	ldr	r3, [r3, #28]
 80070e2:	68ba      	ldr	r2, [r7, #8]
 80070e4:	4013      	ands	r3, r2
 80070e6:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80070e8:	68bb      	ldr	r3, [r7, #8]
 80070ea:	b29b      	uxth	r3, r3
}
 80070ec:	4618      	mov	r0, r3
 80070ee:	3714      	adds	r7, #20
 80070f0:	46bd      	mov	sp, r7
 80070f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070f6:	4770      	bx	lr

080070f8 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80070f8:	b480      	push	{r7}
 80070fa:	b085      	sub	sp, #20
 80070fc:	af00      	add	r7, sp, #0
 80070fe:	6078      	str	r0, [r7, #4]
 8007100:	460b      	mov	r3, r1
 8007102:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8007108:	78fb      	ldrb	r3, [r7, #3]
 800710a:	015a      	lsls	r2, r3, #5
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	4413      	add	r3, r2
 8007110:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007114:	689b      	ldr	r3, [r3, #8]
 8007116:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800711e:	695b      	ldr	r3, [r3, #20]
 8007120:	68ba      	ldr	r2, [r7, #8]
 8007122:	4013      	ands	r3, r2
 8007124:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007126:	68bb      	ldr	r3, [r7, #8]
}
 8007128:	4618      	mov	r0, r3
 800712a:	3714      	adds	r7, #20
 800712c:	46bd      	mov	sp, r7
 800712e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007132:	4770      	bx	lr

08007134 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007134:	b480      	push	{r7}
 8007136:	b087      	sub	sp, #28
 8007138:	af00      	add	r7, sp, #0
 800713a:	6078      	str	r0, [r7, #4]
 800713c:	460b      	mov	r3, r1
 800713e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8007144:	697b      	ldr	r3, [r7, #20]
 8007146:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800714a:	691b      	ldr	r3, [r3, #16]
 800714c:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800714e:	697b      	ldr	r3, [r7, #20]
 8007150:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007154:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007156:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8007158:	78fb      	ldrb	r3, [r7, #3]
 800715a:	f003 030f 	and.w	r3, r3, #15
 800715e:	68fa      	ldr	r2, [r7, #12]
 8007160:	fa22 f303 	lsr.w	r3, r2, r3
 8007164:	01db      	lsls	r3, r3, #7
 8007166:	b2db      	uxtb	r3, r3
 8007168:	693a      	ldr	r2, [r7, #16]
 800716a:	4313      	orrs	r3, r2
 800716c:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800716e:	78fb      	ldrb	r3, [r7, #3]
 8007170:	015a      	lsls	r2, r3, #5
 8007172:	697b      	ldr	r3, [r7, #20]
 8007174:	4413      	add	r3, r2
 8007176:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800717a:	689b      	ldr	r3, [r3, #8]
 800717c:	693a      	ldr	r2, [r7, #16]
 800717e:	4013      	ands	r3, r2
 8007180:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007182:	68bb      	ldr	r3, [r7, #8]
}
 8007184:	4618      	mov	r0, r3
 8007186:	371c      	adds	r7, #28
 8007188:	46bd      	mov	sp, r7
 800718a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800718e:	4770      	bx	lr

08007190 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8007190:	b480      	push	{r7}
 8007192:	b083      	sub	sp, #12
 8007194:	af00      	add	r7, sp, #0
 8007196:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	695b      	ldr	r3, [r3, #20]
 800719c:	f003 0301 	and.w	r3, r3, #1
}
 80071a0:	4618      	mov	r0, r3
 80071a2:	370c      	adds	r7, #12
 80071a4:	46bd      	mov	sp, r7
 80071a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071aa:	4770      	bx	lr

080071ac <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80071ac:	b480      	push	{r7}
 80071ae:	b085      	sub	sp, #20
 80071b0:	af00      	add	r7, sp, #0
 80071b2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	68fa      	ldr	r2, [r7, #12]
 80071c2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80071c6:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80071ca:	f023 0307 	bic.w	r3, r3, #7
 80071ce:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80071d6:	685b      	ldr	r3, [r3, #4]
 80071d8:	68fa      	ldr	r2, [r7, #12]
 80071da:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80071de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80071e2:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80071e4:	2300      	movs	r3, #0
}
 80071e6:	4618      	mov	r0, r3
 80071e8:	3714      	adds	r7, #20
 80071ea:	46bd      	mov	sp, r7
 80071ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071f0:	4770      	bx	lr
	...

080071f4 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80071f4:	b480      	push	{r7}
 80071f6:	b087      	sub	sp, #28
 80071f8:	af00      	add	r7, sp, #0
 80071fa:	60f8      	str	r0, [r7, #12]
 80071fc:	460b      	mov	r3, r1
 80071fe:	607a      	str	r2, [r7, #4]
 8007200:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	333c      	adds	r3, #60	; 0x3c
 800720a:	3304      	adds	r3, #4
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8007210:	693b      	ldr	r3, [r7, #16]
 8007212:	4a26      	ldr	r2, [pc, #152]	; (80072ac <USB_EP0_OutStart+0xb8>)
 8007214:	4293      	cmp	r3, r2
 8007216:	d90a      	bls.n	800722e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007218:	697b      	ldr	r3, [r7, #20]
 800721a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007224:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007228:	d101      	bne.n	800722e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800722a:	2300      	movs	r3, #0
 800722c:	e037      	b.n	800729e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800722e:	697b      	ldr	r3, [r7, #20]
 8007230:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007234:	461a      	mov	r2, r3
 8007236:	2300      	movs	r3, #0
 8007238:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800723a:	697b      	ldr	r3, [r7, #20]
 800723c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007240:	691b      	ldr	r3, [r3, #16]
 8007242:	697a      	ldr	r2, [r7, #20]
 8007244:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007248:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800724c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800724e:	697b      	ldr	r3, [r7, #20]
 8007250:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007254:	691b      	ldr	r3, [r3, #16]
 8007256:	697a      	ldr	r2, [r7, #20]
 8007258:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800725c:	f043 0318 	orr.w	r3, r3, #24
 8007260:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8007262:	697b      	ldr	r3, [r7, #20]
 8007264:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007268:	691b      	ldr	r3, [r3, #16]
 800726a:	697a      	ldr	r2, [r7, #20]
 800726c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007270:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8007274:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8007276:	7afb      	ldrb	r3, [r7, #11]
 8007278:	2b01      	cmp	r3, #1
 800727a:	d10f      	bne.n	800729c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800727c:	697b      	ldr	r3, [r7, #20]
 800727e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007282:	461a      	mov	r2, r3
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8007288:	697b      	ldr	r3, [r7, #20]
 800728a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	697a      	ldr	r2, [r7, #20]
 8007292:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007296:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800729a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800729c:	2300      	movs	r3, #0
}
 800729e:	4618      	mov	r0, r3
 80072a0:	371c      	adds	r7, #28
 80072a2:	46bd      	mov	sp, r7
 80072a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072a8:	4770      	bx	lr
 80072aa:	bf00      	nop
 80072ac:	4f54300a 	.word	0x4f54300a

080072b0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80072b0:	b480      	push	{r7}
 80072b2:	b085      	sub	sp, #20
 80072b4:	af00      	add	r7, sp, #0
 80072b6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80072b8:	2300      	movs	r3, #0
 80072ba:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	3301      	adds	r3, #1
 80072c0:	60fb      	str	r3, [r7, #12]
 80072c2:	4a13      	ldr	r2, [pc, #76]	; (8007310 <USB_CoreReset+0x60>)
 80072c4:	4293      	cmp	r3, r2
 80072c6:	d901      	bls.n	80072cc <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 80072c8:	2303      	movs	r3, #3
 80072ca:	e01a      	b.n	8007302 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	691b      	ldr	r3, [r3, #16]
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	daf3      	bge.n	80072bc <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80072d4:	2300      	movs	r3, #0
 80072d6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	691b      	ldr	r3, [r3, #16]
 80072dc:	f043 0201 	orr.w	r2, r3, #1
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	3301      	adds	r3, #1
 80072e8:	60fb      	str	r3, [r7, #12]
 80072ea:	4a09      	ldr	r2, [pc, #36]	; (8007310 <USB_CoreReset+0x60>)
 80072ec:	4293      	cmp	r3, r2
 80072ee:	d901      	bls.n	80072f4 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 80072f0:	2303      	movs	r3, #3
 80072f2:	e006      	b.n	8007302 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	691b      	ldr	r3, [r3, #16]
 80072f8:	f003 0301 	and.w	r3, r3, #1
 80072fc:	2b01      	cmp	r3, #1
 80072fe:	d0f1      	beq.n	80072e4 <USB_CoreReset+0x34>

  return HAL_OK;
 8007300:	2300      	movs	r3, #0
}
 8007302:	4618      	mov	r0, r3
 8007304:	3714      	adds	r7, #20
 8007306:	46bd      	mov	sp, r7
 8007308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800730c:	4770      	bx	lr
 800730e:	bf00      	nop
 8007310:	00030d40 	.word	0x00030d40

08007314 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007314:	b580      	push	{r7, lr}
 8007316:	b084      	sub	sp, #16
 8007318:	af00      	add	r7, sp, #0
 800731a:	6078      	str	r0, [r7, #4]
 800731c:	460b      	mov	r3, r1
 800731e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8007320:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8007324:	f002 f964 	bl	80095f0 <USBD_static_malloc>
 8007328:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	2b00      	cmp	r3, #0
 800732e:	d105      	bne.n	800733c <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	2200      	movs	r2, #0
 8007334:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8007338:	2302      	movs	r3, #2
 800733a:	e066      	b.n	800740a <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	68fa      	ldr	r2, [r7, #12]
 8007340:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	7c1b      	ldrb	r3, [r3, #16]
 8007348:	2b00      	cmp	r3, #0
 800734a:	d119      	bne.n	8007380 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800734c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007350:	2202      	movs	r2, #2
 8007352:	2181      	movs	r1, #129	; 0x81
 8007354:	6878      	ldr	r0, [r7, #4]
 8007356:	f002 f828 	bl	80093aa <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	2201      	movs	r2, #1
 800735e:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007360:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007364:	2202      	movs	r2, #2
 8007366:	2101      	movs	r1, #1
 8007368:	6878      	ldr	r0, [r7, #4]
 800736a:	f002 f81e 	bl	80093aa <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	2201      	movs	r2, #1
 8007372:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	2210      	movs	r2, #16
 800737a:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 800737e:	e016      	b.n	80073ae <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007380:	2340      	movs	r3, #64	; 0x40
 8007382:	2202      	movs	r2, #2
 8007384:	2181      	movs	r1, #129	; 0x81
 8007386:	6878      	ldr	r0, [r7, #4]
 8007388:	f002 f80f 	bl	80093aa <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	2201      	movs	r2, #1
 8007390:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007392:	2340      	movs	r3, #64	; 0x40
 8007394:	2202      	movs	r2, #2
 8007396:	2101      	movs	r1, #1
 8007398:	6878      	ldr	r0, [r7, #4]
 800739a:	f002 f806 	bl	80093aa <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	2201      	movs	r2, #1
 80073a2:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	2210      	movs	r2, #16
 80073aa:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80073ae:	2308      	movs	r3, #8
 80073b0:	2203      	movs	r2, #3
 80073b2:	2182      	movs	r1, #130	; 0x82
 80073b4:	6878      	ldr	r0, [r7, #4]
 80073b6:	f001 fff8 	bl	80093aa <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	2201      	movs	r2, #1
 80073be:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	2200      	movs	r2, #0
 80073d0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	2200      	movs	r2, #0
 80073d8:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	7c1b      	ldrb	r3, [r3, #16]
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d109      	bne.n	80073f8 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80073ea:	f44f 7300 	mov.w	r3, #512	; 0x200
 80073ee:	2101      	movs	r1, #1
 80073f0:	6878      	ldr	r0, [r7, #4]
 80073f2:	f002 f8c9 	bl	8009588 <USBD_LL_PrepareReceive>
 80073f6:	e007      	b.n	8007408 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80073fe:	2340      	movs	r3, #64	; 0x40
 8007400:	2101      	movs	r1, #1
 8007402:	6878      	ldr	r0, [r7, #4]
 8007404:	f002 f8c0 	bl	8009588 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007408:	2300      	movs	r3, #0
}
 800740a:	4618      	mov	r0, r3
 800740c:	3710      	adds	r7, #16
 800740e:	46bd      	mov	sp, r7
 8007410:	bd80      	pop	{r7, pc}

08007412 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007412:	b580      	push	{r7, lr}
 8007414:	b082      	sub	sp, #8
 8007416:	af00      	add	r7, sp, #0
 8007418:	6078      	str	r0, [r7, #4]
 800741a:	460b      	mov	r3, r1
 800741c:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800741e:	2181      	movs	r1, #129	; 0x81
 8007420:	6878      	ldr	r0, [r7, #4]
 8007422:	f001 ffe8 	bl	80093f6 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	2200      	movs	r2, #0
 800742a:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800742c:	2101      	movs	r1, #1
 800742e:	6878      	ldr	r0, [r7, #4]
 8007430:	f001 ffe1 	bl	80093f6 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	2200      	movs	r2, #0
 8007438:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800743c:	2182      	movs	r1, #130	; 0x82
 800743e:	6878      	ldr	r0, [r7, #4]
 8007440:	f001 ffd9 	bl	80093f6 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	2200      	movs	r2, #0
 8007448:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	2200      	movs	r2, #0
 8007450:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800745a:	2b00      	cmp	r3, #0
 800745c:	d00e      	beq.n	800747c <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007464:	685b      	ldr	r3, [r3, #4]
 8007466:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800746e:	4618      	mov	r0, r3
 8007470:	f002 f8cc 	bl	800960c <USBD_static_free>
    pdev->pClassData = NULL;
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	2200      	movs	r2, #0
 8007478:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800747c:	2300      	movs	r3, #0
}
 800747e:	4618      	mov	r0, r3
 8007480:	3708      	adds	r7, #8
 8007482:	46bd      	mov	sp, r7
 8007484:	bd80      	pop	{r7, pc}
	...

08007488 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8007488:	b580      	push	{r7, lr}
 800748a:	b086      	sub	sp, #24
 800748c:	af00      	add	r7, sp, #0
 800748e:	6078      	str	r0, [r7, #4]
 8007490:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007498:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800749a:	2300      	movs	r3, #0
 800749c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800749e:	2300      	movs	r3, #0
 80074a0:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80074a2:	2300      	movs	r3, #0
 80074a4:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80074a6:	693b      	ldr	r3, [r7, #16]
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d101      	bne.n	80074b0 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 80074ac:	2303      	movs	r3, #3
 80074ae:	e0af      	b.n	8007610 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80074b0:	683b      	ldr	r3, [r7, #0]
 80074b2:	781b      	ldrb	r3, [r3, #0]
 80074b4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d03f      	beq.n	800753c <USBD_CDC_Setup+0xb4>
 80074bc:	2b20      	cmp	r3, #32
 80074be:	f040 809f 	bne.w	8007600 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80074c2:	683b      	ldr	r3, [r7, #0]
 80074c4:	88db      	ldrh	r3, [r3, #6]
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d02e      	beq.n	8007528 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80074ca:	683b      	ldr	r3, [r7, #0]
 80074cc:	781b      	ldrb	r3, [r3, #0]
 80074ce:	b25b      	sxtb	r3, r3
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	da16      	bge.n	8007502 <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80074da:	689b      	ldr	r3, [r3, #8]
 80074dc:	683a      	ldr	r2, [r7, #0]
 80074de:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 80074e0:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80074e2:	683a      	ldr	r2, [r7, #0]
 80074e4:	88d2      	ldrh	r2, [r2, #6]
 80074e6:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80074e8:	683b      	ldr	r3, [r7, #0]
 80074ea:	88db      	ldrh	r3, [r3, #6]
 80074ec:	2b07      	cmp	r3, #7
 80074ee:	bf28      	it	cs
 80074f0:	2307      	movcs	r3, #7
 80074f2:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80074f4:	693b      	ldr	r3, [r7, #16]
 80074f6:	89fa      	ldrh	r2, [r7, #14]
 80074f8:	4619      	mov	r1, r3
 80074fa:	6878      	ldr	r0, [r7, #4]
 80074fc:	f001 fb19 	bl	8008b32 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 8007500:	e085      	b.n	800760e <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 8007502:	683b      	ldr	r3, [r7, #0]
 8007504:	785a      	ldrb	r2, [r3, #1]
 8007506:	693b      	ldr	r3, [r7, #16]
 8007508:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800750c:	683b      	ldr	r3, [r7, #0]
 800750e:	88db      	ldrh	r3, [r3, #6]
 8007510:	b2da      	uxtb	r2, r3
 8007512:	693b      	ldr	r3, [r7, #16]
 8007514:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8007518:	6939      	ldr	r1, [r7, #16]
 800751a:	683b      	ldr	r3, [r7, #0]
 800751c:	88db      	ldrh	r3, [r3, #6]
 800751e:	461a      	mov	r2, r3
 8007520:	6878      	ldr	r0, [r7, #4]
 8007522:	f001 fb32 	bl	8008b8a <USBD_CtlPrepareRx>
      break;
 8007526:	e072      	b.n	800760e <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800752e:	689b      	ldr	r3, [r3, #8]
 8007530:	683a      	ldr	r2, [r7, #0]
 8007532:	7850      	ldrb	r0, [r2, #1]
 8007534:	2200      	movs	r2, #0
 8007536:	6839      	ldr	r1, [r7, #0]
 8007538:	4798      	blx	r3
      break;
 800753a:	e068      	b.n	800760e <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800753c:	683b      	ldr	r3, [r7, #0]
 800753e:	785b      	ldrb	r3, [r3, #1]
 8007540:	2b0b      	cmp	r3, #11
 8007542:	d852      	bhi.n	80075ea <USBD_CDC_Setup+0x162>
 8007544:	a201      	add	r2, pc, #4	; (adr r2, 800754c <USBD_CDC_Setup+0xc4>)
 8007546:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800754a:	bf00      	nop
 800754c:	0800757d 	.word	0x0800757d
 8007550:	080075f9 	.word	0x080075f9
 8007554:	080075eb 	.word	0x080075eb
 8007558:	080075eb 	.word	0x080075eb
 800755c:	080075eb 	.word	0x080075eb
 8007560:	080075eb 	.word	0x080075eb
 8007564:	080075eb 	.word	0x080075eb
 8007568:	080075eb 	.word	0x080075eb
 800756c:	080075eb 	.word	0x080075eb
 8007570:	080075eb 	.word	0x080075eb
 8007574:	080075a7 	.word	0x080075a7
 8007578:	080075d1 	.word	0x080075d1
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007582:	b2db      	uxtb	r3, r3
 8007584:	2b03      	cmp	r3, #3
 8007586:	d107      	bne.n	8007598 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8007588:	f107 030a 	add.w	r3, r7, #10
 800758c:	2202      	movs	r2, #2
 800758e:	4619      	mov	r1, r3
 8007590:	6878      	ldr	r0, [r7, #4]
 8007592:	f001 face 	bl	8008b32 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007596:	e032      	b.n	80075fe <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8007598:	6839      	ldr	r1, [r7, #0]
 800759a:	6878      	ldr	r0, [r7, #4]
 800759c:	f001 fa58 	bl	8008a50 <USBD_CtlError>
            ret = USBD_FAIL;
 80075a0:	2303      	movs	r3, #3
 80075a2:	75fb      	strb	r3, [r7, #23]
          break;
 80075a4:	e02b      	b.n	80075fe <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80075ac:	b2db      	uxtb	r3, r3
 80075ae:	2b03      	cmp	r3, #3
 80075b0:	d107      	bne.n	80075c2 <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80075b2:	f107 030d 	add.w	r3, r7, #13
 80075b6:	2201      	movs	r2, #1
 80075b8:	4619      	mov	r1, r3
 80075ba:	6878      	ldr	r0, [r7, #4]
 80075bc:	f001 fab9 	bl	8008b32 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80075c0:	e01d      	b.n	80075fe <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 80075c2:	6839      	ldr	r1, [r7, #0]
 80075c4:	6878      	ldr	r0, [r7, #4]
 80075c6:	f001 fa43 	bl	8008a50 <USBD_CtlError>
            ret = USBD_FAIL;
 80075ca:	2303      	movs	r3, #3
 80075cc:	75fb      	strb	r3, [r7, #23]
          break;
 80075ce:	e016      	b.n	80075fe <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80075d6:	b2db      	uxtb	r3, r3
 80075d8:	2b03      	cmp	r3, #3
 80075da:	d00f      	beq.n	80075fc <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 80075dc:	6839      	ldr	r1, [r7, #0]
 80075de:	6878      	ldr	r0, [r7, #4]
 80075e0:	f001 fa36 	bl	8008a50 <USBD_CtlError>
            ret = USBD_FAIL;
 80075e4:	2303      	movs	r3, #3
 80075e6:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80075e8:	e008      	b.n	80075fc <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80075ea:	6839      	ldr	r1, [r7, #0]
 80075ec:	6878      	ldr	r0, [r7, #4]
 80075ee:	f001 fa2f 	bl	8008a50 <USBD_CtlError>
          ret = USBD_FAIL;
 80075f2:	2303      	movs	r3, #3
 80075f4:	75fb      	strb	r3, [r7, #23]
          break;
 80075f6:	e002      	b.n	80075fe <USBD_CDC_Setup+0x176>
          break;
 80075f8:	bf00      	nop
 80075fa:	e008      	b.n	800760e <USBD_CDC_Setup+0x186>
          break;
 80075fc:	bf00      	nop
      }
      break;
 80075fe:	e006      	b.n	800760e <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 8007600:	6839      	ldr	r1, [r7, #0]
 8007602:	6878      	ldr	r0, [r7, #4]
 8007604:	f001 fa24 	bl	8008a50 <USBD_CtlError>
      ret = USBD_FAIL;
 8007608:	2303      	movs	r3, #3
 800760a:	75fb      	strb	r3, [r7, #23]
      break;
 800760c:	bf00      	nop
  }

  return (uint8_t)ret;
 800760e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007610:	4618      	mov	r0, r3
 8007612:	3718      	adds	r7, #24
 8007614:	46bd      	mov	sp, r7
 8007616:	bd80      	pop	{r7, pc}

08007618 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007618:	b580      	push	{r7, lr}
 800761a:	b084      	sub	sp, #16
 800761c:	af00      	add	r7, sp, #0
 800761e:	6078      	str	r0, [r7, #4]
 8007620:	460b      	mov	r3, r1
 8007622:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800762a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007632:	2b00      	cmp	r3, #0
 8007634:	d101      	bne.n	800763a <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007636:	2303      	movs	r3, #3
 8007638:	e04f      	b.n	80076da <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007640:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8007642:	78fa      	ldrb	r2, [r7, #3]
 8007644:	6879      	ldr	r1, [r7, #4]
 8007646:	4613      	mov	r3, r2
 8007648:	009b      	lsls	r3, r3, #2
 800764a:	4413      	add	r3, r2
 800764c:	009b      	lsls	r3, r3, #2
 800764e:	440b      	add	r3, r1
 8007650:	3318      	adds	r3, #24
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	2b00      	cmp	r3, #0
 8007656:	d029      	beq.n	80076ac <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8007658:	78fa      	ldrb	r2, [r7, #3]
 800765a:	6879      	ldr	r1, [r7, #4]
 800765c:	4613      	mov	r3, r2
 800765e:	009b      	lsls	r3, r3, #2
 8007660:	4413      	add	r3, r2
 8007662:	009b      	lsls	r3, r3, #2
 8007664:	440b      	add	r3, r1
 8007666:	3318      	adds	r3, #24
 8007668:	681a      	ldr	r2, [r3, #0]
 800766a:	78f9      	ldrb	r1, [r7, #3]
 800766c:	68f8      	ldr	r0, [r7, #12]
 800766e:	460b      	mov	r3, r1
 8007670:	00db      	lsls	r3, r3, #3
 8007672:	1a5b      	subs	r3, r3, r1
 8007674:	009b      	lsls	r3, r3, #2
 8007676:	4403      	add	r3, r0
 8007678:	3344      	adds	r3, #68	; 0x44
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	fbb2 f1f3 	udiv	r1, r2, r3
 8007680:	fb03 f301 	mul.w	r3, r3, r1
 8007684:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8007686:	2b00      	cmp	r3, #0
 8007688:	d110      	bne.n	80076ac <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800768a:	78fa      	ldrb	r2, [r7, #3]
 800768c:	6879      	ldr	r1, [r7, #4]
 800768e:	4613      	mov	r3, r2
 8007690:	009b      	lsls	r3, r3, #2
 8007692:	4413      	add	r3, r2
 8007694:	009b      	lsls	r3, r3, #2
 8007696:	440b      	add	r3, r1
 8007698:	3318      	adds	r3, #24
 800769a:	2200      	movs	r2, #0
 800769c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800769e:	78f9      	ldrb	r1, [r7, #3]
 80076a0:	2300      	movs	r3, #0
 80076a2:	2200      	movs	r2, #0
 80076a4:	6878      	ldr	r0, [r7, #4]
 80076a6:	f001 ff4e 	bl	8009546 <USBD_LL_Transmit>
 80076aa:	e015      	b.n	80076d8 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 80076ac:	68bb      	ldr	r3, [r7, #8]
 80076ae:	2200      	movs	r2, #0
 80076b0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80076ba:	691b      	ldr	r3, [r3, #16]
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d00b      	beq.n	80076d8 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80076c6:	691b      	ldr	r3, [r3, #16]
 80076c8:	68ba      	ldr	r2, [r7, #8]
 80076ca:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 80076ce:	68ba      	ldr	r2, [r7, #8]
 80076d0:	f502 7104 	add.w	r1, r2, #528	; 0x210
 80076d4:	78fa      	ldrb	r2, [r7, #3]
 80076d6:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80076d8:	2300      	movs	r3, #0
}
 80076da:	4618      	mov	r0, r3
 80076dc:	3710      	adds	r7, #16
 80076de:	46bd      	mov	sp, r7
 80076e0:	bd80      	pop	{r7, pc}

080076e2 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80076e2:	b580      	push	{r7, lr}
 80076e4:	b084      	sub	sp, #16
 80076e6:	af00      	add	r7, sp, #0
 80076e8:	6078      	str	r0, [r7, #4]
 80076ea:	460b      	mov	r3, r1
 80076ec:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80076f4:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d101      	bne.n	8007704 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007700:	2303      	movs	r3, #3
 8007702:	e015      	b.n	8007730 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8007704:	78fb      	ldrb	r3, [r7, #3]
 8007706:	4619      	mov	r1, r3
 8007708:	6878      	ldr	r0, [r7, #4]
 800770a:	f001 ff5e 	bl	80095ca <USBD_LL_GetRxDataSize>
 800770e:	4602      	mov	r2, r0
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800771c:	68db      	ldr	r3, [r3, #12]
 800771e:	68fa      	ldr	r2, [r7, #12]
 8007720:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8007724:	68fa      	ldr	r2, [r7, #12]
 8007726:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800772a:	4611      	mov	r1, r2
 800772c:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800772e:	2300      	movs	r3, #0
}
 8007730:	4618      	mov	r0, r3
 8007732:	3710      	adds	r7, #16
 8007734:	46bd      	mov	sp, r7
 8007736:	bd80      	pop	{r7, pc}

08007738 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8007738:	b580      	push	{r7, lr}
 800773a:	b084      	sub	sp, #16
 800773c:	af00      	add	r7, sp, #0
 800773e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007746:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	2b00      	cmp	r3, #0
 800774c:	d101      	bne.n	8007752 <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 800774e:	2303      	movs	r3, #3
 8007750:	e01b      	b.n	800778a <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007758:	2b00      	cmp	r3, #0
 800775a:	d015      	beq.n	8007788 <USBD_CDC_EP0_RxReady+0x50>
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8007762:	2bff      	cmp	r3, #255	; 0xff
 8007764:	d010      	beq.n	8007788 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800776c:	689b      	ldr	r3, [r3, #8]
 800776e:	68fa      	ldr	r2, [r7, #12]
 8007770:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8007774:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8007776:	68fa      	ldr	r2, [r7, #12]
 8007778:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800777c:	b292      	uxth	r2, r2
 800777e:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	22ff      	movs	r2, #255	; 0xff
 8007784:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8007788:	2300      	movs	r3, #0
}
 800778a:	4618      	mov	r0, r3
 800778c:	3710      	adds	r7, #16
 800778e:	46bd      	mov	sp, r7
 8007790:	bd80      	pop	{r7, pc}
	...

08007794 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8007794:	b480      	push	{r7}
 8007796:	b083      	sub	sp, #12
 8007798:	af00      	add	r7, sp, #0
 800779a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	2243      	movs	r2, #67	; 0x43
 80077a0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 80077a2:	4b03      	ldr	r3, [pc, #12]	; (80077b0 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 80077a4:	4618      	mov	r0, r3
 80077a6:	370c      	adds	r7, #12
 80077a8:	46bd      	mov	sp, r7
 80077aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ae:	4770      	bx	lr
 80077b0:	20000094 	.word	0x20000094

080077b4 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80077b4:	b480      	push	{r7}
 80077b6:	b083      	sub	sp, #12
 80077b8:	af00      	add	r7, sp, #0
 80077ba:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	2243      	movs	r2, #67	; 0x43
 80077c0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 80077c2:	4b03      	ldr	r3, [pc, #12]	; (80077d0 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 80077c4:	4618      	mov	r0, r3
 80077c6:	370c      	adds	r7, #12
 80077c8:	46bd      	mov	sp, r7
 80077ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ce:	4770      	bx	lr
 80077d0:	20000050 	.word	0x20000050

080077d4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80077d4:	b480      	push	{r7}
 80077d6:	b083      	sub	sp, #12
 80077d8:	af00      	add	r7, sp, #0
 80077da:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	2243      	movs	r2, #67	; 0x43
 80077e0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 80077e2:	4b03      	ldr	r3, [pc, #12]	; (80077f0 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 80077e4:	4618      	mov	r0, r3
 80077e6:	370c      	adds	r7, #12
 80077e8:	46bd      	mov	sp, r7
 80077ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ee:	4770      	bx	lr
 80077f0:	200000d8 	.word	0x200000d8

080077f4 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80077f4:	b480      	push	{r7}
 80077f6:	b083      	sub	sp, #12
 80077f8:	af00      	add	r7, sp, #0
 80077fa:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	220a      	movs	r2, #10
 8007800:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8007802:	4b03      	ldr	r3, [pc, #12]	; (8007810 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8007804:	4618      	mov	r0, r3
 8007806:	370c      	adds	r7, #12
 8007808:	46bd      	mov	sp, r7
 800780a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800780e:	4770      	bx	lr
 8007810:	2000000c 	.word	0x2000000c

08007814 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8007814:	b480      	push	{r7}
 8007816:	b083      	sub	sp, #12
 8007818:	af00      	add	r7, sp, #0
 800781a:	6078      	str	r0, [r7, #4]
 800781c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800781e:	683b      	ldr	r3, [r7, #0]
 8007820:	2b00      	cmp	r3, #0
 8007822:	d101      	bne.n	8007828 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8007824:	2303      	movs	r3, #3
 8007826:	e004      	b.n	8007832 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	683a      	ldr	r2, [r7, #0]
 800782c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8007830:	2300      	movs	r3, #0
}
 8007832:	4618      	mov	r0, r3
 8007834:	370c      	adds	r7, #12
 8007836:	46bd      	mov	sp, r7
 8007838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800783c:	4770      	bx	lr

0800783e <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800783e:	b480      	push	{r7}
 8007840:	b087      	sub	sp, #28
 8007842:	af00      	add	r7, sp, #0
 8007844:	60f8      	str	r0, [r7, #12]
 8007846:	60b9      	str	r1, [r7, #8]
 8007848:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007850:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8007852:	697b      	ldr	r3, [r7, #20]
 8007854:	2b00      	cmp	r3, #0
 8007856:	d101      	bne.n	800785c <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8007858:	2303      	movs	r3, #3
 800785a:	e008      	b.n	800786e <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 800785c:	697b      	ldr	r3, [r7, #20]
 800785e:	68ba      	ldr	r2, [r7, #8]
 8007860:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8007864:	697b      	ldr	r3, [r7, #20]
 8007866:	687a      	ldr	r2, [r7, #4]
 8007868:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800786c:	2300      	movs	r3, #0
}
 800786e:	4618      	mov	r0, r3
 8007870:	371c      	adds	r7, #28
 8007872:	46bd      	mov	sp, r7
 8007874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007878:	4770      	bx	lr

0800787a <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800787a:	b480      	push	{r7}
 800787c:	b085      	sub	sp, #20
 800787e:	af00      	add	r7, sp, #0
 8007880:	6078      	str	r0, [r7, #4]
 8007882:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800788a:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	2b00      	cmp	r3, #0
 8007890:	d101      	bne.n	8007896 <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 8007892:	2303      	movs	r3, #3
 8007894:	e004      	b.n	80078a0 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	683a      	ldr	r2, [r7, #0]
 800789a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800789e:	2300      	movs	r3, #0
}
 80078a0:	4618      	mov	r0, r3
 80078a2:	3714      	adds	r7, #20
 80078a4:	46bd      	mov	sp, r7
 80078a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078aa:	4770      	bx	lr

080078ac <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80078ac:	b580      	push	{r7, lr}
 80078ae:	b084      	sub	sp, #16
 80078b0:	af00      	add	r7, sp, #0
 80078b2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80078ba:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 80078bc:	2301      	movs	r3, #1
 80078be:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d101      	bne.n	80078ce <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80078ca:	2303      	movs	r3, #3
 80078cc:	e01a      	b.n	8007904 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 80078ce:	68bb      	ldr	r3, [r7, #8]
 80078d0:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d114      	bne.n	8007902 <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 80078d8:	68bb      	ldr	r3, [r7, #8]
 80078da:	2201      	movs	r2, #1
 80078dc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 80078e0:	68bb      	ldr	r3, [r7, #8]
 80078e2:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 80078ea:	68bb      	ldr	r3, [r7, #8]
 80078ec:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 80078f0:	68bb      	ldr	r3, [r7, #8]
 80078f2:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80078f6:	2181      	movs	r1, #129	; 0x81
 80078f8:	6878      	ldr	r0, [r7, #4]
 80078fa:	f001 fe24 	bl	8009546 <USBD_LL_Transmit>

    ret = USBD_OK;
 80078fe:	2300      	movs	r3, #0
 8007900:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8007902:	7bfb      	ldrb	r3, [r7, #15]
}
 8007904:	4618      	mov	r0, r3
 8007906:	3710      	adds	r7, #16
 8007908:	46bd      	mov	sp, r7
 800790a:	bd80      	pop	{r7, pc}

0800790c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800790c:	b580      	push	{r7, lr}
 800790e:	b084      	sub	sp, #16
 8007910:	af00      	add	r7, sp, #0
 8007912:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800791a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007922:	2b00      	cmp	r3, #0
 8007924:	d101      	bne.n	800792a <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8007926:	2303      	movs	r3, #3
 8007928:	e016      	b.n	8007958 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	7c1b      	ldrb	r3, [r3, #16]
 800792e:	2b00      	cmp	r3, #0
 8007930:	d109      	bne.n	8007946 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007938:	f44f 7300 	mov.w	r3, #512	; 0x200
 800793c:	2101      	movs	r1, #1
 800793e:	6878      	ldr	r0, [r7, #4]
 8007940:	f001 fe22 	bl	8009588 <USBD_LL_PrepareReceive>
 8007944:	e007      	b.n	8007956 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800794c:	2340      	movs	r3, #64	; 0x40
 800794e:	2101      	movs	r1, #1
 8007950:	6878      	ldr	r0, [r7, #4]
 8007952:	f001 fe19 	bl	8009588 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007956:	2300      	movs	r3, #0
}
 8007958:	4618      	mov	r0, r3
 800795a:	3710      	adds	r7, #16
 800795c:	46bd      	mov	sp, r7
 800795e:	bd80      	pop	{r7, pc}

08007960 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007960:	b580      	push	{r7, lr}
 8007962:	b086      	sub	sp, #24
 8007964:	af00      	add	r7, sp, #0
 8007966:	60f8      	str	r0, [r7, #12]
 8007968:	60b9      	str	r1, [r7, #8]
 800796a:	4613      	mov	r3, r2
 800796c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	2b00      	cmp	r3, #0
 8007972:	d101      	bne.n	8007978 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8007974:	2303      	movs	r3, #3
 8007976:	e01f      	b.n	80079b8 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	2200      	movs	r2, #0
 800797c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	2200      	movs	r2, #0
 8007984:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	2200      	movs	r2, #0
 800798c:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007990:	68bb      	ldr	r3, [r7, #8]
 8007992:	2b00      	cmp	r3, #0
 8007994:	d003      	beq.n	800799e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	68ba      	ldr	r2, [r7, #8]
 800799a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	2201      	movs	r2, #1
 80079a2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	79fa      	ldrb	r2, [r7, #7]
 80079aa:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80079ac:	68f8      	ldr	r0, [r7, #12]
 80079ae:	f001 fc95 	bl	80092dc <USBD_LL_Init>
 80079b2:	4603      	mov	r3, r0
 80079b4:	75fb      	strb	r3, [r7, #23]

  return ret;
 80079b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80079b8:	4618      	mov	r0, r3
 80079ba:	3718      	adds	r7, #24
 80079bc:	46bd      	mov	sp, r7
 80079be:	bd80      	pop	{r7, pc}

080079c0 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80079c0:	b580      	push	{r7, lr}
 80079c2:	b084      	sub	sp, #16
 80079c4:	af00      	add	r7, sp, #0
 80079c6:	6078      	str	r0, [r7, #4]
 80079c8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80079ca:	2300      	movs	r3, #0
 80079cc:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80079ce:	683b      	ldr	r3, [r7, #0]
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d101      	bne.n	80079d8 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 80079d4:	2303      	movs	r3, #3
 80079d6:	e016      	b.n	8007a06 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	683a      	ldr	r2, [r7, #0]
 80079dc:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80079e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	d00b      	beq.n	8007a04 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80079f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079f4:	f107 020e 	add.w	r2, r7, #14
 80079f8:	4610      	mov	r0, r2
 80079fa:	4798      	blx	r3
 80079fc:	4602      	mov	r2, r0
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8007a04:	2300      	movs	r3, #0
}
 8007a06:	4618      	mov	r0, r3
 8007a08:	3710      	adds	r7, #16
 8007a0a:	46bd      	mov	sp, r7
 8007a0c:	bd80      	pop	{r7, pc}

08007a0e <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007a0e:	b580      	push	{r7, lr}
 8007a10:	b082      	sub	sp, #8
 8007a12:	af00      	add	r7, sp, #0
 8007a14:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8007a16:	6878      	ldr	r0, [r7, #4]
 8007a18:	f001 fcac 	bl	8009374 <USBD_LL_Start>
 8007a1c:	4603      	mov	r3, r0
}
 8007a1e:	4618      	mov	r0, r3
 8007a20:	3708      	adds	r7, #8
 8007a22:	46bd      	mov	sp, r7
 8007a24:	bd80      	pop	{r7, pc}

08007a26 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8007a26:	b480      	push	{r7}
 8007a28:	b083      	sub	sp, #12
 8007a2a:	af00      	add	r7, sp, #0
 8007a2c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007a2e:	2300      	movs	r3, #0
}
 8007a30:	4618      	mov	r0, r3
 8007a32:	370c      	adds	r7, #12
 8007a34:	46bd      	mov	sp, r7
 8007a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a3a:	4770      	bx	lr

08007a3c <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007a3c:	b580      	push	{r7, lr}
 8007a3e:	b084      	sub	sp, #16
 8007a40:	af00      	add	r7, sp, #0
 8007a42:	6078      	str	r0, [r7, #4]
 8007a44:	460b      	mov	r3, r1
 8007a46:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8007a48:	2303      	movs	r3, #3
 8007a4a:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d009      	beq.n	8007a6a <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	78fa      	ldrb	r2, [r7, #3]
 8007a60:	4611      	mov	r1, r2
 8007a62:	6878      	ldr	r0, [r7, #4]
 8007a64:	4798      	blx	r3
 8007a66:	4603      	mov	r3, r0
 8007a68:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8007a6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a6c:	4618      	mov	r0, r3
 8007a6e:	3710      	adds	r7, #16
 8007a70:	46bd      	mov	sp, r7
 8007a72:	bd80      	pop	{r7, pc}

08007a74 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007a74:	b580      	push	{r7, lr}
 8007a76:	b082      	sub	sp, #8
 8007a78:	af00      	add	r7, sp, #0
 8007a7a:	6078      	str	r0, [r7, #4]
 8007a7c:	460b      	mov	r3, r1
 8007a7e:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d007      	beq.n	8007a9a <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007a90:	685b      	ldr	r3, [r3, #4]
 8007a92:	78fa      	ldrb	r2, [r7, #3]
 8007a94:	4611      	mov	r1, r2
 8007a96:	6878      	ldr	r0, [r7, #4]
 8007a98:	4798      	blx	r3
  }

  return USBD_OK;
 8007a9a:	2300      	movs	r3, #0
}
 8007a9c:	4618      	mov	r0, r3
 8007a9e:	3708      	adds	r7, #8
 8007aa0:	46bd      	mov	sp, r7
 8007aa2:	bd80      	pop	{r7, pc}

08007aa4 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007aa4:	b580      	push	{r7, lr}
 8007aa6:	b084      	sub	sp, #16
 8007aa8:	af00      	add	r7, sp, #0
 8007aaa:	6078      	str	r0, [r7, #4]
 8007aac:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007ab4:	6839      	ldr	r1, [r7, #0]
 8007ab6:	4618      	mov	r0, r3
 8007ab8:	f000 ff90 	bl	80089dc <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	2201      	movs	r2, #1
 8007ac0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8007aca:	461a      	mov	r2, r3
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007ad8:	f003 031f 	and.w	r3, r3, #31
 8007adc:	2b02      	cmp	r3, #2
 8007ade:	d01a      	beq.n	8007b16 <USBD_LL_SetupStage+0x72>
 8007ae0:	2b02      	cmp	r3, #2
 8007ae2:	d822      	bhi.n	8007b2a <USBD_LL_SetupStage+0x86>
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d002      	beq.n	8007aee <USBD_LL_SetupStage+0x4a>
 8007ae8:	2b01      	cmp	r3, #1
 8007aea:	d00a      	beq.n	8007b02 <USBD_LL_SetupStage+0x5e>
 8007aec:	e01d      	b.n	8007b2a <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007af4:	4619      	mov	r1, r3
 8007af6:	6878      	ldr	r0, [r7, #4]
 8007af8:	f000 fa62 	bl	8007fc0 <USBD_StdDevReq>
 8007afc:	4603      	mov	r3, r0
 8007afe:	73fb      	strb	r3, [r7, #15]
      break;
 8007b00:	e020      	b.n	8007b44 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007b08:	4619      	mov	r1, r3
 8007b0a:	6878      	ldr	r0, [r7, #4]
 8007b0c:	f000 fac6 	bl	800809c <USBD_StdItfReq>
 8007b10:	4603      	mov	r3, r0
 8007b12:	73fb      	strb	r3, [r7, #15]
      break;
 8007b14:	e016      	b.n	8007b44 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007b1c:	4619      	mov	r1, r3
 8007b1e:	6878      	ldr	r0, [r7, #4]
 8007b20:	f000 fb05 	bl	800812e <USBD_StdEPReq>
 8007b24:	4603      	mov	r3, r0
 8007b26:	73fb      	strb	r3, [r7, #15]
      break;
 8007b28:	e00c      	b.n	8007b44 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007b30:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007b34:	b2db      	uxtb	r3, r3
 8007b36:	4619      	mov	r1, r3
 8007b38:	6878      	ldr	r0, [r7, #4]
 8007b3a:	f001 fc7b 	bl	8009434 <USBD_LL_StallEP>
 8007b3e:	4603      	mov	r3, r0
 8007b40:	73fb      	strb	r3, [r7, #15]
      break;
 8007b42:	bf00      	nop
  }

  return ret;
 8007b44:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b46:	4618      	mov	r0, r3
 8007b48:	3710      	adds	r7, #16
 8007b4a:	46bd      	mov	sp, r7
 8007b4c:	bd80      	pop	{r7, pc}

08007b4e <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007b4e:	b580      	push	{r7, lr}
 8007b50:	b086      	sub	sp, #24
 8007b52:	af00      	add	r7, sp, #0
 8007b54:	60f8      	str	r0, [r7, #12]
 8007b56:	460b      	mov	r3, r1
 8007b58:	607a      	str	r2, [r7, #4]
 8007b5a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8007b5c:	7afb      	ldrb	r3, [r7, #11]
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d138      	bne.n	8007bd4 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8007b68:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007b70:	2b03      	cmp	r3, #3
 8007b72:	d14a      	bne.n	8007c0a <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8007b74:	693b      	ldr	r3, [r7, #16]
 8007b76:	689a      	ldr	r2, [r3, #8]
 8007b78:	693b      	ldr	r3, [r7, #16]
 8007b7a:	68db      	ldr	r3, [r3, #12]
 8007b7c:	429a      	cmp	r2, r3
 8007b7e:	d913      	bls.n	8007ba8 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8007b80:	693b      	ldr	r3, [r7, #16]
 8007b82:	689a      	ldr	r2, [r3, #8]
 8007b84:	693b      	ldr	r3, [r7, #16]
 8007b86:	68db      	ldr	r3, [r3, #12]
 8007b88:	1ad2      	subs	r2, r2, r3
 8007b8a:	693b      	ldr	r3, [r7, #16]
 8007b8c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8007b8e:	693b      	ldr	r3, [r7, #16]
 8007b90:	68da      	ldr	r2, [r3, #12]
 8007b92:	693b      	ldr	r3, [r7, #16]
 8007b94:	689b      	ldr	r3, [r3, #8]
 8007b96:	4293      	cmp	r3, r2
 8007b98:	bf28      	it	cs
 8007b9a:	4613      	movcs	r3, r2
 8007b9c:	461a      	mov	r2, r3
 8007b9e:	6879      	ldr	r1, [r7, #4]
 8007ba0:	68f8      	ldr	r0, [r7, #12]
 8007ba2:	f001 f80f 	bl	8008bc4 <USBD_CtlContinueRx>
 8007ba6:	e030      	b.n	8007c0a <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007bae:	b2db      	uxtb	r3, r3
 8007bb0:	2b03      	cmp	r3, #3
 8007bb2:	d10b      	bne.n	8007bcc <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007bba:	691b      	ldr	r3, [r3, #16]
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d005      	beq.n	8007bcc <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007bc6:	691b      	ldr	r3, [r3, #16]
 8007bc8:	68f8      	ldr	r0, [r7, #12]
 8007bca:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8007bcc:	68f8      	ldr	r0, [r7, #12]
 8007bce:	f001 f80a 	bl	8008be6 <USBD_CtlSendStatus>
 8007bd2:	e01a      	b.n	8007c0a <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007bda:	b2db      	uxtb	r3, r3
 8007bdc:	2b03      	cmp	r3, #3
 8007bde:	d114      	bne.n	8007c0a <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007be6:	699b      	ldr	r3, [r3, #24]
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	d00e      	beq.n	8007c0a <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007bf2:	699b      	ldr	r3, [r3, #24]
 8007bf4:	7afa      	ldrb	r2, [r7, #11]
 8007bf6:	4611      	mov	r1, r2
 8007bf8:	68f8      	ldr	r0, [r7, #12]
 8007bfa:	4798      	blx	r3
 8007bfc:	4603      	mov	r3, r0
 8007bfe:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8007c00:	7dfb      	ldrb	r3, [r7, #23]
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d001      	beq.n	8007c0a <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 8007c06:	7dfb      	ldrb	r3, [r7, #23]
 8007c08:	e000      	b.n	8007c0c <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8007c0a:	2300      	movs	r3, #0
}
 8007c0c:	4618      	mov	r0, r3
 8007c0e:	3718      	adds	r7, #24
 8007c10:	46bd      	mov	sp, r7
 8007c12:	bd80      	pop	{r7, pc}

08007c14 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007c14:	b580      	push	{r7, lr}
 8007c16:	b086      	sub	sp, #24
 8007c18:	af00      	add	r7, sp, #0
 8007c1a:	60f8      	str	r0, [r7, #12]
 8007c1c:	460b      	mov	r3, r1
 8007c1e:	607a      	str	r2, [r7, #4]
 8007c20:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8007c22:	7afb      	ldrb	r3, [r7, #11]
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d16b      	bne.n	8007d00 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	3314      	adds	r3, #20
 8007c2c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007c34:	2b02      	cmp	r3, #2
 8007c36:	d156      	bne.n	8007ce6 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8007c38:	693b      	ldr	r3, [r7, #16]
 8007c3a:	689a      	ldr	r2, [r3, #8]
 8007c3c:	693b      	ldr	r3, [r7, #16]
 8007c3e:	68db      	ldr	r3, [r3, #12]
 8007c40:	429a      	cmp	r2, r3
 8007c42:	d914      	bls.n	8007c6e <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8007c44:	693b      	ldr	r3, [r7, #16]
 8007c46:	689a      	ldr	r2, [r3, #8]
 8007c48:	693b      	ldr	r3, [r7, #16]
 8007c4a:	68db      	ldr	r3, [r3, #12]
 8007c4c:	1ad2      	subs	r2, r2, r3
 8007c4e:	693b      	ldr	r3, [r7, #16]
 8007c50:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8007c52:	693b      	ldr	r3, [r7, #16]
 8007c54:	689b      	ldr	r3, [r3, #8]
 8007c56:	461a      	mov	r2, r3
 8007c58:	6879      	ldr	r1, [r7, #4]
 8007c5a:	68f8      	ldr	r0, [r7, #12]
 8007c5c:	f000 ff84 	bl	8008b68 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007c60:	2300      	movs	r3, #0
 8007c62:	2200      	movs	r2, #0
 8007c64:	2100      	movs	r1, #0
 8007c66:	68f8      	ldr	r0, [r7, #12]
 8007c68:	f001 fc8e 	bl	8009588 <USBD_LL_PrepareReceive>
 8007c6c:	e03b      	b.n	8007ce6 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8007c6e:	693b      	ldr	r3, [r7, #16]
 8007c70:	68da      	ldr	r2, [r3, #12]
 8007c72:	693b      	ldr	r3, [r7, #16]
 8007c74:	689b      	ldr	r3, [r3, #8]
 8007c76:	429a      	cmp	r2, r3
 8007c78:	d11c      	bne.n	8007cb4 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8007c7a:	693b      	ldr	r3, [r7, #16]
 8007c7c:	685a      	ldr	r2, [r3, #4]
 8007c7e:	693b      	ldr	r3, [r7, #16]
 8007c80:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8007c82:	429a      	cmp	r2, r3
 8007c84:	d316      	bcc.n	8007cb4 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8007c86:	693b      	ldr	r3, [r7, #16]
 8007c88:	685a      	ldr	r2, [r3, #4]
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007c90:	429a      	cmp	r2, r3
 8007c92:	d20f      	bcs.n	8007cb4 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007c94:	2200      	movs	r2, #0
 8007c96:	2100      	movs	r1, #0
 8007c98:	68f8      	ldr	r0, [r7, #12]
 8007c9a:	f000 ff65 	bl	8008b68 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	2200      	movs	r2, #0
 8007ca2:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007ca6:	2300      	movs	r3, #0
 8007ca8:	2200      	movs	r2, #0
 8007caa:	2100      	movs	r1, #0
 8007cac:	68f8      	ldr	r0, [r7, #12]
 8007cae:	f001 fc6b 	bl	8009588 <USBD_LL_PrepareReceive>
 8007cb2:	e018      	b.n	8007ce6 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007cba:	b2db      	uxtb	r3, r3
 8007cbc:	2b03      	cmp	r3, #3
 8007cbe:	d10b      	bne.n	8007cd8 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007cc6:	68db      	ldr	r3, [r3, #12]
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d005      	beq.n	8007cd8 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007cd2:	68db      	ldr	r3, [r3, #12]
 8007cd4:	68f8      	ldr	r0, [r7, #12]
 8007cd6:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8007cd8:	2180      	movs	r1, #128	; 0x80
 8007cda:	68f8      	ldr	r0, [r7, #12]
 8007cdc:	f001 fbaa 	bl	8009434 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8007ce0:	68f8      	ldr	r0, [r7, #12]
 8007ce2:	f000 ff93 	bl	8008c0c <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8007cec:	2b01      	cmp	r3, #1
 8007cee:	d122      	bne.n	8007d36 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8007cf0:	68f8      	ldr	r0, [r7, #12]
 8007cf2:	f7ff fe98 	bl	8007a26 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	2200      	movs	r2, #0
 8007cfa:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8007cfe:	e01a      	b.n	8007d36 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007d06:	b2db      	uxtb	r3, r3
 8007d08:	2b03      	cmp	r3, #3
 8007d0a:	d114      	bne.n	8007d36 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d12:	695b      	ldr	r3, [r3, #20]
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	d00e      	beq.n	8007d36 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d1e:	695b      	ldr	r3, [r3, #20]
 8007d20:	7afa      	ldrb	r2, [r7, #11]
 8007d22:	4611      	mov	r1, r2
 8007d24:	68f8      	ldr	r0, [r7, #12]
 8007d26:	4798      	blx	r3
 8007d28:	4603      	mov	r3, r0
 8007d2a:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8007d2c:	7dfb      	ldrb	r3, [r7, #23]
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d001      	beq.n	8007d36 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 8007d32:	7dfb      	ldrb	r3, [r7, #23]
 8007d34:	e000      	b.n	8007d38 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 8007d36:	2300      	movs	r3, #0
}
 8007d38:	4618      	mov	r0, r3
 8007d3a:	3718      	adds	r7, #24
 8007d3c:	46bd      	mov	sp, r7
 8007d3e:	bd80      	pop	{r7, pc}

08007d40 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007d40:	b580      	push	{r7, lr}
 8007d42:	b082      	sub	sp, #8
 8007d44:	af00      	add	r7, sp, #0
 8007d46:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	2201      	movs	r2, #1
 8007d4c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	2200      	movs	r2, #0
 8007d54:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	2200      	movs	r2, #0
 8007d5c:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	2200      	movs	r2, #0
 8007d62:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d101      	bne.n	8007d74 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8007d70:	2303      	movs	r3, #3
 8007d72:	e02f      	b.n	8007dd4 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d00f      	beq.n	8007d9e <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d84:	685b      	ldr	r3, [r3, #4]
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d009      	beq.n	8007d9e <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d90:	685b      	ldr	r3, [r3, #4]
 8007d92:	687a      	ldr	r2, [r7, #4]
 8007d94:	6852      	ldr	r2, [r2, #4]
 8007d96:	b2d2      	uxtb	r2, r2
 8007d98:	4611      	mov	r1, r2
 8007d9a:	6878      	ldr	r0, [r7, #4]
 8007d9c:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007d9e:	2340      	movs	r3, #64	; 0x40
 8007da0:	2200      	movs	r2, #0
 8007da2:	2100      	movs	r1, #0
 8007da4:	6878      	ldr	r0, [r7, #4]
 8007da6:	f001 fb00 	bl	80093aa <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	2201      	movs	r2, #1
 8007dae:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	2240      	movs	r2, #64	; 0x40
 8007db6:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007dba:	2340      	movs	r3, #64	; 0x40
 8007dbc:	2200      	movs	r2, #0
 8007dbe:	2180      	movs	r1, #128	; 0x80
 8007dc0:	6878      	ldr	r0, [r7, #4]
 8007dc2:	f001 faf2 	bl	80093aa <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	2201      	movs	r2, #1
 8007dca:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	2240      	movs	r2, #64	; 0x40
 8007dd0:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8007dd2:	2300      	movs	r3, #0
}
 8007dd4:	4618      	mov	r0, r3
 8007dd6:	3708      	adds	r7, #8
 8007dd8:	46bd      	mov	sp, r7
 8007dda:	bd80      	pop	{r7, pc}

08007ddc <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007ddc:	b480      	push	{r7}
 8007dde:	b083      	sub	sp, #12
 8007de0:	af00      	add	r7, sp, #0
 8007de2:	6078      	str	r0, [r7, #4]
 8007de4:	460b      	mov	r3, r1
 8007de6:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	78fa      	ldrb	r2, [r7, #3]
 8007dec:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007dee:	2300      	movs	r3, #0
}
 8007df0:	4618      	mov	r0, r3
 8007df2:	370c      	adds	r7, #12
 8007df4:	46bd      	mov	sp, r7
 8007df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dfa:	4770      	bx	lr

08007dfc <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007dfc:	b480      	push	{r7}
 8007dfe:	b083      	sub	sp, #12
 8007e00:	af00      	add	r7, sp, #0
 8007e02:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007e0a:	b2da      	uxtb	r2, r3
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	2204      	movs	r2, #4
 8007e16:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8007e1a:	2300      	movs	r3, #0
}
 8007e1c:	4618      	mov	r0, r3
 8007e1e:	370c      	adds	r7, #12
 8007e20:	46bd      	mov	sp, r7
 8007e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e26:	4770      	bx	lr

08007e28 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007e28:	b480      	push	{r7}
 8007e2a:	b083      	sub	sp, #12
 8007e2c:	af00      	add	r7, sp, #0
 8007e2e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007e36:	b2db      	uxtb	r3, r3
 8007e38:	2b04      	cmp	r3, #4
 8007e3a:	d106      	bne.n	8007e4a <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8007e42:	b2da      	uxtb	r2, r3
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8007e4a:	2300      	movs	r3, #0
}
 8007e4c:	4618      	mov	r0, r3
 8007e4e:	370c      	adds	r7, #12
 8007e50:	46bd      	mov	sp, r7
 8007e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e56:	4770      	bx	lr

08007e58 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007e58:	b580      	push	{r7, lr}
 8007e5a:	b082      	sub	sp, #8
 8007e5c:	af00      	add	r7, sp, #0
 8007e5e:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d101      	bne.n	8007e6e <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 8007e6a:	2303      	movs	r3, #3
 8007e6c:	e012      	b.n	8007e94 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007e74:	b2db      	uxtb	r3, r3
 8007e76:	2b03      	cmp	r3, #3
 8007e78:	d10b      	bne.n	8007e92 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e80:	69db      	ldr	r3, [r3, #28]
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d005      	beq.n	8007e92 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e8c:	69db      	ldr	r3, [r3, #28]
 8007e8e:	6878      	ldr	r0, [r7, #4]
 8007e90:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007e92:	2300      	movs	r3, #0
}
 8007e94:	4618      	mov	r0, r3
 8007e96:	3708      	adds	r7, #8
 8007e98:	46bd      	mov	sp, r7
 8007e9a:	bd80      	pop	{r7, pc}

08007e9c <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8007e9c:	b580      	push	{r7, lr}
 8007e9e:	b082      	sub	sp, #8
 8007ea0:	af00      	add	r7, sp, #0
 8007ea2:	6078      	str	r0, [r7, #4]
 8007ea4:	460b      	mov	r3, r1
 8007ea6:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d101      	bne.n	8007eb6 <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 8007eb2:	2303      	movs	r3, #3
 8007eb4:	e014      	b.n	8007ee0 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007ebc:	b2db      	uxtb	r3, r3
 8007ebe:	2b03      	cmp	r3, #3
 8007ec0:	d10d      	bne.n	8007ede <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007ec8:	6a1b      	ldr	r3, [r3, #32]
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d007      	beq.n	8007ede <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007ed4:	6a1b      	ldr	r3, [r3, #32]
 8007ed6:	78fa      	ldrb	r2, [r7, #3]
 8007ed8:	4611      	mov	r1, r2
 8007eda:	6878      	ldr	r0, [r7, #4]
 8007edc:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007ede:	2300      	movs	r3, #0
}
 8007ee0:	4618      	mov	r0, r3
 8007ee2:	3708      	adds	r7, #8
 8007ee4:	46bd      	mov	sp, r7
 8007ee6:	bd80      	pop	{r7, pc}

08007ee8 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8007ee8:	b580      	push	{r7, lr}
 8007eea:	b082      	sub	sp, #8
 8007eec:	af00      	add	r7, sp, #0
 8007eee:	6078      	str	r0, [r7, #4]
 8007ef0:	460b      	mov	r3, r1
 8007ef2:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d101      	bne.n	8007f02 <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 8007efe:	2303      	movs	r3, #3
 8007f00:	e014      	b.n	8007f2c <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007f08:	b2db      	uxtb	r3, r3
 8007f0a:	2b03      	cmp	r3, #3
 8007f0c:	d10d      	bne.n	8007f2a <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d007      	beq.n	8007f2a <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f22:	78fa      	ldrb	r2, [r7, #3]
 8007f24:	4611      	mov	r1, r2
 8007f26:	6878      	ldr	r0, [r7, #4]
 8007f28:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007f2a:	2300      	movs	r3, #0
}
 8007f2c:	4618      	mov	r0, r3
 8007f2e:	3708      	adds	r7, #8
 8007f30:	46bd      	mov	sp, r7
 8007f32:	bd80      	pop	{r7, pc}

08007f34 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8007f34:	b480      	push	{r7}
 8007f36:	b083      	sub	sp, #12
 8007f38:	af00      	add	r7, sp, #0
 8007f3a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007f3c:	2300      	movs	r3, #0
}
 8007f3e:	4618      	mov	r0, r3
 8007f40:	370c      	adds	r7, #12
 8007f42:	46bd      	mov	sp, r7
 8007f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f48:	4770      	bx	lr

08007f4a <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8007f4a:	b580      	push	{r7, lr}
 8007f4c:	b082      	sub	sp, #8
 8007f4e:	af00      	add	r7, sp, #0
 8007f50:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	2201      	movs	r2, #1
 8007f56:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	d009      	beq.n	8007f78 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f6a:	685b      	ldr	r3, [r3, #4]
 8007f6c:	687a      	ldr	r2, [r7, #4]
 8007f6e:	6852      	ldr	r2, [r2, #4]
 8007f70:	b2d2      	uxtb	r2, r2
 8007f72:	4611      	mov	r1, r2
 8007f74:	6878      	ldr	r0, [r7, #4]
 8007f76:	4798      	blx	r3
  }

  return USBD_OK;
 8007f78:	2300      	movs	r3, #0
}
 8007f7a:	4618      	mov	r0, r3
 8007f7c:	3708      	adds	r7, #8
 8007f7e:	46bd      	mov	sp, r7
 8007f80:	bd80      	pop	{r7, pc}

08007f82 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8007f82:	b480      	push	{r7}
 8007f84:	b087      	sub	sp, #28
 8007f86:	af00      	add	r7, sp, #0
 8007f88:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8007f8e:	697b      	ldr	r3, [r7, #20]
 8007f90:	781b      	ldrb	r3, [r3, #0]
 8007f92:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8007f94:	697b      	ldr	r3, [r7, #20]
 8007f96:	3301      	adds	r3, #1
 8007f98:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8007f9a:	697b      	ldr	r3, [r7, #20]
 8007f9c:	781b      	ldrb	r3, [r3, #0]
 8007f9e:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8007fa0:	8a3b      	ldrh	r3, [r7, #16]
 8007fa2:	021b      	lsls	r3, r3, #8
 8007fa4:	b21a      	sxth	r2, r3
 8007fa6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007faa:	4313      	orrs	r3, r2
 8007fac:	b21b      	sxth	r3, r3
 8007fae:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8007fb0:	89fb      	ldrh	r3, [r7, #14]
}
 8007fb2:	4618      	mov	r0, r3
 8007fb4:	371c      	adds	r7, #28
 8007fb6:	46bd      	mov	sp, r7
 8007fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fbc:	4770      	bx	lr
	...

08007fc0 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007fc0:	b580      	push	{r7, lr}
 8007fc2:	b084      	sub	sp, #16
 8007fc4:	af00      	add	r7, sp, #0
 8007fc6:	6078      	str	r0, [r7, #4]
 8007fc8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007fca:	2300      	movs	r3, #0
 8007fcc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007fce:	683b      	ldr	r3, [r7, #0]
 8007fd0:	781b      	ldrb	r3, [r3, #0]
 8007fd2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007fd6:	2b40      	cmp	r3, #64	; 0x40
 8007fd8:	d005      	beq.n	8007fe6 <USBD_StdDevReq+0x26>
 8007fda:	2b40      	cmp	r3, #64	; 0x40
 8007fdc:	d853      	bhi.n	8008086 <USBD_StdDevReq+0xc6>
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	d00b      	beq.n	8007ffa <USBD_StdDevReq+0x3a>
 8007fe2:	2b20      	cmp	r3, #32
 8007fe4:	d14f      	bne.n	8008086 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007fec:	689b      	ldr	r3, [r3, #8]
 8007fee:	6839      	ldr	r1, [r7, #0]
 8007ff0:	6878      	ldr	r0, [r7, #4]
 8007ff2:	4798      	blx	r3
 8007ff4:	4603      	mov	r3, r0
 8007ff6:	73fb      	strb	r3, [r7, #15]
      break;
 8007ff8:	e04a      	b.n	8008090 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007ffa:	683b      	ldr	r3, [r7, #0]
 8007ffc:	785b      	ldrb	r3, [r3, #1]
 8007ffe:	2b09      	cmp	r3, #9
 8008000:	d83b      	bhi.n	800807a <USBD_StdDevReq+0xba>
 8008002:	a201      	add	r2, pc, #4	; (adr r2, 8008008 <USBD_StdDevReq+0x48>)
 8008004:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008008:	0800805d 	.word	0x0800805d
 800800c:	08008071 	.word	0x08008071
 8008010:	0800807b 	.word	0x0800807b
 8008014:	08008067 	.word	0x08008067
 8008018:	0800807b 	.word	0x0800807b
 800801c:	0800803b 	.word	0x0800803b
 8008020:	08008031 	.word	0x08008031
 8008024:	0800807b 	.word	0x0800807b
 8008028:	08008053 	.word	0x08008053
 800802c:	08008045 	.word	0x08008045
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8008030:	6839      	ldr	r1, [r7, #0]
 8008032:	6878      	ldr	r0, [r7, #4]
 8008034:	f000 f9de 	bl	80083f4 <USBD_GetDescriptor>
          break;
 8008038:	e024      	b.n	8008084 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800803a:	6839      	ldr	r1, [r7, #0]
 800803c:	6878      	ldr	r0, [r7, #4]
 800803e:	f000 fb43 	bl	80086c8 <USBD_SetAddress>
          break;
 8008042:	e01f      	b.n	8008084 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8008044:	6839      	ldr	r1, [r7, #0]
 8008046:	6878      	ldr	r0, [r7, #4]
 8008048:	f000 fb82 	bl	8008750 <USBD_SetConfig>
 800804c:	4603      	mov	r3, r0
 800804e:	73fb      	strb	r3, [r7, #15]
          break;
 8008050:	e018      	b.n	8008084 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8008052:	6839      	ldr	r1, [r7, #0]
 8008054:	6878      	ldr	r0, [r7, #4]
 8008056:	f000 fc21 	bl	800889c <USBD_GetConfig>
          break;
 800805a:	e013      	b.n	8008084 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800805c:	6839      	ldr	r1, [r7, #0]
 800805e:	6878      	ldr	r0, [r7, #4]
 8008060:	f000 fc52 	bl	8008908 <USBD_GetStatus>
          break;
 8008064:	e00e      	b.n	8008084 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8008066:	6839      	ldr	r1, [r7, #0]
 8008068:	6878      	ldr	r0, [r7, #4]
 800806a:	f000 fc81 	bl	8008970 <USBD_SetFeature>
          break;
 800806e:	e009      	b.n	8008084 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8008070:	6839      	ldr	r1, [r7, #0]
 8008072:	6878      	ldr	r0, [r7, #4]
 8008074:	f000 fc90 	bl	8008998 <USBD_ClrFeature>
          break;
 8008078:	e004      	b.n	8008084 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800807a:	6839      	ldr	r1, [r7, #0]
 800807c:	6878      	ldr	r0, [r7, #4]
 800807e:	f000 fce7 	bl	8008a50 <USBD_CtlError>
          break;
 8008082:	bf00      	nop
      }
      break;
 8008084:	e004      	b.n	8008090 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8008086:	6839      	ldr	r1, [r7, #0]
 8008088:	6878      	ldr	r0, [r7, #4]
 800808a:	f000 fce1 	bl	8008a50 <USBD_CtlError>
      break;
 800808e:	bf00      	nop
  }

  return ret;
 8008090:	7bfb      	ldrb	r3, [r7, #15]
}
 8008092:	4618      	mov	r0, r3
 8008094:	3710      	adds	r7, #16
 8008096:	46bd      	mov	sp, r7
 8008098:	bd80      	pop	{r7, pc}
 800809a:	bf00      	nop

0800809c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800809c:	b580      	push	{r7, lr}
 800809e:	b084      	sub	sp, #16
 80080a0:	af00      	add	r7, sp, #0
 80080a2:	6078      	str	r0, [r7, #4]
 80080a4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80080a6:	2300      	movs	r3, #0
 80080a8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80080aa:	683b      	ldr	r3, [r7, #0]
 80080ac:	781b      	ldrb	r3, [r3, #0]
 80080ae:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80080b2:	2b40      	cmp	r3, #64	; 0x40
 80080b4:	d005      	beq.n	80080c2 <USBD_StdItfReq+0x26>
 80080b6:	2b40      	cmp	r3, #64	; 0x40
 80080b8:	d82f      	bhi.n	800811a <USBD_StdItfReq+0x7e>
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d001      	beq.n	80080c2 <USBD_StdItfReq+0x26>
 80080be:	2b20      	cmp	r3, #32
 80080c0:	d12b      	bne.n	800811a <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80080c8:	b2db      	uxtb	r3, r3
 80080ca:	3b01      	subs	r3, #1
 80080cc:	2b02      	cmp	r3, #2
 80080ce:	d81d      	bhi.n	800810c <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80080d0:	683b      	ldr	r3, [r7, #0]
 80080d2:	889b      	ldrh	r3, [r3, #4]
 80080d4:	b2db      	uxtb	r3, r3
 80080d6:	2b01      	cmp	r3, #1
 80080d8:	d813      	bhi.n	8008102 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80080e0:	689b      	ldr	r3, [r3, #8]
 80080e2:	6839      	ldr	r1, [r7, #0]
 80080e4:	6878      	ldr	r0, [r7, #4]
 80080e6:	4798      	blx	r3
 80080e8:	4603      	mov	r3, r0
 80080ea:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80080ec:	683b      	ldr	r3, [r7, #0]
 80080ee:	88db      	ldrh	r3, [r3, #6]
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	d110      	bne.n	8008116 <USBD_StdItfReq+0x7a>
 80080f4:	7bfb      	ldrb	r3, [r7, #15]
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	d10d      	bne.n	8008116 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 80080fa:	6878      	ldr	r0, [r7, #4]
 80080fc:	f000 fd73 	bl	8008be6 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8008100:	e009      	b.n	8008116 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 8008102:	6839      	ldr	r1, [r7, #0]
 8008104:	6878      	ldr	r0, [r7, #4]
 8008106:	f000 fca3 	bl	8008a50 <USBD_CtlError>
          break;
 800810a:	e004      	b.n	8008116 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 800810c:	6839      	ldr	r1, [r7, #0]
 800810e:	6878      	ldr	r0, [r7, #4]
 8008110:	f000 fc9e 	bl	8008a50 <USBD_CtlError>
          break;
 8008114:	e000      	b.n	8008118 <USBD_StdItfReq+0x7c>
          break;
 8008116:	bf00      	nop
      }
      break;
 8008118:	e004      	b.n	8008124 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800811a:	6839      	ldr	r1, [r7, #0]
 800811c:	6878      	ldr	r0, [r7, #4]
 800811e:	f000 fc97 	bl	8008a50 <USBD_CtlError>
      break;
 8008122:	bf00      	nop
  }

  return ret;
 8008124:	7bfb      	ldrb	r3, [r7, #15]
}
 8008126:	4618      	mov	r0, r3
 8008128:	3710      	adds	r7, #16
 800812a:	46bd      	mov	sp, r7
 800812c:	bd80      	pop	{r7, pc}

0800812e <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800812e:	b580      	push	{r7, lr}
 8008130:	b084      	sub	sp, #16
 8008132:	af00      	add	r7, sp, #0
 8008134:	6078      	str	r0, [r7, #4]
 8008136:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8008138:	2300      	movs	r3, #0
 800813a:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800813c:	683b      	ldr	r3, [r7, #0]
 800813e:	889b      	ldrh	r3, [r3, #4]
 8008140:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008142:	683b      	ldr	r3, [r7, #0]
 8008144:	781b      	ldrb	r3, [r3, #0]
 8008146:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800814a:	2b40      	cmp	r3, #64	; 0x40
 800814c:	d007      	beq.n	800815e <USBD_StdEPReq+0x30>
 800814e:	2b40      	cmp	r3, #64	; 0x40
 8008150:	f200 8145 	bhi.w	80083de <USBD_StdEPReq+0x2b0>
 8008154:	2b00      	cmp	r3, #0
 8008156:	d00c      	beq.n	8008172 <USBD_StdEPReq+0x44>
 8008158:	2b20      	cmp	r3, #32
 800815a:	f040 8140 	bne.w	80083de <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008164:	689b      	ldr	r3, [r3, #8]
 8008166:	6839      	ldr	r1, [r7, #0]
 8008168:	6878      	ldr	r0, [r7, #4]
 800816a:	4798      	blx	r3
 800816c:	4603      	mov	r3, r0
 800816e:	73fb      	strb	r3, [r7, #15]
      break;
 8008170:	e13a      	b.n	80083e8 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008172:	683b      	ldr	r3, [r7, #0]
 8008174:	785b      	ldrb	r3, [r3, #1]
 8008176:	2b03      	cmp	r3, #3
 8008178:	d007      	beq.n	800818a <USBD_StdEPReq+0x5c>
 800817a:	2b03      	cmp	r3, #3
 800817c:	f300 8129 	bgt.w	80083d2 <USBD_StdEPReq+0x2a4>
 8008180:	2b00      	cmp	r3, #0
 8008182:	d07f      	beq.n	8008284 <USBD_StdEPReq+0x156>
 8008184:	2b01      	cmp	r3, #1
 8008186:	d03c      	beq.n	8008202 <USBD_StdEPReq+0xd4>
 8008188:	e123      	b.n	80083d2 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008190:	b2db      	uxtb	r3, r3
 8008192:	2b02      	cmp	r3, #2
 8008194:	d002      	beq.n	800819c <USBD_StdEPReq+0x6e>
 8008196:	2b03      	cmp	r3, #3
 8008198:	d016      	beq.n	80081c8 <USBD_StdEPReq+0x9a>
 800819a:	e02c      	b.n	80081f6 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800819c:	7bbb      	ldrb	r3, [r7, #14]
 800819e:	2b00      	cmp	r3, #0
 80081a0:	d00d      	beq.n	80081be <USBD_StdEPReq+0x90>
 80081a2:	7bbb      	ldrb	r3, [r7, #14]
 80081a4:	2b80      	cmp	r3, #128	; 0x80
 80081a6:	d00a      	beq.n	80081be <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80081a8:	7bbb      	ldrb	r3, [r7, #14]
 80081aa:	4619      	mov	r1, r3
 80081ac:	6878      	ldr	r0, [r7, #4]
 80081ae:	f001 f941 	bl	8009434 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80081b2:	2180      	movs	r1, #128	; 0x80
 80081b4:	6878      	ldr	r0, [r7, #4]
 80081b6:	f001 f93d 	bl	8009434 <USBD_LL_StallEP>
 80081ba:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80081bc:	e020      	b.n	8008200 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 80081be:	6839      	ldr	r1, [r7, #0]
 80081c0:	6878      	ldr	r0, [r7, #4]
 80081c2:	f000 fc45 	bl	8008a50 <USBD_CtlError>
              break;
 80081c6:	e01b      	b.n	8008200 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80081c8:	683b      	ldr	r3, [r7, #0]
 80081ca:	885b      	ldrh	r3, [r3, #2]
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	d10e      	bne.n	80081ee <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80081d0:	7bbb      	ldrb	r3, [r7, #14]
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	d00b      	beq.n	80081ee <USBD_StdEPReq+0xc0>
 80081d6:	7bbb      	ldrb	r3, [r7, #14]
 80081d8:	2b80      	cmp	r3, #128	; 0x80
 80081da:	d008      	beq.n	80081ee <USBD_StdEPReq+0xc0>
 80081dc:	683b      	ldr	r3, [r7, #0]
 80081de:	88db      	ldrh	r3, [r3, #6]
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	d104      	bne.n	80081ee <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80081e4:	7bbb      	ldrb	r3, [r7, #14]
 80081e6:	4619      	mov	r1, r3
 80081e8:	6878      	ldr	r0, [r7, #4]
 80081ea:	f001 f923 	bl	8009434 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80081ee:	6878      	ldr	r0, [r7, #4]
 80081f0:	f000 fcf9 	bl	8008be6 <USBD_CtlSendStatus>

              break;
 80081f4:	e004      	b.n	8008200 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 80081f6:	6839      	ldr	r1, [r7, #0]
 80081f8:	6878      	ldr	r0, [r7, #4]
 80081fa:	f000 fc29 	bl	8008a50 <USBD_CtlError>
              break;
 80081fe:	bf00      	nop
          }
          break;
 8008200:	e0ec      	b.n	80083dc <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008208:	b2db      	uxtb	r3, r3
 800820a:	2b02      	cmp	r3, #2
 800820c:	d002      	beq.n	8008214 <USBD_StdEPReq+0xe6>
 800820e:	2b03      	cmp	r3, #3
 8008210:	d016      	beq.n	8008240 <USBD_StdEPReq+0x112>
 8008212:	e030      	b.n	8008276 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008214:	7bbb      	ldrb	r3, [r7, #14]
 8008216:	2b00      	cmp	r3, #0
 8008218:	d00d      	beq.n	8008236 <USBD_StdEPReq+0x108>
 800821a:	7bbb      	ldrb	r3, [r7, #14]
 800821c:	2b80      	cmp	r3, #128	; 0x80
 800821e:	d00a      	beq.n	8008236 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008220:	7bbb      	ldrb	r3, [r7, #14]
 8008222:	4619      	mov	r1, r3
 8008224:	6878      	ldr	r0, [r7, #4]
 8008226:	f001 f905 	bl	8009434 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800822a:	2180      	movs	r1, #128	; 0x80
 800822c:	6878      	ldr	r0, [r7, #4]
 800822e:	f001 f901 	bl	8009434 <USBD_LL_StallEP>
 8008232:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008234:	e025      	b.n	8008282 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 8008236:	6839      	ldr	r1, [r7, #0]
 8008238:	6878      	ldr	r0, [r7, #4]
 800823a:	f000 fc09 	bl	8008a50 <USBD_CtlError>
              break;
 800823e:	e020      	b.n	8008282 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008240:	683b      	ldr	r3, [r7, #0]
 8008242:	885b      	ldrh	r3, [r3, #2]
 8008244:	2b00      	cmp	r3, #0
 8008246:	d11b      	bne.n	8008280 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8008248:	7bbb      	ldrb	r3, [r7, #14]
 800824a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800824e:	2b00      	cmp	r3, #0
 8008250:	d004      	beq.n	800825c <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8008252:	7bbb      	ldrb	r3, [r7, #14]
 8008254:	4619      	mov	r1, r3
 8008256:	6878      	ldr	r0, [r7, #4]
 8008258:	f001 f90b 	bl	8009472 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800825c:	6878      	ldr	r0, [r7, #4]
 800825e:	f000 fcc2 	bl	8008be6 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008268:	689b      	ldr	r3, [r3, #8]
 800826a:	6839      	ldr	r1, [r7, #0]
 800826c:	6878      	ldr	r0, [r7, #4]
 800826e:	4798      	blx	r3
 8008270:	4603      	mov	r3, r0
 8008272:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8008274:	e004      	b.n	8008280 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 8008276:	6839      	ldr	r1, [r7, #0]
 8008278:	6878      	ldr	r0, [r7, #4]
 800827a:	f000 fbe9 	bl	8008a50 <USBD_CtlError>
              break;
 800827e:	e000      	b.n	8008282 <USBD_StdEPReq+0x154>
              break;
 8008280:	bf00      	nop
          }
          break;
 8008282:	e0ab      	b.n	80083dc <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800828a:	b2db      	uxtb	r3, r3
 800828c:	2b02      	cmp	r3, #2
 800828e:	d002      	beq.n	8008296 <USBD_StdEPReq+0x168>
 8008290:	2b03      	cmp	r3, #3
 8008292:	d032      	beq.n	80082fa <USBD_StdEPReq+0x1cc>
 8008294:	e097      	b.n	80083c6 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008296:	7bbb      	ldrb	r3, [r7, #14]
 8008298:	2b00      	cmp	r3, #0
 800829a:	d007      	beq.n	80082ac <USBD_StdEPReq+0x17e>
 800829c:	7bbb      	ldrb	r3, [r7, #14]
 800829e:	2b80      	cmp	r3, #128	; 0x80
 80082a0:	d004      	beq.n	80082ac <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 80082a2:	6839      	ldr	r1, [r7, #0]
 80082a4:	6878      	ldr	r0, [r7, #4]
 80082a6:	f000 fbd3 	bl	8008a50 <USBD_CtlError>
                break;
 80082aa:	e091      	b.n	80083d0 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80082ac:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	da0b      	bge.n	80082cc <USBD_StdEPReq+0x19e>
 80082b4:	7bbb      	ldrb	r3, [r7, #14]
 80082b6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80082ba:	4613      	mov	r3, r2
 80082bc:	009b      	lsls	r3, r3, #2
 80082be:	4413      	add	r3, r2
 80082c0:	009b      	lsls	r3, r3, #2
 80082c2:	3310      	adds	r3, #16
 80082c4:	687a      	ldr	r2, [r7, #4]
 80082c6:	4413      	add	r3, r2
 80082c8:	3304      	adds	r3, #4
 80082ca:	e00b      	b.n	80082e4 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80082cc:	7bbb      	ldrb	r3, [r7, #14]
 80082ce:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80082d2:	4613      	mov	r3, r2
 80082d4:	009b      	lsls	r3, r3, #2
 80082d6:	4413      	add	r3, r2
 80082d8:	009b      	lsls	r3, r3, #2
 80082da:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80082de:	687a      	ldr	r2, [r7, #4]
 80082e0:	4413      	add	r3, r2
 80082e2:	3304      	adds	r3, #4
 80082e4:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80082e6:	68bb      	ldr	r3, [r7, #8]
 80082e8:	2200      	movs	r2, #0
 80082ea:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80082ec:	68bb      	ldr	r3, [r7, #8]
 80082ee:	2202      	movs	r2, #2
 80082f0:	4619      	mov	r1, r3
 80082f2:	6878      	ldr	r0, [r7, #4]
 80082f4:	f000 fc1d 	bl	8008b32 <USBD_CtlSendData>
              break;
 80082f8:	e06a      	b.n	80083d0 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80082fa:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80082fe:	2b00      	cmp	r3, #0
 8008300:	da11      	bge.n	8008326 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008302:	7bbb      	ldrb	r3, [r7, #14]
 8008304:	f003 020f 	and.w	r2, r3, #15
 8008308:	6879      	ldr	r1, [r7, #4]
 800830a:	4613      	mov	r3, r2
 800830c:	009b      	lsls	r3, r3, #2
 800830e:	4413      	add	r3, r2
 8008310:	009b      	lsls	r3, r3, #2
 8008312:	440b      	add	r3, r1
 8008314:	3324      	adds	r3, #36	; 0x24
 8008316:	881b      	ldrh	r3, [r3, #0]
 8008318:	2b00      	cmp	r3, #0
 800831a:	d117      	bne.n	800834c <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800831c:	6839      	ldr	r1, [r7, #0]
 800831e:	6878      	ldr	r0, [r7, #4]
 8008320:	f000 fb96 	bl	8008a50 <USBD_CtlError>
                  break;
 8008324:	e054      	b.n	80083d0 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008326:	7bbb      	ldrb	r3, [r7, #14]
 8008328:	f003 020f 	and.w	r2, r3, #15
 800832c:	6879      	ldr	r1, [r7, #4]
 800832e:	4613      	mov	r3, r2
 8008330:	009b      	lsls	r3, r3, #2
 8008332:	4413      	add	r3, r2
 8008334:	009b      	lsls	r3, r3, #2
 8008336:	440b      	add	r3, r1
 8008338:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800833c:	881b      	ldrh	r3, [r3, #0]
 800833e:	2b00      	cmp	r3, #0
 8008340:	d104      	bne.n	800834c <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8008342:	6839      	ldr	r1, [r7, #0]
 8008344:	6878      	ldr	r0, [r7, #4]
 8008346:	f000 fb83 	bl	8008a50 <USBD_CtlError>
                  break;
 800834a:	e041      	b.n	80083d0 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800834c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008350:	2b00      	cmp	r3, #0
 8008352:	da0b      	bge.n	800836c <USBD_StdEPReq+0x23e>
 8008354:	7bbb      	ldrb	r3, [r7, #14]
 8008356:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800835a:	4613      	mov	r3, r2
 800835c:	009b      	lsls	r3, r3, #2
 800835e:	4413      	add	r3, r2
 8008360:	009b      	lsls	r3, r3, #2
 8008362:	3310      	adds	r3, #16
 8008364:	687a      	ldr	r2, [r7, #4]
 8008366:	4413      	add	r3, r2
 8008368:	3304      	adds	r3, #4
 800836a:	e00b      	b.n	8008384 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800836c:	7bbb      	ldrb	r3, [r7, #14]
 800836e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008372:	4613      	mov	r3, r2
 8008374:	009b      	lsls	r3, r3, #2
 8008376:	4413      	add	r3, r2
 8008378:	009b      	lsls	r3, r3, #2
 800837a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800837e:	687a      	ldr	r2, [r7, #4]
 8008380:	4413      	add	r3, r2
 8008382:	3304      	adds	r3, #4
 8008384:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008386:	7bbb      	ldrb	r3, [r7, #14]
 8008388:	2b00      	cmp	r3, #0
 800838a:	d002      	beq.n	8008392 <USBD_StdEPReq+0x264>
 800838c:	7bbb      	ldrb	r3, [r7, #14]
 800838e:	2b80      	cmp	r3, #128	; 0x80
 8008390:	d103      	bne.n	800839a <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 8008392:	68bb      	ldr	r3, [r7, #8]
 8008394:	2200      	movs	r2, #0
 8008396:	601a      	str	r2, [r3, #0]
 8008398:	e00e      	b.n	80083b8 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800839a:	7bbb      	ldrb	r3, [r7, #14]
 800839c:	4619      	mov	r1, r3
 800839e:	6878      	ldr	r0, [r7, #4]
 80083a0:	f001 f886 	bl	80094b0 <USBD_LL_IsStallEP>
 80083a4:	4603      	mov	r3, r0
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	d003      	beq.n	80083b2 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 80083aa:	68bb      	ldr	r3, [r7, #8]
 80083ac:	2201      	movs	r2, #1
 80083ae:	601a      	str	r2, [r3, #0]
 80083b0:	e002      	b.n	80083b8 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 80083b2:	68bb      	ldr	r3, [r7, #8]
 80083b4:	2200      	movs	r2, #0
 80083b6:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80083b8:	68bb      	ldr	r3, [r7, #8]
 80083ba:	2202      	movs	r2, #2
 80083bc:	4619      	mov	r1, r3
 80083be:	6878      	ldr	r0, [r7, #4]
 80083c0:	f000 fbb7 	bl	8008b32 <USBD_CtlSendData>
              break;
 80083c4:	e004      	b.n	80083d0 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 80083c6:	6839      	ldr	r1, [r7, #0]
 80083c8:	6878      	ldr	r0, [r7, #4]
 80083ca:	f000 fb41 	bl	8008a50 <USBD_CtlError>
              break;
 80083ce:	bf00      	nop
          }
          break;
 80083d0:	e004      	b.n	80083dc <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 80083d2:	6839      	ldr	r1, [r7, #0]
 80083d4:	6878      	ldr	r0, [r7, #4]
 80083d6:	f000 fb3b 	bl	8008a50 <USBD_CtlError>
          break;
 80083da:	bf00      	nop
      }
      break;
 80083dc:	e004      	b.n	80083e8 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 80083de:	6839      	ldr	r1, [r7, #0]
 80083e0:	6878      	ldr	r0, [r7, #4]
 80083e2:	f000 fb35 	bl	8008a50 <USBD_CtlError>
      break;
 80083e6:	bf00      	nop
  }

  return ret;
 80083e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80083ea:	4618      	mov	r0, r3
 80083ec:	3710      	adds	r7, #16
 80083ee:	46bd      	mov	sp, r7
 80083f0:	bd80      	pop	{r7, pc}
	...

080083f4 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80083f4:	b580      	push	{r7, lr}
 80083f6:	b084      	sub	sp, #16
 80083f8:	af00      	add	r7, sp, #0
 80083fa:	6078      	str	r0, [r7, #4]
 80083fc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80083fe:	2300      	movs	r3, #0
 8008400:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8008402:	2300      	movs	r3, #0
 8008404:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8008406:	2300      	movs	r3, #0
 8008408:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800840a:	683b      	ldr	r3, [r7, #0]
 800840c:	885b      	ldrh	r3, [r3, #2]
 800840e:	0a1b      	lsrs	r3, r3, #8
 8008410:	b29b      	uxth	r3, r3
 8008412:	3b01      	subs	r3, #1
 8008414:	2b06      	cmp	r3, #6
 8008416:	f200 8128 	bhi.w	800866a <USBD_GetDescriptor+0x276>
 800841a:	a201      	add	r2, pc, #4	; (adr r2, 8008420 <USBD_GetDescriptor+0x2c>)
 800841c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008420:	0800843d 	.word	0x0800843d
 8008424:	08008455 	.word	0x08008455
 8008428:	08008495 	.word	0x08008495
 800842c:	0800866b 	.word	0x0800866b
 8008430:	0800866b 	.word	0x0800866b
 8008434:	0800860b 	.word	0x0800860b
 8008438:	08008637 	.word	0x08008637
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	687a      	ldr	r2, [r7, #4]
 8008446:	7c12      	ldrb	r2, [r2, #16]
 8008448:	f107 0108 	add.w	r1, r7, #8
 800844c:	4610      	mov	r0, r2
 800844e:	4798      	blx	r3
 8008450:	60f8      	str	r0, [r7, #12]
      break;
 8008452:	e112      	b.n	800867a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	7c1b      	ldrb	r3, [r3, #16]
 8008458:	2b00      	cmp	r3, #0
 800845a:	d10d      	bne.n	8008478 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008462:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008464:	f107 0208 	add.w	r2, r7, #8
 8008468:	4610      	mov	r0, r2
 800846a:	4798      	blx	r3
 800846c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	3301      	adds	r3, #1
 8008472:	2202      	movs	r2, #2
 8008474:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8008476:	e100      	b.n	800867a <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800847e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008480:	f107 0208 	add.w	r2, r7, #8
 8008484:	4610      	mov	r0, r2
 8008486:	4798      	blx	r3
 8008488:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	3301      	adds	r3, #1
 800848e:	2202      	movs	r2, #2
 8008490:	701a      	strb	r2, [r3, #0]
      break;
 8008492:	e0f2      	b.n	800867a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8008494:	683b      	ldr	r3, [r7, #0]
 8008496:	885b      	ldrh	r3, [r3, #2]
 8008498:	b2db      	uxtb	r3, r3
 800849a:	2b05      	cmp	r3, #5
 800849c:	f200 80ac 	bhi.w	80085f8 <USBD_GetDescriptor+0x204>
 80084a0:	a201      	add	r2, pc, #4	; (adr r2, 80084a8 <USBD_GetDescriptor+0xb4>)
 80084a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084a6:	bf00      	nop
 80084a8:	080084c1 	.word	0x080084c1
 80084ac:	080084f5 	.word	0x080084f5
 80084b0:	08008529 	.word	0x08008529
 80084b4:	0800855d 	.word	0x0800855d
 80084b8:	08008591 	.word	0x08008591
 80084bc:	080085c5 	.word	0x080085c5
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80084c6:	685b      	ldr	r3, [r3, #4]
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	d00b      	beq.n	80084e4 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80084d2:	685b      	ldr	r3, [r3, #4]
 80084d4:	687a      	ldr	r2, [r7, #4]
 80084d6:	7c12      	ldrb	r2, [r2, #16]
 80084d8:	f107 0108 	add.w	r1, r7, #8
 80084dc:	4610      	mov	r0, r2
 80084de:	4798      	blx	r3
 80084e0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80084e2:	e091      	b.n	8008608 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80084e4:	6839      	ldr	r1, [r7, #0]
 80084e6:	6878      	ldr	r0, [r7, #4]
 80084e8:	f000 fab2 	bl	8008a50 <USBD_CtlError>
            err++;
 80084ec:	7afb      	ldrb	r3, [r7, #11]
 80084ee:	3301      	adds	r3, #1
 80084f0:	72fb      	strb	r3, [r7, #11]
          break;
 80084f2:	e089      	b.n	8008608 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80084fa:	689b      	ldr	r3, [r3, #8]
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	d00b      	beq.n	8008518 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008506:	689b      	ldr	r3, [r3, #8]
 8008508:	687a      	ldr	r2, [r7, #4]
 800850a:	7c12      	ldrb	r2, [r2, #16]
 800850c:	f107 0108 	add.w	r1, r7, #8
 8008510:	4610      	mov	r0, r2
 8008512:	4798      	blx	r3
 8008514:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008516:	e077      	b.n	8008608 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008518:	6839      	ldr	r1, [r7, #0]
 800851a:	6878      	ldr	r0, [r7, #4]
 800851c:	f000 fa98 	bl	8008a50 <USBD_CtlError>
            err++;
 8008520:	7afb      	ldrb	r3, [r7, #11]
 8008522:	3301      	adds	r3, #1
 8008524:	72fb      	strb	r3, [r7, #11]
          break;
 8008526:	e06f      	b.n	8008608 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800852e:	68db      	ldr	r3, [r3, #12]
 8008530:	2b00      	cmp	r3, #0
 8008532:	d00b      	beq.n	800854c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800853a:	68db      	ldr	r3, [r3, #12]
 800853c:	687a      	ldr	r2, [r7, #4]
 800853e:	7c12      	ldrb	r2, [r2, #16]
 8008540:	f107 0108 	add.w	r1, r7, #8
 8008544:	4610      	mov	r0, r2
 8008546:	4798      	blx	r3
 8008548:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800854a:	e05d      	b.n	8008608 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800854c:	6839      	ldr	r1, [r7, #0]
 800854e:	6878      	ldr	r0, [r7, #4]
 8008550:	f000 fa7e 	bl	8008a50 <USBD_CtlError>
            err++;
 8008554:	7afb      	ldrb	r3, [r7, #11]
 8008556:	3301      	adds	r3, #1
 8008558:	72fb      	strb	r3, [r7, #11]
          break;
 800855a:	e055      	b.n	8008608 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008562:	691b      	ldr	r3, [r3, #16]
 8008564:	2b00      	cmp	r3, #0
 8008566:	d00b      	beq.n	8008580 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800856e:	691b      	ldr	r3, [r3, #16]
 8008570:	687a      	ldr	r2, [r7, #4]
 8008572:	7c12      	ldrb	r2, [r2, #16]
 8008574:	f107 0108 	add.w	r1, r7, #8
 8008578:	4610      	mov	r0, r2
 800857a:	4798      	blx	r3
 800857c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800857e:	e043      	b.n	8008608 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008580:	6839      	ldr	r1, [r7, #0]
 8008582:	6878      	ldr	r0, [r7, #4]
 8008584:	f000 fa64 	bl	8008a50 <USBD_CtlError>
            err++;
 8008588:	7afb      	ldrb	r3, [r7, #11]
 800858a:	3301      	adds	r3, #1
 800858c:	72fb      	strb	r3, [r7, #11]
          break;
 800858e:	e03b      	b.n	8008608 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008596:	695b      	ldr	r3, [r3, #20]
 8008598:	2b00      	cmp	r3, #0
 800859a:	d00b      	beq.n	80085b4 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80085a2:	695b      	ldr	r3, [r3, #20]
 80085a4:	687a      	ldr	r2, [r7, #4]
 80085a6:	7c12      	ldrb	r2, [r2, #16]
 80085a8:	f107 0108 	add.w	r1, r7, #8
 80085ac:	4610      	mov	r0, r2
 80085ae:	4798      	blx	r3
 80085b0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80085b2:	e029      	b.n	8008608 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80085b4:	6839      	ldr	r1, [r7, #0]
 80085b6:	6878      	ldr	r0, [r7, #4]
 80085b8:	f000 fa4a 	bl	8008a50 <USBD_CtlError>
            err++;
 80085bc:	7afb      	ldrb	r3, [r7, #11]
 80085be:	3301      	adds	r3, #1
 80085c0:	72fb      	strb	r3, [r7, #11]
          break;
 80085c2:	e021      	b.n	8008608 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80085ca:	699b      	ldr	r3, [r3, #24]
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	d00b      	beq.n	80085e8 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80085d6:	699b      	ldr	r3, [r3, #24]
 80085d8:	687a      	ldr	r2, [r7, #4]
 80085da:	7c12      	ldrb	r2, [r2, #16]
 80085dc:	f107 0108 	add.w	r1, r7, #8
 80085e0:	4610      	mov	r0, r2
 80085e2:	4798      	blx	r3
 80085e4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80085e6:	e00f      	b.n	8008608 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80085e8:	6839      	ldr	r1, [r7, #0]
 80085ea:	6878      	ldr	r0, [r7, #4]
 80085ec:	f000 fa30 	bl	8008a50 <USBD_CtlError>
            err++;
 80085f0:	7afb      	ldrb	r3, [r7, #11]
 80085f2:	3301      	adds	r3, #1
 80085f4:	72fb      	strb	r3, [r7, #11]
          break;
 80085f6:	e007      	b.n	8008608 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80085f8:	6839      	ldr	r1, [r7, #0]
 80085fa:	6878      	ldr	r0, [r7, #4]
 80085fc:	f000 fa28 	bl	8008a50 <USBD_CtlError>
          err++;
 8008600:	7afb      	ldrb	r3, [r7, #11]
 8008602:	3301      	adds	r3, #1
 8008604:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 8008606:	bf00      	nop
      }
      break;
 8008608:	e037      	b.n	800867a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	7c1b      	ldrb	r3, [r3, #16]
 800860e:	2b00      	cmp	r3, #0
 8008610:	d109      	bne.n	8008626 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008618:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800861a:	f107 0208 	add.w	r2, r7, #8
 800861e:	4610      	mov	r0, r2
 8008620:	4798      	blx	r3
 8008622:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008624:	e029      	b.n	800867a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008626:	6839      	ldr	r1, [r7, #0]
 8008628:	6878      	ldr	r0, [r7, #4]
 800862a:	f000 fa11 	bl	8008a50 <USBD_CtlError>
        err++;
 800862e:	7afb      	ldrb	r3, [r7, #11]
 8008630:	3301      	adds	r3, #1
 8008632:	72fb      	strb	r3, [r7, #11]
      break;
 8008634:	e021      	b.n	800867a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	7c1b      	ldrb	r3, [r3, #16]
 800863a:	2b00      	cmp	r3, #0
 800863c:	d10d      	bne.n	800865a <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008644:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008646:	f107 0208 	add.w	r2, r7, #8
 800864a:	4610      	mov	r0, r2
 800864c:	4798      	blx	r3
 800864e:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	3301      	adds	r3, #1
 8008654:	2207      	movs	r2, #7
 8008656:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008658:	e00f      	b.n	800867a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800865a:	6839      	ldr	r1, [r7, #0]
 800865c:	6878      	ldr	r0, [r7, #4]
 800865e:	f000 f9f7 	bl	8008a50 <USBD_CtlError>
        err++;
 8008662:	7afb      	ldrb	r3, [r7, #11]
 8008664:	3301      	adds	r3, #1
 8008666:	72fb      	strb	r3, [r7, #11]
      break;
 8008668:	e007      	b.n	800867a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800866a:	6839      	ldr	r1, [r7, #0]
 800866c:	6878      	ldr	r0, [r7, #4]
 800866e:	f000 f9ef 	bl	8008a50 <USBD_CtlError>
      err++;
 8008672:	7afb      	ldrb	r3, [r7, #11]
 8008674:	3301      	adds	r3, #1
 8008676:	72fb      	strb	r3, [r7, #11]
      break;
 8008678:	bf00      	nop
  }

  if (err != 0U)
 800867a:	7afb      	ldrb	r3, [r7, #11]
 800867c:	2b00      	cmp	r3, #0
 800867e:	d11e      	bne.n	80086be <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8008680:	683b      	ldr	r3, [r7, #0]
 8008682:	88db      	ldrh	r3, [r3, #6]
 8008684:	2b00      	cmp	r3, #0
 8008686:	d016      	beq.n	80086b6 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8008688:	893b      	ldrh	r3, [r7, #8]
 800868a:	2b00      	cmp	r3, #0
 800868c:	d00e      	beq.n	80086ac <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800868e:	683b      	ldr	r3, [r7, #0]
 8008690:	88da      	ldrh	r2, [r3, #6]
 8008692:	893b      	ldrh	r3, [r7, #8]
 8008694:	4293      	cmp	r3, r2
 8008696:	bf28      	it	cs
 8008698:	4613      	movcs	r3, r2
 800869a:	b29b      	uxth	r3, r3
 800869c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800869e:	893b      	ldrh	r3, [r7, #8]
 80086a0:	461a      	mov	r2, r3
 80086a2:	68f9      	ldr	r1, [r7, #12]
 80086a4:	6878      	ldr	r0, [r7, #4]
 80086a6:	f000 fa44 	bl	8008b32 <USBD_CtlSendData>
 80086aa:	e009      	b.n	80086c0 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80086ac:	6839      	ldr	r1, [r7, #0]
 80086ae:	6878      	ldr	r0, [r7, #4]
 80086b0:	f000 f9ce 	bl	8008a50 <USBD_CtlError>
 80086b4:	e004      	b.n	80086c0 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80086b6:	6878      	ldr	r0, [r7, #4]
 80086b8:	f000 fa95 	bl	8008be6 <USBD_CtlSendStatus>
 80086bc:	e000      	b.n	80086c0 <USBD_GetDescriptor+0x2cc>
    return;
 80086be:	bf00      	nop
  }
}
 80086c0:	3710      	adds	r7, #16
 80086c2:	46bd      	mov	sp, r7
 80086c4:	bd80      	pop	{r7, pc}
 80086c6:	bf00      	nop

080086c8 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80086c8:	b580      	push	{r7, lr}
 80086ca:	b084      	sub	sp, #16
 80086cc:	af00      	add	r7, sp, #0
 80086ce:	6078      	str	r0, [r7, #4]
 80086d0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80086d2:	683b      	ldr	r3, [r7, #0]
 80086d4:	889b      	ldrh	r3, [r3, #4]
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d131      	bne.n	800873e <USBD_SetAddress+0x76>
 80086da:	683b      	ldr	r3, [r7, #0]
 80086dc:	88db      	ldrh	r3, [r3, #6]
 80086de:	2b00      	cmp	r3, #0
 80086e0:	d12d      	bne.n	800873e <USBD_SetAddress+0x76>
 80086e2:	683b      	ldr	r3, [r7, #0]
 80086e4:	885b      	ldrh	r3, [r3, #2]
 80086e6:	2b7f      	cmp	r3, #127	; 0x7f
 80086e8:	d829      	bhi.n	800873e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80086ea:	683b      	ldr	r3, [r7, #0]
 80086ec:	885b      	ldrh	r3, [r3, #2]
 80086ee:	b2db      	uxtb	r3, r3
 80086f0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80086f4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80086fc:	b2db      	uxtb	r3, r3
 80086fe:	2b03      	cmp	r3, #3
 8008700:	d104      	bne.n	800870c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8008702:	6839      	ldr	r1, [r7, #0]
 8008704:	6878      	ldr	r0, [r7, #4]
 8008706:	f000 f9a3 	bl	8008a50 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800870a:	e01d      	b.n	8008748 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	7bfa      	ldrb	r2, [r7, #15]
 8008710:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008714:	7bfb      	ldrb	r3, [r7, #15]
 8008716:	4619      	mov	r1, r3
 8008718:	6878      	ldr	r0, [r7, #4]
 800871a:	f000 fef5 	bl	8009508 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800871e:	6878      	ldr	r0, [r7, #4]
 8008720:	f000 fa61 	bl	8008be6 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008724:	7bfb      	ldrb	r3, [r7, #15]
 8008726:	2b00      	cmp	r3, #0
 8008728:	d004      	beq.n	8008734 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	2202      	movs	r2, #2
 800872e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008732:	e009      	b.n	8008748 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	2201      	movs	r2, #1
 8008738:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800873c:	e004      	b.n	8008748 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800873e:	6839      	ldr	r1, [r7, #0]
 8008740:	6878      	ldr	r0, [r7, #4]
 8008742:	f000 f985 	bl	8008a50 <USBD_CtlError>
  }
}
 8008746:	bf00      	nop
 8008748:	bf00      	nop
 800874a:	3710      	adds	r7, #16
 800874c:	46bd      	mov	sp, r7
 800874e:	bd80      	pop	{r7, pc}

08008750 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008750:	b580      	push	{r7, lr}
 8008752:	b084      	sub	sp, #16
 8008754:	af00      	add	r7, sp, #0
 8008756:	6078      	str	r0, [r7, #4]
 8008758:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800875a:	2300      	movs	r3, #0
 800875c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800875e:	683b      	ldr	r3, [r7, #0]
 8008760:	885b      	ldrh	r3, [r3, #2]
 8008762:	b2da      	uxtb	r2, r3
 8008764:	4b4c      	ldr	r3, [pc, #304]	; (8008898 <USBD_SetConfig+0x148>)
 8008766:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008768:	4b4b      	ldr	r3, [pc, #300]	; (8008898 <USBD_SetConfig+0x148>)
 800876a:	781b      	ldrb	r3, [r3, #0]
 800876c:	2b01      	cmp	r3, #1
 800876e:	d905      	bls.n	800877c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8008770:	6839      	ldr	r1, [r7, #0]
 8008772:	6878      	ldr	r0, [r7, #4]
 8008774:	f000 f96c 	bl	8008a50 <USBD_CtlError>
    return USBD_FAIL;
 8008778:	2303      	movs	r3, #3
 800877a:	e088      	b.n	800888e <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008782:	b2db      	uxtb	r3, r3
 8008784:	2b02      	cmp	r3, #2
 8008786:	d002      	beq.n	800878e <USBD_SetConfig+0x3e>
 8008788:	2b03      	cmp	r3, #3
 800878a:	d025      	beq.n	80087d8 <USBD_SetConfig+0x88>
 800878c:	e071      	b.n	8008872 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800878e:	4b42      	ldr	r3, [pc, #264]	; (8008898 <USBD_SetConfig+0x148>)
 8008790:	781b      	ldrb	r3, [r3, #0]
 8008792:	2b00      	cmp	r3, #0
 8008794:	d01c      	beq.n	80087d0 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 8008796:	4b40      	ldr	r3, [pc, #256]	; (8008898 <USBD_SetConfig+0x148>)
 8008798:	781b      	ldrb	r3, [r3, #0]
 800879a:	461a      	mov	r2, r3
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80087a0:	4b3d      	ldr	r3, [pc, #244]	; (8008898 <USBD_SetConfig+0x148>)
 80087a2:	781b      	ldrb	r3, [r3, #0]
 80087a4:	4619      	mov	r1, r3
 80087a6:	6878      	ldr	r0, [r7, #4]
 80087a8:	f7ff f948 	bl	8007a3c <USBD_SetClassConfig>
 80087ac:	4603      	mov	r3, r0
 80087ae:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80087b0:	7bfb      	ldrb	r3, [r7, #15]
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	d004      	beq.n	80087c0 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 80087b6:	6839      	ldr	r1, [r7, #0]
 80087b8:	6878      	ldr	r0, [r7, #4]
 80087ba:	f000 f949 	bl	8008a50 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80087be:	e065      	b.n	800888c <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 80087c0:	6878      	ldr	r0, [r7, #4]
 80087c2:	f000 fa10 	bl	8008be6 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	2203      	movs	r2, #3
 80087ca:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80087ce:	e05d      	b.n	800888c <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 80087d0:	6878      	ldr	r0, [r7, #4]
 80087d2:	f000 fa08 	bl	8008be6 <USBD_CtlSendStatus>
      break;
 80087d6:	e059      	b.n	800888c <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80087d8:	4b2f      	ldr	r3, [pc, #188]	; (8008898 <USBD_SetConfig+0x148>)
 80087da:	781b      	ldrb	r3, [r3, #0]
 80087dc:	2b00      	cmp	r3, #0
 80087de:	d112      	bne.n	8008806 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	2202      	movs	r2, #2
 80087e4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 80087e8:	4b2b      	ldr	r3, [pc, #172]	; (8008898 <USBD_SetConfig+0x148>)
 80087ea:	781b      	ldrb	r3, [r3, #0]
 80087ec:	461a      	mov	r2, r3
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80087f2:	4b29      	ldr	r3, [pc, #164]	; (8008898 <USBD_SetConfig+0x148>)
 80087f4:	781b      	ldrb	r3, [r3, #0]
 80087f6:	4619      	mov	r1, r3
 80087f8:	6878      	ldr	r0, [r7, #4]
 80087fa:	f7ff f93b 	bl	8007a74 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80087fe:	6878      	ldr	r0, [r7, #4]
 8008800:	f000 f9f1 	bl	8008be6 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008804:	e042      	b.n	800888c <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 8008806:	4b24      	ldr	r3, [pc, #144]	; (8008898 <USBD_SetConfig+0x148>)
 8008808:	781b      	ldrb	r3, [r3, #0]
 800880a:	461a      	mov	r2, r3
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	685b      	ldr	r3, [r3, #4]
 8008810:	429a      	cmp	r2, r3
 8008812:	d02a      	beq.n	800886a <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	685b      	ldr	r3, [r3, #4]
 8008818:	b2db      	uxtb	r3, r3
 800881a:	4619      	mov	r1, r3
 800881c:	6878      	ldr	r0, [r7, #4]
 800881e:	f7ff f929 	bl	8007a74 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8008822:	4b1d      	ldr	r3, [pc, #116]	; (8008898 <USBD_SetConfig+0x148>)
 8008824:	781b      	ldrb	r3, [r3, #0]
 8008826:	461a      	mov	r2, r3
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800882c:	4b1a      	ldr	r3, [pc, #104]	; (8008898 <USBD_SetConfig+0x148>)
 800882e:	781b      	ldrb	r3, [r3, #0]
 8008830:	4619      	mov	r1, r3
 8008832:	6878      	ldr	r0, [r7, #4]
 8008834:	f7ff f902 	bl	8007a3c <USBD_SetClassConfig>
 8008838:	4603      	mov	r3, r0
 800883a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800883c:	7bfb      	ldrb	r3, [r7, #15]
 800883e:	2b00      	cmp	r3, #0
 8008840:	d00f      	beq.n	8008862 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 8008842:	6839      	ldr	r1, [r7, #0]
 8008844:	6878      	ldr	r0, [r7, #4]
 8008846:	f000 f903 	bl	8008a50 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	685b      	ldr	r3, [r3, #4]
 800884e:	b2db      	uxtb	r3, r3
 8008850:	4619      	mov	r1, r3
 8008852:	6878      	ldr	r0, [r7, #4]
 8008854:	f7ff f90e 	bl	8007a74 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	2202      	movs	r2, #2
 800885c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8008860:	e014      	b.n	800888c <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8008862:	6878      	ldr	r0, [r7, #4]
 8008864:	f000 f9bf 	bl	8008be6 <USBD_CtlSendStatus>
      break;
 8008868:	e010      	b.n	800888c <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800886a:	6878      	ldr	r0, [r7, #4]
 800886c:	f000 f9bb 	bl	8008be6 <USBD_CtlSendStatus>
      break;
 8008870:	e00c      	b.n	800888c <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8008872:	6839      	ldr	r1, [r7, #0]
 8008874:	6878      	ldr	r0, [r7, #4]
 8008876:	f000 f8eb 	bl	8008a50 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800887a:	4b07      	ldr	r3, [pc, #28]	; (8008898 <USBD_SetConfig+0x148>)
 800887c:	781b      	ldrb	r3, [r3, #0]
 800887e:	4619      	mov	r1, r3
 8008880:	6878      	ldr	r0, [r7, #4]
 8008882:	f7ff f8f7 	bl	8007a74 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8008886:	2303      	movs	r3, #3
 8008888:	73fb      	strb	r3, [r7, #15]
      break;
 800888a:	bf00      	nop
  }

  return ret;
 800888c:	7bfb      	ldrb	r3, [r7, #15]
}
 800888e:	4618      	mov	r0, r3
 8008890:	3710      	adds	r7, #16
 8008892:	46bd      	mov	sp, r7
 8008894:	bd80      	pop	{r7, pc}
 8008896:	bf00      	nop
 8008898:	2000019e 	.word	0x2000019e

0800889c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800889c:	b580      	push	{r7, lr}
 800889e:	b082      	sub	sp, #8
 80088a0:	af00      	add	r7, sp, #0
 80088a2:	6078      	str	r0, [r7, #4]
 80088a4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80088a6:	683b      	ldr	r3, [r7, #0]
 80088a8:	88db      	ldrh	r3, [r3, #6]
 80088aa:	2b01      	cmp	r3, #1
 80088ac:	d004      	beq.n	80088b8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80088ae:	6839      	ldr	r1, [r7, #0]
 80088b0:	6878      	ldr	r0, [r7, #4]
 80088b2:	f000 f8cd 	bl	8008a50 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80088b6:	e023      	b.n	8008900 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80088be:	b2db      	uxtb	r3, r3
 80088c0:	2b02      	cmp	r3, #2
 80088c2:	dc02      	bgt.n	80088ca <USBD_GetConfig+0x2e>
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	dc03      	bgt.n	80088d0 <USBD_GetConfig+0x34>
 80088c8:	e015      	b.n	80088f6 <USBD_GetConfig+0x5a>
 80088ca:	2b03      	cmp	r3, #3
 80088cc:	d00b      	beq.n	80088e6 <USBD_GetConfig+0x4a>
 80088ce:	e012      	b.n	80088f6 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	2200      	movs	r2, #0
 80088d4:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	3308      	adds	r3, #8
 80088da:	2201      	movs	r2, #1
 80088dc:	4619      	mov	r1, r3
 80088de:	6878      	ldr	r0, [r7, #4]
 80088e0:	f000 f927 	bl	8008b32 <USBD_CtlSendData>
        break;
 80088e4:	e00c      	b.n	8008900 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	3304      	adds	r3, #4
 80088ea:	2201      	movs	r2, #1
 80088ec:	4619      	mov	r1, r3
 80088ee:	6878      	ldr	r0, [r7, #4]
 80088f0:	f000 f91f 	bl	8008b32 <USBD_CtlSendData>
        break;
 80088f4:	e004      	b.n	8008900 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80088f6:	6839      	ldr	r1, [r7, #0]
 80088f8:	6878      	ldr	r0, [r7, #4]
 80088fa:	f000 f8a9 	bl	8008a50 <USBD_CtlError>
        break;
 80088fe:	bf00      	nop
}
 8008900:	bf00      	nop
 8008902:	3708      	adds	r7, #8
 8008904:	46bd      	mov	sp, r7
 8008906:	bd80      	pop	{r7, pc}

08008908 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008908:	b580      	push	{r7, lr}
 800890a:	b082      	sub	sp, #8
 800890c:	af00      	add	r7, sp, #0
 800890e:	6078      	str	r0, [r7, #4]
 8008910:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008918:	b2db      	uxtb	r3, r3
 800891a:	3b01      	subs	r3, #1
 800891c:	2b02      	cmp	r3, #2
 800891e:	d81e      	bhi.n	800895e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008920:	683b      	ldr	r3, [r7, #0]
 8008922:	88db      	ldrh	r3, [r3, #6]
 8008924:	2b02      	cmp	r3, #2
 8008926:	d004      	beq.n	8008932 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8008928:	6839      	ldr	r1, [r7, #0]
 800892a:	6878      	ldr	r0, [r7, #4]
 800892c:	f000 f890 	bl	8008a50 <USBD_CtlError>
        break;
 8008930:	e01a      	b.n	8008968 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	2201      	movs	r2, #1
 8008936:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800893e:	2b00      	cmp	r3, #0
 8008940:	d005      	beq.n	800894e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	68db      	ldr	r3, [r3, #12]
 8008946:	f043 0202 	orr.w	r2, r3, #2
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	330c      	adds	r3, #12
 8008952:	2202      	movs	r2, #2
 8008954:	4619      	mov	r1, r3
 8008956:	6878      	ldr	r0, [r7, #4]
 8008958:	f000 f8eb 	bl	8008b32 <USBD_CtlSendData>
      break;
 800895c:	e004      	b.n	8008968 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800895e:	6839      	ldr	r1, [r7, #0]
 8008960:	6878      	ldr	r0, [r7, #4]
 8008962:	f000 f875 	bl	8008a50 <USBD_CtlError>
      break;
 8008966:	bf00      	nop
  }
}
 8008968:	bf00      	nop
 800896a:	3708      	adds	r7, #8
 800896c:	46bd      	mov	sp, r7
 800896e:	bd80      	pop	{r7, pc}

08008970 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008970:	b580      	push	{r7, lr}
 8008972:	b082      	sub	sp, #8
 8008974:	af00      	add	r7, sp, #0
 8008976:	6078      	str	r0, [r7, #4]
 8008978:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800897a:	683b      	ldr	r3, [r7, #0]
 800897c:	885b      	ldrh	r3, [r3, #2]
 800897e:	2b01      	cmp	r3, #1
 8008980:	d106      	bne.n	8008990 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	2201      	movs	r2, #1
 8008986:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800898a:	6878      	ldr	r0, [r7, #4]
 800898c:	f000 f92b 	bl	8008be6 <USBD_CtlSendStatus>
  }
}
 8008990:	bf00      	nop
 8008992:	3708      	adds	r7, #8
 8008994:	46bd      	mov	sp, r7
 8008996:	bd80      	pop	{r7, pc}

08008998 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008998:	b580      	push	{r7, lr}
 800899a:	b082      	sub	sp, #8
 800899c:	af00      	add	r7, sp, #0
 800899e:	6078      	str	r0, [r7, #4]
 80089a0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80089a8:	b2db      	uxtb	r3, r3
 80089aa:	3b01      	subs	r3, #1
 80089ac:	2b02      	cmp	r3, #2
 80089ae:	d80b      	bhi.n	80089c8 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80089b0:	683b      	ldr	r3, [r7, #0]
 80089b2:	885b      	ldrh	r3, [r3, #2]
 80089b4:	2b01      	cmp	r3, #1
 80089b6:	d10c      	bne.n	80089d2 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	2200      	movs	r2, #0
 80089bc:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80089c0:	6878      	ldr	r0, [r7, #4]
 80089c2:	f000 f910 	bl	8008be6 <USBD_CtlSendStatus>
      }
      break;
 80089c6:	e004      	b.n	80089d2 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80089c8:	6839      	ldr	r1, [r7, #0]
 80089ca:	6878      	ldr	r0, [r7, #4]
 80089cc:	f000 f840 	bl	8008a50 <USBD_CtlError>
      break;
 80089d0:	e000      	b.n	80089d4 <USBD_ClrFeature+0x3c>
      break;
 80089d2:	bf00      	nop
  }
}
 80089d4:	bf00      	nop
 80089d6:	3708      	adds	r7, #8
 80089d8:	46bd      	mov	sp, r7
 80089da:	bd80      	pop	{r7, pc}

080089dc <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80089dc:	b580      	push	{r7, lr}
 80089de:	b084      	sub	sp, #16
 80089e0:	af00      	add	r7, sp, #0
 80089e2:	6078      	str	r0, [r7, #4]
 80089e4:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80089e6:	683b      	ldr	r3, [r7, #0]
 80089e8:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80089ea:	68fb      	ldr	r3, [r7, #12]
 80089ec:	781a      	ldrb	r2, [r3, #0]
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80089f2:	68fb      	ldr	r3, [r7, #12]
 80089f4:	3301      	adds	r3, #1
 80089f6:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80089f8:	68fb      	ldr	r3, [r7, #12]
 80089fa:	781a      	ldrb	r2, [r3, #0]
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	3301      	adds	r3, #1
 8008a04:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8008a06:	68f8      	ldr	r0, [r7, #12]
 8008a08:	f7ff fabb 	bl	8007f82 <SWAPBYTE>
 8008a0c:	4603      	mov	r3, r0
 8008a0e:	461a      	mov	r2, r3
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8008a14:	68fb      	ldr	r3, [r7, #12]
 8008a16:	3301      	adds	r3, #1
 8008a18:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008a1a:	68fb      	ldr	r3, [r7, #12]
 8008a1c:	3301      	adds	r3, #1
 8008a1e:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8008a20:	68f8      	ldr	r0, [r7, #12]
 8008a22:	f7ff faae 	bl	8007f82 <SWAPBYTE>
 8008a26:	4603      	mov	r3, r0
 8008a28:	461a      	mov	r2, r3
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8008a2e:	68fb      	ldr	r3, [r7, #12]
 8008a30:	3301      	adds	r3, #1
 8008a32:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008a34:	68fb      	ldr	r3, [r7, #12]
 8008a36:	3301      	adds	r3, #1
 8008a38:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8008a3a:	68f8      	ldr	r0, [r7, #12]
 8008a3c:	f7ff faa1 	bl	8007f82 <SWAPBYTE>
 8008a40:	4603      	mov	r3, r0
 8008a42:	461a      	mov	r2, r3
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	80da      	strh	r2, [r3, #6]
}
 8008a48:	bf00      	nop
 8008a4a:	3710      	adds	r7, #16
 8008a4c:	46bd      	mov	sp, r7
 8008a4e:	bd80      	pop	{r7, pc}

08008a50 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008a50:	b580      	push	{r7, lr}
 8008a52:	b082      	sub	sp, #8
 8008a54:	af00      	add	r7, sp, #0
 8008a56:	6078      	str	r0, [r7, #4]
 8008a58:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8008a5a:	2180      	movs	r1, #128	; 0x80
 8008a5c:	6878      	ldr	r0, [r7, #4]
 8008a5e:	f000 fce9 	bl	8009434 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8008a62:	2100      	movs	r1, #0
 8008a64:	6878      	ldr	r0, [r7, #4]
 8008a66:	f000 fce5 	bl	8009434 <USBD_LL_StallEP>
}
 8008a6a:	bf00      	nop
 8008a6c:	3708      	adds	r7, #8
 8008a6e:	46bd      	mov	sp, r7
 8008a70:	bd80      	pop	{r7, pc}

08008a72 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008a72:	b580      	push	{r7, lr}
 8008a74:	b086      	sub	sp, #24
 8008a76:	af00      	add	r7, sp, #0
 8008a78:	60f8      	str	r0, [r7, #12]
 8008a7a:	60b9      	str	r1, [r7, #8]
 8008a7c:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008a7e:	2300      	movs	r3, #0
 8008a80:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8008a82:	68fb      	ldr	r3, [r7, #12]
 8008a84:	2b00      	cmp	r3, #0
 8008a86:	d036      	beq.n	8008af6 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8008a88:	68fb      	ldr	r3, [r7, #12]
 8008a8a:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8008a8c:	6938      	ldr	r0, [r7, #16]
 8008a8e:	f000 f836 	bl	8008afe <USBD_GetLen>
 8008a92:	4603      	mov	r3, r0
 8008a94:	3301      	adds	r3, #1
 8008a96:	b29b      	uxth	r3, r3
 8008a98:	005b      	lsls	r3, r3, #1
 8008a9a:	b29a      	uxth	r2, r3
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8008aa0:	7dfb      	ldrb	r3, [r7, #23]
 8008aa2:	68ba      	ldr	r2, [r7, #8]
 8008aa4:	4413      	add	r3, r2
 8008aa6:	687a      	ldr	r2, [r7, #4]
 8008aa8:	7812      	ldrb	r2, [r2, #0]
 8008aaa:	701a      	strb	r2, [r3, #0]
  idx++;
 8008aac:	7dfb      	ldrb	r3, [r7, #23]
 8008aae:	3301      	adds	r3, #1
 8008ab0:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8008ab2:	7dfb      	ldrb	r3, [r7, #23]
 8008ab4:	68ba      	ldr	r2, [r7, #8]
 8008ab6:	4413      	add	r3, r2
 8008ab8:	2203      	movs	r2, #3
 8008aba:	701a      	strb	r2, [r3, #0]
  idx++;
 8008abc:	7dfb      	ldrb	r3, [r7, #23]
 8008abe:	3301      	adds	r3, #1
 8008ac0:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8008ac2:	e013      	b.n	8008aec <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8008ac4:	7dfb      	ldrb	r3, [r7, #23]
 8008ac6:	68ba      	ldr	r2, [r7, #8]
 8008ac8:	4413      	add	r3, r2
 8008aca:	693a      	ldr	r2, [r7, #16]
 8008acc:	7812      	ldrb	r2, [r2, #0]
 8008ace:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8008ad0:	693b      	ldr	r3, [r7, #16]
 8008ad2:	3301      	adds	r3, #1
 8008ad4:	613b      	str	r3, [r7, #16]
    idx++;
 8008ad6:	7dfb      	ldrb	r3, [r7, #23]
 8008ad8:	3301      	adds	r3, #1
 8008ada:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8008adc:	7dfb      	ldrb	r3, [r7, #23]
 8008ade:	68ba      	ldr	r2, [r7, #8]
 8008ae0:	4413      	add	r3, r2
 8008ae2:	2200      	movs	r2, #0
 8008ae4:	701a      	strb	r2, [r3, #0]
    idx++;
 8008ae6:	7dfb      	ldrb	r3, [r7, #23]
 8008ae8:	3301      	adds	r3, #1
 8008aea:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8008aec:	693b      	ldr	r3, [r7, #16]
 8008aee:	781b      	ldrb	r3, [r3, #0]
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	d1e7      	bne.n	8008ac4 <USBD_GetString+0x52>
 8008af4:	e000      	b.n	8008af8 <USBD_GetString+0x86>
    return;
 8008af6:	bf00      	nop
  }
}
 8008af8:	3718      	adds	r7, #24
 8008afa:	46bd      	mov	sp, r7
 8008afc:	bd80      	pop	{r7, pc}

08008afe <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008afe:	b480      	push	{r7}
 8008b00:	b085      	sub	sp, #20
 8008b02:	af00      	add	r7, sp, #0
 8008b04:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008b06:	2300      	movs	r3, #0
 8008b08:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8008b0e:	e005      	b.n	8008b1c <USBD_GetLen+0x1e>
  {
    len++;
 8008b10:	7bfb      	ldrb	r3, [r7, #15]
 8008b12:	3301      	adds	r3, #1
 8008b14:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8008b16:	68bb      	ldr	r3, [r7, #8]
 8008b18:	3301      	adds	r3, #1
 8008b1a:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8008b1c:	68bb      	ldr	r3, [r7, #8]
 8008b1e:	781b      	ldrb	r3, [r3, #0]
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	d1f5      	bne.n	8008b10 <USBD_GetLen+0x12>
  }

  return len;
 8008b24:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b26:	4618      	mov	r0, r3
 8008b28:	3714      	adds	r7, #20
 8008b2a:	46bd      	mov	sp, r7
 8008b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b30:	4770      	bx	lr

08008b32 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8008b32:	b580      	push	{r7, lr}
 8008b34:	b084      	sub	sp, #16
 8008b36:	af00      	add	r7, sp, #0
 8008b38:	60f8      	str	r0, [r7, #12]
 8008b3a:	60b9      	str	r1, [r7, #8]
 8008b3c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008b3e:	68fb      	ldr	r3, [r7, #12]
 8008b40:	2202      	movs	r2, #2
 8008b42:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8008b46:	68fb      	ldr	r3, [r7, #12]
 8008b48:	687a      	ldr	r2, [r7, #4]
 8008b4a:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8008b4c:	68fb      	ldr	r3, [r7, #12]
 8008b4e:	687a      	ldr	r2, [r7, #4]
 8008b50:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	68ba      	ldr	r2, [r7, #8]
 8008b56:	2100      	movs	r1, #0
 8008b58:	68f8      	ldr	r0, [r7, #12]
 8008b5a:	f000 fcf4 	bl	8009546 <USBD_LL_Transmit>

  return USBD_OK;
 8008b5e:	2300      	movs	r3, #0
}
 8008b60:	4618      	mov	r0, r3
 8008b62:	3710      	adds	r7, #16
 8008b64:	46bd      	mov	sp, r7
 8008b66:	bd80      	pop	{r7, pc}

08008b68 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8008b68:	b580      	push	{r7, lr}
 8008b6a:	b084      	sub	sp, #16
 8008b6c:	af00      	add	r7, sp, #0
 8008b6e:	60f8      	str	r0, [r7, #12]
 8008b70:	60b9      	str	r1, [r7, #8]
 8008b72:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	68ba      	ldr	r2, [r7, #8]
 8008b78:	2100      	movs	r1, #0
 8008b7a:	68f8      	ldr	r0, [r7, #12]
 8008b7c:	f000 fce3 	bl	8009546 <USBD_LL_Transmit>

  return USBD_OK;
 8008b80:	2300      	movs	r3, #0
}
 8008b82:	4618      	mov	r0, r3
 8008b84:	3710      	adds	r7, #16
 8008b86:	46bd      	mov	sp, r7
 8008b88:	bd80      	pop	{r7, pc}

08008b8a <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8008b8a:	b580      	push	{r7, lr}
 8008b8c:	b084      	sub	sp, #16
 8008b8e:	af00      	add	r7, sp, #0
 8008b90:	60f8      	str	r0, [r7, #12]
 8008b92:	60b9      	str	r1, [r7, #8]
 8008b94:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008b96:	68fb      	ldr	r3, [r7, #12]
 8008b98:	2203      	movs	r2, #3
 8008b9a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8008b9e:	68fb      	ldr	r3, [r7, #12]
 8008ba0:	687a      	ldr	r2, [r7, #4]
 8008ba2:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8008ba6:	68fb      	ldr	r3, [r7, #12]
 8008ba8:	687a      	ldr	r2, [r7, #4]
 8008baa:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	68ba      	ldr	r2, [r7, #8]
 8008bb2:	2100      	movs	r1, #0
 8008bb4:	68f8      	ldr	r0, [r7, #12]
 8008bb6:	f000 fce7 	bl	8009588 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008bba:	2300      	movs	r3, #0
}
 8008bbc:	4618      	mov	r0, r3
 8008bbe:	3710      	adds	r7, #16
 8008bc0:	46bd      	mov	sp, r7
 8008bc2:	bd80      	pop	{r7, pc}

08008bc4 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8008bc4:	b580      	push	{r7, lr}
 8008bc6:	b084      	sub	sp, #16
 8008bc8:	af00      	add	r7, sp, #0
 8008bca:	60f8      	str	r0, [r7, #12]
 8008bcc:	60b9      	str	r1, [r7, #8]
 8008bce:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	68ba      	ldr	r2, [r7, #8]
 8008bd4:	2100      	movs	r1, #0
 8008bd6:	68f8      	ldr	r0, [r7, #12]
 8008bd8:	f000 fcd6 	bl	8009588 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008bdc:	2300      	movs	r3, #0
}
 8008bde:	4618      	mov	r0, r3
 8008be0:	3710      	adds	r7, #16
 8008be2:	46bd      	mov	sp, r7
 8008be4:	bd80      	pop	{r7, pc}

08008be6 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008be6:	b580      	push	{r7, lr}
 8008be8:	b082      	sub	sp, #8
 8008bea:	af00      	add	r7, sp, #0
 8008bec:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	2204      	movs	r2, #4
 8008bf2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008bf6:	2300      	movs	r3, #0
 8008bf8:	2200      	movs	r2, #0
 8008bfa:	2100      	movs	r1, #0
 8008bfc:	6878      	ldr	r0, [r7, #4]
 8008bfe:	f000 fca2 	bl	8009546 <USBD_LL_Transmit>

  return USBD_OK;
 8008c02:	2300      	movs	r3, #0
}
 8008c04:	4618      	mov	r0, r3
 8008c06:	3708      	adds	r7, #8
 8008c08:	46bd      	mov	sp, r7
 8008c0a:	bd80      	pop	{r7, pc}

08008c0c <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008c0c:	b580      	push	{r7, lr}
 8008c0e:	b082      	sub	sp, #8
 8008c10:	af00      	add	r7, sp, #0
 8008c12:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	2205      	movs	r2, #5
 8008c18:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008c1c:	2300      	movs	r3, #0
 8008c1e:	2200      	movs	r2, #0
 8008c20:	2100      	movs	r1, #0
 8008c22:	6878      	ldr	r0, [r7, #4]
 8008c24:	f000 fcb0 	bl	8009588 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008c28:	2300      	movs	r3, #0
}
 8008c2a:	4618      	mov	r0, r3
 8008c2c:	3708      	adds	r7, #8
 8008c2e:	46bd      	mov	sp, r7
 8008c30:	bd80      	pop	{r7, pc}
	...

08008c34 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008c34:	b580      	push	{r7, lr}
 8008c36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008c38:	2200      	movs	r2, #0
 8008c3a:	4912      	ldr	r1, [pc, #72]	; (8008c84 <MX_USB_DEVICE_Init+0x50>)
 8008c3c:	4812      	ldr	r0, [pc, #72]	; (8008c88 <MX_USB_DEVICE_Init+0x54>)
 8008c3e:	f7fe fe8f 	bl	8007960 <USBD_Init>
 8008c42:	4603      	mov	r3, r0
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	d001      	beq.n	8008c4c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008c48:	f7f8 fb8a 	bl	8001360 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8008c4c:	490f      	ldr	r1, [pc, #60]	; (8008c8c <MX_USB_DEVICE_Init+0x58>)
 8008c4e:	480e      	ldr	r0, [pc, #56]	; (8008c88 <MX_USB_DEVICE_Init+0x54>)
 8008c50:	f7fe feb6 	bl	80079c0 <USBD_RegisterClass>
 8008c54:	4603      	mov	r3, r0
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	d001      	beq.n	8008c5e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8008c5a:	f7f8 fb81 	bl	8001360 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8008c5e:	490c      	ldr	r1, [pc, #48]	; (8008c90 <MX_USB_DEVICE_Init+0x5c>)
 8008c60:	4809      	ldr	r0, [pc, #36]	; (8008c88 <MX_USB_DEVICE_Init+0x54>)
 8008c62:	f7fe fdd7 	bl	8007814 <USBD_CDC_RegisterInterface>
 8008c66:	4603      	mov	r3, r0
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	d001      	beq.n	8008c70 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8008c6c:	f7f8 fb78 	bl	8001360 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8008c70:	4805      	ldr	r0, [pc, #20]	; (8008c88 <MX_USB_DEVICE_Init+0x54>)
 8008c72:	f7fe fecc 	bl	8007a0e <USBD_Start>
 8008c76:	4603      	mov	r3, r0
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	d001      	beq.n	8008c80 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8008c7c:	f7f8 fb70 	bl	8001360 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008c80:	bf00      	nop
 8008c82:	bd80      	pop	{r7, pc}
 8008c84:	20000130 	.word	0x20000130
 8008c88:	200028f8 	.word	0x200028f8
 8008c8c:	20000018 	.word	0x20000018
 8008c90:	2000011c 	.word	0x2000011c

08008c94 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8008c94:	b580      	push	{r7, lr}
 8008c96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8008c98:	2200      	movs	r2, #0
 8008c9a:	4905      	ldr	r1, [pc, #20]	; (8008cb0 <CDC_Init_FS+0x1c>)
 8008c9c:	4805      	ldr	r0, [pc, #20]	; (8008cb4 <CDC_Init_FS+0x20>)
 8008c9e:	f7fe fdce 	bl	800783e <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8008ca2:	4905      	ldr	r1, [pc, #20]	; (8008cb8 <CDC_Init_FS+0x24>)
 8008ca4:	4803      	ldr	r0, [pc, #12]	; (8008cb4 <CDC_Init_FS+0x20>)
 8008ca6:	f7fe fde8 	bl	800787a <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8008caa:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8008cac:	4618      	mov	r0, r3
 8008cae:	bd80      	pop	{r7, pc}
 8008cb0:	20002bfc 	.word	0x20002bfc
 8008cb4:	200028f8 	.word	0x200028f8
 8008cb8:	20002bc8 	.word	0x20002bc8

08008cbc <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8008cbc:	b480      	push	{r7}
 8008cbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8008cc0:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8008cc2:	4618      	mov	r0, r3
 8008cc4:	46bd      	mov	sp, r7
 8008cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cca:	4770      	bx	lr

08008ccc <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8008ccc:	b480      	push	{r7}
 8008cce:	b083      	sub	sp, #12
 8008cd0:	af00      	add	r7, sp, #0
 8008cd2:	4603      	mov	r3, r0
 8008cd4:	6039      	str	r1, [r7, #0]
 8008cd6:	71fb      	strb	r3, [r7, #7]
 8008cd8:	4613      	mov	r3, r2
 8008cda:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8008cdc:	79fb      	ldrb	r3, [r7, #7]
 8008cde:	2b23      	cmp	r3, #35	; 0x23
 8008ce0:	d84a      	bhi.n	8008d78 <CDC_Control_FS+0xac>
 8008ce2:	a201      	add	r2, pc, #4	; (adr r2, 8008ce8 <CDC_Control_FS+0x1c>)
 8008ce4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ce8:	08008d79 	.word	0x08008d79
 8008cec:	08008d79 	.word	0x08008d79
 8008cf0:	08008d79 	.word	0x08008d79
 8008cf4:	08008d79 	.word	0x08008d79
 8008cf8:	08008d79 	.word	0x08008d79
 8008cfc:	08008d79 	.word	0x08008d79
 8008d00:	08008d79 	.word	0x08008d79
 8008d04:	08008d79 	.word	0x08008d79
 8008d08:	08008d79 	.word	0x08008d79
 8008d0c:	08008d79 	.word	0x08008d79
 8008d10:	08008d79 	.word	0x08008d79
 8008d14:	08008d79 	.word	0x08008d79
 8008d18:	08008d79 	.word	0x08008d79
 8008d1c:	08008d79 	.word	0x08008d79
 8008d20:	08008d79 	.word	0x08008d79
 8008d24:	08008d79 	.word	0x08008d79
 8008d28:	08008d79 	.word	0x08008d79
 8008d2c:	08008d79 	.word	0x08008d79
 8008d30:	08008d79 	.word	0x08008d79
 8008d34:	08008d79 	.word	0x08008d79
 8008d38:	08008d79 	.word	0x08008d79
 8008d3c:	08008d79 	.word	0x08008d79
 8008d40:	08008d79 	.word	0x08008d79
 8008d44:	08008d79 	.word	0x08008d79
 8008d48:	08008d79 	.word	0x08008d79
 8008d4c:	08008d79 	.word	0x08008d79
 8008d50:	08008d79 	.word	0x08008d79
 8008d54:	08008d79 	.word	0x08008d79
 8008d58:	08008d79 	.word	0x08008d79
 8008d5c:	08008d79 	.word	0x08008d79
 8008d60:	08008d79 	.word	0x08008d79
 8008d64:	08008d79 	.word	0x08008d79
 8008d68:	08008d79 	.word	0x08008d79
 8008d6c:	08008d79 	.word	0x08008d79
 8008d70:	08008d79 	.word	0x08008d79
 8008d74:	08008d79 	.word	0x08008d79
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8008d78:	bf00      	nop
  }

  return (USBD_OK);
 8008d7a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8008d7c:	4618      	mov	r0, r3
 8008d7e:	370c      	adds	r7, #12
 8008d80:	46bd      	mov	sp, r7
 8008d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d86:	4770      	bx	lr

08008d88 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8008d88:	b580      	push	{r7, lr}
 8008d8a:	b082      	sub	sp, #8
 8008d8c:	af00      	add	r7, sp, #0
 8008d8e:	6078      	str	r0, [r7, #4]
 8008d90:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8008d92:	6879      	ldr	r1, [r7, #4]
 8008d94:	4808      	ldr	r0, [pc, #32]	; (8008db8 <CDC_Receive_FS+0x30>)
 8008d96:	f7fe fd70 	bl	800787a <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8008d9a:	4807      	ldr	r0, [pc, #28]	; (8008db8 <CDC_Receive_FS+0x30>)
 8008d9c:	f7fe fdb6 	bl	800790c <USBD_CDC_ReceivePacket>
  DAS_Receive_Clbk_USB(Buf, *Len);
 8008da0:	683b      	ldr	r3, [r7, #0]
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	4619      	mov	r1, r3
 8008da6:	6878      	ldr	r0, [r7, #4]
 8008da8:	f7f7 fc9c 	bl	80006e4 <DAS_Receive_Clbk_USB>
  return (USBD_OK);
 8008dac:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8008dae:	4618      	mov	r0, r3
 8008db0:	3708      	adds	r7, #8
 8008db2:	46bd      	mov	sp, r7
 8008db4:	bd80      	pop	{r7, pc}
 8008db6:	bf00      	nop
 8008db8:	200028f8 	.word	0x200028f8

08008dbc <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8008dbc:	b580      	push	{r7, lr}
 8008dbe:	b084      	sub	sp, #16
 8008dc0:	af00      	add	r7, sp, #0
 8008dc2:	6078      	str	r0, [r7, #4]
 8008dc4:	460b      	mov	r3, r1
 8008dc6:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8008dc8:	2300      	movs	r3, #0
 8008dca:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8008dcc:	4b0d      	ldr	r3, [pc, #52]	; (8008e04 <CDC_Transmit_FS+0x48>)
 8008dce:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008dd2:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8008dd4:	68bb      	ldr	r3, [r7, #8]
 8008dd6:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008dda:	2b00      	cmp	r3, #0
 8008ddc:	d001      	beq.n	8008de2 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8008dde:	2301      	movs	r3, #1
 8008de0:	e00b      	b.n	8008dfa <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8008de2:	887b      	ldrh	r3, [r7, #2]
 8008de4:	461a      	mov	r2, r3
 8008de6:	6879      	ldr	r1, [r7, #4]
 8008de8:	4806      	ldr	r0, [pc, #24]	; (8008e04 <CDC_Transmit_FS+0x48>)
 8008dea:	f7fe fd28 	bl	800783e <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8008dee:	4805      	ldr	r0, [pc, #20]	; (8008e04 <CDC_Transmit_FS+0x48>)
 8008df0:	f7fe fd5c 	bl	80078ac <USBD_CDC_TransmitPacket>
 8008df4:	4603      	mov	r3, r0
 8008df6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8008df8:	7bfb      	ldrb	r3, [r7, #15]
}
 8008dfa:	4618      	mov	r0, r3
 8008dfc:	3710      	adds	r7, #16
 8008dfe:	46bd      	mov	sp, r7
 8008e00:	bd80      	pop	{r7, pc}
 8008e02:	bf00      	nop
 8008e04:	200028f8 	.word	0x200028f8

08008e08 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8008e08:	b580      	push	{r7, lr}
 8008e0a:	b086      	sub	sp, #24
 8008e0c:	af00      	add	r7, sp, #0
 8008e0e:	60f8      	str	r0, [r7, #12]
 8008e10:	60b9      	str	r1, [r7, #8]
 8008e12:	4613      	mov	r3, r2
 8008e14:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8008e16:	2300      	movs	r3, #0
 8008e18:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  result = DAS_Transmit_Clbk_USB();
 8008e1a:	f7f7 fc75 	bl	8000708 <DAS_Transmit_Clbk_USB>
 8008e1e:	4603      	mov	r3, r0
 8008e20:	75fb      	strb	r3, [r7, #23]
  /* USER CODE END 13 */
  return result;
 8008e22:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008e26:	4618      	mov	r0, r3
 8008e28:	3718      	adds	r7, #24
 8008e2a:	46bd      	mov	sp, r7
 8008e2c:	bd80      	pop	{r7, pc}
	...

08008e30 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008e30:	b480      	push	{r7}
 8008e32:	b083      	sub	sp, #12
 8008e34:	af00      	add	r7, sp, #0
 8008e36:	4603      	mov	r3, r0
 8008e38:	6039      	str	r1, [r7, #0]
 8008e3a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008e3c:	683b      	ldr	r3, [r7, #0]
 8008e3e:	2212      	movs	r2, #18
 8008e40:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8008e42:	4b03      	ldr	r3, [pc, #12]	; (8008e50 <USBD_FS_DeviceDescriptor+0x20>)
}
 8008e44:	4618      	mov	r0, r3
 8008e46:	370c      	adds	r7, #12
 8008e48:	46bd      	mov	sp, r7
 8008e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e4e:	4770      	bx	lr
 8008e50:	2000014c 	.word	0x2000014c

08008e54 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008e54:	b480      	push	{r7}
 8008e56:	b083      	sub	sp, #12
 8008e58:	af00      	add	r7, sp, #0
 8008e5a:	4603      	mov	r3, r0
 8008e5c:	6039      	str	r1, [r7, #0]
 8008e5e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008e60:	683b      	ldr	r3, [r7, #0]
 8008e62:	2204      	movs	r2, #4
 8008e64:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8008e66:	4b03      	ldr	r3, [pc, #12]	; (8008e74 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008e68:	4618      	mov	r0, r3
 8008e6a:	370c      	adds	r7, #12
 8008e6c:	46bd      	mov	sp, r7
 8008e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e72:	4770      	bx	lr
 8008e74:	20000160 	.word	0x20000160

08008e78 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008e78:	b580      	push	{r7, lr}
 8008e7a:	b082      	sub	sp, #8
 8008e7c:	af00      	add	r7, sp, #0
 8008e7e:	4603      	mov	r3, r0
 8008e80:	6039      	str	r1, [r7, #0]
 8008e82:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008e84:	79fb      	ldrb	r3, [r7, #7]
 8008e86:	2b00      	cmp	r3, #0
 8008e88:	d105      	bne.n	8008e96 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008e8a:	683a      	ldr	r2, [r7, #0]
 8008e8c:	4907      	ldr	r1, [pc, #28]	; (8008eac <USBD_FS_ProductStrDescriptor+0x34>)
 8008e8e:	4808      	ldr	r0, [pc, #32]	; (8008eb0 <USBD_FS_ProductStrDescriptor+0x38>)
 8008e90:	f7ff fdef 	bl	8008a72 <USBD_GetString>
 8008e94:	e004      	b.n	8008ea0 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008e96:	683a      	ldr	r2, [r7, #0]
 8008e98:	4904      	ldr	r1, [pc, #16]	; (8008eac <USBD_FS_ProductStrDescriptor+0x34>)
 8008e9a:	4805      	ldr	r0, [pc, #20]	; (8008eb0 <USBD_FS_ProductStrDescriptor+0x38>)
 8008e9c:	f7ff fde9 	bl	8008a72 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008ea0:	4b02      	ldr	r3, [pc, #8]	; (8008eac <USBD_FS_ProductStrDescriptor+0x34>)
}
 8008ea2:	4618      	mov	r0, r3
 8008ea4:	3708      	adds	r7, #8
 8008ea6:	46bd      	mov	sp, r7
 8008ea8:	bd80      	pop	{r7, pc}
 8008eaa:	bf00      	nop
 8008eac:	200033fc 	.word	0x200033fc
 8008eb0:	080096e8 	.word	0x080096e8

08008eb4 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008eb4:	b580      	push	{r7, lr}
 8008eb6:	b082      	sub	sp, #8
 8008eb8:	af00      	add	r7, sp, #0
 8008eba:	4603      	mov	r3, r0
 8008ebc:	6039      	str	r1, [r7, #0]
 8008ebe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008ec0:	683a      	ldr	r2, [r7, #0]
 8008ec2:	4904      	ldr	r1, [pc, #16]	; (8008ed4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8008ec4:	4804      	ldr	r0, [pc, #16]	; (8008ed8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8008ec6:	f7ff fdd4 	bl	8008a72 <USBD_GetString>
  return USBD_StrDesc;
 8008eca:	4b02      	ldr	r3, [pc, #8]	; (8008ed4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8008ecc:	4618      	mov	r0, r3
 8008ece:	3708      	adds	r7, #8
 8008ed0:	46bd      	mov	sp, r7
 8008ed2:	bd80      	pop	{r7, pc}
 8008ed4:	200033fc 	.word	0x200033fc
 8008ed8:	08009700 	.word	0x08009700

08008edc <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008edc:	b580      	push	{r7, lr}
 8008ede:	b082      	sub	sp, #8
 8008ee0:	af00      	add	r7, sp, #0
 8008ee2:	4603      	mov	r3, r0
 8008ee4:	6039      	str	r1, [r7, #0]
 8008ee6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008ee8:	683b      	ldr	r3, [r7, #0]
 8008eea:	221a      	movs	r2, #26
 8008eec:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8008eee:	f000 f843 	bl	8008f78 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8008ef2:	4b02      	ldr	r3, [pc, #8]	; (8008efc <USBD_FS_SerialStrDescriptor+0x20>)
}
 8008ef4:	4618      	mov	r0, r3
 8008ef6:	3708      	adds	r7, #8
 8008ef8:	46bd      	mov	sp, r7
 8008efa:	bd80      	pop	{r7, pc}
 8008efc:	20000164 	.word	0x20000164

08008f00 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008f00:	b580      	push	{r7, lr}
 8008f02:	b082      	sub	sp, #8
 8008f04:	af00      	add	r7, sp, #0
 8008f06:	4603      	mov	r3, r0
 8008f08:	6039      	str	r1, [r7, #0]
 8008f0a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008f0c:	79fb      	ldrb	r3, [r7, #7]
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	d105      	bne.n	8008f1e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008f12:	683a      	ldr	r2, [r7, #0]
 8008f14:	4907      	ldr	r1, [pc, #28]	; (8008f34 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008f16:	4808      	ldr	r0, [pc, #32]	; (8008f38 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008f18:	f7ff fdab 	bl	8008a72 <USBD_GetString>
 8008f1c:	e004      	b.n	8008f28 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008f1e:	683a      	ldr	r2, [r7, #0]
 8008f20:	4904      	ldr	r1, [pc, #16]	; (8008f34 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008f22:	4805      	ldr	r0, [pc, #20]	; (8008f38 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008f24:	f7ff fda5 	bl	8008a72 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008f28:	4b02      	ldr	r3, [pc, #8]	; (8008f34 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8008f2a:	4618      	mov	r0, r3
 8008f2c:	3708      	adds	r7, #8
 8008f2e:	46bd      	mov	sp, r7
 8008f30:	bd80      	pop	{r7, pc}
 8008f32:	bf00      	nop
 8008f34:	200033fc 	.word	0x200033fc
 8008f38:	08009714 	.word	0x08009714

08008f3c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008f3c:	b580      	push	{r7, lr}
 8008f3e:	b082      	sub	sp, #8
 8008f40:	af00      	add	r7, sp, #0
 8008f42:	4603      	mov	r3, r0
 8008f44:	6039      	str	r1, [r7, #0]
 8008f46:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008f48:	79fb      	ldrb	r3, [r7, #7]
 8008f4a:	2b00      	cmp	r3, #0
 8008f4c:	d105      	bne.n	8008f5a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008f4e:	683a      	ldr	r2, [r7, #0]
 8008f50:	4907      	ldr	r1, [pc, #28]	; (8008f70 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008f52:	4808      	ldr	r0, [pc, #32]	; (8008f74 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008f54:	f7ff fd8d 	bl	8008a72 <USBD_GetString>
 8008f58:	e004      	b.n	8008f64 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008f5a:	683a      	ldr	r2, [r7, #0]
 8008f5c:	4904      	ldr	r1, [pc, #16]	; (8008f70 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008f5e:	4805      	ldr	r0, [pc, #20]	; (8008f74 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008f60:	f7ff fd87 	bl	8008a72 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008f64:	4b02      	ldr	r3, [pc, #8]	; (8008f70 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8008f66:	4618      	mov	r0, r3
 8008f68:	3708      	adds	r7, #8
 8008f6a:	46bd      	mov	sp, r7
 8008f6c:	bd80      	pop	{r7, pc}
 8008f6e:	bf00      	nop
 8008f70:	200033fc 	.word	0x200033fc
 8008f74:	08009720 	.word	0x08009720

08008f78 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008f78:	b580      	push	{r7, lr}
 8008f7a:	b084      	sub	sp, #16
 8008f7c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8008f7e:	4b0f      	ldr	r3, [pc, #60]	; (8008fbc <Get_SerialNum+0x44>)
 8008f80:	681b      	ldr	r3, [r3, #0]
 8008f82:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008f84:	4b0e      	ldr	r3, [pc, #56]	; (8008fc0 <Get_SerialNum+0x48>)
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8008f8a:	4b0e      	ldr	r3, [pc, #56]	; (8008fc4 <Get_SerialNum+0x4c>)
 8008f8c:	681b      	ldr	r3, [r3, #0]
 8008f8e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008f90:	68fa      	ldr	r2, [r7, #12]
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	4413      	add	r3, r2
 8008f96:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008f98:	68fb      	ldr	r3, [r7, #12]
 8008f9a:	2b00      	cmp	r3, #0
 8008f9c:	d009      	beq.n	8008fb2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8008f9e:	2208      	movs	r2, #8
 8008fa0:	4909      	ldr	r1, [pc, #36]	; (8008fc8 <Get_SerialNum+0x50>)
 8008fa2:	68f8      	ldr	r0, [r7, #12]
 8008fa4:	f000 f814 	bl	8008fd0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008fa8:	2204      	movs	r2, #4
 8008faa:	4908      	ldr	r1, [pc, #32]	; (8008fcc <Get_SerialNum+0x54>)
 8008fac:	68b8      	ldr	r0, [r7, #8]
 8008fae:	f000 f80f 	bl	8008fd0 <IntToUnicode>
  }
}
 8008fb2:	bf00      	nop
 8008fb4:	3710      	adds	r7, #16
 8008fb6:	46bd      	mov	sp, r7
 8008fb8:	bd80      	pop	{r7, pc}
 8008fba:	bf00      	nop
 8008fbc:	1fff7a10 	.word	0x1fff7a10
 8008fc0:	1fff7a14 	.word	0x1fff7a14
 8008fc4:	1fff7a18 	.word	0x1fff7a18
 8008fc8:	20000166 	.word	0x20000166
 8008fcc:	20000176 	.word	0x20000176

08008fd0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008fd0:	b480      	push	{r7}
 8008fd2:	b087      	sub	sp, #28
 8008fd4:	af00      	add	r7, sp, #0
 8008fd6:	60f8      	str	r0, [r7, #12]
 8008fd8:	60b9      	str	r1, [r7, #8]
 8008fda:	4613      	mov	r3, r2
 8008fdc:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8008fde:	2300      	movs	r3, #0
 8008fe0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8008fe2:	2300      	movs	r3, #0
 8008fe4:	75fb      	strb	r3, [r7, #23]
 8008fe6:	e027      	b.n	8009038 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008fe8:	68fb      	ldr	r3, [r7, #12]
 8008fea:	0f1b      	lsrs	r3, r3, #28
 8008fec:	2b09      	cmp	r3, #9
 8008fee:	d80b      	bhi.n	8009008 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008ff0:	68fb      	ldr	r3, [r7, #12]
 8008ff2:	0f1b      	lsrs	r3, r3, #28
 8008ff4:	b2da      	uxtb	r2, r3
 8008ff6:	7dfb      	ldrb	r3, [r7, #23]
 8008ff8:	005b      	lsls	r3, r3, #1
 8008ffa:	4619      	mov	r1, r3
 8008ffc:	68bb      	ldr	r3, [r7, #8]
 8008ffe:	440b      	add	r3, r1
 8009000:	3230      	adds	r2, #48	; 0x30
 8009002:	b2d2      	uxtb	r2, r2
 8009004:	701a      	strb	r2, [r3, #0]
 8009006:	e00a      	b.n	800901e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009008:	68fb      	ldr	r3, [r7, #12]
 800900a:	0f1b      	lsrs	r3, r3, #28
 800900c:	b2da      	uxtb	r2, r3
 800900e:	7dfb      	ldrb	r3, [r7, #23]
 8009010:	005b      	lsls	r3, r3, #1
 8009012:	4619      	mov	r1, r3
 8009014:	68bb      	ldr	r3, [r7, #8]
 8009016:	440b      	add	r3, r1
 8009018:	3237      	adds	r2, #55	; 0x37
 800901a:	b2d2      	uxtb	r2, r2
 800901c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800901e:	68fb      	ldr	r3, [r7, #12]
 8009020:	011b      	lsls	r3, r3, #4
 8009022:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8009024:	7dfb      	ldrb	r3, [r7, #23]
 8009026:	005b      	lsls	r3, r3, #1
 8009028:	3301      	adds	r3, #1
 800902a:	68ba      	ldr	r2, [r7, #8]
 800902c:	4413      	add	r3, r2
 800902e:	2200      	movs	r2, #0
 8009030:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8009032:	7dfb      	ldrb	r3, [r7, #23]
 8009034:	3301      	adds	r3, #1
 8009036:	75fb      	strb	r3, [r7, #23]
 8009038:	7dfa      	ldrb	r2, [r7, #23]
 800903a:	79fb      	ldrb	r3, [r7, #7]
 800903c:	429a      	cmp	r2, r3
 800903e:	d3d3      	bcc.n	8008fe8 <IntToUnicode+0x18>
  }
}
 8009040:	bf00      	nop
 8009042:	bf00      	nop
 8009044:	371c      	adds	r7, #28
 8009046:	46bd      	mov	sp, r7
 8009048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800904c:	4770      	bx	lr
	...

08009050 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8009050:	b580      	push	{r7, lr}
 8009052:	b08a      	sub	sp, #40	; 0x28
 8009054:	af00      	add	r7, sp, #0
 8009056:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009058:	f107 0314 	add.w	r3, r7, #20
 800905c:	2200      	movs	r2, #0
 800905e:	601a      	str	r2, [r3, #0]
 8009060:	605a      	str	r2, [r3, #4]
 8009062:	609a      	str	r2, [r3, #8]
 8009064:	60da      	str	r2, [r3, #12]
 8009066:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009070:	d13a      	bne.n	80090e8 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009072:	2300      	movs	r3, #0
 8009074:	613b      	str	r3, [r7, #16]
 8009076:	4b1e      	ldr	r3, [pc, #120]	; (80090f0 <HAL_PCD_MspInit+0xa0>)
 8009078:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800907a:	4a1d      	ldr	r2, [pc, #116]	; (80090f0 <HAL_PCD_MspInit+0xa0>)
 800907c:	f043 0301 	orr.w	r3, r3, #1
 8009080:	6313      	str	r3, [r2, #48]	; 0x30
 8009082:	4b1b      	ldr	r3, [pc, #108]	; (80090f0 <HAL_PCD_MspInit+0xa0>)
 8009084:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009086:	f003 0301 	and.w	r3, r3, #1
 800908a:	613b      	str	r3, [r7, #16]
 800908c:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800908e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8009092:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009094:	2302      	movs	r3, #2
 8009096:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009098:	2300      	movs	r3, #0
 800909a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800909c:	2303      	movs	r3, #3
 800909e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80090a0:	230a      	movs	r3, #10
 80090a2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80090a4:	f107 0314 	add.w	r3, r7, #20
 80090a8:	4619      	mov	r1, r3
 80090aa:	4812      	ldr	r0, [pc, #72]	; (80090f4 <HAL_PCD_MspInit+0xa4>)
 80090ac:	f7f9 fada 	bl	8002664 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80090b0:	4b0f      	ldr	r3, [pc, #60]	; (80090f0 <HAL_PCD_MspInit+0xa0>)
 80090b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80090b4:	4a0e      	ldr	r2, [pc, #56]	; (80090f0 <HAL_PCD_MspInit+0xa0>)
 80090b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80090ba:	6353      	str	r3, [r2, #52]	; 0x34
 80090bc:	2300      	movs	r3, #0
 80090be:	60fb      	str	r3, [r7, #12]
 80090c0:	4b0b      	ldr	r3, [pc, #44]	; (80090f0 <HAL_PCD_MspInit+0xa0>)
 80090c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80090c4:	4a0a      	ldr	r2, [pc, #40]	; (80090f0 <HAL_PCD_MspInit+0xa0>)
 80090c6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80090ca:	6453      	str	r3, [r2, #68]	; 0x44
 80090cc:	4b08      	ldr	r3, [pc, #32]	; (80090f0 <HAL_PCD_MspInit+0xa0>)
 80090ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80090d0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80090d4:	60fb      	str	r3, [r7, #12]
 80090d6:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80090d8:	2200      	movs	r2, #0
 80090da:	2100      	movs	r1, #0
 80090dc:	2043      	movs	r0, #67	; 0x43
 80090de:	f7f9 fa8a 	bl	80025f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80090e2:	2043      	movs	r0, #67	; 0x43
 80090e4:	f7f9 faa3 	bl	800262e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80090e8:	bf00      	nop
 80090ea:	3728      	adds	r7, #40	; 0x28
 80090ec:	46bd      	mov	sp, r7
 80090ee:	bd80      	pop	{r7, pc}
 80090f0:	40023800 	.word	0x40023800
 80090f4:	40020000 	.word	0x40020000

080090f8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80090f8:	b580      	push	{r7, lr}
 80090fa:	b082      	sub	sp, #8
 80090fc:	af00      	add	r7, sp, #0
 80090fe:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800910c:	4619      	mov	r1, r3
 800910e:	4610      	mov	r0, r2
 8009110:	f7fe fcc8 	bl	8007aa4 <USBD_LL_SetupStage>
}
 8009114:	bf00      	nop
 8009116:	3708      	adds	r7, #8
 8009118:	46bd      	mov	sp, r7
 800911a:	bd80      	pop	{r7, pc}

0800911c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800911c:	b580      	push	{r7, lr}
 800911e:	b082      	sub	sp, #8
 8009120:	af00      	add	r7, sp, #0
 8009122:	6078      	str	r0, [r7, #4]
 8009124:	460b      	mov	r3, r1
 8009126:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800912e:	78fa      	ldrb	r2, [r7, #3]
 8009130:	6879      	ldr	r1, [r7, #4]
 8009132:	4613      	mov	r3, r2
 8009134:	00db      	lsls	r3, r3, #3
 8009136:	1a9b      	subs	r3, r3, r2
 8009138:	009b      	lsls	r3, r3, #2
 800913a:	440b      	add	r3, r1
 800913c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8009140:	681a      	ldr	r2, [r3, #0]
 8009142:	78fb      	ldrb	r3, [r7, #3]
 8009144:	4619      	mov	r1, r3
 8009146:	f7fe fd02 	bl	8007b4e <USBD_LL_DataOutStage>
}
 800914a:	bf00      	nop
 800914c:	3708      	adds	r7, #8
 800914e:	46bd      	mov	sp, r7
 8009150:	bd80      	pop	{r7, pc}

08009152 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009152:	b580      	push	{r7, lr}
 8009154:	b082      	sub	sp, #8
 8009156:	af00      	add	r7, sp, #0
 8009158:	6078      	str	r0, [r7, #4]
 800915a:	460b      	mov	r3, r1
 800915c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8009164:	78fa      	ldrb	r2, [r7, #3]
 8009166:	6879      	ldr	r1, [r7, #4]
 8009168:	4613      	mov	r3, r2
 800916a:	00db      	lsls	r3, r3, #3
 800916c:	1a9b      	subs	r3, r3, r2
 800916e:	009b      	lsls	r3, r3, #2
 8009170:	440b      	add	r3, r1
 8009172:	3348      	adds	r3, #72	; 0x48
 8009174:	681a      	ldr	r2, [r3, #0]
 8009176:	78fb      	ldrb	r3, [r7, #3]
 8009178:	4619      	mov	r1, r3
 800917a:	f7fe fd4b 	bl	8007c14 <USBD_LL_DataInStage>
}
 800917e:	bf00      	nop
 8009180:	3708      	adds	r7, #8
 8009182:	46bd      	mov	sp, r7
 8009184:	bd80      	pop	{r7, pc}

08009186 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009186:	b580      	push	{r7, lr}
 8009188:	b082      	sub	sp, #8
 800918a:	af00      	add	r7, sp, #0
 800918c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009194:	4618      	mov	r0, r3
 8009196:	f7fe fe5f 	bl	8007e58 <USBD_LL_SOF>
}
 800919a:	bf00      	nop
 800919c:	3708      	adds	r7, #8
 800919e:	46bd      	mov	sp, r7
 80091a0:	bd80      	pop	{r7, pc}

080091a2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80091a2:	b580      	push	{r7, lr}
 80091a4:	b084      	sub	sp, #16
 80091a6:	af00      	add	r7, sp, #0
 80091a8:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80091aa:	2301      	movs	r3, #1
 80091ac:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	68db      	ldr	r3, [r3, #12]
 80091b2:	2b00      	cmp	r3, #0
 80091b4:	d102      	bne.n	80091bc <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 80091b6:	2300      	movs	r3, #0
 80091b8:	73fb      	strb	r3, [r7, #15]
 80091ba:	e008      	b.n	80091ce <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	68db      	ldr	r3, [r3, #12]
 80091c0:	2b02      	cmp	r3, #2
 80091c2:	d102      	bne.n	80091ca <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 80091c4:	2301      	movs	r3, #1
 80091c6:	73fb      	strb	r3, [r7, #15]
 80091c8:	e001      	b.n	80091ce <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 80091ca:	f7f8 f8c9 	bl	8001360 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80091d4:	7bfa      	ldrb	r2, [r7, #15]
 80091d6:	4611      	mov	r1, r2
 80091d8:	4618      	mov	r0, r3
 80091da:	f7fe fdff 	bl	8007ddc <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80091e4:	4618      	mov	r0, r3
 80091e6:	f7fe fdab 	bl	8007d40 <USBD_LL_Reset>
}
 80091ea:	bf00      	nop
 80091ec:	3710      	adds	r7, #16
 80091ee:	46bd      	mov	sp, r7
 80091f0:	bd80      	pop	{r7, pc}
	...

080091f4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80091f4:	b580      	push	{r7, lr}
 80091f6:	b082      	sub	sp, #8
 80091f8:	af00      	add	r7, sp, #0
 80091fa:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009202:	4618      	mov	r0, r3
 8009204:	f7fe fdfa 	bl	8007dfc <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009210:	681b      	ldr	r3, [r3, #0]
 8009212:	687a      	ldr	r2, [r7, #4]
 8009214:	6812      	ldr	r2, [r2, #0]
 8009216:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800921a:	f043 0301 	orr.w	r3, r3, #1
 800921e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	6a1b      	ldr	r3, [r3, #32]
 8009224:	2b00      	cmp	r3, #0
 8009226:	d005      	beq.n	8009234 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009228:	4b04      	ldr	r3, [pc, #16]	; (800923c <HAL_PCD_SuspendCallback+0x48>)
 800922a:	691b      	ldr	r3, [r3, #16]
 800922c:	4a03      	ldr	r2, [pc, #12]	; (800923c <HAL_PCD_SuspendCallback+0x48>)
 800922e:	f043 0306 	orr.w	r3, r3, #6
 8009232:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8009234:	bf00      	nop
 8009236:	3708      	adds	r7, #8
 8009238:	46bd      	mov	sp, r7
 800923a:	bd80      	pop	{r7, pc}
 800923c:	e000ed00 	.word	0xe000ed00

08009240 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009240:	b580      	push	{r7, lr}
 8009242:	b082      	sub	sp, #8
 8009244:	af00      	add	r7, sp, #0
 8009246:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800924e:	4618      	mov	r0, r3
 8009250:	f7fe fdea 	bl	8007e28 <USBD_LL_Resume>
}
 8009254:	bf00      	nop
 8009256:	3708      	adds	r7, #8
 8009258:	46bd      	mov	sp, r7
 800925a:	bd80      	pop	{r7, pc}

0800925c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800925c:	b580      	push	{r7, lr}
 800925e:	b082      	sub	sp, #8
 8009260:	af00      	add	r7, sp, #0
 8009262:	6078      	str	r0, [r7, #4]
 8009264:	460b      	mov	r3, r1
 8009266:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800926e:	78fa      	ldrb	r2, [r7, #3]
 8009270:	4611      	mov	r1, r2
 8009272:	4618      	mov	r0, r3
 8009274:	f7fe fe38 	bl	8007ee8 <USBD_LL_IsoOUTIncomplete>
}
 8009278:	bf00      	nop
 800927a:	3708      	adds	r7, #8
 800927c:	46bd      	mov	sp, r7
 800927e:	bd80      	pop	{r7, pc}

08009280 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009280:	b580      	push	{r7, lr}
 8009282:	b082      	sub	sp, #8
 8009284:	af00      	add	r7, sp, #0
 8009286:	6078      	str	r0, [r7, #4]
 8009288:	460b      	mov	r3, r1
 800928a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009292:	78fa      	ldrb	r2, [r7, #3]
 8009294:	4611      	mov	r1, r2
 8009296:	4618      	mov	r0, r3
 8009298:	f7fe fe00 	bl	8007e9c <USBD_LL_IsoINIncomplete>
}
 800929c:	bf00      	nop
 800929e:	3708      	adds	r7, #8
 80092a0:	46bd      	mov	sp, r7
 80092a2:	bd80      	pop	{r7, pc}

080092a4 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80092a4:	b580      	push	{r7, lr}
 80092a6:	b082      	sub	sp, #8
 80092a8:	af00      	add	r7, sp, #0
 80092aa:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80092b2:	4618      	mov	r0, r3
 80092b4:	f7fe fe3e 	bl	8007f34 <USBD_LL_DevConnected>
}
 80092b8:	bf00      	nop
 80092ba:	3708      	adds	r7, #8
 80092bc:	46bd      	mov	sp, r7
 80092be:	bd80      	pop	{r7, pc}

080092c0 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80092c0:	b580      	push	{r7, lr}
 80092c2:	b082      	sub	sp, #8
 80092c4:	af00      	add	r7, sp, #0
 80092c6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80092ce:	4618      	mov	r0, r3
 80092d0:	f7fe fe3b 	bl	8007f4a <USBD_LL_DevDisconnected>
}
 80092d4:	bf00      	nop
 80092d6:	3708      	adds	r7, #8
 80092d8:	46bd      	mov	sp, r7
 80092da:	bd80      	pop	{r7, pc}

080092dc <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80092dc:	b580      	push	{r7, lr}
 80092de:	b082      	sub	sp, #8
 80092e0:	af00      	add	r7, sp, #0
 80092e2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	781b      	ldrb	r3, [r3, #0]
 80092e8:	2b00      	cmp	r3, #0
 80092ea:	d13c      	bne.n	8009366 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80092ec:	4a20      	ldr	r2, [pc, #128]	; (8009370 <USBD_LL_Init+0x94>)
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	4a1e      	ldr	r2, [pc, #120]	; (8009370 <USBD_LL_Init+0x94>)
 80092f8:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80092fc:	4b1c      	ldr	r3, [pc, #112]	; (8009370 <USBD_LL_Init+0x94>)
 80092fe:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8009302:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8009304:	4b1a      	ldr	r3, [pc, #104]	; (8009370 <USBD_LL_Init+0x94>)
 8009306:	2204      	movs	r2, #4
 8009308:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800930a:	4b19      	ldr	r3, [pc, #100]	; (8009370 <USBD_LL_Init+0x94>)
 800930c:	2202      	movs	r2, #2
 800930e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8009310:	4b17      	ldr	r3, [pc, #92]	; (8009370 <USBD_LL_Init+0x94>)
 8009312:	2200      	movs	r2, #0
 8009314:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8009316:	4b16      	ldr	r3, [pc, #88]	; (8009370 <USBD_LL_Init+0x94>)
 8009318:	2202      	movs	r2, #2
 800931a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800931c:	4b14      	ldr	r3, [pc, #80]	; (8009370 <USBD_LL_Init+0x94>)
 800931e:	2200      	movs	r2, #0
 8009320:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8009322:	4b13      	ldr	r3, [pc, #76]	; (8009370 <USBD_LL_Init+0x94>)
 8009324:	2200      	movs	r2, #0
 8009326:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8009328:	4b11      	ldr	r3, [pc, #68]	; (8009370 <USBD_LL_Init+0x94>)
 800932a:	2200      	movs	r2, #0
 800932c:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800932e:	4b10      	ldr	r3, [pc, #64]	; (8009370 <USBD_LL_Init+0x94>)
 8009330:	2200      	movs	r2, #0
 8009332:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8009334:	4b0e      	ldr	r3, [pc, #56]	; (8009370 <USBD_LL_Init+0x94>)
 8009336:	2200      	movs	r2, #0
 8009338:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800933a:	480d      	ldr	r0, [pc, #52]	; (8009370 <USBD_LL_Init+0x94>)
 800933c:	f7f9 fb2f 	bl	800299e <HAL_PCD_Init>
 8009340:	4603      	mov	r3, r0
 8009342:	2b00      	cmp	r3, #0
 8009344:	d001      	beq.n	800934a <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8009346:	f7f8 f80b 	bl	8001360 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800934a:	2180      	movs	r1, #128	; 0x80
 800934c:	4808      	ldr	r0, [pc, #32]	; (8009370 <USBD_LL_Init+0x94>)
 800934e:	f7fa fc8c 	bl	8003c6a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8009352:	2240      	movs	r2, #64	; 0x40
 8009354:	2100      	movs	r1, #0
 8009356:	4806      	ldr	r0, [pc, #24]	; (8009370 <USBD_LL_Init+0x94>)
 8009358:	f7fa fc40 	bl	8003bdc <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800935c:	2280      	movs	r2, #128	; 0x80
 800935e:	2101      	movs	r1, #1
 8009360:	4803      	ldr	r0, [pc, #12]	; (8009370 <USBD_LL_Init+0x94>)
 8009362:	f7fa fc3b 	bl	8003bdc <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8009366:	2300      	movs	r3, #0
}
 8009368:	4618      	mov	r0, r3
 800936a:	3708      	adds	r7, #8
 800936c:	46bd      	mov	sp, r7
 800936e:	bd80      	pop	{r7, pc}
 8009370:	200035fc 	.word	0x200035fc

08009374 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009374:	b580      	push	{r7, lr}
 8009376:	b084      	sub	sp, #16
 8009378:	af00      	add	r7, sp, #0
 800937a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800937c:	2300      	movs	r3, #0
 800937e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009380:	2300      	movs	r3, #0
 8009382:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800938a:	4618      	mov	r0, r3
 800938c:	f7f9 fc24 	bl	8002bd8 <HAL_PCD_Start>
 8009390:	4603      	mov	r3, r0
 8009392:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009394:	7bfb      	ldrb	r3, [r7, #15]
 8009396:	4618      	mov	r0, r3
 8009398:	f000 f942 	bl	8009620 <USBD_Get_USB_Status>
 800939c:	4603      	mov	r3, r0
 800939e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80093a0:	7bbb      	ldrb	r3, [r7, #14]
}
 80093a2:	4618      	mov	r0, r3
 80093a4:	3710      	adds	r7, #16
 80093a6:	46bd      	mov	sp, r7
 80093a8:	bd80      	pop	{r7, pc}

080093aa <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80093aa:	b580      	push	{r7, lr}
 80093ac:	b084      	sub	sp, #16
 80093ae:	af00      	add	r7, sp, #0
 80093b0:	6078      	str	r0, [r7, #4]
 80093b2:	4608      	mov	r0, r1
 80093b4:	4611      	mov	r1, r2
 80093b6:	461a      	mov	r2, r3
 80093b8:	4603      	mov	r3, r0
 80093ba:	70fb      	strb	r3, [r7, #3]
 80093bc:	460b      	mov	r3, r1
 80093be:	70bb      	strb	r3, [r7, #2]
 80093c0:	4613      	mov	r3, r2
 80093c2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80093c4:	2300      	movs	r3, #0
 80093c6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80093c8:	2300      	movs	r3, #0
 80093ca:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80093d2:	78bb      	ldrb	r3, [r7, #2]
 80093d4:	883a      	ldrh	r2, [r7, #0]
 80093d6:	78f9      	ldrb	r1, [r7, #3]
 80093d8:	f7fa f808 	bl	80033ec <HAL_PCD_EP_Open>
 80093dc:	4603      	mov	r3, r0
 80093de:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80093e0:	7bfb      	ldrb	r3, [r7, #15]
 80093e2:	4618      	mov	r0, r3
 80093e4:	f000 f91c 	bl	8009620 <USBD_Get_USB_Status>
 80093e8:	4603      	mov	r3, r0
 80093ea:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80093ec:	7bbb      	ldrb	r3, [r7, #14]
}
 80093ee:	4618      	mov	r0, r3
 80093f0:	3710      	adds	r7, #16
 80093f2:	46bd      	mov	sp, r7
 80093f4:	bd80      	pop	{r7, pc}

080093f6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80093f6:	b580      	push	{r7, lr}
 80093f8:	b084      	sub	sp, #16
 80093fa:	af00      	add	r7, sp, #0
 80093fc:	6078      	str	r0, [r7, #4]
 80093fe:	460b      	mov	r3, r1
 8009400:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009402:	2300      	movs	r3, #0
 8009404:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009406:	2300      	movs	r3, #0
 8009408:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009410:	78fa      	ldrb	r2, [r7, #3]
 8009412:	4611      	mov	r1, r2
 8009414:	4618      	mov	r0, r3
 8009416:	f7fa f851 	bl	80034bc <HAL_PCD_EP_Close>
 800941a:	4603      	mov	r3, r0
 800941c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800941e:	7bfb      	ldrb	r3, [r7, #15]
 8009420:	4618      	mov	r0, r3
 8009422:	f000 f8fd 	bl	8009620 <USBD_Get_USB_Status>
 8009426:	4603      	mov	r3, r0
 8009428:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800942a:	7bbb      	ldrb	r3, [r7, #14]
}
 800942c:	4618      	mov	r0, r3
 800942e:	3710      	adds	r7, #16
 8009430:	46bd      	mov	sp, r7
 8009432:	bd80      	pop	{r7, pc}

08009434 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009434:	b580      	push	{r7, lr}
 8009436:	b084      	sub	sp, #16
 8009438:	af00      	add	r7, sp, #0
 800943a:	6078      	str	r0, [r7, #4]
 800943c:	460b      	mov	r3, r1
 800943e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009440:	2300      	movs	r3, #0
 8009442:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009444:	2300      	movs	r3, #0
 8009446:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800944e:	78fa      	ldrb	r2, [r7, #3]
 8009450:	4611      	mov	r1, r2
 8009452:	4618      	mov	r0, r3
 8009454:	f7fa f929 	bl	80036aa <HAL_PCD_EP_SetStall>
 8009458:	4603      	mov	r3, r0
 800945a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800945c:	7bfb      	ldrb	r3, [r7, #15]
 800945e:	4618      	mov	r0, r3
 8009460:	f000 f8de 	bl	8009620 <USBD_Get_USB_Status>
 8009464:	4603      	mov	r3, r0
 8009466:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009468:	7bbb      	ldrb	r3, [r7, #14]
}
 800946a:	4618      	mov	r0, r3
 800946c:	3710      	adds	r7, #16
 800946e:	46bd      	mov	sp, r7
 8009470:	bd80      	pop	{r7, pc}

08009472 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009472:	b580      	push	{r7, lr}
 8009474:	b084      	sub	sp, #16
 8009476:	af00      	add	r7, sp, #0
 8009478:	6078      	str	r0, [r7, #4]
 800947a:	460b      	mov	r3, r1
 800947c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800947e:	2300      	movs	r3, #0
 8009480:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009482:	2300      	movs	r3, #0
 8009484:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800948c:	78fa      	ldrb	r2, [r7, #3]
 800948e:	4611      	mov	r1, r2
 8009490:	4618      	mov	r0, r3
 8009492:	f7fa f96e 	bl	8003772 <HAL_PCD_EP_ClrStall>
 8009496:	4603      	mov	r3, r0
 8009498:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800949a:	7bfb      	ldrb	r3, [r7, #15]
 800949c:	4618      	mov	r0, r3
 800949e:	f000 f8bf 	bl	8009620 <USBD_Get_USB_Status>
 80094a2:	4603      	mov	r3, r0
 80094a4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80094a6:	7bbb      	ldrb	r3, [r7, #14]
}
 80094a8:	4618      	mov	r0, r3
 80094aa:	3710      	adds	r7, #16
 80094ac:	46bd      	mov	sp, r7
 80094ae:	bd80      	pop	{r7, pc}

080094b0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80094b0:	b480      	push	{r7}
 80094b2:	b085      	sub	sp, #20
 80094b4:	af00      	add	r7, sp, #0
 80094b6:	6078      	str	r0, [r7, #4]
 80094b8:	460b      	mov	r3, r1
 80094ba:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80094c2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80094c4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80094c8:	2b00      	cmp	r3, #0
 80094ca:	da0b      	bge.n	80094e4 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80094cc:	78fb      	ldrb	r3, [r7, #3]
 80094ce:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80094d2:	68f9      	ldr	r1, [r7, #12]
 80094d4:	4613      	mov	r3, r2
 80094d6:	00db      	lsls	r3, r3, #3
 80094d8:	1a9b      	subs	r3, r3, r2
 80094da:	009b      	lsls	r3, r3, #2
 80094dc:	440b      	add	r3, r1
 80094de:	333e      	adds	r3, #62	; 0x3e
 80094e0:	781b      	ldrb	r3, [r3, #0]
 80094e2:	e00b      	b.n	80094fc <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80094e4:	78fb      	ldrb	r3, [r7, #3]
 80094e6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80094ea:	68f9      	ldr	r1, [r7, #12]
 80094ec:	4613      	mov	r3, r2
 80094ee:	00db      	lsls	r3, r3, #3
 80094f0:	1a9b      	subs	r3, r3, r2
 80094f2:	009b      	lsls	r3, r3, #2
 80094f4:	440b      	add	r3, r1
 80094f6:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80094fa:	781b      	ldrb	r3, [r3, #0]
  }
}
 80094fc:	4618      	mov	r0, r3
 80094fe:	3714      	adds	r7, #20
 8009500:	46bd      	mov	sp, r7
 8009502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009506:	4770      	bx	lr

08009508 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8009508:	b580      	push	{r7, lr}
 800950a:	b084      	sub	sp, #16
 800950c:	af00      	add	r7, sp, #0
 800950e:	6078      	str	r0, [r7, #4]
 8009510:	460b      	mov	r3, r1
 8009512:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009514:	2300      	movs	r3, #0
 8009516:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009518:	2300      	movs	r3, #0
 800951a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009522:	78fa      	ldrb	r2, [r7, #3]
 8009524:	4611      	mov	r1, r2
 8009526:	4618      	mov	r0, r3
 8009528:	f7f9 ff3b 	bl	80033a2 <HAL_PCD_SetAddress>
 800952c:	4603      	mov	r3, r0
 800952e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009530:	7bfb      	ldrb	r3, [r7, #15]
 8009532:	4618      	mov	r0, r3
 8009534:	f000 f874 	bl	8009620 <USBD_Get_USB_Status>
 8009538:	4603      	mov	r3, r0
 800953a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800953c:	7bbb      	ldrb	r3, [r7, #14]
}
 800953e:	4618      	mov	r0, r3
 8009540:	3710      	adds	r7, #16
 8009542:	46bd      	mov	sp, r7
 8009544:	bd80      	pop	{r7, pc}

08009546 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009546:	b580      	push	{r7, lr}
 8009548:	b086      	sub	sp, #24
 800954a:	af00      	add	r7, sp, #0
 800954c:	60f8      	str	r0, [r7, #12]
 800954e:	607a      	str	r2, [r7, #4]
 8009550:	603b      	str	r3, [r7, #0]
 8009552:	460b      	mov	r3, r1
 8009554:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009556:	2300      	movs	r3, #0
 8009558:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800955a:	2300      	movs	r3, #0
 800955c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800955e:	68fb      	ldr	r3, [r7, #12]
 8009560:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009564:	7af9      	ldrb	r1, [r7, #11]
 8009566:	683b      	ldr	r3, [r7, #0]
 8009568:	687a      	ldr	r2, [r7, #4]
 800956a:	f7fa f854 	bl	8003616 <HAL_PCD_EP_Transmit>
 800956e:	4603      	mov	r3, r0
 8009570:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009572:	7dfb      	ldrb	r3, [r7, #23]
 8009574:	4618      	mov	r0, r3
 8009576:	f000 f853 	bl	8009620 <USBD_Get_USB_Status>
 800957a:	4603      	mov	r3, r0
 800957c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800957e:	7dbb      	ldrb	r3, [r7, #22]
}
 8009580:	4618      	mov	r0, r3
 8009582:	3718      	adds	r7, #24
 8009584:	46bd      	mov	sp, r7
 8009586:	bd80      	pop	{r7, pc}

08009588 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009588:	b580      	push	{r7, lr}
 800958a:	b086      	sub	sp, #24
 800958c:	af00      	add	r7, sp, #0
 800958e:	60f8      	str	r0, [r7, #12]
 8009590:	607a      	str	r2, [r7, #4]
 8009592:	603b      	str	r3, [r7, #0]
 8009594:	460b      	mov	r3, r1
 8009596:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009598:	2300      	movs	r3, #0
 800959a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800959c:	2300      	movs	r3, #0
 800959e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80095a0:	68fb      	ldr	r3, [r7, #12]
 80095a2:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80095a6:	7af9      	ldrb	r1, [r7, #11]
 80095a8:	683b      	ldr	r3, [r7, #0]
 80095aa:	687a      	ldr	r2, [r7, #4]
 80095ac:	f7f9 ffd0 	bl	8003550 <HAL_PCD_EP_Receive>
 80095b0:	4603      	mov	r3, r0
 80095b2:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80095b4:	7dfb      	ldrb	r3, [r7, #23]
 80095b6:	4618      	mov	r0, r3
 80095b8:	f000 f832 	bl	8009620 <USBD_Get_USB_Status>
 80095bc:	4603      	mov	r3, r0
 80095be:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80095c0:	7dbb      	ldrb	r3, [r7, #22]
}
 80095c2:	4618      	mov	r0, r3
 80095c4:	3718      	adds	r7, #24
 80095c6:	46bd      	mov	sp, r7
 80095c8:	bd80      	pop	{r7, pc}

080095ca <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80095ca:	b580      	push	{r7, lr}
 80095cc:	b082      	sub	sp, #8
 80095ce:	af00      	add	r7, sp, #0
 80095d0:	6078      	str	r0, [r7, #4]
 80095d2:	460b      	mov	r3, r1
 80095d4:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80095dc:	78fa      	ldrb	r2, [r7, #3]
 80095de:	4611      	mov	r1, r2
 80095e0:	4618      	mov	r0, r3
 80095e2:	f7fa f800 	bl	80035e6 <HAL_PCD_EP_GetRxCount>
 80095e6:	4603      	mov	r3, r0
}
 80095e8:	4618      	mov	r0, r3
 80095ea:	3708      	adds	r7, #8
 80095ec:	46bd      	mov	sp, r7
 80095ee:	bd80      	pop	{r7, pc}

080095f0 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80095f0:	b480      	push	{r7}
 80095f2:	b083      	sub	sp, #12
 80095f4:	af00      	add	r7, sp, #0
 80095f6:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80095f8:	4b03      	ldr	r3, [pc, #12]	; (8009608 <USBD_static_malloc+0x18>)
}
 80095fa:	4618      	mov	r0, r3
 80095fc:	370c      	adds	r7, #12
 80095fe:	46bd      	mov	sp, r7
 8009600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009604:	4770      	bx	lr
 8009606:	bf00      	nop
 8009608:	200001a0 	.word	0x200001a0

0800960c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800960c:	b480      	push	{r7}
 800960e:	b083      	sub	sp, #12
 8009610:	af00      	add	r7, sp, #0
 8009612:	6078      	str	r0, [r7, #4]

}
 8009614:	bf00      	nop
 8009616:	370c      	adds	r7, #12
 8009618:	46bd      	mov	sp, r7
 800961a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800961e:	4770      	bx	lr

08009620 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009620:	b480      	push	{r7}
 8009622:	b085      	sub	sp, #20
 8009624:	af00      	add	r7, sp, #0
 8009626:	4603      	mov	r3, r0
 8009628:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800962a:	2300      	movs	r3, #0
 800962c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800962e:	79fb      	ldrb	r3, [r7, #7]
 8009630:	2b03      	cmp	r3, #3
 8009632:	d817      	bhi.n	8009664 <USBD_Get_USB_Status+0x44>
 8009634:	a201      	add	r2, pc, #4	; (adr r2, 800963c <USBD_Get_USB_Status+0x1c>)
 8009636:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800963a:	bf00      	nop
 800963c:	0800964d 	.word	0x0800964d
 8009640:	08009653 	.word	0x08009653
 8009644:	08009659 	.word	0x08009659
 8009648:	0800965f 	.word	0x0800965f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800964c:	2300      	movs	r3, #0
 800964e:	73fb      	strb	r3, [r7, #15]
    break;
 8009650:	e00b      	b.n	800966a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009652:	2303      	movs	r3, #3
 8009654:	73fb      	strb	r3, [r7, #15]
    break;
 8009656:	e008      	b.n	800966a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009658:	2301      	movs	r3, #1
 800965a:	73fb      	strb	r3, [r7, #15]
    break;
 800965c:	e005      	b.n	800966a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800965e:	2303      	movs	r3, #3
 8009660:	73fb      	strb	r3, [r7, #15]
    break;
 8009662:	e002      	b.n	800966a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8009664:	2303      	movs	r3, #3
 8009666:	73fb      	strb	r3, [r7, #15]
    break;
 8009668:	bf00      	nop
  }
  return usb_status;
 800966a:	7bfb      	ldrb	r3, [r7, #15]
}
 800966c:	4618      	mov	r0, r3
 800966e:	3714      	adds	r7, #20
 8009670:	46bd      	mov	sp, r7
 8009672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009676:	4770      	bx	lr

08009678 <__libc_init_array>:
 8009678:	b570      	push	{r4, r5, r6, lr}
 800967a:	4d0d      	ldr	r5, [pc, #52]	; (80096b0 <__libc_init_array+0x38>)
 800967c:	4c0d      	ldr	r4, [pc, #52]	; (80096b4 <__libc_init_array+0x3c>)
 800967e:	1b64      	subs	r4, r4, r5
 8009680:	10a4      	asrs	r4, r4, #2
 8009682:	2600      	movs	r6, #0
 8009684:	42a6      	cmp	r6, r4
 8009686:	d109      	bne.n	800969c <__libc_init_array+0x24>
 8009688:	4d0b      	ldr	r5, [pc, #44]	; (80096b8 <__libc_init_array+0x40>)
 800968a:	4c0c      	ldr	r4, [pc, #48]	; (80096bc <__libc_init_array+0x44>)
 800968c:	f000 f820 	bl	80096d0 <_init>
 8009690:	1b64      	subs	r4, r4, r5
 8009692:	10a4      	asrs	r4, r4, #2
 8009694:	2600      	movs	r6, #0
 8009696:	42a6      	cmp	r6, r4
 8009698:	d105      	bne.n	80096a6 <__libc_init_array+0x2e>
 800969a:	bd70      	pop	{r4, r5, r6, pc}
 800969c:	f855 3b04 	ldr.w	r3, [r5], #4
 80096a0:	4798      	blx	r3
 80096a2:	3601      	adds	r6, #1
 80096a4:	e7ee      	b.n	8009684 <__libc_init_array+0xc>
 80096a6:	f855 3b04 	ldr.w	r3, [r5], #4
 80096aa:	4798      	blx	r3
 80096ac:	3601      	adds	r6, #1
 80096ae:	e7f2      	b.n	8009696 <__libc_init_array+0x1e>
 80096b0:	08009748 	.word	0x08009748
 80096b4:	08009748 	.word	0x08009748
 80096b8:	08009748 	.word	0x08009748
 80096bc:	0800974c 	.word	0x0800974c

080096c0 <memset>:
 80096c0:	4402      	add	r2, r0
 80096c2:	4603      	mov	r3, r0
 80096c4:	4293      	cmp	r3, r2
 80096c6:	d100      	bne.n	80096ca <memset+0xa>
 80096c8:	4770      	bx	lr
 80096ca:	f803 1b01 	strb.w	r1, [r3], #1
 80096ce:	e7f9      	b.n	80096c4 <memset+0x4>

080096d0 <_init>:
 80096d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80096d2:	bf00      	nop
 80096d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80096d6:	bc08      	pop	{r3}
 80096d8:	469e      	mov	lr, r3
 80096da:	4770      	bx	lr

080096dc <_fini>:
 80096dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80096de:	bf00      	nop
 80096e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80096e2:	bc08      	pop	{r3}
 80096e4:	469e      	mov	lr, r3
 80096e6:	4770      	bx	lr
